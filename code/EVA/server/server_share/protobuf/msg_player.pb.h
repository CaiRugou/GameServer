// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_player.proto

#ifndef PROTOBUF_msg_5fplayer_2eproto__INCLUDED
#define PROTOBUF_msg_5fplayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PROTOBUF {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5fplayer_2eproto();
void protobuf_AssignDesc_msg_5fplayer_2eproto();
void protobuf_ShutdownFile_msg_5fplayer_2eproto();

class PB_Player;

enum PB_TRoleState {
  ROLE_STATE_NULL = 0
};
bool PB_TRoleState_IsValid(int value);
const PB_TRoleState PB_TRoleState_MIN = ROLE_STATE_NULL;
const PB_TRoleState PB_TRoleState_MAX = ROLE_STATE_NULL;
const int PB_TRoleState_ARRAYSIZE = PB_TRoleState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_TRoleState_descriptor();
inline const ::std::string& PB_TRoleState_Name(PB_TRoleState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_TRoleState_descriptor(), value);
}
inline bool PB_TRoleState_Parse(
    const ::std::string& name, PB_TRoleState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_TRoleState>(
    PB_TRoleState_descriptor(), name, value);
}
// ===================================================================

class PB_Player : public ::google::protobuf::Message {
 public:
  PB_Player();
  virtual ~PB_Player();

  PB_Player(const PB_Player& from);

  inline PB_Player& operator=(const PB_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_Player& default_instance();

  void Swap(PB_Player* other);

  // implements Message ----------------------------------------------

  PB_Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_Player& from);
  void MergeFrom(const PB_Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 head_id = 2;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 2;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // optional string nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional string last_host = 4;
  inline bool has_last_host() const;
  inline void clear_last_host();
  static const int kLastHostFieldNumber = 4;
  inline const ::std::string& last_host() const;
  inline void set_last_host(const ::std::string& value);
  inline void set_last_host(const char* value);
  inline void set_last_host(const char* value, size_t size);
  inline ::std::string* mutable_last_host();
  inline ::std::string* release_last_host();
  inline void set_allocated_last_host(::std::string* last_host);

  // @@protoc_insertion_point(class_scope:PROTOBUF.PB_Player)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_last_host();
  inline void clear_has_last_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 head_id_;
  ::std::string* nick_name_;
  ::std::string* last_host_;
  friend void  protobuf_AddDesc_msg_5fplayer_2eproto();
  friend void protobuf_AssignDesc_msg_5fplayer_2eproto();
  friend void protobuf_ShutdownFile_msg_5fplayer_2eproto();

  void InitAsDefaultInstance();
  static PB_Player* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_Player

// optional uint32 role_id = 1;
inline bool PB_Player::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_Player::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_Player::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_Player::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 PB_Player::role_id() const {
  // @@protoc_insertion_point(field_get:PROTOBUF.PB_Player.role_id)
  return role_id_;
}
inline void PB_Player::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
  // @@protoc_insertion_point(field_set:PROTOBUF.PB_Player.role_id)
}

// optional uint32 head_id = 2;
inline bool PB_Player::has_head_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_Player::set_has_head_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_Player::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_Player::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 PB_Player::head_id() const {
  // @@protoc_insertion_point(field_get:PROTOBUF.PB_Player.head_id)
  return head_id_;
}
inline void PB_Player::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
  // @@protoc_insertion_point(field_set:PROTOBUF.PB_Player.head_id)
}

// optional string nick_name = 3;
inline bool PB_Player::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_Player::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_Player::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_Player::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& PB_Player::nick_name() const {
  // @@protoc_insertion_point(field_get:PROTOBUF.PB_Player.nick_name)
  return *nick_name_;
}
inline void PB_Player::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:PROTOBUF.PB_Player.nick_name)
}
inline void PB_Player::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PROTOBUF.PB_Player.nick_name)
}
inline void PB_Player::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PROTOBUF.PB_Player.nick_name)
}
inline ::std::string* PB_Player::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PROTOBUF.PB_Player.nick_name)
  return nick_name_;
}
inline ::std::string* PB_Player::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_Player::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PROTOBUF.PB_Player.nick_name)
}

// optional string last_host = 4;
inline bool PB_Player::has_last_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_Player::set_has_last_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_Player::clear_has_last_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_Player::clear_last_host() {
  if (last_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_host_->clear();
  }
  clear_has_last_host();
}
inline const ::std::string& PB_Player::last_host() const {
  // @@protoc_insertion_point(field_get:PROTOBUF.PB_Player.last_host)
  return *last_host_;
}
inline void PB_Player::set_last_host(const ::std::string& value) {
  set_has_last_host();
  if (last_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_host_ = new ::std::string;
  }
  last_host_->assign(value);
  // @@protoc_insertion_point(field_set:PROTOBUF.PB_Player.last_host)
}
inline void PB_Player::set_last_host(const char* value) {
  set_has_last_host();
  if (last_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_host_ = new ::std::string;
  }
  last_host_->assign(value);
  // @@protoc_insertion_point(field_set_char:PROTOBUF.PB_Player.last_host)
}
inline void PB_Player::set_last_host(const char* value, size_t size) {
  set_has_last_host();
  if (last_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_host_ = new ::std::string;
  }
  last_host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PROTOBUF.PB_Player.last_host)
}
inline ::std::string* PB_Player::mutable_last_host() {
  set_has_last_host();
  if (last_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PROTOBUF.PB_Player.last_host)
  return last_host_;
}
inline ::std::string* PB_Player::release_last_host() {
  clear_has_last_host();
  if (last_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_host_;
    last_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PB_Player::set_allocated_last_host(::std::string* last_host) {
  if (last_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_host_;
  }
  if (last_host) {
    set_has_last_host();
    last_host_ = last_host;
  } else {
    clear_has_last_host();
    last_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PROTOBUF.PB_Player.last_host)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PROTOBUF

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PROTOBUF::PB_TRoleState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PROTOBUF::PB_TRoleState>() {
  return ::PROTOBUF::PB_TRoleState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5fplayer_2eproto__INCLUDED
