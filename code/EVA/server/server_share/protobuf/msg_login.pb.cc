// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PROTOBUF {

namespace {

const ::google::protobuf::Descriptor* PB_LoginAuthUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_LoginAuthUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UserLogin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5flogin_2eproto() {
  protobuf_AddDesc_msg_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_login.proto");
  GOOGLE_CHECK(file != NULL);
  PB_LoginAuthUser_descriptor_ = file->message_type(0);
  static const int PB_LoginAuthUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LoginAuthUser, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LoginAuthUser, client_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LoginAuthUser, client_token_),
  };
  PB_LoginAuthUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_LoginAuthUser_descriptor_,
      PB_LoginAuthUser::default_instance_,
      PB_LoginAuthUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LoginAuthUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LoginAuthUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_LoginAuthUser));
  PB_UserLogin_descriptor_ = file->message_type(1);
  static const int PB_UserLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserLogin, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserLogin, fes_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserLogin, pls_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserLogin, client_host_),
  };
  PB_UserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UserLogin_descriptor_,
      PB_UserLogin::default_instance_,
      PB_UserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UserLogin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_LoginAuthUser_descriptor_, &PB_LoginAuthUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UserLogin_descriptor_, &PB_UserLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5flogin_2eproto() {
  delete PB_LoginAuthUser::default_instance_;
  delete PB_LoginAuthUser_reflection_;
  delete PB_UserLogin::default_instance_;
  delete PB_UserLogin_reflection_;
}

void protobuf_AddDesc_msg_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017msg_login.proto\022\010PROTOBUF\"N\n\020PB_LoginA"
    "uthUser\022\017\n\007role_id\030\001 \001(\r\022\023\n\013client_host\030"
    "\002 \001(\t\022\024\n\014client_token\030\003 \001(\t\"d\n\014PB_UserLo"
    "gin\022\017\n\007role_id\030\001 \001(\r\022\026\n\016fes_service_id\030\002"
    " \001(\r\022\026\n\016pls_service_id\030\003 \001(\r\022\023\n\013client_h"
    "ost\030\004 \001(\t", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_login.proto", &protobuf_RegisterTypes);
  PB_LoginAuthUser::default_instance_ = new PB_LoginAuthUser();
  PB_UserLogin::default_instance_ = new PB_UserLogin();
  PB_LoginAuthUser::default_instance_->InitAsDefaultInstance();
  PB_UserLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5flogin_2eproto {
  StaticDescriptorInitializer_msg_5flogin_2eproto() {
    protobuf_AddDesc_msg_5flogin_2eproto();
  }
} static_descriptor_initializer_msg_5flogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_LoginAuthUser::kRoleIdFieldNumber;
const int PB_LoginAuthUser::kClientHostFieldNumber;
const int PB_LoginAuthUser::kClientTokenFieldNumber;
#endif  // !_MSC_VER

PB_LoginAuthUser::PB_LoginAuthUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_LoginAuthUser)
}

void PB_LoginAuthUser::InitAsDefaultInstance() {
}

PB_LoginAuthUser::PB_LoginAuthUser(const PB_LoginAuthUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_LoginAuthUser)
}

void PB_LoginAuthUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_id_ = 0u;
  client_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_LoginAuthUser::~PB_LoginAuthUser() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_LoginAuthUser)
  SharedDtor();
}

void PB_LoginAuthUser::SharedDtor() {
  if (client_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_host_;
  }
  if (client_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_token_;
  }
  if (this != default_instance_) {
  }
}

void PB_LoginAuthUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_LoginAuthUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_LoginAuthUser_descriptor_;
}

const PB_LoginAuthUser& PB_LoginAuthUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

PB_LoginAuthUser* PB_LoginAuthUser::default_instance_ = NULL;

PB_LoginAuthUser* PB_LoginAuthUser::New() const {
  return new PB_LoginAuthUser;
}

void PB_LoginAuthUser::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    role_id_ = 0u;
    if (has_client_host()) {
      if (client_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_host_->clear();
      }
    }
    if (has_client_token()) {
      if (client_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_LoginAuthUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_LoginAuthUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_host;
        break;
      }

      // optional string client_host = 2;
      case 2: {
        if (tag == 18) {
         parse_client_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_host().data(), this->client_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_token;
        break;
      }

      // optional string client_token = 3;
      case 3: {
        if (tag == 26) {
         parse_client_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_token().data(), this->client_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_LoginAuthUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_LoginAuthUser)
  return false;
#undef DO_
}

void PB_LoginAuthUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_LoginAuthUser)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional string client_host = 2;
  if (has_client_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_host().data(), this->client_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_host(), output);
  }

  // optional string client_token = 3;
  if (has_client_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_LoginAuthUser)
}

::google::protobuf::uint8* PB_LoginAuthUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_LoginAuthUser)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional string client_host = 2;
  if (has_client_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_host().data(), this->client_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_host(), target);
  }

  // optional string client_token = 3;
  if (has_client_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_LoginAuthUser)
  return target;
}

int PB_LoginAuthUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional string client_host = 2;
    if (has_client_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_host());
    }

    // optional string client_token = 3;
    if (has_client_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_LoginAuthUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_LoginAuthUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_LoginAuthUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_LoginAuthUser::MergeFrom(const PB_LoginAuthUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_client_host()) {
      set_client_host(from.client_host());
    }
    if (from.has_client_token()) {
      set_client_token(from.client_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_LoginAuthUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_LoginAuthUser::CopyFrom(const PB_LoginAuthUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_LoginAuthUser::IsInitialized() const {

  return true;
}

void PB_LoginAuthUser::Swap(PB_LoginAuthUser* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(client_host_, other->client_host_);
    std::swap(client_token_, other->client_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_LoginAuthUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_LoginAuthUser_descriptor_;
  metadata.reflection = PB_LoginAuthUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UserLogin::kRoleIdFieldNumber;
const int PB_UserLogin::kFesServiceIdFieldNumber;
const int PB_UserLogin::kPlsServiceIdFieldNumber;
const int PB_UserLogin::kClientHostFieldNumber;
#endif  // !_MSC_VER

PB_UserLogin::PB_UserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_UserLogin)
}

void PB_UserLogin::InitAsDefaultInstance() {
}

PB_UserLogin::PB_UserLogin(const PB_UserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_UserLogin)
}

void PB_UserLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_id_ = 0u;
  fes_service_id_ = 0u;
  pls_service_id_ = 0u;
  client_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UserLogin::~PB_UserLogin() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_UserLogin)
  SharedDtor();
}

void PB_UserLogin::SharedDtor() {
  if (client_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_host_;
  }
  if (this != default_instance_) {
  }
}

void PB_UserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UserLogin_descriptor_;
}

const PB_UserLogin& PB_UserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

PB_UserLogin* PB_UserLogin::default_instance_ = NULL;

PB_UserLogin* PB_UserLogin::New() const {
  return new PB_UserLogin;
}

void PB_UserLogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_UserLogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(role_id_, fes_service_id_);
    pls_service_id_ = 0u;
    if (has_client_host()) {
      if (client_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_host_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_UserLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fes_service_id;
        break;
      }

      // optional uint32 fes_service_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fes_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fes_service_id_)));
          set_has_fes_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pls_service_id;
        break;
      }

      // optional uint32 pls_service_id = 3;
      case 3: {
        if (tag == 24) {
         parse_pls_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pls_service_id_)));
          set_has_pls_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_host;
        break;
      }

      // optional string client_host = 4;
      case 4: {
        if (tag == 34) {
         parse_client_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_host().data(), this->client_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_UserLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_UserLogin)
  return false;
#undef DO_
}

void PB_UserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_UserLogin)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 fes_service_id = 2;
  if (has_fes_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fes_service_id(), output);
  }

  // optional uint32 pls_service_id = 3;
  if (has_pls_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pls_service_id(), output);
  }

  // optional string client_host = 4;
  if (has_client_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_host().data(), this->client_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_host(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_UserLogin)
}

::google::protobuf::uint8* PB_UserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_UserLogin)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 fes_service_id = 2;
  if (has_fes_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fes_service_id(), target);
  }

  // optional uint32 pls_service_id = 3;
  if (has_pls_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pls_service_id(), target);
  }

  // optional string client_host = 4;
  if (has_client_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_host().data(), this->client_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_host(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_UserLogin)
  return target;
}

int PB_UserLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 fes_service_id = 2;
    if (has_fes_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fes_service_id());
    }

    // optional uint32 pls_service_id = 3;
    if (has_pls_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pls_service_id());
    }

    // optional string client_host = 4;
    if (has_client_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_host());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UserLogin::MergeFrom(const PB_UserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_fes_service_id()) {
      set_fes_service_id(from.fes_service_id());
    }
    if (from.has_pls_service_id()) {
      set_pls_service_id(from.pls_service_id());
    }
    if (from.has_client_host()) {
      set_client_host(from.client_host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UserLogin::CopyFrom(const PB_UserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UserLogin::IsInitialized() const {

  return true;
}

void PB_UserLogin::Swap(PB_UserLogin* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(fes_service_id_, other->fes_service_id_);
    std::swap(pls_service_id_, other->pls_service_id_);
    std::swap(client_host_, other->client_host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UserLogin_descriptor_;
  metadata.reflection = PB_UserLogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PROTOBUF

// @@protoc_insertion_point(global_scope)
