// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PROTOBUF {

namespace {

const ::google::protobuf::Descriptor* PB_RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoomInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoomInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_LeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_LeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UserOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UserOffline_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UserOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UserOnline_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RecordRoleScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RecordRoleScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RecordRoleScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RecordRoleScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_GameRecordBseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_GameRecordBseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_GameRecordRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_GameRecordRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_GameRecordShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_GameRecordShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_GameRecordNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_GameRecordNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5froom_2eproto() {
  protobuf_AddDesc_msg_5froom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_room.proto");
  GOOGLE_CHECK(file != NULL);
  PB_RoomInfo_descriptor_ = file->message_type(0);
  static const int PB_RoomInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfo, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfo, room_count_),
  };
  PB_RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoomInfo_descriptor_,
      PB_RoomInfo::default_instance_,
      PB_RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoomInfo));
  PB_RoomInfoList_descriptor_ = file->message_type(1);
  static const int PB_RoomInfoList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfoList, role_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfoList, room_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfoList, service_id_),
  };
  PB_RoomInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoomInfoList_descriptor_,
      PB_RoomInfoList::default_instance_,
      PB_RoomInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoomInfoList));
  PB_CreateRoom_descriptor_ = file->message_type(2);
  static const int PB_CreateRoom_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, room_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, special_kind_),
  };
  PB_CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_CreateRoom_descriptor_,
      PB_CreateRoom::default_instance_,
      PB_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_CreateRoom));
  PB_LeaveRoom_descriptor_ = file->message_type(3);
  static const int PB_LeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LeaveRoom, role_id_),
  };
  PB_LeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_LeaveRoom_descriptor_,
      PB_LeaveRoom::default_instance_,
      PB_LeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_LeaveRoom));
  PB_UserOffline_descriptor_ = file->message_type(4);
  static const int PB_UserOffline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOffline, role_id_),
  };
  PB_UserOffline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UserOffline_descriptor_,
      PB_UserOffline::default_instance_,
      PB_UserOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOffline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOffline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UserOffline));
  PB_UserOnline_descriptor_ = file->message_type(5);
  static const int PB_UserOnline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOnline, role_id_),
  };
  PB_UserOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UserOnline_descriptor_,
      PB_UserOnline::default_instance_,
      PB_UserOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UserOnline));
  PB_RecordRoleScore_descriptor_ = file->message_type(6);
  static const int PB_RecordRoleScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RecordRoleScore, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RecordRoleScore, score_),
  };
  PB_RecordRoleScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RecordRoleScore_descriptor_,
      PB_RecordRoleScore::default_instance_,
      PB_RecordRoleScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RecordRoleScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RecordRoleScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RecordRoleScore));
  PB_RecordRoleScoreList_descriptor_ = file->message_type(7);
  static const int PB_RecordRoleScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RecordRoleScoreList, role_score_),
  };
  PB_RecordRoleScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RecordRoleScoreList_descriptor_,
      PB_RecordRoleScoreList::default_instance_,
      PB_RecordRoleScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RecordRoleScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RecordRoleScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RecordRoleScoreList));
  PB_GameRecordBseInfo_descriptor_ = file->message_type(8);
  static const int PB_GameRecordBseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordBseInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordBseInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordBseInfo, create_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordBseInfo, role_score_list_),
  };
  PB_GameRecordBseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_GameRecordBseInfo_descriptor_,
      PB_GameRecordBseInfo::default_instance_,
      PB_GameRecordBseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordBseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordBseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_GameRecordBseInfo));
  PB_GameRecordRoleInfo_descriptor_ = file->message_type(9);
  static const int PB_GameRecordRoleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordRoleInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordRoleInfo, role_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordRoleInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordRoleInfo, hand_card_),
  };
  PB_GameRecordRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_GameRecordRoleInfo_descriptor_,
      PB_GameRecordRoleInfo::default_instance_,
      PB_GameRecordRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_GameRecordRoleInfo));
  PB_GameRecordShowDown_descriptor_ = file->message_type(10);
  static const int PB_GameRecordShowDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordShowDown, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordShowDown, score_),
  };
  PB_GameRecordShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_GameRecordShowDown_descriptor_,
      PB_GameRecordShowDown::default_instance_,
      PB_GameRecordShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_GameRecordShowDown));
  PB_GameRecordNode_descriptor_ = file->message_type(11);
  static const int PB_GameRecordNode_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, card_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, card_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, action_wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, showdown_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, next_node_),
  };
  PB_GameRecordNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_GameRecordNode_descriptor_,
      PB_GameRecordNode::default_instance_,
      PB_GameRecordNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GameRecordNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_GameRecordNode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5froom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoomInfo_descriptor_, &PB_RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoomInfoList_descriptor_, &PB_RoomInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_CreateRoom_descriptor_, &PB_CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_LeaveRoom_descriptor_, &PB_LeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UserOffline_descriptor_, &PB_UserOffline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UserOnline_descriptor_, &PB_UserOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RecordRoleScore_descriptor_, &PB_RecordRoleScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RecordRoleScoreList_descriptor_, &PB_RecordRoleScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_GameRecordBseInfo_descriptor_, &PB_GameRecordBseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_GameRecordRoleInfo_descriptor_, &PB_GameRecordRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_GameRecordShowDown_descriptor_, &PB_GameRecordShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_GameRecordNode_descriptor_, &PB_GameRecordNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5froom_2eproto() {
  delete PB_RoomInfo::default_instance_;
  delete PB_RoomInfo_reflection_;
  delete PB_RoomInfoList::default_instance_;
  delete PB_RoomInfoList_reflection_;
  delete PB_CreateRoom::default_instance_;
  delete PB_CreateRoom_reflection_;
  delete PB_LeaveRoom::default_instance_;
  delete PB_LeaveRoom_reflection_;
  delete PB_UserOffline::default_instance_;
  delete PB_UserOffline_reflection_;
  delete PB_UserOnline::default_instance_;
  delete PB_UserOnline_reflection_;
  delete PB_RecordRoleScore::default_instance_;
  delete PB_RecordRoleScore_reflection_;
  delete PB_RecordRoleScoreList::default_instance_;
  delete PB_RecordRoleScoreList_reflection_;
  delete PB_GameRecordBseInfo::default_instance_;
  delete PB_GameRecordBseInfo_reflection_;
  delete PB_GameRecordRoleInfo::default_instance_;
  delete PB_GameRecordRoleInfo_reflection_;
  delete PB_GameRecordShowDown::default_instance_;
  delete PB_GameRecordShowDown_reflection_;
  delete PB_GameRecordNode::default_instance_;
  delete PB_GameRecordNode_reflection_;
}

void protobuf_AddDesc_msg_5froom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016msg_room.proto\022\010PROTOBUF\"4\n\013PB_RoomInf"
    "o\022\021\n\troom_name\030\001 \001(\t\022\022\n\nroom_count\030\002 \001(\r"
    "\"c\n\017PB_RoomInfoList\022\022\n\nrole_count\030\001 \001(\r\022"
    "(\n\troom_list\030\002 \003(\0132\025.PROTOBUF.PB_RoomInf"
    "o\022\022\n\nservice_id\030\003 \001(\r\"\204\001\n\rPB_CreateRoom\022"
    "\021\n\troom_name\030\001 \001(\t\022\021\n\troom_mode\030\002 \001(\r\022\022\n"
    "\nconsume_id\030\003 \001(\r\022\017\n\007room_id\030\004 \001(\r\022\022\n\nse"
    "rvice_id\030\005 \001(\r\022\024\n\014special_kind\030\006 \001(\r\"\037\n\014"
    "PB_LeaveRoom\022\017\n\007role_id\030\001 \001(\r\"!\n\016PB_User"
    "Offline\022\017\n\007role_id\030\001 \001(\r\" \n\rPB_UserOnlin"
    "e\022\017\n\007role_id\030\001 \001(\r\"4\n\022PB_RecordRoleScore"
    "\022\017\n\007role_id\030\001 \001(\r\022\r\n\005score\030\002 \001(\r\"J\n\026PB_R"
    "ecordRoleScoreList\0220\n\nrole_score\030\001 \003(\0132\034"
    ".PROTOBUF.PB_RecordRoleScore\"\242\001\n\024PB_Game"
    "RecordBseInfo\022\023\n\013create_time\030\001 \001(\r\022\014\n\004uu"
    "id\030\002 \001(\t\022,\n\013create_room\030\003 \001(\0132\027.PROTOBUF"
    ".PB_CreateRoom\0229\n\017role_score_list\030\004 \003(\0132"
    " .PROTOBUF.PB_RecordRoleScoreList\"]\n\025PB_"
    "GameRecordRoleInfo\022\017\n\007role_id\030\001 \001(\r\022\021\n\tr"
    "ole_seat\030\002 \001(\r\022\r\n\005score\030\003 \001(\003\022\021\n\thand_ca"
    "rd\030\004 \003(\r\"7\n\025PB_GameRecordShowDown\022\017\n\007rol"
    "e_id\030\001 \001(\r\022\r\n\005score\030\002 \001(\003\"\350\002\n\021PB_GameRec"
    "ordNode\022\016\n\006cmd_id\030\001 \001(\r\022\022\n\ncard_value\030\002 "
    "\003(\r\022\022\n\ncard_index\030\003 \001(\r\022\017\n\007role_id\030\004 \001(\r"
    "\022\022\n\naction_wik\030\005 \001(\r\022\016\n\006param1\030\006 \001(\r\022\016\n\006"
    "param2\030\007 \001(\r\022\016\n\006param3\030\010 \001(\r\0222\n\trole_inf"
    "o\030\t \001(\0132\037.PROTOBUF.PB_GameRecordRoleInfo"
    "\022*\n\troom_info\030\n \001(\0132\027.PROTOBUF.PB_Create"
    "Room\0226\n\rshowdown_info\030\013 \001(\0132\037.PROTOBUF.P"
    "B_GameRecordShowDown\022.\n\tnext_node\030\014 \001(\0132"
    "\033.PROTOBUF.PB_GameRecordNode", 1228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_room.proto", &protobuf_RegisterTypes);
  PB_RoomInfo::default_instance_ = new PB_RoomInfo();
  PB_RoomInfoList::default_instance_ = new PB_RoomInfoList();
  PB_CreateRoom::default_instance_ = new PB_CreateRoom();
  PB_LeaveRoom::default_instance_ = new PB_LeaveRoom();
  PB_UserOffline::default_instance_ = new PB_UserOffline();
  PB_UserOnline::default_instance_ = new PB_UserOnline();
  PB_RecordRoleScore::default_instance_ = new PB_RecordRoleScore();
  PB_RecordRoleScoreList::default_instance_ = new PB_RecordRoleScoreList();
  PB_GameRecordBseInfo::default_instance_ = new PB_GameRecordBseInfo();
  PB_GameRecordRoleInfo::default_instance_ = new PB_GameRecordRoleInfo();
  PB_GameRecordShowDown::default_instance_ = new PB_GameRecordShowDown();
  PB_GameRecordNode::default_instance_ = new PB_GameRecordNode();
  PB_RoomInfo::default_instance_->InitAsDefaultInstance();
  PB_RoomInfoList::default_instance_->InitAsDefaultInstance();
  PB_CreateRoom::default_instance_->InitAsDefaultInstance();
  PB_LeaveRoom::default_instance_->InitAsDefaultInstance();
  PB_UserOffline::default_instance_->InitAsDefaultInstance();
  PB_UserOnline::default_instance_->InitAsDefaultInstance();
  PB_RecordRoleScore::default_instance_->InitAsDefaultInstance();
  PB_RecordRoleScoreList::default_instance_->InitAsDefaultInstance();
  PB_GameRecordBseInfo::default_instance_->InitAsDefaultInstance();
  PB_GameRecordRoleInfo::default_instance_->InitAsDefaultInstance();
  PB_GameRecordShowDown::default_instance_->InitAsDefaultInstance();
  PB_GameRecordNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5froom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5froom_2eproto {
  StaticDescriptorInitializer_msg_5froom_2eproto() {
    protobuf_AddDesc_msg_5froom_2eproto();
  }
} static_descriptor_initializer_msg_5froom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_RoomInfo::kRoomNameFieldNumber;
const int PB_RoomInfo::kRoomCountFieldNumber;
#endif  // !_MSC_VER

PB_RoomInfo::PB_RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_RoomInfo)
}

void PB_RoomInfo::InitAsDefaultInstance() {
}

PB_RoomInfo::PB_RoomInfo(const PB_RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_RoomInfo)
}

void PB_RoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoomInfo::~PB_RoomInfo() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_RoomInfo)
  SharedDtor();
}

void PB_RoomInfo::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoomInfo_descriptor_;
}

const PB_RoomInfo& PB_RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_RoomInfo* PB_RoomInfo::default_instance_ = NULL;

PB_RoomInfo* PB_RoomInfo::New() const {
  return new PB_RoomInfo;
}

void PB_RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_name_->clear();
      }
    }
    room_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_count;
        break;
      }

      // optional uint32 room_count = 2;
      case 2: {
        if (tag == 16) {
         parse_room_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_count_)));
          set_has_room_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_RoomInfo)
  return false;
#undef DO_
}

void PB_RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_RoomInfo)
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // optional uint32 room_count = 2;
  if (has_room_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_RoomInfo)
}

::google::protobuf::uint8* PB_RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_RoomInfo)
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional uint32 room_count = 2;
  if (has_room_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_RoomInfo)
  return target;
}

int PB_RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional uint32 room_count = 2;
    if (has_room_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoomInfo::MergeFrom(const PB_RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_room_count()) {
      set_room_count(from.room_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoomInfo::CopyFrom(const PB_RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoomInfo::IsInitialized() const {

  return true;
}

void PB_RoomInfo::Swap(PB_RoomInfo* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(room_count_, other->room_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoomInfo_descriptor_;
  metadata.reflection = PB_RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_RoomInfoList::kRoleCountFieldNumber;
const int PB_RoomInfoList::kRoomListFieldNumber;
const int PB_RoomInfoList::kServiceIdFieldNumber;
#endif  // !_MSC_VER

PB_RoomInfoList::PB_RoomInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_RoomInfoList)
}

void PB_RoomInfoList::InitAsDefaultInstance() {
}

PB_RoomInfoList::PB_RoomInfoList(const PB_RoomInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_RoomInfoList)
}

void PB_RoomInfoList::SharedCtor() {
  _cached_size_ = 0;
  role_count_ = 0u;
  service_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoomInfoList::~PB_RoomInfoList() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_RoomInfoList)
  SharedDtor();
}

void PB_RoomInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RoomInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoomInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoomInfoList_descriptor_;
}

const PB_RoomInfoList& PB_RoomInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_RoomInfoList* PB_RoomInfoList::default_instance_ = NULL;

PB_RoomInfoList* PB_RoomInfoList::New() const {
  return new PB_RoomInfoList;
}

void PB_RoomInfoList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RoomInfoList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_count_, service_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  room_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoomInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_RoomInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_count_)));
          set_has_role_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        break;
      }

      // repeated .PROTOBUF.PB_RoomInfo room_list = 2;
      case 2: {
        if (tag == 18) {
         parse_room_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        if (input->ExpectTag(24)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (tag == 24) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_RoomInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_RoomInfoList)
  return false;
#undef DO_
}

void PB_RoomInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_RoomInfoList)
  // optional uint32 role_count = 1;
  if (has_role_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_count(), output);
  }

  // repeated .PROTOBUF.PB_RoomInfo room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_list(i), output);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_RoomInfoList)
}

::google::protobuf::uint8* PB_RoomInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_RoomInfoList)
  // optional uint32 role_count = 1;
  if (has_role_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_count(), target);
  }

  // repeated .PROTOBUF.PB_RoomInfo room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_list(i), target);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_RoomInfoList)
  return target;
}

int PB_RoomInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_count = 1;
    if (has_role_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_count());
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  // repeated .PROTOBUF.PB_RoomInfo room_list = 2;
  total_size += 1 * this->room_list_size();
  for (int i = 0; i < this->room_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoomInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoomInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoomInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoomInfoList::MergeFrom(const PB_RoomInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_list_.MergeFrom(from.room_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_count()) {
      set_role_count(from.role_count());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoomInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoomInfoList::CopyFrom(const PB_RoomInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoomInfoList::IsInitialized() const {

  return true;
}

void PB_RoomInfoList::Swap(PB_RoomInfoList* other) {
  if (other != this) {
    std::swap(role_count_, other->role_count_);
    room_list_.Swap(&other->room_list_);
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoomInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoomInfoList_descriptor_;
  metadata.reflection = PB_RoomInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_CreateRoom::kRoomNameFieldNumber;
const int PB_CreateRoom::kRoomModeFieldNumber;
const int PB_CreateRoom::kConsumeIdFieldNumber;
const int PB_CreateRoom::kRoomIdFieldNumber;
const int PB_CreateRoom::kServiceIdFieldNumber;
const int PB_CreateRoom::kSpecialKindFieldNumber;
#endif  // !_MSC_VER

PB_CreateRoom::PB_CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_CreateRoom)
}

void PB_CreateRoom::InitAsDefaultInstance() {
}

PB_CreateRoom::PB_CreateRoom(const PB_CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_CreateRoom)
}

void PB_CreateRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_mode_ = 0u;
  consume_id_ = 0u;
  room_id_ = 0u;
  service_id_ = 0u;
  special_kind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_CreateRoom::~PB_CreateRoom() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_CreateRoom)
  SharedDtor();
}

void PB_CreateRoom::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_CreateRoom_descriptor_;
}

const PB_CreateRoom& PB_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_CreateRoom* PB_CreateRoom::default_instance_ = NULL;

PB_CreateRoom* PB_CreateRoom::New() const {
  return new PB_CreateRoom;
}

void PB_CreateRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_CreateRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(room_mode_, special_kind_);
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_CreateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_mode;
        break;
      }

      // optional uint32 room_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_room_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_mode_)));
          set_has_room_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consume_id;
        break;
      }

      // optional uint32 consume_id = 3;
      case 3: {
        if (tag == 24) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 5;
      case 5: {
        if (tag == 40) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_special_kind;
        break;
      }

      // optional uint32 special_kind = 6;
      case 6: {
        if (tag == 48) {
         parse_special_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_kind_)));
          set_has_special_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_CreateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_CreateRoom)
  return false;
#undef DO_
}

void PB_CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_CreateRoom)
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // optional uint32 room_mode = 2;
  if (has_room_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_mode(), output);
  }

  // optional uint32 consume_id = 3;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->consume_id(), output);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_id(), output);
  }

  // optional uint32 service_id = 5;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->service_id(), output);
  }

  // optional uint32 special_kind = 6;
  if (has_special_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->special_kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_CreateRoom)
}

::google::protobuf::uint8* PB_CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_CreateRoom)
  // optional string room_name = 1;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional uint32 room_mode = 2;
  if (has_room_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_mode(), target);
  }

  // optional uint32 consume_id = 3;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->consume_id(), target);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_id(), target);
  }

  // optional uint32 service_id = 5;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->service_id(), target);
  }

  // optional uint32 special_kind = 6;
  if (has_special_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->special_kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_CreateRoom)
  return target;
}

int PB_CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional uint32 room_mode = 2;
    if (has_room_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_mode());
    }

    // optional uint32 consume_id = 3;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // optional uint32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 service_id = 5;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 special_kind = 6;
    if (has_special_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_CreateRoom::MergeFrom(const PB_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_room_mode()) {
      set_room_mode(from.room_mode());
    }
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_special_kind()) {
      set_special_kind(from.special_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CreateRoom::CopyFrom(const PB_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CreateRoom::IsInitialized() const {

  return true;
}

void PB_CreateRoom::Swap(PB_CreateRoom* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(room_mode_, other->room_mode_);
    std::swap(consume_id_, other->consume_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(service_id_, other->service_id_);
    std::swap(special_kind_, other->special_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_CreateRoom_descriptor_;
  metadata.reflection = PB_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_LeaveRoom::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PB_LeaveRoom::PB_LeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_LeaveRoom)
}

void PB_LeaveRoom::InitAsDefaultInstance() {
}

PB_LeaveRoom::PB_LeaveRoom(const PB_LeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_LeaveRoom)
}

void PB_LeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_LeaveRoom::~PB_LeaveRoom() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_LeaveRoom)
  SharedDtor();
}

void PB_LeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_LeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_LeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_LeaveRoom_descriptor_;
}

const PB_LeaveRoom& PB_LeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_LeaveRoom* PB_LeaveRoom::default_instance_ = NULL;

PB_LeaveRoom* PB_LeaveRoom::New() const {
  return new PB_LeaveRoom;
}

void PB_LeaveRoom::Clear() {
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_LeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_LeaveRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_LeaveRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_LeaveRoom)
  return false;
#undef DO_
}

void PB_LeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_LeaveRoom)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_LeaveRoom)
}

::google::protobuf::uint8* PB_LeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_LeaveRoom)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_LeaveRoom)
  return target;
}

int PB_LeaveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_LeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_LeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_LeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_LeaveRoom::MergeFrom(const PB_LeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_LeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_LeaveRoom::CopyFrom(const PB_LeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_LeaveRoom::IsInitialized() const {

  return true;
}

void PB_LeaveRoom::Swap(PB_LeaveRoom* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_LeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_LeaveRoom_descriptor_;
  metadata.reflection = PB_LeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UserOffline::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PB_UserOffline::PB_UserOffline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_UserOffline)
}

void PB_UserOffline::InitAsDefaultInstance() {
}

PB_UserOffline::PB_UserOffline(const PB_UserOffline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_UserOffline)
}

void PB_UserOffline::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UserOffline::~PB_UserOffline() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_UserOffline)
  SharedDtor();
}

void PB_UserOffline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UserOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UserOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UserOffline_descriptor_;
}

const PB_UserOffline& PB_UserOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_UserOffline* PB_UserOffline::default_instance_ = NULL;

PB_UserOffline* PB_UserOffline::New() const {
  return new PB_UserOffline;
}

void PB_UserOffline::Clear() {
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UserOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_UserOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_UserOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_UserOffline)
  return false;
#undef DO_
}

void PB_UserOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_UserOffline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_UserOffline)
}

::google::protobuf::uint8* PB_UserOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_UserOffline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_UserOffline)
  return target;
}

int PB_UserOffline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UserOffline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UserOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UserOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UserOffline::MergeFrom(const PB_UserOffline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UserOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UserOffline::CopyFrom(const PB_UserOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UserOffline::IsInitialized() const {

  return true;
}

void PB_UserOffline::Swap(PB_UserOffline* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UserOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UserOffline_descriptor_;
  metadata.reflection = PB_UserOffline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UserOnline::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PB_UserOnline::PB_UserOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_UserOnline)
}

void PB_UserOnline::InitAsDefaultInstance() {
}

PB_UserOnline::PB_UserOnline(const PB_UserOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_UserOnline)
}

void PB_UserOnline::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UserOnline::~PB_UserOnline() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_UserOnline)
  SharedDtor();
}

void PB_UserOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UserOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UserOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UserOnline_descriptor_;
}

const PB_UserOnline& PB_UserOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_UserOnline* PB_UserOnline::default_instance_ = NULL;

PB_UserOnline* PB_UserOnline::New() const {
  return new PB_UserOnline;
}

void PB_UserOnline::Clear() {
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UserOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_UserOnline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_UserOnline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_UserOnline)
  return false;
#undef DO_
}

void PB_UserOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_UserOnline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_UserOnline)
}

::google::protobuf::uint8* PB_UserOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_UserOnline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_UserOnline)
  return target;
}

int PB_UserOnline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UserOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UserOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UserOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UserOnline::MergeFrom(const PB_UserOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UserOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UserOnline::CopyFrom(const PB_UserOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UserOnline::IsInitialized() const {

  return true;
}

void PB_UserOnline::Swap(PB_UserOnline* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UserOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UserOnline_descriptor_;
  metadata.reflection = PB_UserOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_RecordRoleScore::kRoleIdFieldNumber;
const int PB_RecordRoleScore::kScoreFieldNumber;
#endif  // !_MSC_VER

PB_RecordRoleScore::PB_RecordRoleScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_RecordRoleScore)
}

void PB_RecordRoleScore::InitAsDefaultInstance() {
}

PB_RecordRoleScore::PB_RecordRoleScore(const PB_RecordRoleScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_RecordRoleScore)
}

void PB_RecordRoleScore::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RecordRoleScore::~PB_RecordRoleScore() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_RecordRoleScore)
  SharedDtor();
}

void PB_RecordRoleScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RecordRoleScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RecordRoleScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RecordRoleScore_descriptor_;
}

const PB_RecordRoleScore& PB_RecordRoleScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_RecordRoleScore* PB_RecordRoleScore::default_instance_ = NULL;

PB_RecordRoleScore* PB_RecordRoleScore::New() const {
  return new PB_RecordRoleScore;
}

void PB_RecordRoleScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_RecordRoleScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RecordRoleScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_RecordRoleScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_RecordRoleScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_RecordRoleScore)
  return false;
#undef DO_
}

void PB_RecordRoleScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_RecordRoleScore)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_RecordRoleScore)
}

::google::protobuf::uint8* PB_RecordRoleScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_RecordRoleScore)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_RecordRoleScore)
  return target;
}

int PB_RecordRoleScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RecordRoleScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RecordRoleScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RecordRoleScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RecordRoleScore::MergeFrom(const PB_RecordRoleScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RecordRoleScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RecordRoleScore::CopyFrom(const PB_RecordRoleScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RecordRoleScore::IsInitialized() const {

  return true;
}

void PB_RecordRoleScore::Swap(PB_RecordRoleScore* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RecordRoleScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RecordRoleScore_descriptor_;
  metadata.reflection = PB_RecordRoleScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_RecordRoleScoreList::kRoleScoreFieldNumber;
#endif  // !_MSC_VER

PB_RecordRoleScoreList::PB_RecordRoleScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_RecordRoleScoreList)
}

void PB_RecordRoleScoreList::InitAsDefaultInstance() {
}

PB_RecordRoleScoreList::PB_RecordRoleScoreList(const PB_RecordRoleScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_RecordRoleScoreList)
}

void PB_RecordRoleScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RecordRoleScoreList::~PB_RecordRoleScoreList() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_RecordRoleScoreList)
  SharedDtor();
}

void PB_RecordRoleScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RecordRoleScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RecordRoleScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RecordRoleScoreList_descriptor_;
}

const PB_RecordRoleScoreList& PB_RecordRoleScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_RecordRoleScoreList* PB_RecordRoleScoreList::default_instance_ = NULL;

PB_RecordRoleScoreList* PB_RecordRoleScoreList::New() const {
  return new PB_RecordRoleScoreList;
}

void PB_RecordRoleScoreList::Clear() {
  role_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RecordRoleScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_RecordRoleScoreList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PROTOBUF.PB_RecordRoleScore role_score = 1;
      case 1: {
        if (tag == 10) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_role_score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_RecordRoleScoreList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_RecordRoleScoreList)
  return false;
#undef DO_
}

void PB_RecordRoleScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_RecordRoleScoreList)
  // repeated .PROTOBUF.PB_RecordRoleScore role_score = 1;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_RecordRoleScoreList)
}

::google::protobuf::uint8* PB_RecordRoleScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_RecordRoleScoreList)
  // repeated .PROTOBUF.PB_RecordRoleScore role_score = 1;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_RecordRoleScoreList)
  return target;
}

int PB_RecordRoleScoreList::ByteSize() const {
  int total_size = 0;

  // repeated .PROTOBUF.PB_RecordRoleScore role_score = 1;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RecordRoleScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RecordRoleScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RecordRoleScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RecordRoleScoreList::MergeFrom(const PB_RecordRoleScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_score_.MergeFrom(from.role_score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RecordRoleScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RecordRoleScoreList::CopyFrom(const PB_RecordRoleScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RecordRoleScoreList::IsInitialized() const {

  return true;
}

void PB_RecordRoleScoreList::Swap(PB_RecordRoleScoreList* other) {
  if (other != this) {
    role_score_.Swap(&other->role_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RecordRoleScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RecordRoleScoreList_descriptor_;
  metadata.reflection = PB_RecordRoleScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_GameRecordBseInfo::kCreateTimeFieldNumber;
const int PB_GameRecordBseInfo::kUuidFieldNumber;
const int PB_GameRecordBseInfo::kCreateRoomFieldNumber;
const int PB_GameRecordBseInfo::kRoleScoreListFieldNumber;
#endif  // !_MSC_VER

PB_GameRecordBseInfo::PB_GameRecordBseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_GameRecordBseInfo)
}

void PB_GameRecordBseInfo::InitAsDefaultInstance() {
  create_room_ = const_cast< ::PROTOBUF::PB_CreateRoom*>(&::PROTOBUF::PB_CreateRoom::default_instance());
}

PB_GameRecordBseInfo::PB_GameRecordBseInfo(const PB_GameRecordBseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_GameRecordBseInfo)
}

void PB_GameRecordBseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  create_time_ = 0u;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_room_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_GameRecordBseInfo::~PB_GameRecordBseInfo() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_GameRecordBseInfo)
  SharedDtor();
}

void PB_GameRecordBseInfo::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete create_room_;
  }
}

void PB_GameRecordBseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_GameRecordBseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_GameRecordBseInfo_descriptor_;
}

const PB_GameRecordBseInfo& PB_GameRecordBseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_GameRecordBseInfo* PB_GameRecordBseInfo::default_instance_ = NULL;

PB_GameRecordBseInfo* PB_GameRecordBseInfo::New() const {
  return new PB_GameRecordBseInfo;
}

void PB_GameRecordBseInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    create_time_ = 0u;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_create_room()) {
      if (create_room_ != NULL) create_room_->::PROTOBUF::PB_CreateRoom::Clear();
    }
  }
  role_score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_GameRecordBseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_GameRecordBseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 create_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_create_room;
        break;
      }

      // optional .PROTOBUF.PB_CreateRoom create_room = 3;
      case 3: {
        if (tag == 26) {
         parse_create_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_score_list;
        break;
      }

      // repeated .PROTOBUF.PB_RecordRoleScoreList role_score_list = 4;
      case 4: {
        if (tag == 34) {
         parse_role_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_score_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_GameRecordBseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_GameRecordBseInfo)
  return false;
#undef DO_
}

void PB_GameRecordBseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_GameRecordBseInfo)
  // optional uint32 create_time = 1;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->create_time(), output);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional .PROTOBUF.PB_CreateRoom create_room = 3;
  if (has_create_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->create_room(), output);
  }

  // repeated .PROTOBUF.PB_RecordRoleScoreList role_score_list = 4;
  for (int i = 0; i < this->role_score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_score_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_GameRecordBseInfo)
}

::google::protobuf::uint8* PB_GameRecordBseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_GameRecordBseInfo)
  // optional uint32 create_time = 1;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->create_time(), target);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional .PROTOBUF.PB_CreateRoom create_room = 3;
  if (has_create_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->create_room(), target);
  }

  // repeated .PROTOBUF.PB_RecordRoleScoreList role_score_list = 4;
  for (int i = 0; i < this->role_score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_score_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_GameRecordBseInfo)
  return target;
}

int PB_GameRecordBseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 create_time = 1;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .PROTOBUF.PB_CreateRoom create_room = 3;
    if (has_create_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_room());
    }

  }
  // repeated .PROTOBUF.PB_RecordRoleScoreList role_score_list = 4;
  total_size += 1 * this->role_score_list_size();
  for (int i = 0; i < this->role_score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_GameRecordBseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_GameRecordBseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_GameRecordBseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_GameRecordBseInfo::MergeFrom(const PB_GameRecordBseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_score_list_.MergeFrom(from.role_score_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_create_room()) {
      mutable_create_room()->::PROTOBUF::PB_CreateRoom::MergeFrom(from.create_room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_GameRecordBseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_GameRecordBseInfo::CopyFrom(const PB_GameRecordBseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_GameRecordBseInfo::IsInitialized() const {

  return true;
}

void PB_GameRecordBseInfo::Swap(PB_GameRecordBseInfo* other) {
  if (other != this) {
    std::swap(create_time_, other->create_time_);
    std::swap(uuid_, other->uuid_);
    std::swap(create_room_, other->create_room_);
    role_score_list_.Swap(&other->role_score_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_GameRecordBseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_GameRecordBseInfo_descriptor_;
  metadata.reflection = PB_GameRecordBseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_GameRecordRoleInfo::kRoleIdFieldNumber;
const int PB_GameRecordRoleInfo::kRoleSeatFieldNumber;
const int PB_GameRecordRoleInfo::kScoreFieldNumber;
const int PB_GameRecordRoleInfo::kHandCardFieldNumber;
#endif  // !_MSC_VER

PB_GameRecordRoleInfo::PB_GameRecordRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_GameRecordRoleInfo)
}

void PB_GameRecordRoleInfo::InitAsDefaultInstance() {
}

PB_GameRecordRoleInfo::PB_GameRecordRoleInfo(const PB_GameRecordRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_GameRecordRoleInfo)
}

void PB_GameRecordRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_seat_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_GameRecordRoleInfo::~PB_GameRecordRoleInfo() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_GameRecordRoleInfo)
  SharedDtor();
}

void PB_GameRecordRoleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_GameRecordRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_GameRecordRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_GameRecordRoleInfo_descriptor_;
}

const PB_GameRecordRoleInfo& PB_GameRecordRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_GameRecordRoleInfo* PB_GameRecordRoleInfo::default_instance_ = NULL;

PB_GameRecordRoleInfo* PB_GameRecordRoleInfo::New() const {
  return new PB_GameRecordRoleInfo;
}

void PB_GameRecordRoleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_GameRecordRoleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hand_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_GameRecordRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_GameRecordRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_seat;
        break;
      }

      // optional uint32 role_seat = 2;
      case 2: {
        if (tag == 16) {
         parse_role_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_seat_)));
          set_has_role_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int64 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_hand_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_GameRecordRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_GameRecordRoleInfo)
  return false;
#undef DO_
}

void PB_GameRecordRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_GameRecordRoleInfo)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 role_seat = 2;
  if (has_role_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_seat(), output);
  }

  // optional int64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // repeated uint32 hand_card = 4;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->hand_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_GameRecordRoleInfo)
}

::google::protobuf::uint8* PB_GameRecordRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_GameRecordRoleInfo)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 role_seat = 2;
  if (has_role_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_seat(), target);
  }

  // optional int64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // repeated uint32 hand_card = 4;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->hand_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_GameRecordRoleInfo)
  return target;
}

int PB_GameRecordRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 role_seat = 2;
    if (has_role_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_seat());
    }

    // optional int64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  // repeated uint32 hand_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_GameRecordRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_GameRecordRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_GameRecordRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_GameRecordRoleInfo::MergeFrom(const PB_GameRecordRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_card_.MergeFrom(from.hand_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_seat()) {
      set_role_seat(from.role_seat());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_GameRecordRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_GameRecordRoleInfo::CopyFrom(const PB_GameRecordRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_GameRecordRoleInfo::IsInitialized() const {

  return true;
}

void PB_GameRecordRoleInfo::Swap(PB_GameRecordRoleInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_seat_, other->role_seat_);
    std::swap(score_, other->score_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_GameRecordRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_GameRecordRoleInfo_descriptor_;
  metadata.reflection = PB_GameRecordRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_GameRecordShowDown::kRoleIdFieldNumber;
const int PB_GameRecordShowDown::kScoreFieldNumber;
#endif  // !_MSC_VER

PB_GameRecordShowDown::PB_GameRecordShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_GameRecordShowDown)
}

void PB_GameRecordShowDown::InitAsDefaultInstance() {
}

PB_GameRecordShowDown::PB_GameRecordShowDown(const PB_GameRecordShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_GameRecordShowDown)
}

void PB_GameRecordShowDown::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_GameRecordShowDown::~PB_GameRecordShowDown() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_GameRecordShowDown)
  SharedDtor();
}

void PB_GameRecordShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_GameRecordShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_GameRecordShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_GameRecordShowDown_descriptor_;
}

const PB_GameRecordShowDown& PB_GameRecordShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_GameRecordShowDown* PB_GameRecordShowDown::default_instance_ = NULL;

PB_GameRecordShowDown* PB_GameRecordShowDown::New() const {
  return new PB_GameRecordShowDown;
}

void PB_GameRecordShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_GameRecordShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, role_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_GameRecordShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_GameRecordShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_GameRecordShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_GameRecordShowDown)
  return false;
#undef DO_
}

void PB_GameRecordShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_GameRecordShowDown)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_GameRecordShowDown)
}

::google::protobuf::uint8* PB_GameRecordShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_GameRecordShowDown)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_GameRecordShowDown)
  return target;
}

int PB_GameRecordShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_GameRecordShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_GameRecordShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_GameRecordShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_GameRecordShowDown::MergeFrom(const PB_GameRecordShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_GameRecordShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_GameRecordShowDown::CopyFrom(const PB_GameRecordShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_GameRecordShowDown::IsInitialized() const {

  return true;
}

void PB_GameRecordShowDown::Swap(PB_GameRecordShowDown* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_GameRecordShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_GameRecordShowDown_descriptor_;
  metadata.reflection = PB_GameRecordShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_GameRecordNode::kCmdIdFieldNumber;
const int PB_GameRecordNode::kCardValueFieldNumber;
const int PB_GameRecordNode::kCardIndexFieldNumber;
const int PB_GameRecordNode::kRoleIdFieldNumber;
const int PB_GameRecordNode::kActionWikFieldNumber;
const int PB_GameRecordNode::kParam1FieldNumber;
const int PB_GameRecordNode::kParam2FieldNumber;
const int PB_GameRecordNode::kParam3FieldNumber;
const int PB_GameRecordNode::kRoleInfoFieldNumber;
const int PB_GameRecordNode::kRoomInfoFieldNumber;
const int PB_GameRecordNode::kShowdownInfoFieldNumber;
const int PB_GameRecordNode::kNextNodeFieldNumber;
#endif  // !_MSC_VER

PB_GameRecordNode::PB_GameRecordNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_GameRecordNode)
}

void PB_GameRecordNode::InitAsDefaultInstance() {
  role_info_ = const_cast< ::PROTOBUF::PB_GameRecordRoleInfo*>(&::PROTOBUF::PB_GameRecordRoleInfo::default_instance());
  room_info_ = const_cast< ::PROTOBUF::PB_CreateRoom*>(&::PROTOBUF::PB_CreateRoom::default_instance());
  showdown_info_ = const_cast< ::PROTOBUF::PB_GameRecordShowDown*>(&::PROTOBUF::PB_GameRecordShowDown::default_instance());
  next_node_ = const_cast< ::PROTOBUF::PB_GameRecordNode*>(&::PROTOBUF::PB_GameRecordNode::default_instance());
}

PB_GameRecordNode::PB_GameRecordNode(const PB_GameRecordNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_GameRecordNode)
}

void PB_GameRecordNode::SharedCtor() {
  _cached_size_ = 0;
  cmd_id_ = 0u;
  card_index_ = 0u;
  role_id_ = 0u;
  action_wik_ = 0u;
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  role_info_ = NULL;
  room_info_ = NULL;
  showdown_info_ = NULL;
  next_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_GameRecordNode::~PB_GameRecordNode() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_GameRecordNode)
  SharedDtor();
}

void PB_GameRecordNode::SharedDtor() {
  if (this != default_instance_) {
    delete role_info_;
    delete room_info_;
    delete showdown_info_;
    delete next_node_;
  }
}

void PB_GameRecordNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_GameRecordNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_GameRecordNode_descriptor_;
}

const PB_GameRecordNode& PB_GameRecordNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5froom_2eproto();
  return *default_instance_;
}

PB_GameRecordNode* PB_GameRecordNode::default_instance_ = NULL;

PB_GameRecordNode* PB_GameRecordNode::New() const {
  return new PB_GameRecordNode;
}

void PB_GameRecordNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_GameRecordNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(cmd_id_, param2_);
    param3_ = 0u;
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::PROTOBUF::PB_GameRecordRoleInfo::Clear();
    }
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::PROTOBUF::PB_CreateRoom::Clear();
    }
    if (has_showdown_info()) {
      if (showdown_info_ != NULL) showdown_info_->::PROTOBUF::PB_GameRecordShowDown::Clear();
    }
    if (has_next_node()) {
      if (next_node_ != NULL) next_node_->::PROTOBUF::PB_GameRecordNode::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_GameRecordNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_GameRecordNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_id_)));
          set_has_cmd_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card_value;
        break;
      }

      // repeated uint32 card_value = 2;
      case 2: {
        if (tag == 16) {
         parse_card_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_card_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card_value;
        if (input->ExpectTag(24)) goto parse_card_index;
        break;
      }

      // optional uint32 card_index = 3;
      case 3: {
        if (tag == 24) {
         parse_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_index_)));
          set_has_card_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 4;
      case 4: {
        if (tag == 32) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action_wik;
        break;
      }

      // optional uint32 action_wik = 5;
      case 5: {
        if (tag == 40) {
         parse_action_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_wik_)));
          set_has_action_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 6;
      case 6: {
        if (tag == 48) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 7;
      case 7: {
        if (tag == 56) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_param3;
        break;
      }

      // optional uint32 param3 = 8;
      case 8: {
        if (tag == 64) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_role_info;
        break;
      }

      // optional .PROTOBUF.PB_GameRecordRoleInfo role_info = 9;
      case 9: {
        if (tag == 74) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_room_info;
        break;
      }

      // optional .PROTOBUF.PB_CreateRoom room_info = 10;
      case 10: {
        if (tag == 82) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_showdown_info;
        break;
      }

      // optional .PROTOBUF.PB_GameRecordShowDown showdown_info = 11;
      case 11: {
        if (tag == 90) {
         parse_showdown_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showdown_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_next_node;
        break;
      }

      // optional .PROTOBUF.PB_GameRecordNode next_node = 12;
      case 12: {
        if (tag == 98) {
         parse_next_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_GameRecordNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_GameRecordNode)
  return false;
#undef DO_
}

void PB_GameRecordNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_GameRecordNode)
  // optional uint32 cmd_id = 1;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_id(), output);
  }

  // repeated uint32 card_value = 2;
  for (int i = 0; i < this->card_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->card_value(i), output);
  }

  // optional uint32 card_index = 3;
  if (has_card_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card_index(), output);
  }

  // optional uint32 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_id(), output);
  }

  // optional uint32 action_wik = 5;
  if (has_action_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->action_wik(), output);
  }

  // optional uint32 param1 = 6;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->param1(), output);
  }

  // optional uint32 param2 = 7;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->param2(), output);
  }

  // optional uint32 param3 = 8;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->param3(), output);
  }

  // optional .PROTOBUF.PB_GameRecordRoleInfo role_info = 9;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_info(), output);
  }

  // optional .PROTOBUF.PB_CreateRoom room_info = 10;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->room_info(), output);
  }

  // optional .PROTOBUF.PB_GameRecordShowDown showdown_info = 11;
  if (has_showdown_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->showdown_info(), output);
  }

  // optional .PROTOBUF.PB_GameRecordNode next_node = 12;
  if (has_next_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->next_node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_GameRecordNode)
}

::google::protobuf::uint8* PB_GameRecordNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_GameRecordNode)
  // optional uint32 cmd_id = 1;
  if (has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_id(), target);
  }

  // repeated uint32 card_value = 2;
  for (int i = 0; i < this->card_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->card_value(i), target);
  }

  // optional uint32 card_index = 3;
  if (has_card_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card_index(), target);
  }

  // optional uint32 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_id(), target);
  }

  // optional uint32 action_wik = 5;
  if (has_action_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->action_wik(), target);
  }

  // optional uint32 param1 = 6;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->param1(), target);
  }

  // optional uint32 param2 = 7;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->param2(), target);
  }

  // optional uint32 param3 = 8;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->param3(), target);
  }

  // optional .PROTOBUF.PB_GameRecordRoleInfo role_info = 9;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_info(), target);
  }

  // optional .PROTOBUF.PB_CreateRoom room_info = 10;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->room_info(), target);
  }

  // optional .PROTOBUF.PB_GameRecordShowDown showdown_info = 11;
  if (has_showdown_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->showdown_info(), target);
  }

  // optional .PROTOBUF.PB_GameRecordNode next_node = 12;
  if (has_next_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->next_node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_GameRecordNode)
  return target;
}

int PB_GameRecordNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd_id = 1;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_id());
    }

    // optional uint32 card_index = 3;
    if (has_card_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_index());
    }

    // optional uint32 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 action_wik = 5;
    if (has_action_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_wik());
    }

    // optional uint32 param1 = 6;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional uint32 param2 = 7;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

    // optional uint32 param3 = 8;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PROTOBUF.PB_GameRecordRoleInfo role_info = 9;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

    // optional .PROTOBUF.PB_CreateRoom room_info = 10;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

    // optional .PROTOBUF.PB_GameRecordShowDown showdown_info = 11;
    if (has_showdown_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showdown_info());
    }

    // optional .PROTOBUF.PB_GameRecordNode next_node = 12;
    if (has_next_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_node());
    }

  }
  // repeated uint32 card_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_value(i));
    }
    total_size += 1 * this->card_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_GameRecordNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_GameRecordNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_GameRecordNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_GameRecordNode::MergeFrom(const PB_GameRecordNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_value_.MergeFrom(from.card_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
    if (from.has_card_index()) {
      set_card_index(from.card_index());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_action_wik()) {
      set_action_wik(from.action_wik());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_info()) {
      mutable_role_info()->::PROTOBUF::PB_GameRecordRoleInfo::MergeFrom(from.role_info());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::PROTOBUF::PB_CreateRoom::MergeFrom(from.room_info());
    }
    if (from.has_showdown_info()) {
      mutable_showdown_info()->::PROTOBUF::PB_GameRecordShowDown::MergeFrom(from.showdown_info());
    }
    if (from.has_next_node()) {
      mutable_next_node()->::PROTOBUF::PB_GameRecordNode::MergeFrom(from.next_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_GameRecordNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_GameRecordNode::CopyFrom(const PB_GameRecordNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_GameRecordNode::IsInitialized() const {

  return true;
}

void PB_GameRecordNode::Swap(PB_GameRecordNode* other) {
  if (other != this) {
    std::swap(cmd_id_, other->cmd_id_);
    card_value_.Swap(&other->card_value_);
    std::swap(card_index_, other->card_index_);
    std::swap(role_id_, other->role_id_);
    std::swap(action_wik_, other->action_wik_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(role_info_, other->role_info_);
    std::swap(room_info_, other->room_info_);
    std::swap(showdown_info_, other->showdown_info_);
    std::swap(next_node_, other->next_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_GameRecordNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_GameRecordNode_descriptor_;
  metadata.reflection = PB_GameRecordNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PROTOBUF

// @@protoc_insertion_point(global_scope)
