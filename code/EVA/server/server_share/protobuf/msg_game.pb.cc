// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PROTOBUF {

namespace {

const ::google::protobuf::Descriptor* PB_CreateGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_CreateGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_LeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_LeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UserOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UserOffline_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_UserOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_UserOnline_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fgame_2eproto() {
  protobuf_AddDesc_msg_5fgame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_game.proto");
  GOOGLE_CHECK(file != NULL);
  PB_CreateGame_descriptor_ = file->message_type(0);
  static const int PB_CreateGame_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, special_kind_),
  };
  PB_CreateGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_CreateGame_descriptor_,
      PB_CreateGame::default_instance_,
      PB_CreateGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_CreateGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_CreateGame));
  PB_LeaveGame_descriptor_ = file->message_type(1);
  static const int PB_LeaveGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LeaveGame, role_id_),
  };
  PB_LeaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_LeaveGame_descriptor_,
      PB_LeaveGame::default_instance_,
      PB_LeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LeaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_LeaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_LeaveGame));
  PB_UserOffline_descriptor_ = file->message_type(2);
  static const int PB_UserOffline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOffline, role_id_),
  };
  PB_UserOffline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UserOffline_descriptor_,
      PB_UserOffline::default_instance_,
      PB_UserOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOffline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOffline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UserOffline));
  PB_UserOnline_descriptor_ = file->message_type(3);
  static const int PB_UserOnline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOnline, role_id_),
  };
  PB_UserOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_UserOnline_descriptor_,
      PB_UserOnline::default_instance_,
      PB_UserOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_UserOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_UserOnline));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fgame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_CreateGame_descriptor_, &PB_CreateGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_LeaveGame_descriptor_, &PB_LeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UserOffline_descriptor_, &PB_UserOffline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_UserOnline_descriptor_, &PB_UserOnline::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fgame_2eproto() {
  delete PB_CreateGame::default_instance_;
  delete PB_CreateGame_reflection_;
  delete PB_LeaveGame::default_instance_;
  delete PB_LeaveGame_reflection_;
  delete PB_UserOffline::default_instance_;
  delete PB_UserOffline_reflection_;
  delete PB_UserOnline::default_instance_;
  delete PB_UserOnline_reflection_;
}

void protobuf_AddDesc_msg_5fgame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016msg_game.proto\022\010PROTOBUF\"\204\001\n\rPB_Create"
    "Game\022\021\n\tgame_name\030\001 \001(\t\022\021\n\tgame_mode\030\002 \001"
    "(\r\022\022\n\nconsume_id\030\003 \001(\r\022\017\n\007game_id\030\004 \001(\r\022"
    "\022\n\nservice_id\030\005 \001(\r\022\024\n\014special_kind\030\006 \001("
    "\r\"\037\n\014PB_LeaveGame\022\017\n\007role_id\030\001 \001(\r\"!\n\016PB"
    "_UserOffline\022\017\n\007role_id\030\001 \001(\r\" \n\rPB_User"
    "Online\022\017\n\007role_id\030\001 \001(\r", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_game.proto", &protobuf_RegisterTypes);
  PB_CreateGame::default_instance_ = new PB_CreateGame();
  PB_LeaveGame::default_instance_ = new PB_LeaveGame();
  PB_UserOffline::default_instance_ = new PB_UserOffline();
  PB_UserOnline::default_instance_ = new PB_UserOnline();
  PB_CreateGame::default_instance_->InitAsDefaultInstance();
  PB_LeaveGame::default_instance_->InitAsDefaultInstance();
  PB_UserOffline::default_instance_->InitAsDefaultInstance();
  PB_UserOnline::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fgame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fgame_2eproto {
  StaticDescriptorInitializer_msg_5fgame_2eproto() {
    protobuf_AddDesc_msg_5fgame_2eproto();
  }
} static_descriptor_initializer_msg_5fgame_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PB_CreateGame::kGameNameFieldNumber;
const int PB_CreateGame::kGameModeFieldNumber;
const int PB_CreateGame::kConsumeIdFieldNumber;
const int PB_CreateGame::kGameIdFieldNumber;
const int PB_CreateGame::kServiceIdFieldNumber;
const int PB_CreateGame::kSpecialKindFieldNumber;
#endif  // !_MSC_VER

PB_CreateGame::PB_CreateGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_CreateGame)
}

void PB_CreateGame::InitAsDefaultInstance() {
}

PB_CreateGame::PB_CreateGame(const PB_CreateGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_CreateGame)
}

void PB_CreateGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_ = 0u;
  consume_id_ = 0u;
  game_id_ = 0u;
  service_id_ = 0u;
  special_kind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_CreateGame::~PB_CreateGame() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_CreateGame)
  SharedDtor();
}

void PB_CreateGame::SharedDtor() {
  if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_name_;
  }
  if (this != default_instance_) {
  }
}

void PB_CreateGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_CreateGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_CreateGame_descriptor_;
}

const PB_CreateGame& PB_CreateGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_2eproto();
  return *default_instance_;
}

PB_CreateGame* PB_CreateGame::default_instance_ = NULL;

PB_CreateGame* PB_CreateGame::New() const {
  return new PB_CreateGame;
}

void PB_CreateGame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PB_CreateGame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(game_mode_, special_kind_);
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_CreateGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_CreateGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_mode;
        break;
      }

      // optional uint32 game_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consume_id;
        break;
      }

      // optional uint32 consume_id = 3;
      case 3: {
        if (tag == 24) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 4;
      case 4: {
        if (tag == 32) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 5;
      case 5: {
        if (tag == 40) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_special_kind;
        break;
      }

      // optional uint32 special_kind = 6;
      case 6: {
        if (tag == 48) {
         parse_special_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_kind_)));
          set_has_special_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_CreateGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_CreateGame)
  return false;
#undef DO_
}

void PB_CreateGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_CreateGame)
  // optional string game_name = 1;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_name(), output);
  }

  // optional uint32 game_mode = 2;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_mode(), output);
  }

  // optional uint32 consume_id = 3;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->consume_id(), output);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_id(), output);
  }

  // optional uint32 service_id = 5;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->service_id(), output);
  }

  // optional uint32 special_kind = 6;
  if (has_special_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->special_kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_CreateGame)
}

::google::protobuf::uint8* PB_CreateGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_CreateGame)
  // optional string game_name = 1;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_name(), target);
  }

  // optional uint32 game_mode = 2;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_mode(), target);
  }

  // optional uint32 consume_id = 3;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->consume_id(), target);
  }

  // optional uint32 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_id(), target);
  }

  // optional uint32 service_id = 5;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->service_id(), target);
  }

  // optional uint32 special_kind = 6;
  if (has_special_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->special_kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_CreateGame)
  return target;
}

int PB_CreateGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string game_name = 1;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional uint32 game_mode = 2;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 consume_id = 3;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // optional uint32 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 service_id = 5;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 special_kind = 6;
    if (has_special_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_CreateGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_CreateGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_CreateGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_CreateGame::MergeFrom(const PB_CreateGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_special_kind()) {
      set_special_kind(from.special_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_CreateGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_CreateGame::CopyFrom(const PB_CreateGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_CreateGame::IsInitialized() const {

  return true;
}

void PB_CreateGame::Swap(PB_CreateGame* other) {
  if (other != this) {
    std::swap(game_name_, other->game_name_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(consume_id_, other->consume_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(service_id_, other->service_id_);
    std::swap(special_kind_, other->special_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_CreateGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_CreateGame_descriptor_;
  metadata.reflection = PB_CreateGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_LeaveGame::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PB_LeaveGame::PB_LeaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_LeaveGame)
}

void PB_LeaveGame::InitAsDefaultInstance() {
}

PB_LeaveGame::PB_LeaveGame(const PB_LeaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_LeaveGame)
}

void PB_LeaveGame::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_LeaveGame::~PB_LeaveGame() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_LeaveGame)
  SharedDtor();
}

void PB_LeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_LeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_LeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_LeaveGame_descriptor_;
}

const PB_LeaveGame& PB_LeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_2eproto();
  return *default_instance_;
}

PB_LeaveGame* PB_LeaveGame::default_instance_ = NULL;

PB_LeaveGame* PB_LeaveGame::New() const {
  return new PB_LeaveGame;
}

void PB_LeaveGame::Clear() {
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_LeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_LeaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_LeaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_LeaveGame)
  return false;
#undef DO_
}

void PB_LeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_LeaveGame)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_LeaveGame)
}

::google::protobuf::uint8* PB_LeaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_LeaveGame)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_LeaveGame)
  return target;
}

int PB_LeaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_LeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_LeaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_LeaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_LeaveGame::MergeFrom(const PB_LeaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_LeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_LeaveGame::CopyFrom(const PB_LeaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_LeaveGame::IsInitialized() const {

  return true;
}

void PB_LeaveGame::Swap(PB_LeaveGame* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_LeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_LeaveGame_descriptor_;
  metadata.reflection = PB_LeaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UserOffline::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PB_UserOffline::PB_UserOffline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_UserOffline)
}

void PB_UserOffline::InitAsDefaultInstance() {
}

PB_UserOffline::PB_UserOffline(const PB_UserOffline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_UserOffline)
}

void PB_UserOffline::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UserOffline::~PB_UserOffline() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_UserOffline)
  SharedDtor();
}

void PB_UserOffline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UserOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UserOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UserOffline_descriptor_;
}

const PB_UserOffline& PB_UserOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_2eproto();
  return *default_instance_;
}

PB_UserOffline* PB_UserOffline::default_instance_ = NULL;

PB_UserOffline* PB_UserOffline::New() const {
  return new PB_UserOffline;
}

void PB_UserOffline::Clear() {
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UserOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_UserOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_UserOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_UserOffline)
  return false;
#undef DO_
}

void PB_UserOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_UserOffline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_UserOffline)
}

::google::protobuf::uint8* PB_UserOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_UserOffline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_UserOffline)
  return target;
}

int PB_UserOffline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UserOffline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UserOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UserOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UserOffline::MergeFrom(const PB_UserOffline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UserOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UserOffline::CopyFrom(const PB_UserOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UserOffline::IsInitialized() const {

  return true;
}

void PB_UserOffline::Swap(PB_UserOffline* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UserOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UserOffline_descriptor_;
  metadata.reflection = PB_UserOffline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_UserOnline::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PB_UserOnline::PB_UserOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PROTOBUF.PB_UserOnline)
}

void PB_UserOnline::InitAsDefaultInstance() {
}

PB_UserOnline::PB_UserOnline(const PB_UserOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PROTOBUF.PB_UserOnline)
}

void PB_UserOnline::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_UserOnline::~PB_UserOnline() {
  // @@protoc_insertion_point(destructor:PROTOBUF.PB_UserOnline)
  SharedDtor();
}

void PB_UserOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_UserOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_UserOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_UserOnline_descriptor_;
}

const PB_UserOnline& PB_UserOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_2eproto();
  return *default_instance_;
}

PB_UserOnline* PB_UserOnline::default_instance_ = NULL;

PB_UserOnline* PB_UserOnline::New() const {
  return new PB_UserOnline;
}

void PB_UserOnline::Clear() {
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_UserOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PROTOBUF.PB_UserOnline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PROTOBUF.PB_UserOnline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PROTOBUF.PB_UserOnline)
  return false;
#undef DO_
}

void PB_UserOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PROTOBUF.PB_UserOnline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PROTOBUF.PB_UserOnline)
}

::google::protobuf::uint8* PB_UserOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOBUF.PB_UserOnline)
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOBUF.PB_UserOnline)
  return target;
}

int PB_UserOnline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_UserOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_UserOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_UserOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_UserOnline::MergeFrom(const PB_UserOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_UserOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_UserOnline::CopyFrom(const PB_UserOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_UserOnline::IsInitialized() const {

  return true;
}

void PB_UserOnline::Swap(PB_UserOnline* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_UserOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_UserOnline_descriptor_;
  metadata.reflection = PB_UserOnline_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PROTOBUF

// @@protoc_insertion_point(global_scope)
