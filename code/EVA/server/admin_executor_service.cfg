// ---- config local variables

// Used by ConfigFile in EGS and WS
ShardId = 301; 

UpdateTimeout = 20;

// Used to connect to AES (this file) and to set up AES service (admin_executor_service.cfg)
AESPort="46702";
AESHost="127.0.0.1";
LSHost ="10.0.3.220";
DCSHost="10.0.3.220";

// ---- service NeL variables (used by ConfigFile class)

WindowStyle = "NONE";

// don't connect to the old NeLNS AES
DontUseAES = 1;

// by default, use localhost to find the naming service
NSHost = "localhost:49901";
NSPort = 49901;

// A list of vars to graph for any service
GraphVars +=
{
	"ProcessUsedMemory", "60000",	// every minute
};

// Set a mainland SessionId.
// Live: Must be 0 for ring shards, non-zero (usually ShardId) for mainland shards
// Dev: Can be non-zero to initially connect a client to a ring shard
NoWSShardId = ShardId;

// ---- service NeL variables (used by CVariable class)

// Disable generation / display of nldebug messages
DisableNLDebug = 0;

// Disable nel net verbose logging
VerboseNETTC = 1;
VerboseLNETL0 = 1;
VerboseLNETL1 = 1;
VerboseLNETL2 = 1;
VerboseLNETL3 = 1;
VerboseLNETL4 = 1;
VerboseLNETL5 = 1;
VerboseLNETL6 = 1;

// If the update loop is too slow, a thread will produce an assertion.
// By default, the value is set to 10 minutes.
// Set to 0 for no assertion.
UpdateAssertionThreadTimeout = 6000000;

// how to sleep between 2 network updates
// 0 = pipe
// 1 = usleep
// 2 = nanosleep
// 3 = sched_yield
// 4 = nothing
UseYieldMethod = 0;

DefaultMaxExpectedBlockSize = 200000000; // 200 M !
DefaultMaxSentBlockSize = 200000000; // 200 M !

// Will SaveFilesDirectory will be converted to a full path?
ConvertSaveFilesDirectoryToFullPath = 1;

// Where to save specific shard data (ie: player backup), relatively to SaveShardRoot
SaveFilesDirectory	= "";

// where to save generic shard data (ie: packed_sheet)
WriteFilesDirectory	= "data_shard";

// ---- service custom variables (used by ConfigFile class)

NegFiltersDebug    += { "NETL", "NET" };
NegFiltersInfo     += { "NETL" };
NegFiltersWarning  += { };

// where to send error reports
DefaultEmailSMTP = "smtp";
DefaultEmailFrom = "sanguo@0xcc.com";
DefaultEmailTo = "li9chuan@qq.com";

LogDirectory = "./log/";

Language = "en";


// I don't need a connection to a naming service
DontUseNS = 1;

// Address of the admin service (default port is 49996)
ASHost = "10.0.3.220";
ASPort="46701";

// ---- service NeL variables (used by ConfigFile class)

AESAliasName= "aes";

StartCommands=
{
	// Create a gateway module
	"moduleManager.createModule StandardGateway gw",
	// add a layer 5 transport
	"gw.transportAdd L5Transport l5",
	// open the transport
	"gw.transportCmd l5(open)",

	/// Create default connection with admin executor service
	// Create a gateway module
	"moduleManager.createModule StandardGateway gw_aes",
	// create the admin executor service module
	"moduleManager.createModule AdminExecutorServiceClient aes_client",
	"aes_client.plug gw_aes",

	// create a layer 3 client to connect to aes gateway
	"gw_aes.transportAdd L3Client aes_l3c",
	"gw_aes.transportCmd aes_l3c(connect addr="+AESHost+":"+AESPort+")",

	// create the admin executor service module
	"moduleManager.createModule AdminExecutorService aes",

	// create a gateway to connect to as
	"moduleManager.createModule StandardGateway asc_gw",
	// create a layer 3 client
	"asc_gw.transportAdd L3Client l3c",
	"asc_gw.transportCmd l3c(connect addr="+ASHost+":"+ASPort+")",

	// create a gateway for services to connect
	"moduleManager.createModule StandardGateway aes_gw",
	// create a layer 3 server
	"aes_gw.transportAdd L3Server l3s",
	"aes_gw.transportOptions l3s(PeerInvisible)",
	"aes_gw.transportCmd l3s(open port="+AESPort+")",

	// plug the as
	"aes.plug asc_gw",
	"aes.plug aes_gw",
};

StartCommands +=
{
//	"aes.addRegisteredService ras Amazone",
//	"aes.addRegisteredService aes Amazone",
	"aes.addRegisteredService rns Amazone",
	"aes.addRegisteredService rnk Amazone",
	"aes.addRegisteredService pds Amazone",
	"aes.addRegisteredService egs Amazone",
	"aes.addRegisteredService fes_0 Amazone",
	"aes.addRegisteredService lgc_0 Amazone",
	"aes.addRegisteredService mail Amazone",
	"aes.addRegisteredService lgs Amazone",
};

///  server_daemon command
ras = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/admin_service.exe", "--fulladminname=admin_service --shortadminname=AS -C. -L. --nobreak --writepid" };
aes = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/admin_service.exe", "--fulladminname=admin_executor_service --shortadminname=AES -C. -L. --nobreak --writepid" };
rns = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/naming_service.exe", "-C. -L. --nobreak --writepid" };
pds = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/persistant_data_service.exe", "-C. -L. --nobreak --writepid" };
egs = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/entities_game_service.exe", "-C. -L. --nobreak --writepid" };
fes_0 = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/frontend_service.exe", "-C. -L. --nobreak --writepid" };
lgc_0 = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/player_logic_service.exe", "-C. -L. --nobreak --writepid" };
mail = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/mail_service.exe", "-C. -L. --nobreak --writepid" };
lgs = { "D:/MT/trunk/code/EVA/server/", "D:/MT/trunk/build/bin/Debug/loger_service.exe", "-C. -L. --nobreak --writepid" };

///  for server_daemon
RegisteredServices=
{
//	"ras",
//	"aes",
	"rns",
	"rnk",
	"pds",
	"egs",
	"fes_0",
	"lgc_0",
	"mail",
	"lgs",
};

//
DontUseStdIn = 0;

// ---- service NeL variables (used by CVariable class)

// If the update loop is too slow, a thread will produce an assertion.
// By default, the value is set to 10 minutes.
// Set to 0 for no assertion.
UpdateAssertionThreadTimeout = 0;

// ---- service custom variables (used by CVariable class)

// in second, -1 for not restarting
RestartDelay = 60;

// how many second before aborting the request if not finished
RequestTimeout = 5;

// log path for advanced log report
LogPath = "/.";

// setup for deployment environment with exeternal configuration system responsible for launching apps and
// for configuring AES services
DontLaunchServicesDirectly = 1;
UseExplicitAESRegistration = 1;
KillServicesOnDisconnect = 1;

ShardName="dev";
