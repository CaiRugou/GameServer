// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_slots.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_slots.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgCollectSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCollectSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsMachine_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCollectReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCollectReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsPull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsPull_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsWheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsWheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgWheelAttrib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgWheelAttrib_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBonusGameRandomResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBonusGameRandomResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBonusGameSelectResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBonusGameSelectResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSlotsRoomFeatureCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSlotsRoomFeatureCollect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fslots_2eproto() {
  protobuf_AddDesc_msg_5fslots_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_slots.proto");
  GOOGLE_CHECK(file != NULL);
  MsgCollectSymbol_descriptor_ = file->message_type(0);
  static const int MsgCollectSymbol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectSymbol, symbol_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectSymbol, need_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectSymbol, curr_num_),
  };
  MsgCollectSymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCollectSymbol_descriptor_,
      MsgCollectSymbol::default_instance_,
      MsgCollectSymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectSymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectSymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCollectSymbol));
  MsgSlotsMachine_descriptor_ = file->message_type(1);
  static const int MsgSlotsMachine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsMachine, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsMachine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsMachine, curr_collect_id_),
  };
  MsgSlotsMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsMachine_descriptor_,
      MsgSlotsMachine::default_instance_,
      MsgSlotsMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsMachine));
  MsgCollectReward_descriptor_ = file->message_type(2);
  static const int MsgCollectReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectReward, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectReward, collect_win_),
  };
  MsgCollectReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCollectReward_descriptor_,
      MsgCollectReward::default_instance_,
      MsgCollectReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollectReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCollectReward));
  MsgSlotsCollect_descriptor_ = file->message_type(3);
  static const int MsgSlotsCollect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsCollect, collect_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsCollect, collect_symbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsCollect, curr_collect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsCollect, player_id_),
  };
  MsgSlotsCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsCollect_descriptor_,
      MsgSlotsCollect::default_instance_,
      MsgSlotsCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsCollect));
  MsgSlotsPlayerInfo_descriptor_ = file->message_type(4);
  static const int MsgSlotsPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsPlayerInfo, player_base_),
  };
  MsgSlotsPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsPlayerInfo_descriptor_,
      MsgSlotsPlayerInfo::default_instance_,
      MsgSlotsPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsPlayerInfo));
  MsgSlotsRoomInfo_descriptor_ = file->message_type(5);
  static const int MsgSlotsRoomInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, slots_machines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, room_collect_info_),
  };
  MsgSlotsRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsRoomInfo_descriptor_,
      MsgSlotsRoomInfo::default_instance_,
      MsgSlotsRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsRoomInfo));
  MsgSlotsPull_descriptor_ = file->message_type(6);
  static const int MsgSlotsPull_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsPull, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsPull, lines_),
  };
  MsgSlotsPull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsPull_descriptor_,
      MsgSlotsPull::default_instance_,
      MsgSlotsPull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsPull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsPull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsPull));
  MsgSlotsWheel_descriptor_ = file->message_type(7);
  static const int MsgSlotsWheel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsWheel, icons_),
  };
  MsgSlotsWheel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsWheel_descriptor_,
      MsgSlotsWheel::default_instance_,
      MsgSlotsWheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsWheel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsWheel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsWheel));
  MsgWheelAttrib_descriptor_ = file->message_type(8);
  static const int MsgWheelAttrib_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWheelAttrib, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWheelAttrib, s_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWheelAttrib, s_dec_),
  };
  MsgWheelAttrib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgWheelAttrib_descriptor_,
      MsgWheelAttrib::default_instance_,
      MsgWheelAttrib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWheelAttrib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWheelAttrib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgWheelAttrib));
  MsgSlotsResult_descriptor_ = file->message_type(9);
  static const int MsgSlotsResult_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, total_coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, win_coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, win_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, free_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, wheels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, wheel_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, bonus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, bonus_icon_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, win_free_spins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, win_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, random_wilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, fill_all_wilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, splas_wilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, s_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, collect_score_),
  };
  MsgSlotsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsResult_descriptor_,
      MsgSlotsResult::default_instance_,
      MsgSlotsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsResult));
  MsgBonusGameRandomResult_descriptor_ = file->message_type(10);
  static const int MsgBonusGameRandomResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameRandomResult, rnd_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameRandomResult, win_credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameRandomResult, win_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameRandomResult, win_free_spins_),
  };
  MsgBonusGameRandomResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBonusGameRandomResult_descriptor_,
      MsgBonusGameRandomResult::default_instance_,
      MsgBonusGameRandomResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameRandomResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameRandomResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBonusGameRandomResult));
  MsgBonusGameSelectResult_descriptor_ = file->message_type(11);
  static const int MsgBonusGameSelectResult_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, is_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, select_surplus_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, curr_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, win_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, random_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, free_spins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, win_free_spins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, surplus_randoms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, surplus_select_count_),
  };
  MsgBonusGameSelectResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBonusGameSelectResult_descriptor_,
      MsgBonusGameSelectResult::default_instance_,
      MsgBonusGameSelectResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBonusGameSelectResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBonusGameSelectResult));
  MsgSlotsRoomFeatureCollect_descriptor_ = file->message_type(12);
  static const int MsgSlotsRoomFeatureCollect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomFeatureCollect, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomFeatureCollect, collect_mission_),
  };
  MsgSlotsRoomFeatureCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSlotsRoomFeatureCollect_descriptor_,
      MsgSlotsRoomFeatureCollect::default_instance_,
      MsgSlotsRoomFeatureCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomFeatureCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSlotsRoomFeatureCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSlotsRoomFeatureCollect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fslots_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCollectSymbol_descriptor_, &MsgCollectSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsMachine_descriptor_, &MsgSlotsMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCollectReward_descriptor_, &MsgCollectReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsCollect_descriptor_, &MsgSlotsCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsPlayerInfo_descriptor_, &MsgSlotsPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsRoomInfo_descriptor_, &MsgSlotsRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsPull_descriptor_, &MsgSlotsPull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsWheel_descriptor_, &MsgSlotsWheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgWheelAttrib_descriptor_, &MsgWheelAttrib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsResult_descriptor_, &MsgSlotsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBonusGameRandomResult_descriptor_, &MsgBonusGameRandomResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBonusGameSelectResult_descriptor_, &MsgBonusGameSelectResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSlotsRoomFeatureCollect_descriptor_, &MsgSlotsRoomFeatureCollect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fslots_2eproto() {
  delete MsgCollectSymbol::default_instance_;
  delete MsgCollectSymbol_reflection_;
  delete MsgSlotsMachine::default_instance_;
  delete MsgSlotsMachine_reflection_;
  delete MsgCollectReward::default_instance_;
  delete MsgCollectReward_reflection_;
  delete MsgSlotsCollect::default_instance_;
  delete MsgSlotsCollect_reflection_;
  delete MsgSlotsPlayerInfo::default_instance_;
  delete MsgSlotsPlayerInfo_reflection_;
  delete MsgSlotsRoomInfo::default_instance_;
  delete MsgSlotsRoomInfo_reflection_;
  delete MsgSlotsPull::default_instance_;
  delete MsgSlotsPull_reflection_;
  delete MsgSlotsWheel::default_instance_;
  delete MsgSlotsWheel_reflection_;
  delete MsgWheelAttrib::default_instance_;
  delete MsgWheelAttrib_reflection_;
  delete MsgSlotsResult::default_instance_;
  delete MsgSlotsResult_reflection_;
  delete MsgBonusGameRandomResult::default_instance_;
  delete MsgBonusGameRandomResult_reflection_;
  delete MsgBonusGameSelectResult::default_instance_;
  delete MsgBonusGameSelectResult_reflection_;
  delete MsgSlotsRoomFeatureCollect::default_instance_;
  delete MsgSlotsRoomFeatureCollect_reflection_;
}

void protobuf_AddDesc_msg_5fslots_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::protobuf_AddDesc_define_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017msg_slots.proto\032\020public_pro.proto\032\020def"
    "ine_pro.proto\"I\n\020MsgCollectSymbol\022\021\n\tsym"
    "bol_id\030\001 \001(\r\022\020\n\010need_num\030\002 \001(\r\022\020\n\010curr_n"
    "um\030\003 \001(\r\"L\n\017MsgSlotsMachine\022\022\n\nmachine_i"
    "d\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\027\n\017curr_collect_id"
    "\030\003 \001(\r\"4\n\020MsgCollectReward\022\013\n\003pid\030\001 \001(\004\022"
    "\023\n\013collect_win\030\002 \001(\004\"\221\001\n\017MsgSlotsCollect"
    "\022&\n\013collect_win\030\001 \003(\0132\021.MsgCollectReward"
    "\022*\n\017collect_symbols\030\002 \003(\0132\021.MsgCollectSy"
    "mbol\022\027\n\017curr_collect_id\030\003 \001(\r\022\021\n\tplayer_"
    "id\030\004 \001(\004\"9\n\022MsgSlotsPlayerInfo\022#\n\013player"
    "_base\030\001 \001(\0132\016.MsgPlayerInfo\"\330\001\n\020MsgSlots"
    "RoomInfo\022(\n\013player_list\030\001 \003(\0132\023.MsgSlots"
    "PlayerInfo\022\r\n\005seats\030\002 \003(\004\022(\n\016slots_machi"
    "nes\030\003 \003(\0132\020.MsgSlotsMachine\022\017\n\007room_id\030\004"
    " \001(\004\022#\n\troom_info\030\005 \001(\0132\020.MsgBaseRoomInf"
    "o\022+\n\021room_collect_info\030\006 \003(\0132\020.MsgSlotsC"
    "ollect\"*\n\014MsgSlotsPull\022\013\n\003bet\030\001 \001(\004\022\r\n\005l"
    "ines\030\002 \001(\r\"\036\n\rMsgSlotsWheel\022\r\n\005icons\030\001 \003"
    "(\r\";\n\016MsgWheelAttrib\022\013\n\003idx\030\001 \001(\r\022\r\n\005s_s"
    "rc\030\002 \001(\r\022\r\n\005s_dec\030\003 \001(\r\"\217\003\n\016MsgSlotsResu"
    "lt\022\013\n\003pid\030\001 \001(\004\022\023\n\013total_coins\030\002 \001(\004\022\021\n\t"
    "win_coins\030\003 \001(\004\022\017\n\007win_bet\030\004 \001(\r\022\022\n\nfree"
    "_count\030\005 \001(\r\022\036\n\006wheels\030\006 \003(\0132\016.MsgSlotsW"
    "heel\022\021\n\twheel_idx\030\007 \003(\r\022\022\n\nbonus_name\030\010 "
    "\001(\t\022\026\n\016bonus_icon_num\030\t \001(\021\022\026\n\016win_free_"
    "spins\030\n \001(\010\022#\n\010win_type\030\013 \001(\0162\021.EnumSlot"
    "sWinType\022 \n\014random_wilds\030\014 \003(\0132\n.MsgVect"
    "or\022\026\n\016fill_all_wilds\030\r \003(\r\022\023\n\013splas_wild"
    "s\030\016 \003(\r\022!\n\010s_change\030\017 \003(\0132\017.MsgWheelAttr"
    "ib\022\025\n\rcollect_score\030\020 \001(\004\"q\n\030MsgBonusGam"
    "eRandomResult\022\020\n\010rnd_name\030\001 \001(\t\022\023\n\013win_c"
    "redits\030\002 \001(\021\022\026\n\016win_multiplier\030\003 \001(\021\022\026\n\016"
    "win_free_spins\030\004 \001(\021\"\324\002\n\030MsgBonusGameSel"
    "ectResult\022\016\n\006is_end\030\001 \001(\010\022\034\n\024select_surp"
    "lus_count\030\002 \001(\r\022\023\n\013total_money\030\003 \001(\004\022\022\n\n"
    "curr_money\030\004 \001(\004\022#\n\010win_type\030\005 \001(\0162\021.Enu"
    "mSlotsWinType\022\013\n\003pid\030\006 \001(\004\0221\n\016random_res"
    "ults\030\007 \003(\0132\031.MsgBonusGameRandomResult\022\022\n"
    "\nfree_spins\030\010 \001(\r\022\026\n\016win_free_spins\030\t \001("
    "\r\0222\n\017surplus_randoms\030\n \003(\0132\031.MsgBonusGam"
    "eRandomResult\022\034\n\024surplus_select_count\030\013 "
    "\001(\r\"Z\n\032MsgSlotsRoomFeatureCollect\022\021\n\troo"
    "m_type\030\001 \001(\t\022)\n\017collect_mission\030\002 \003(\0132\020."
    "MsgSlotsCollect", 1775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_slots.proto", &protobuf_RegisterTypes);
  MsgCollectSymbol::default_instance_ = new MsgCollectSymbol();
  MsgSlotsMachine::default_instance_ = new MsgSlotsMachine();
  MsgCollectReward::default_instance_ = new MsgCollectReward();
  MsgSlotsCollect::default_instance_ = new MsgSlotsCollect();
  MsgSlotsPlayerInfo::default_instance_ = new MsgSlotsPlayerInfo();
  MsgSlotsRoomInfo::default_instance_ = new MsgSlotsRoomInfo();
  MsgSlotsPull::default_instance_ = new MsgSlotsPull();
  MsgSlotsWheel::default_instance_ = new MsgSlotsWheel();
  MsgWheelAttrib::default_instance_ = new MsgWheelAttrib();
  MsgSlotsResult::default_instance_ = new MsgSlotsResult();
  MsgBonusGameRandomResult::default_instance_ = new MsgBonusGameRandomResult();
  MsgBonusGameSelectResult::default_instance_ = new MsgBonusGameSelectResult();
  MsgSlotsRoomFeatureCollect::default_instance_ = new MsgSlotsRoomFeatureCollect();
  MsgCollectSymbol::default_instance_->InitAsDefaultInstance();
  MsgSlotsMachine::default_instance_->InitAsDefaultInstance();
  MsgCollectReward::default_instance_->InitAsDefaultInstance();
  MsgSlotsCollect::default_instance_->InitAsDefaultInstance();
  MsgSlotsPlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgSlotsRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgSlotsPull::default_instance_->InitAsDefaultInstance();
  MsgSlotsWheel::default_instance_->InitAsDefaultInstance();
  MsgWheelAttrib::default_instance_->InitAsDefaultInstance();
  MsgSlotsResult::default_instance_->InitAsDefaultInstance();
  MsgBonusGameRandomResult::default_instance_->InitAsDefaultInstance();
  MsgBonusGameSelectResult::default_instance_->InitAsDefaultInstance();
  MsgSlotsRoomFeatureCollect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fslots_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fslots_2eproto {
  StaticDescriptorInitializer_msg_5fslots_2eproto() {
    protobuf_AddDesc_msg_5fslots_2eproto();
  }
} static_descriptor_initializer_msg_5fslots_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgCollectSymbol::kSymbolIdFieldNumber;
const int MsgCollectSymbol::kNeedNumFieldNumber;
const int MsgCollectSymbol::kCurrNumFieldNumber;
#endif  // !_MSC_VER

MsgCollectSymbol::MsgCollectSymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCollectSymbol)
}

void MsgCollectSymbol::InitAsDefaultInstance() {
}

MsgCollectSymbol::MsgCollectSymbol(const MsgCollectSymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCollectSymbol)
}

void MsgCollectSymbol::SharedCtor() {
  _cached_size_ = 0;
  symbol_id_ = 0u;
  need_num_ = 0u;
  curr_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCollectSymbol::~MsgCollectSymbol() {
  // @@protoc_insertion_point(destructor:MsgCollectSymbol)
  SharedDtor();
}

void MsgCollectSymbol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCollectSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCollectSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCollectSymbol_descriptor_;
}

const MsgCollectSymbol& MsgCollectSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgCollectSymbol* MsgCollectSymbol::default_instance_ = NULL;

MsgCollectSymbol* MsgCollectSymbol::New() const {
  return new MsgCollectSymbol;
}

void MsgCollectSymbol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCollectSymbol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(symbol_id_, curr_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCollectSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCollectSymbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 symbol_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbol_id_)));
          set_has_symbol_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_need_num;
        break;
      }

      // optional uint32 need_num = 2;
      case 2: {
        if (tag == 16) {
         parse_need_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_num_)));
          set_has_need_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_num;
        break;
      }

      // optional uint32 curr_num = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_num_)));
          set_has_curr_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCollectSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCollectSymbol)
  return false;
#undef DO_
}

void MsgCollectSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCollectSymbol)
  // optional uint32 symbol_id = 1;
  if (has_symbol_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbol_id(), output);
  }

  // optional uint32 need_num = 2;
  if (has_need_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->need_num(), output);
  }

  // optional uint32 curr_num = 3;
  if (has_curr_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curr_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCollectSymbol)
}

::google::protobuf::uint8* MsgCollectSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCollectSymbol)
  // optional uint32 symbol_id = 1;
  if (has_symbol_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbol_id(), target);
  }

  // optional uint32 need_num = 2;
  if (has_need_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->need_num(), target);
  }

  // optional uint32 curr_num = 3;
  if (has_curr_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curr_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCollectSymbol)
  return target;
}

int MsgCollectSymbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 symbol_id = 1;
    if (has_symbol_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbol_id());
    }

    // optional uint32 need_num = 2;
    if (has_need_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_num());
    }

    // optional uint32 curr_num = 3;
    if (has_curr_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCollectSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCollectSymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCollectSymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCollectSymbol::MergeFrom(const MsgCollectSymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol_id()) {
      set_symbol_id(from.symbol_id());
    }
    if (from.has_need_num()) {
      set_need_num(from.need_num());
    }
    if (from.has_curr_num()) {
      set_curr_num(from.curr_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCollectSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCollectSymbol::CopyFrom(const MsgCollectSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCollectSymbol::IsInitialized() const {

  return true;
}

void MsgCollectSymbol::Swap(MsgCollectSymbol* other) {
  if (other != this) {
    std::swap(symbol_id_, other->symbol_id_);
    std::swap(need_num_, other->need_num_);
    std::swap(curr_num_, other->curr_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCollectSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCollectSymbol_descriptor_;
  metadata.reflection = MsgCollectSymbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsMachine::kMachineIdFieldNumber;
const int MsgSlotsMachine::kNameFieldNumber;
const int MsgSlotsMachine::kCurrCollectIdFieldNumber;
#endif  // !_MSC_VER

MsgSlotsMachine::MsgSlotsMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsMachine)
}

void MsgSlotsMachine::InitAsDefaultInstance() {
}

MsgSlotsMachine::MsgSlotsMachine(const MsgSlotsMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsMachine)
}

void MsgSlotsMachine::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curr_collect_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsMachine::~MsgSlotsMachine() {
  // @@protoc_insertion_point(destructor:MsgSlotsMachine)
  SharedDtor();
}

void MsgSlotsMachine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgSlotsMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsMachine_descriptor_;
}

const MsgSlotsMachine& MsgSlotsMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsMachine* MsgSlotsMachine::default_instance_ = NULL;

MsgSlotsMachine* MsgSlotsMachine::New() const {
  return new MsgSlotsMachine;
}

void MsgSlotsMachine::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    machine_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    curr_collect_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsMachine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 machine_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &machine_id_)));
          set_has_machine_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_collect_id;
        break;
      }

      // optional uint32 curr_collect_id = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_collect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_collect_id_)));
          set_has_curr_collect_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsMachine)
  return false;
#undef DO_
}

void MsgSlotsMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsMachine)
  // optional uint64 machine_id = 1;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->machine_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 curr_collect_id = 3;
  if (has_curr_collect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curr_collect_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsMachine)
}

::google::protobuf::uint8* MsgSlotsMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsMachine)
  // optional uint64 machine_id = 1;
  if (has_machine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->machine_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 curr_collect_id = 3;
  if (has_curr_collect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curr_collect_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsMachine)
  return target;
}

int MsgSlotsMachine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 machine_id = 1;
    if (has_machine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->machine_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 curr_collect_id = 3;
    if (has_curr_collect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_collect_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsMachine::MergeFrom(const MsgSlotsMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_curr_collect_id()) {
      set_curr_collect_id(from.curr_collect_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsMachine::CopyFrom(const MsgSlotsMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsMachine::IsInitialized() const {

  return true;
}

void MsgSlotsMachine::Swap(MsgSlotsMachine* other) {
  if (other != this) {
    std::swap(machine_id_, other->machine_id_);
    std::swap(name_, other->name_);
    std::swap(curr_collect_id_, other->curr_collect_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsMachine_descriptor_;
  metadata.reflection = MsgSlotsMachine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCollectReward::kPidFieldNumber;
const int MsgCollectReward::kCollectWinFieldNumber;
#endif  // !_MSC_VER

MsgCollectReward::MsgCollectReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCollectReward)
}

void MsgCollectReward::InitAsDefaultInstance() {
}

MsgCollectReward::MsgCollectReward(const MsgCollectReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCollectReward)
}

void MsgCollectReward::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  collect_win_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCollectReward::~MsgCollectReward() {
  // @@protoc_insertion_point(destructor:MsgCollectReward)
  SharedDtor();
}

void MsgCollectReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCollectReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCollectReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCollectReward_descriptor_;
}

const MsgCollectReward& MsgCollectReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgCollectReward* MsgCollectReward::default_instance_ = NULL;

MsgCollectReward* MsgCollectReward::New() const {
  return new MsgCollectReward;
}

void MsgCollectReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCollectReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, collect_win_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCollectReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCollectReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collect_win;
        break;
      }

      // optional uint64 collect_win = 2;
      case 2: {
        if (tag == 16) {
         parse_collect_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collect_win_)));
          set_has_collect_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCollectReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCollectReward)
  return false;
#undef DO_
}

void MsgCollectReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCollectReward)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional uint64 collect_win = 2;
  if (has_collect_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->collect_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCollectReward)
}

::google::protobuf::uint8* MsgCollectReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCollectReward)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional uint64 collect_win = 2;
  if (has_collect_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->collect_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCollectReward)
  return target;
}

int MsgCollectReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint64 collect_win = 2;
    if (has_collect_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collect_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCollectReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCollectReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCollectReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCollectReward::MergeFrom(const MsgCollectReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_collect_win()) {
      set_collect_win(from.collect_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCollectReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCollectReward::CopyFrom(const MsgCollectReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCollectReward::IsInitialized() const {

  return true;
}

void MsgCollectReward::Swap(MsgCollectReward* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(collect_win_, other->collect_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCollectReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCollectReward_descriptor_;
  metadata.reflection = MsgCollectReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsCollect::kCollectWinFieldNumber;
const int MsgSlotsCollect::kCollectSymbolsFieldNumber;
const int MsgSlotsCollect::kCurrCollectIdFieldNumber;
const int MsgSlotsCollect::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

MsgSlotsCollect::MsgSlotsCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsCollect)
}

void MsgSlotsCollect::InitAsDefaultInstance() {
}

MsgSlotsCollect::MsgSlotsCollect(const MsgSlotsCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsCollect)
}

void MsgSlotsCollect::SharedCtor() {
  _cached_size_ = 0;
  curr_collect_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsCollect::~MsgSlotsCollect() {
  // @@protoc_insertion_point(destructor:MsgSlotsCollect)
  SharedDtor();
}

void MsgSlotsCollect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSlotsCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsCollect_descriptor_;
}

const MsgSlotsCollect& MsgSlotsCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsCollect* MsgSlotsCollect::default_instance_ = NULL;

MsgSlotsCollect* MsgSlotsCollect::New() const {
  return new MsgSlotsCollect;
}

void MsgSlotsCollect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSlotsCollect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, curr_collect_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  collect_win_.Clear();
  collect_symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsCollect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgCollectReward collect_win = 1;
      case 1: {
        if (tag == 10) {
         parse_collect_win:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collect_win()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_collect_win;
        if (input->ExpectTag(18)) goto parse_collect_symbols;
        break;
      }

      // repeated .MsgCollectSymbol collect_symbols = 2;
      case 2: {
        if (tag == 18) {
         parse_collect_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collect_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collect_symbols;
        if (input->ExpectTag(24)) goto parse_curr_collect_id;
        break;
      }

      // optional uint32 curr_collect_id = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_collect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_collect_id_)));
          set_has_curr_collect_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 4;
      case 4: {
        if (tag == 32) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsCollect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsCollect)
  return false;
#undef DO_
}

void MsgSlotsCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsCollect)
  // repeated .MsgCollectReward collect_win = 1;
  for (int i = 0; i < this->collect_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collect_win(i), output);
  }

  // repeated .MsgCollectSymbol collect_symbols = 2;
  for (int i = 0; i < this->collect_symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->collect_symbols(i), output);
  }

  // optional uint32 curr_collect_id = 3;
  if (has_curr_collect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curr_collect_id(), output);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsCollect)
}

::google::protobuf::uint8* MsgSlotsCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsCollect)
  // repeated .MsgCollectReward collect_win = 1;
  for (int i = 0; i < this->collect_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->collect_win(i), target);
  }

  // repeated .MsgCollectSymbol collect_symbols = 2;
  for (int i = 0; i < this->collect_symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->collect_symbols(i), target);
  }

  // optional uint32 curr_collect_id = 3;
  if (has_curr_collect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curr_collect_id(), target);
  }

  // optional uint64 player_id = 4;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsCollect)
  return target;
}

int MsgSlotsCollect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 curr_collect_id = 3;
    if (has_curr_collect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_collect_id());
    }

    // optional uint64 player_id = 4;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  // repeated .MsgCollectReward collect_win = 1;
  total_size += 1 * this->collect_win_size();
  for (int i = 0; i < this->collect_win_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collect_win(i));
  }

  // repeated .MsgCollectSymbol collect_symbols = 2;
  total_size += 1 * this->collect_symbols_size();
  for (int i = 0; i < this->collect_symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collect_symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsCollect::MergeFrom(const MsgSlotsCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  collect_win_.MergeFrom(from.collect_win_);
  collect_symbols_.MergeFrom(from.collect_symbols_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_curr_collect_id()) {
      set_curr_collect_id(from.curr_collect_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsCollect::CopyFrom(const MsgSlotsCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsCollect::IsInitialized() const {

  return true;
}

void MsgSlotsCollect::Swap(MsgSlotsCollect* other) {
  if (other != this) {
    collect_win_.Swap(&other->collect_win_);
    collect_symbols_.Swap(&other->collect_symbols_);
    std::swap(curr_collect_id_, other->curr_collect_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsCollect_descriptor_;
  metadata.reflection = MsgSlotsCollect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsPlayerInfo::kPlayerBaseFieldNumber;
#endif  // !_MSC_VER

MsgSlotsPlayerInfo::MsgSlotsPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsPlayerInfo)
}

void MsgSlotsPlayerInfo::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgSlotsPlayerInfo::MsgSlotsPlayerInfo(const MsgSlotsPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsPlayerInfo)
}

void MsgSlotsPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsPlayerInfo::~MsgSlotsPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgSlotsPlayerInfo)
  SharedDtor();
}

void MsgSlotsPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
  }
}

void MsgSlotsPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsPlayerInfo_descriptor_;
}

const MsgSlotsPlayerInfo& MsgSlotsPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsPlayerInfo* MsgSlotsPlayerInfo::default_instance_ = NULL;

MsgSlotsPlayerInfo* MsgSlotsPlayerInfo::New() const {
  return new MsgSlotsPlayerInfo;
}

void MsgSlotsPlayerInfo::Clear() {
  if (has_player_base()) {
    if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsPlayerInfo)
  return false;
#undef DO_
}

void MsgSlotsPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsPlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsPlayerInfo)
}

::google::protobuf::uint8* MsgSlotsPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsPlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsPlayerInfo)
  return target;
}

int MsgSlotsPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsPlayerInfo::MergeFrom(const MsgSlotsPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsPlayerInfo::CopyFrom(const MsgSlotsPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsPlayerInfo::IsInitialized() const {

  return true;
}

void MsgSlotsPlayerInfo::Swap(MsgSlotsPlayerInfo* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsPlayerInfo_descriptor_;
  metadata.reflection = MsgSlotsPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsRoomInfo::kPlayerListFieldNumber;
const int MsgSlotsRoomInfo::kSeatsFieldNumber;
const int MsgSlotsRoomInfo::kSlotsMachinesFieldNumber;
const int MsgSlotsRoomInfo::kRoomIdFieldNumber;
const int MsgSlotsRoomInfo::kRoomInfoFieldNumber;
const int MsgSlotsRoomInfo::kRoomCollectInfoFieldNumber;
#endif  // !_MSC_VER

MsgSlotsRoomInfo::MsgSlotsRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsRoomInfo)
}

void MsgSlotsRoomInfo::InitAsDefaultInstance() {
  room_info_ = const_cast< ::MsgBaseRoomInfo*>(&::MsgBaseRoomInfo::default_instance());
}

MsgSlotsRoomInfo::MsgSlotsRoomInfo(const MsgSlotsRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsRoomInfo)
}

void MsgSlotsRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = GOOGLE_ULONGLONG(0);
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsRoomInfo::~MsgSlotsRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgSlotsRoomInfo)
  SharedDtor();
}

void MsgSlotsRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete room_info_;
  }
}

void MsgSlotsRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsRoomInfo_descriptor_;
}

const MsgSlotsRoomInfo& MsgSlotsRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsRoomInfo* MsgSlotsRoomInfo::default_instance_ = NULL;

MsgSlotsRoomInfo* MsgSlotsRoomInfo::New() const {
  return new MsgSlotsRoomInfo;
}

void MsgSlotsRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & 24) {
    room_id_ = GOOGLE_ULONGLONG(0);
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::MsgBaseRoomInfo::Clear();
    }
  }
  player_list_.Clear();
  seats_.Clear();
  slots_machines_.Clear();
  room_collect_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgSlotsPlayerInfo player_list = 1;
      case 1: {
        if (tag == 10) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectTag(16)) goto parse_seats;
        break;
      }

      // repeated uint64 seats = 2;
      case 2: {
        if (tag == 16) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_seats())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_seats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seats;
        if (input->ExpectTag(26)) goto parse_slots_machines;
        break;
      }

      // repeated .MsgSlotsMachine slots_machines = 3;
      case 3: {
        if (tag == 26) {
         parse_slots_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots_machines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slots_machines;
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_room_info;
        break;
      }

      // optional .MsgBaseRoomInfo room_info = 5;
      case 5: {
        if (tag == 42) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_room_collect_info;
        break;
      }

      // repeated .MsgSlotsCollect room_collect_info = 6;
      case 6: {
        if (tag == 50) {
         parse_room_collect_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_collect_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_room_collect_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsRoomInfo)
  return false;
#undef DO_
}

void MsgSlotsRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsRoomInfo)
  // repeated .MsgSlotsPlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }

  // repeated uint64 seats = 2;
  for (int i = 0; i < this->seats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->seats(i), output);
  }

  // repeated .MsgSlotsMachine slots_machines = 3;
  for (int i = 0; i < this->slots_machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots_machines(i), output);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->room_id(), output);
  }

  // optional .MsgBaseRoomInfo room_info = 5;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->room_info(), output);
  }

  // repeated .MsgSlotsCollect room_collect_info = 6;
  for (int i = 0; i < this->room_collect_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->room_collect_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsRoomInfo)
}

::google::protobuf::uint8* MsgSlotsRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsRoomInfo)
  // repeated .MsgSlotsPlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }

  // repeated uint64 seats = 2;
  for (int i = 0; i < this->seats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->seats(i), target);
  }

  // repeated .MsgSlotsMachine slots_machines = 3;
  for (int i = 0; i < this->slots_machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slots_machines(i), target);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->room_id(), target);
  }

  // optional .MsgBaseRoomInfo room_info = 5;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->room_info(), target);
  }

  // repeated .MsgSlotsCollect room_collect_info = 6;
  for (int i = 0; i < this->room_collect_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->room_collect_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsRoomInfo)
  return target;
}

int MsgSlotsRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint64 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional .MsgBaseRoomInfo room_info = 5;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  // repeated .MsgSlotsPlayerInfo player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated uint64 seats = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->seats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->seats(i));
    }
    total_size += 1 * this->seats_size() + data_size;
  }

  // repeated .MsgSlotsMachine slots_machines = 3;
  total_size += 1 * this->slots_machines_size();
  for (int i = 0; i < this->slots_machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots_machines(i));
  }

  // repeated .MsgSlotsCollect room_collect_info = 6;
  total_size += 1 * this->room_collect_info_size();
  for (int i = 0; i < this->room_collect_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_collect_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsRoomInfo::MergeFrom(const MsgSlotsRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  seats_.MergeFrom(from.seats_);
  slots_machines_.MergeFrom(from.slots_machines_);
  room_collect_info_.MergeFrom(from.room_collect_info_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::MsgBaseRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsRoomInfo::CopyFrom(const MsgSlotsRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsRoomInfo::IsInitialized() const {

  return true;
}

void MsgSlotsRoomInfo::Swap(MsgSlotsRoomInfo* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    seats_.Swap(&other->seats_);
    slots_machines_.Swap(&other->slots_machines_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_info_, other->room_info_);
    room_collect_info_.Swap(&other->room_collect_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsRoomInfo_descriptor_;
  metadata.reflection = MsgSlotsRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsPull::kBetFieldNumber;
const int MsgSlotsPull::kLinesFieldNumber;
#endif  // !_MSC_VER

MsgSlotsPull::MsgSlotsPull()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsPull)
}

void MsgSlotsPull::InitAsDefaultInstance() {
}

MsgSlotsPull::MsgSlotsPull(const MsgSlotsPull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsPull)
}

void MsgSlotsPull::SharedCtor() {
  _cached_size_ = 0;
  bet_ = GOOGLE_ULONGLONG(0);
  lines_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsPull::~MsgSlotsPull() {
  // @@protoc_insertion_point(destructor:MsgSlotsPull)
  SharedDtor();
}

void MsgSlotsPull::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSlotsPull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsPull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsPull_descriptor_;
}

const MsgSlotsPull& MsgSlotsPull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsPull* MsgSlotsPull::default_instance_ = NULL;

MsgSlotsPull* MsgSlotsPull::New() const {
  return new MsgSlotsPull;
}

void MsgSlotsPull::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSlotsPull*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bet_, lines_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsPull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsPull)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bet = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lines;
        break;
      }

      // optional uint32 lines = 2;
      case 2: {
        if (tag == 16) {
         parse_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lines_)));
          set_has_lines();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsPull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsPull)
  return false;
#undef DO_
}

void MsgSlotsPull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsPull)
  // optional uint64 bet = 1;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bet(), output);
  }

  // optional uint32 lines = 2;
  if (has_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lines(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsPull)
}

::google::protobuf::uint8* MsgSlotsPull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsPull)
  // optional uint64 bet = 1;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bet(), target);
  }

  // optional uint32 lines = 2;
  if (has_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lines(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsPull)
  return target;
}

int MsgSlotsPull::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 bet = 1;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bet());
    }

    // optional uint32 lines = 2;
    if (has_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lines());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsPull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsPull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsPull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsPull::MergeFrom(const MsgSlotsPull& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bet()) {
      set_bet(from.bet());
    }
    if (from.has_lines()) {
      set_lines(from.lines());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsPull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsPull::CopyFrom(const MsgSlotsPull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsPull::IsInitialized() const {

  return true;
}

void MsgSlotsPull::Swap(MsgSlotsPull* other) {
  if (other != this) {
    std::swap(bet_, other->bet_);
    std::swap(lines_, other->lines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsPull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsPull_descriptor_;
  metadata.reflection = MsgSlotsPull_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsWheel::kIconsFieldNumber;
#endif  // !_MSC_VER

MsgSlotsWheel::MsgSlotsWheel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsWheel)
}

void MsgSlotsWheel::InitAsDefaultInstance() {
}

MsgSlotsWheel::MsgSlotsWheel(const MsgSlotsWheel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsWheel)
}

void MsgSlotsWheel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsWheel::~MsgSlotsWheel() {
  // @@protoc_insertion_point(destructor:MsgSlotsWheel)
  SharedDtor();
}

void MsgSlotsWheel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSlotsWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsWheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsWheel_descriptor_;
}

const MsgSlotsWheel& MsgSlotsWheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsWheel* MsgSlotsWheel::default_instance_ = NULL;

MsgSlotsWheel* MsgSlotsWheel::New() const {
  return new MsgSlotsWheel;
}

void MsgSlotsWheel::Clear() {
  icons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 icons = 1;
      case 1: {
        if (tag == 8) {
         parse_icons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_icons())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_icons())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_icons;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsWheel)
  return false;
#undef DO_
}

void MsgSlotsWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsWheel)
  // repeated uint32 icons = 1;
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->icons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsWheel)
}

::google::protobuf::uint8* MsgSlotsWheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsWheel)
  // repeated uint32 icons = 1;
  for (int i = 0; i < this->icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->icons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsWheel)
  return target;
}

int MsgSlotsWheel::ByteSize() const {
  int total_size = 0;

  // repeated uint32 icons = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->icons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->icons(i));
    }
    total_size += 1 * this->icons_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsWheel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsWheel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsWheel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsWheel::MergeFrom(const MsgSlotsWheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  icons_.MergeFrom(from.icons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsWheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsWheel::CopyFrom(const MsgSlotsWheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsWheel::IsInitialized() const {

  return true;
}

void MsgSlotsWheel::Swap(MsgSlotsWheel* other) {
  if (other != this) {
    icons_.Swap(&other->icons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsWheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsWheel_descriptor_;
  metadata.reflection = MsgSlotsWheel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgWheelAttrib::kIdxFieldNumber;
const int MsgWheelAttrib::kSSrcFieldNumber;
const int MsgWheelAttrib::kSDecFieldNumber;
#endif  // !_MSC_VER

MsgWheelAttrib::MsgWheelAttrib()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgWheelAttrib)
}

void MsgWheelAttrib::InitAsDefaultInstance() {
}

MsgWheelAttrib::MsgWheelAttrib(const MsgWheelAttrib& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgWheelAttrib)
}

void MsgWheelAttrib::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  s_src_ = 0u;
  s_dec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgWheelAttrib::~MsgWheelAttrib() {
  // @@protoc_insertion_point(destructor:MsgWheelAttrib)
  SharedDtor();
}

void MsgWheelAttrib::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgWheelAttrib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgWheelAttrib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgWheelAttrib_descriptor_;
}

const MsgWheelAttrib& MsgWheelAttrib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgWheelAttrib* MsgWheelAttrib::default_instance_ = NULL;

MsgWheelAttrib* MsgWheelAttrib::New() const {
  return new MsgWheelAttrib;
}

void MsgWheelAttrib::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgWheelAttrib*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(idx_, s_dec_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgWheelAttrib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgWheelAttrib)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_s_src;
        break;
      }

      // optional uint32 s_src = 2;
      case 2: {
        if (tag == 16) {
         parse_s_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s_src_)));
          set_has_s_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_s_dec;
        break;
      }

      // optional uint32 s_dec = 3;
      case 3: {
        if (tag == 24) {
         parse_s_dec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s_dec_)));
          set_has_s_dec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgWheelAttrib)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgWheelAttrib)
  return false;
#undef DO_
}

void MsgWheelAttrib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgWheelAttrib)
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional uint32 s_src = 2;
  if (has_s_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->s_src(), output);
  }

  // optional uint32 s_dec = 3;
  if (has_s_dec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->s_dec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgWheelAttrib)
}

::google::protobuf::uint8* MsgWheelAttrib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgWheelAttrib)
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional uint32 s_src = 2;
  if (has_s_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->s_src(), target);
  }

  // optional uint32 s_dec = 3;
  if (has_s_dec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->s_dec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgWheelAttrib)
  return target;
}

int MsgWheelAttrib::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 s_src = 2;
    if (has_s_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->s_src());
    }

    // optional uint32 s_dec = 3;
    if (has_s_dec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->s_dec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWheelAttrib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgWheelAttrib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgWheelAttrib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgWheelAttrib::MergeFrom(const MsgWheelAttrib& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_s_src()) {
      set_s_src(from.s_src());
    }
    if (from.has_s_dec()) {
      set_s_dec(from.s_dec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgWheelAttrib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWheelAttrib::CopyFrom(const MsgWheelAttrib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWheelAttrib::IsInitialized() const {

  return true;
}

void MsgWheelAttrib::Swap(MsgWheelAttrib* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(s_src_, other->s_src_);
    std::swap(s_dec_, other->s_dec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgWheelAttrib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgWheelAttrib_descriptor_;
  metadata.reflection = MsgWheelAttrib_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsResult::kPidFieldNumber;
const int MsgSlotsResult::kTotalCoinsFieldNumber;
const int MsgSlotsResult::kWinCoinsFieldNumber;
const int MsgSlotsResult::kWinBetFieldNumber;
const int MsgSlotsResult::kFreeCountFieldNumber;
const int MsgSlotsResult::kWheelsFieldNumber;
const int MsgSlotsResult::kWheelIdxFieldNumber;
const int MsgSlotsResult::kBonusNameFieldNumber;
const int MsgSlotsResult::kBonusIconNumFieldNumber;
const int MsgSlotsResult::kWinFreeSpinsFieldNumber;
const int MsgSlotsResult::kWinTypeFieldNumber;
const int MsgSlotsResult::kRandomWildsFieldNumber;
const int MsgSlotsResult::kFillAllWildsFieldNumber;
const int MsgSlotsResult::kSplasWildsFieldNumber;
const int MsgSlotsResult::kSChangeFieldNumber;
const int MsgSlotsResult::kCollectScoreFieldNumber;
#endif  // !_MSC_VER

MsgSlotsResult::MsgSlotsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsResult)
}

void MsgSlotsResult::InitAsDefaultInstance() {
}

MsgSlotsResult::MsgSlotsResult(const MsgSlotsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsResult)
}

void MsgSlotsResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  total_coins_ = GOOGLE_ULONGLONG(0);
  win_coins_ = GOOGLE_ULONGLONG(0);
  win_bet_ = 0u;
  free_count_ = 0u;
  bonus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bonus_icon_num_ = 0;
  win_free_spins_ = false;
  win_type_ = 0;
  collect_score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsResult::~MsgSlotsResult() {
  // @@protoc_insertion_point(destructor:MsgSlotsResult)
  SharedDtor();
}

void MsgSlotsResult::SharedDtor() {
  if (bonus_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bonus_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgSlotsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsResult_descriptor_;
}

const MsgSlotsResult& MsgSlotsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsResult* MsgSlotsResult::default_instance_ = NULL;

MsgSlotsResult* MsgSlotsResult::New() const {
  return new MsgSlotsResult;
}

void MsgSlotsResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSlotsResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(pid_, free_count_);
    if (has_bonus_name()) {
      if (bonus_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bonus_name_->clear();
      }
    }
  }
  ZR_(bonus_icon_num_, win_free_spins_);
  ZR_(collect_score_, win_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  wheels_.Clear();
  wheel_idx_.Clear();
  random_wilds_.Clear();
  fill_all_wilds_.Clear();
  splas_wilds_.Clear();
  s_change_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_coins;
        break;
      }

      // optional uint64 total_coins = 2;
      case 2: {
        if (tag == 16) {
         parse_total_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_coins_)));
          set_has_total_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win_coins;
        break;
      }

      // optional uint64 win_coins = 3;
      case 3: {
        if (tag == 24) {
         parse_win_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_coins_)));
          set_has_win_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_win_bet;
        break;
      }

      // optional uint32 win_bet = 4;
      case 4: {
        if (tag == 32) {
         parse_win_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_bet_)));
          set_has_win_bet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_free_count;
        break;
      }

      // optional uint32 free_count = 5;
      case 5: {
        if (tag == 40) {
         parse_free_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_count_)));
          set_has_free_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_wheels;
        break;
      }

      // repeated .MsgSlotsWheel wheels = 6;
      case 6: {
        if (tag == 50) {
         parse_wheels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wheels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_wheels;
        if (input->ExpectTag(56)) goto parse_wheel_idx;
        break;
      }

      // repeated uint32 wheel_idx = 7;
      case 7: {
        if (tag == 56) {
         parse_wheel_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_wheel_idx())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wheel_idx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wheel_idx;
        if (input->ExpectTag(66)) goto parse_bonus_name;
        break;
      }

      // optional string bonus_name = 8;
      case 8: {
        if (tag == 66) {
         parse_bonus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bonus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bonus_name().data(), this->bonus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bonus_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bonus_icon_num;
        break;
      }

      // optional sint32 bonus_icon_num = 9;
      case 9: {
        if (tag == 72) {
         parse_bonus_icon_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bonus_icon_num_)));
          set_has_bonus_icon_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_win_free_spins;
        break;
      }

      // optional bool win_free_spins = 10;
      case 10: {
        if (tag == 80) {
         parse_win_free_spins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_free_spins_)));
          set_has_win_free_spins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_win_type;
        break;
      }

      // optional .EnumSlotsWinType win_type = 11;
      case 11: {
        if (tag == 88) {
         parse_win_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EnumSlotsWinType_IsValid(value)) {
            set_win_type(static_cast< ::EnumSlotsWinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_random_wilds;
        break;
      }

      // repeated .MsgVector random_wilds = 12;
      case 12: {
        if (tag == 98) {
         parse_random_wilds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_random_wilds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_random_wilds;
        if (input->ExpectTag(104)) goto parse_fill_all_wilds;
        break;
      }

      // repeated uint32 fill_all_wilds = 13;
      case 13: {
        if (tag == 104) {
         parse_fill_all_wilds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_fill_all_wilds())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fill_all_wilds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fill_all_wilds;
        if (input->ExpectTag(112)) goto parse_splas_wilds;
        break;
      }

      // repeated uint32 splas_wilds = 14;
      case 14: {
        if (tag == 112) {
         parse_splas_wilds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_splas_wilds())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_splas_wilds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_splas_wilds;
        if (input->ExpectTag(122)) goto parse_s_change;
        break;
      }

      // repeated .MsgWheelAttrib s_change = 15;
      case 15: {
        if (tag == 122) {
         parse_s_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_s_change()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_s_change;
        if (input->ExpectTag(128)) goto parse_collect_score;
        break;
      }

      // optional uint64 collect_score = 16;
      case 16: {
        if (tag == 128) {
         parse_collect_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collect_score_)));
          set_has_collect_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsResult)
  return false;
#undef DO_
}

void MsgSlotsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsResult)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional uint64 total_coins = 2;
  if (has_total_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_coins(), output);
  }

  // optional uint64 win_coins = 3;
  if (has_win_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->win_coins(), output);
  }

  // optional uint32 win_bet = 4;
  if (has_win_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win_bet(), output);
  }

  // optional uint32 free_count = 5;
  if (has_free_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->free_count(), output);
  }

  // repeated .MsgSlotsWheel wheels = 6;
  for (int i = 0; i < this->wheels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wheels(i), output);
  }

  // repeated uint32 wheel_idx = 7;
  for (int i = 0; i < this->wheel_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->wheel_idx(i), output);
  }

  // optional string bonus_name = 8;
  if (has_bonus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonus_name().data(), this->bonus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bonus_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bonus_name(), output);
  }

  // optional sint32 bonus_icon_num = 9;
  if (has_bonus_icon_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->bonus_icon_num(), output);
  }

  // optional bool win_free_spins = 10;
  if (has_win_free_spins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->win_free_spins(), output);
  }

  // optional .EnumSlotsWinType win_type = 11;
  if (has_win_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->win_type(), output);
  }

  // repeated .MsgVector random_wilds = 12;
  for (int i = 0; i < this->random_wilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->random_wilds(i), output);
  }

  // repeated uint32 fill_all_wilds = 13;
  for (int i = 0; i < this->fill_all_wilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->fill_all_wilds(i), output);
  }

  // repeated uint32 splas_wilds = 14;
  for (int i = 0; i < this->splas_wilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->splas_wilds(i), output);
  }

  // repeated .MsgWheelAttrib s_change = 15;
  for (int i = 0; i < this->s_change_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->s_change(i), output);
  }

  // optional uint64 collect_score = 16;
  if (has_collect_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->collect_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsResult)
}

::google::protobuf::uint8* MsgSlotsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsResult)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional uint64 total_coins = 2;
  if (has_total_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_coins(), target);
  }

  // optional uint64 win_coins = 3;
  if (has_win_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->win_coins(), target);
  }

  // optional uint32 win_bet = 4;
  if (has_win_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win_bet(), target);
  }

  // optional uint32 free_count = 5;
  if (has_free_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->free_count(), target);
  }

  // repeated .MsgSlotsWheel wheels = 6;
  for (int i = 0; i < this->wheels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->wheels(i), target);
  }

  // repeated uint32 wheel_idx = 7;
  for (int i = 0; i < this->wheel_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->wheel_idx(i), target);
  }

  // optional string bonus_name = 8;
  if (has_bonus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonus_name().data(), this->bonus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bonus_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bonus_name(), target);
  }

  // optional sint32 bonus_icon_num = 9;
  if (has_bonus_icon_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->bonus_icon_num(), target);
  }

  // optional bool win_free_spins = 10;
  if (has_win_free_spins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->win_free_spins(), target);
  }

  // optional .EnumSlotsWinType win_type = 11;
  if (has_win_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->win_type(), target);
  }

  // repeated .MsgVector random_wilds = 12;
  for (int i = 0; i < this->random_wilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->random_wilds(i), target);
  }

  // repeated uint32 fill_all_wilds = 13;
  for (int i = 0; i < this->fill_all_wilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->fill_all_wilds(i), target);
  }

  // repeated uint32 splas_wilds = 14;
  for (int i = 0; i < this->splas_wilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->splas_wilds(i), target);
  }

  // repeated .MsgWheelAttrib s_change = 15;
  for (int i = 0; i < this->s_change_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->s_change(i), target);
  }

  // optional uint64 collect_score = 16;
  if (has_collect_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->collect_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsResult)
  return target;
}

int MsgSlotsResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint64 total_coins = 2;
    if (has_total_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_coins());
    }

    // optional uint64 win_coins = 3;
    if (has_win_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->win_coins());
    }

    // optional uint32 win_bet = 4;
    if (has_win_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_bet());
    }

    // optional uint32 free_count = 5;
    if (has_free_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_count());
    }

    // optional string bonus_name = 8;
    if (has_bonus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bonus_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 bonus_icon_num = 9;
    if (has_bonus_icon_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bonus_icon_num());
    }

    // optional bool win_free_spins = 10;
    if (has_win_free_spins()) {
      total_size += 1 + 1;
    }

    // optional .EnumSlotsWinType win_type = 11;
    if (has_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->win_type());
    }

    // optional uint64 collect_score = 16;
    if (has_collect_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collect_score());
    }

  }
  // repeated .MsgSlotsWheel wheels = 6;
  total_size += 1 * this->wheels_size();
  for (int i = 0; i < this->wheels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wheels(i));
  }

  // repeated uint32 wheel_idx = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->wheel_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wheel_idx(i));
    }
    total_size += 1 * this->wheel_idx_size() + data_size;
  }

  // repeated .MsgVector random_wilds = 12;
  total_size += 1 * this->random_wilds_size();
  for (int i = 0; i < this->random_wilds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->random_wilds(i));
  }

  // repeated uint32 fill_all_wilds = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->fill_all_wilds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fill_all_wilds(i));
    }
    total_size += 1 * this->fill_all_wilds_size() + data_size;
  }

  // repeated uint32 splas_wilds = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->splas_wilds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->splas_wilds(i));
    }
    total_size += 1 * this->splas_wilds_size() + data_size;
  }

  // repeated .MsgWheelAttrib s_change = 15;
  total_size += 1 * this->s_change_size();
  for (int i = 0; i < this->s_change_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->s_change(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsResult::MergeFrom(const MsgSlotsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  wheels_.MergeFrom(from.wheels_);
  wheel_idx_.MergeFrom(from.wheel_idx_);
  random_wilds_.MergeFrom(from.random_wilds_);
  fill_all_wilds_.MergeFrom(from.fill_all_wilds_);
  splas_wilds_.MergeFrom(from.splas_wilds_);
  s_change_.MergeFrom(from.s_change_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_total_coins()) {
      set_total_coins(from.total_coins());
    }
    if (from.has_win_coins()) {
      set_win_coins(from.win_coins());
    }
    if (from.has_win_bet()) {
      set_win_bet(from.win_bet());
    }
    if (from.has_free_count()) {
      set_free_count(from.free_count());
    }
    if (from.has_bonus_name()) {
      set_bonus_name(from.bonus_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bonus_icon_num()) {
      set_bonus_icon_num(from.bonus_icon_num());
    }
    if (from.has_win_free_spins()) {
      set_win_free_spins(from.win_free_spins());
    }
    if (from.has_win_type()) {
      set_win_type(from.win_type());
    }
    if (from.has_collect_score()) {
      set_collect_score(from.collect_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsResult::CopyFrom(const MsgSlotsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsResult::IsInitialized() const {

  return true;
}

void MsgSlotsResult::Swap(MsgSlotsResult* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(total_coins_, other->total_coins_);
    std::swap(win_coins_, other->win_coins_);
    std::swap(win_bet_, other->win_bet_);
    std::swap(free_count_, other->free_count_);
    wheels_.Swap(&other->wheels_);
    wheel_idx_.Swap(&other->wheel_idx_);
    std::swap(bonus_name_, other->bonus_name_);
    std::swap(bonus_icon_num_, other->bonus_icon_num_);
    std::swap(win_free_spins_, other->win_free_spins_);
    std::swap(win_type_, other->win_type_);
    random_wilds_.Swap(&other->random_wilds_);
    fill_all_wilds_.Swap(&other->fill_all_wilds_);
    splas_wilds_.Swap(&other->splas_wilds_);
    s_change_.Swap(&other->s_change_);
    std::swap(collect_score_, other->collect_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsResult_descriptor_;
  metadata.reflection = MsgSlotsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBonusGameRandomResult::kRndNameFieldNumber;
const int MsgBonusGameRandomResult::kWinCreditsFieldNumber;
const int MsgBonusGameRandomResult::kWinMultiplierFieldNumber;
const int MsgBonusGameRandomResult::kWinFreeSpinsFieldNumber;
#endif  // !_MSC_VER

MsgBonusGameRandomResult::MsgBonusGameRandomResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBonusGameRandomResult)
}

void MsgBonusGameRandomResult::InitAsDefaultInstance() {
}

MsgBonusGameRandomResult::MsgBonusGameRandomResult(const MsgBonusGameRandomResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBonusGameRandomResult)
}

void MsgBonusGameRandomResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rnd_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  win_credits_ = 0;
  win_multiplier_ = 0;
  win_free_spins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBonusGameRandomResult::~MsgBonusGameRandomResult() {
  // @@protoc_insertion_point(destructor:MsgBonusGameRandomResult)
  SharedDtor();
}

void MsgBonusGameRandomResult::SharedDtor() {
  if (rnd_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rnd_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgBonusGameRandomResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBonusGameRandomResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBonusGameRandomResult_descriptor_;
}

const MsgBonusGameRandomResult& MsgBonusGameRandomResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgBonusGameRandomResult* MsgBonusGameRandomResult::default_instance_ = NULL;

MsgBonusGameRandomResult* MsgBonusGameRandomResult::New() const {
  return new MsgBonusGameRandomResult;
}

void MsgBonusGameRandomResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBonusGameRandomResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(win_credits_, win_free_spins_);
    if (has_rnd_name()) {
      if (rnd_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rnd_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBonusGameRandomResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBonusGameRandomResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rnd_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rnd_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rnd_name().data(), this->rnd_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rnd_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_win_credits;
        break;
      }

      // optional sint32 win_credits = 2;
      case 2: {
        if (tag == 16) {
         parse_win_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &win_credits_)));
          set_has_win_credits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win_multiplier;
        break;
      }

      // optional sint32 win_multiplier = 3;
      case 3: {
        if (tag == 24) {
         parse_win_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &win_multiplier_)));
          set_has_win_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_win_free_spins;
        break;
      }

      // optional sint32 win_free_spins = 4;
      case 4: {
        if (tag == 32) {
         parse_win_free_spins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &win_free_spins_)));
          set_has_win_free_spins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBonusGameRandomResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBonusGameRandomResult)
  return false;
#undef DO_
}

void MsgBonusGameRandomResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBonusGameRandomResult)
  // optional string rnd_name = 1;
  if (has_rnd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rnd_name().data(), this->rnd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rnd_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rnd_name(), output);
  }

  // optional sint32 win_credits = 2;
  if (has_win_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->win_credits(), output);
  }

  // optional sint32 win_multiplier = 3;
  if (has_win_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->win_multiplier(), output);
  }

  // optional sint32 win_free_spins = 4;
  if (has_win_free_spins()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->win_free_spins(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBonusGameRandomResult)
}

::google::protobuf::uint8* MsgBonusGameRandomResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBonusGameRandomResult)
  // optional string rnd_name = 1;
  if (has_rnd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rnd_name().data(), this->rnd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rnd_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rnd_name(), target);
  }

  // optional sint32 win_credits = 2;
  if (has_win_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->win_credits(), target);
  }

  // optional sint32 win_multiplier = 3;
  if (has_win_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->win_multiplier(), target);
  }

  // optional sint32 win_free_spins = 4;
  if (has_win_free_spins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->win_free_spins(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBonusGameRandomResult)
  return target;
}

int MsgBonusGameRandomResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rnd_name = 1;
    if (has_rnd_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rnd_name());
    }

    // optional sint32 win_credits = 2;
    if (has_win_credits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->win_credits());
    }

    // optional sint32 win_multiplier = 3;
    if (has_win_multiplier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->win_multiplier());
    }

    // optional sint32 win_free_spins = 4;
    if (has_win_free_spins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->win_free_spins());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBonusGameRandomResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBonusGameRandomResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBonusGameRandomResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBonusGameRandomResult::MergeFrom(const MsgBonusGameRandomResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rnd_name()) {
      set_rnd_name(from.rnd_name());
    }
    if (from.has_win_credits()) {
      set_win_credits(from.win_credits());
    }
    if (from.has_win_multiplier()) {
      set_win_multiplier(from.win_multiplier());
    }
    if (from.has_win_free_spins()) {
      set_win_free_spins(from.win_free_spins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBonusGameRandomResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBonusGameRandomResult::CopyFrom(const MsgBonusGameRandomResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBonusGameRandomResult::IsInitialized() const {

  return true;
}

void MsgBonusGameRandomResult::Swap(MsgBonusGameRandomResult* other) {
  if (other != this) {
    std::swap(rnd_name_, other->rnd_name_);
    std::swap(win_credits_, other->win_credits_);
    std::swap(win_multiplier_, other->win_multiplier_);
    std::swap(win_free_spins_, other->win_free_spins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBonusGameRandomResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBonusGameRandomResult_descriptor_;
  metadata.reflection = MsgBonusGameRandomResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBonusGameSelectResult::kIsEndFieldNumber;
const int MsgBonusGameSelectResult::kSelectSurplusCountFieldNumber;
const int MsgBonusGameSelectResult::kTotalMoneyFieldNumber;
const int MsgBonusGameSelectResult::kCurrMoneyFieldNumber;
const int MsgBonusGameSelectResult::kWinTypeFieldNumber;
const int MsgBonusGameSelectResult::kPidFieldNumber;
const int MsgBonusGameSelectResult::kRandomResultsFieldNumber;
const int MsgBonusGameSelectResult::kFreeSpinsFieldNumber;
const int MsgBonusGameSelectResult::kWinFreeSpinsFieldNumber;
const int MsgBonusGameSelectResult::kSurplusRandomsFieldNumber;
const int MsgBonusGameSelectResult::kSurplusSelectCountFieldNumber;
#endif  // !_MSC_VER

MsgBonusGameSelectResult::MsgBonusGameSelectResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBonusGameSelectResult)
}

void MsgBonusGameSelectResult::InitAsDefaultInstance() {
}

MsgBonusGameSelectResult::MsgBonusGameSelectResult(const MsgBonusGameSelectResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBonusGameSelectResult)
}

void MsgBonusGameSelectResult::SharedCtor() {
  _cached_size_ = 0;
  is_end_ = false;
  select_surplus_count_ = 0u;
  total_money_ = GOOGLE_ULONGLONG(0);
  curr_money_ = GOOGLE_ULONGLONG(0);
  win_type_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  free_spins_ = 0u;
  win_free_spins_ = 0u;
  surplus_select_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBonusGameSelectResult::~MsgBonusGameSelectResult() {
  // @@protoc_insertion_point(destructor:MsgBonusGameSelectResult)
  SharedDtor();
}

void MsgBonusGameSelectResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBonusGameSelectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBonusGameSelectResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBonusGameSelectResult_descriptor_;
}

const MsgBonusGameSelectResult& MsgBonusGameSelectResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgBonusGameSelectResult* MsgBonusGameSelectResult::default_instance_ = NULL;

MsgBonusGameSelectResult* MsgBonusGameSelectResult::New() const {
  return new MsgBonusGameSelectResult;
}

void MsgBonusGameSelectResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBonusGameSelectResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(is_end_, free_spins_);
  }
  ZR_(win_free_spins_, surplus_select_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  random_results_.Clear();
  surplus_randoms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBonusGameSelectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBonusGameSelectResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_end = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_)));
          set_has_is_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_select_surplus_count;
        break;
      }

      // optional uint32 select_surplus_count = 2;
      case 2: {
        if (tag == 16) {
         parse_select_surplus_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_surplus_count_)));
          set_has_select_surplus_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_money;
        break;
      }

      // optional uint64 total_money = 3;
      case 3: {
        if (tag == 24) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curr_money;
        break;
      }

      // optional uint64 curr_money = 4;
      case 4: {
        if (tag == 32) {
         parse_curr_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_money_)));
          set_has_curr_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_win_type;
        break;
      }

      // optional .EnumSlotsWinType win_type = 5;
      case 5: {
        if (tag == 40) {
         parse_win_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EnumSlotsWinType_IsValid(value)) {
            set_win_type(static_cast< ::EnumSlotsWinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_random_results;
        break;
      }

      // repeated .MsgBonusGameRandomResult random_results = 7;
      case 7: {
        if (tag == 58) {
         parse_random_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_random_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_random_results;
        if (input->ExpectTag(64)) goto parse_free_spins;
        break;
      }

      // optional uint32 free_spins = 8;
      case 8: {
        if (tag == 64) {
         parse_free_spins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_spins_)));
          set_has_free_spins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_win_free_spins;
        break;
      }

      // optional uint32 win_free_spins = 9;
      case 9: {
        if (tag == 72) {
         parse_win_free_spins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_free_spins_)));
          set_has_win_free_spins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_surplus_randoms;
        break;
      }

      // repeated .MsgBonusGameRandomResult surplus_randoms = 10;
      case 10: {
        if (tag == 82) {
         parse_surplus_randoms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_surplus_randoms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_surplus_randoms;
        if (input->ExpectTag(88)) goto parse_surplus_select_count;
        break;
      }

      // optional uint32 surplus_select_count = 11;
      case 11: {
        if (tag == 88) {
         parse_surplus_select_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_select_count_)));
          set_has_surplus_select_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBonusGameSelectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBonusGameSelectResult)
  return false;
#undef DO_
}

void MsgBonusGameSelectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBonusGameSelectResult)
  // optional bool is_end = 1;
  if (has_is_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_end(), output);
  }

  // optional uint32 select_surplus_count = 2;
  if (has_select_surplus_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->select_surplus_count(), output);
  }

  // optional uint64 total_money = 3;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_money(), output);
  }

  // optional uint64 curr_money = 4;
  if (has_curr_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->curr_money(), output);
  }

  // optional .EnumSlotsWinType win_type = 5;
  if (has_win_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->win_type(), output);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pid(), output);
  }

  // repeated .MsgBonusGameRandomResult random_results = 7;
  for (int i = 0; i < this->random_results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->random_results(i), output);
  }

  // optional uint32 free_spins = 8;
  if (has_free_spins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->free_spins(), output);
  }

  // optional uint32 win_free_spins = 9;
  if (has_win_free_spins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->win_free_spins(), output);
  }

  // repeated .MsgBonusGameRandomResult surplus_randoms = 10;
  for (int i = 0; i < this->surplus_randoms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->surplus_randoms(i), output);
  }

  // optional uint32 surplus_select_count = 11;
  if (has_surplus_select_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->surplus_select_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBonusGameSelectResult)
}

::google::protobuf::uint8* MsgBonusGameSelectResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBonusGameSelectResult)
  // optional bool is_end = 1;
  if (has_is_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_end(), target);
  }

  // optional uint32 select_surplus_count = 2;
  if (has_select_surplus_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->select_surplus_count(), target);
  }

  // optional uint64 total_money = 3;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_money(), target);
  }

  // optional uint64 curr_money = 4;
  if (has_curr_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->curr_money(), target);
  }

  // optional .EnumSlotsWinType win_type = 5;
  if (has_win_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->win_type(), target);
  }

  // optional uint64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pid(), target);
  }

  // repeated .MsgBonusGameRandomResult random_results = 7;
  for (int i = 0; i < this->random_results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->random_results(i), target);
  }

  // optional uint32 free_spins = 8;
  if (has_free_spins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->free_spins(), target);
  }

  // optional uint32 win_free_spins = 9;
  if (has_win_free_spins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->win_free_spins(), target);
  }

  // repeated .MsgBonusGameRandomResult surplus_randoms = 10;
  for (int i = 0; i < this->surplus_randoms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->surplus_randoms(i), target);
  }

  // optional uint32 surplus_select_count = 11;
  if (has_surplus_select_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->surplus_select_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBonusGameSelectResult)
  return target;
}

int MsgBonusGameSelectResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_end = 1;
    if (has_is_end()) {
      total_size += 1 + 1;
    }

    // optional uint32 select_surplus_count = 2;
    if (has_select_surplus_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->select_surplus_count());
    }

    // optional uint64 total_money = 3;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_money());
    }

    // optional uint64 curr_money = 4;
    if (has_curr_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_money());
    }

    // optional .EnumSlotsWinType win_type = 5;
    if (has_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->win_type());
    }

    // optional uint64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 free_spins = 8;
    if (has_free_spins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_spins());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 win_free_spins = 9;
    if (has_win_free_spins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_free_spins());
    }

    // optional uint32 surplus_select_count = 11;
    if (has_surplus_select_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_select_count());
    }

  }
  // repeated .MsgBonusGameRandomResult random_results = 7;
  total_size += 1 * this->random_results_size();
  for (int i = 0; i < this->random_results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->random_results(i));
  }

  // repeated .MsgBonusGameRandomResult surplus_randoms = 10;
  total_size += 1 * this->surplus_randoms_size();
  for (int i = 0; i < this->surplus_randoms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->surplus_randoms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBonusGameSelectResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBonusGameSelectResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBonusGameSelectResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBonusGameSelectResult::MergeFrom(const MsgBonusGameSelectResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  random_results_.MergeFrom(from.random_results_);
  surplus_randoms_.MergeFrom(from.surplus_randoms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_end()) {
      set_is_end(from.is_end());
    }
    if (from.has_select_surplus_count()) {
      set_select_surplus_count(from.select_surplus_count());
    }
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_curr_money()) {
      set_curr_money(from.curr_money());
    }
    if (from.has_win_type()) {
      set_win_type(from.win_type());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_free_spins()) {
      set_free_spins(from.free_spins());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_free_spins()) {
      set_win_free_spins(from.win_free_spins());
    }
    if (from.has_surplus_select_count()) {
      set_surplus_select_count(from.surplus_select_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBonusGameSelectResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBonusGameSelectResult::CopyFrom(const MsgBonusGameSelectResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBonusGameSelectResult::IsInitialized() const {

  return true;
}

void MsgBonusGameSelectResult::Swap(MsgBonusGameSelectResult* other) {
  if (other != this) {
    std::swap(is_end_, other->is_end_);
    std::swap(select_surplus_count_, other->select_surplus_count_);
    std::swap(total_money_, other->total_money_);
    std::swap(curr_money_, other->curr_money_);
    std::swap(win_type_, other->win_type_);
    std::swap(pid_, other->pid_);
    random_results_.Swap(&other->random_results_);
    std::swap(free_spins_, other->free_spins_);
    std::swap(win_free_spins_, other->win_free_spins_);
    surplus_randoms_.Swap(&other->surplus_randoms_);
    std::swap(surplus_select_count_, other->surplus_select_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBonusGameSelectResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBonusGameSelectResult_descriptor_;
  metadata.reflection = MsgBonusGameSelectResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSlotsRoomFeatureCollect::kRoomTypeFieldNumber;
const int MsgSlotsRoomFeatureCollect::kCollectMissionFieldNumber;
#endif  // !_MSC_VER

MsgSlotsRoomFeatureCollect::MsgSlotsRoomFeatureCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSlotsRoomFeatureCollect)
}

void MsgSlotsRoomFeatureCollect::InitAsDefaultInstance() {
}

MsgSlotsRoomFeatureCollect::MsgSlotsRoomFeatureCollect(const MsgSlotsRoomFeatureCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSlotsRoomFeatureCollect)
}

void MsgSlotsRoomFeatureCollect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSlotsRoomFeatureCollect::~MsgSlotsRoomFeatureCollect() {
  // @@protoc_insertion_point(destructor:MsgSlotsRoomFeatureCollect)
  SharedDtor();
}

void MsgSlotsRoomFeatureCollect::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgSlotsRoomFeatureCollect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSlotsRoomFeatureCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSlotsRoomFeatureCollect_descriptor_;
}

const MsgSlotsRoomFeatureCollect& MsgSlotsRoomFeatureCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fslots_2eproto();
  return *default_instance_;
}

MsgSlotsRoomFeatureCollect* MsgSlotsRoomFeatureCollect::default_instance_ = NULL;

MsgSlotsRoomFeatureCollect* MsgSlotsRoomFeatureCollect::New() const {
  return new MsgSlotsRoomFeatureCollect;
}

void MsgSlotsRoomFeatureCollect::Clear() {
  if (has_room_type()) {
    if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      room_type_->clear();
    }
  }
  collect_mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSlotsRoomFeatureCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSlotsRoomFeatureCollect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collect_mission;
        break;
      }

      // repeated .MsgSlotsCollect collect_mission = 2;
      case 2: {
        if (tag == 18) {
         parse_collect_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collect_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collect_mission;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSlotsRoomFeatureCollect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSlotsRoomFeatureCollect)
  return false;
#undef DO_
}

void MsgSlotsRoomFeatureCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSlotsRoomFeatureCollect)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // repeated .MsgSlotsCollect collect_mission = 2;
  for (int i = 0; i < this->collect_mission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->collect_mission(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSlotsRoomFeatureCollect)
}

::google::protobuf::uint8* MsgSlotsRoomFeatureCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSlotsRoomFeatureCollect)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // repeated .MsgSlotsCollect collect_mission = 2;
  for (int i = 0; i < this->collect_mission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->collect_mission(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSlotsRoomFeatureCollect)
  return target;
}

int MsgSlotsRoomFeatureCollect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

  }
  // repeated .MsgSlotsCollect collect_mission = 2;
  total_size += 1 * this->collect_mission_size();
  for (int i = 0; i < this->collect_mission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collect_mission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSlotsRoomFeatureCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSlotsRoomFeatureCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSlotsRoomFeatureCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSlotsRoomFeatureCollect::MergeFrom(const MsgSlotsRoomFeatureCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  collect_mission_.MergeFrom(from.collect_mission_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSlotsRoomFeatureCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSlotsRoomFeatureCollect::CopyFrom(const MsgSlotsRoomFeatureCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSlotsRoomFeatureCollect::IsInitialized() const {

  return true;
}

void MsgSlotsRoomFeatureCollect::Swap(MsgSlotsRoomFeatureCollect* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    collect_mission_.Swap(&other->collect_mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSlotsRoomFeatureCollect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSlotsRoomFeatureCollect_descriptor_;
  metadata.reflection = MsgSlotsRoomFeatureCollect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
