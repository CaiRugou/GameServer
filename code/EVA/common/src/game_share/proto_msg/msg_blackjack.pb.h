// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_blackjack.proto

#ifndef PROTOBUF_msg_5fblackjack_2eproto__INCLUDED
#define PROTOBUF_msg_5fblackjack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "public_pro.pb.h"
#include "define_pro.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5fblackjack_2eproto();
void protobuf_AssignDesc_msg_5fblackjack_2eproto();
void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

class MsgBlackJackCard;
class MsgPour;
class MsgBlackJackPourList;
class MsgBlackjackPlayerInfo;
class MsgBlackjackRoomInfo;
class MsgAddPourRes;
class MsgAskforCardsRes;

enum TBlackJackState {
  BlackJackStateStartGame = 0,
  BlackJackStateStartPour = 1,
  BlackJackStateEndPour = 2,
  BlackJackStateStartToDeal = 3,
  BlackJackStateEndToDeal = 4,
  BlackJackStateDetermine = 5,
  BlackJackStateRoleAction = 6,
  BlackJackStateFinish = 7,
  BlackJackStateWait = 8
};
bool TBlackJackState_IsValid(int value);
const TBlackJackState TBlackJackState_MIN = BlackJackStateStartGame;
const TBlackJackState TBlackJackState_MAX = BlackJackStateWait;
const int TBlackJackState_ARRAYSIZE = TBlackJackState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TBlackJackState_descriptor();
inline const ::std::string& TBlackJackState_Name(TBlackJackState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TBlackJackState_descriptor(), value);
}
inline bool TBlackJackState_Parse(
    const ::std::string& name, TBlackJackState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TBlackJackState>(
    TBlackJackState_descriptor(), name, value);
}
// ===================================================================

class MsgBlackJackCard : public ::google::protobuf::Message {
 public:
  MsgBlackJackCard();
  virtual ~MsgBlackJackCard();

  MsgBlackJackCard(const MsgBlackJackCard& from);

  inline MsgBlackJackCard& operator=(const MsgBlackJackCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBlackJackCard& default_instance();

  void Swap(MsgBlackJackCard* other);

  // implements Message ----------------------------------------------

  MsgBlackJackCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBlackJackCard& from);
  void MergeFrom(const MsgBlackJackCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TCardsType suit = 1;
  inline bool has_suit() const;
  inline void clear_suit();
  static const int kSuitFieldNumber = 1;
  inline ::TCardsType suit() const;
  inline void set_suit(::TCardsType value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgBlackJackCard)
 private:
  inline void set_has_suit();
  inline void clear_has_suit();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int suit_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_msg_5fblackjack_2eproto();
  friend void protobuf_AssignDesc_msg_5fblackjack_2eproto();
  friend void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

  void InitAsDefaultInstance();
  static MsgBlackJackCard* default_instance_;
};
// -------------------------------------------------------------------

class MsgPour : public ::google::protobuf::Message {
 public:
  MsgPour();
  virtual ~MsgPour();

  MsgPour(const MsgPour& from);

  inline MsgPour& operator=(const MsgPour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPour& default_instance();

  void Swap(MsgPour* other);

  // implements Message ----------------------------------------------

  MsgPour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPour& from);
  void MergeFrom(const MsgPour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 pour = 1;
  inline bool has_pour() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 1;
  inline ::google::protobuf::uint64 pour() const;
  inline void set_pour(::google::protobuf::uint64 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgPour)
 private:
  inline void set_has_pour();
  inline void clear_has_pour();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 pour_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_msg_5fblackjack_2eproto();
  friend void protobuf_AssignDesc_msg_5fblackjack_2eproto();
  friend void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

  void InitAsDefaultInstance();
  static MsgPour* default_instance_;
};
// -------------------------------------------------------------------

class MsgBlackJackPourList : public ::google::protobuf::Message {
 public:
  MsgBlackJackPourList();
  virtual ~MsgBlackJackPourList();

  MsgBlackJackPourList(const MsgBlackJackPourList& from);

  inline MsgBlackJackPourList& operator=(const MsgBlackJackPourList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBlackJackPourList& default_instance();

  void Swap(MsgBlackJackPourList* other);

  // implements Message ----------------------------------------------

  MsgBlackJackPourList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBlackJackPourList& from);
  void MergeFrom(const MsgBlackJackPourList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgPour pour_list = 1;
  inline int pour_list_size() const;
  inline void clear_pour_list();
  static const int kPourListFieldNumber = 1;
  inline const ::MsgPour& pour_list(int index) const;
  inline ::MsgPour* mutable_pour_list(int index);
  inline ::MsgPour* add_pour_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgPour >&
      pour_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgPour >*
      mutable_pour_list();

  // @@protoc_insertion_point(class_scope:MsgBlackJackPourList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgPour > pour_list_;
  friend void  protobuf_AddDesc_msg_5fblackjack_2eproto();
  friend void protobuf_AssignDesc_msg_5fblackjack_2eproto();
  friend void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

  void InitAsDefaultInstance();
  static MsgBlackJackPourList* default_instance_;
};
// -------------------------------------------------------------------

class MsgBlackjackPlayerInfo : public ::google::protobuf::Message {
 public:
  MsgBlackjackPlayerInfo();
  virtual ~MsgBlackjackPlayerInfo();

  MsgBlackjackPlayerInfo(const MsgBlackjackPlayerInfo& from);

  inline MsgBlackjackPlayerInfo& operator=(const MsgBlackjackPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBlackjackPlayerInfo& default_instance();

  void Swap(MsgBlackjackPlayerInfo* other);

  // implements Message ----------------------------------------------

  MsgBlackjackPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBlackjackPlayerInfo& from);
  void MergeFrom(const MsgBlackjackPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPlayerInfo player_base = 1;
  inline bool has_player_base() const;
  inline void clear_player_base();
  static const int kPlayerBaseFieldNumber = 1;
  inline const ::MsgPlayerInfo& player_base() const;
  inline ::MsgPlayerInfo* mutable_player_base();
  inline ::MsgPlayerInfo* release_player_base();
  inline void set_allocated_player_base(::MsgPlayerInfo* player_base);

  // repeated .MsgPour pour = 2;
  inline int pour_size() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 2;
  inline const ::MsgPour& pour(int index) const;
  inline ::MsgPour* mutable_pour(int index);
  inline ::MsgPour* add_pour();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgPour >&
      pour() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgPour >*
      mutable_pour();

  // repeated .MsgBlackJackCard hand_cards = 3;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 3;
  inline const ::MsgBlackJackCard& hand_cards(int index) const;
  inline ::MsgBlackJackCard* mutable_hand_cards(int index);
  inline ::MsgBlackJackCard* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >*
      mutable_hand_cards();

  // optional bool hand_cards_stop = 4;
  inline bool has_hand_cards_stop() const;
  inline void clear_hand_cards_stop();
  static const int kHandCardsStopFieldNumber = 4;
  inline bool hand_cards_stop() const;
  inline void set_hand_cards_stop(bool value);

  // optional bool hand_cards_double = 5;
  inline bool has_hand_cards_double() const;
  inline void clear_hand_cards_double();
  static const int kHandCardsDoubleFieldNumber = 5;
  inline bool hand_cards_double() const;
  inline void set_hand_cards_double(bool value);

  // repeated .MsgBlackJackCard split_cards = 6;
  inline int split_cards_size() const;
  inline void clear_split_cards();
  static const int kSplitCardsFieldNumber = 6;
  inline const ::MsgBlackJackCard& split_cards(int index) const;
  inline ::MsgBlackJackCard* mutable_split_cards(int index);
  inline ::MsgBlackJackCard* add_split_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >&
      split_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >*
      mutable_split_cards();

  // optional bool split_cards_stop = 7;
  inline bool has_split_cards_stop() const;
  inline void clear_split_cards_stop();
  static const int kSplitCardsStopFieldNumber = 7;
  inline bool split_cards_stop() const;
  inline void set_split_cards_stop(bool value);

  // optional bool split_cards_double = 8;
  inline bool has_split_cards_double() const;
  inline void clear_split_cards_double();
  static const int kSplitCardsDoubleFieldNumber = 8;
  inline bool split_cards_double() const;
  inline void set_split_cards_double(bool value);

  // optional bool is_buy_surrender = 9;
  inline bool has_is_buy_surrender() const;
  inline void clear_is_buy_surrender();
  static const int kIsBuySurrenderFieldNumber = 9;
  inline bool is_buy_surrender() const;
  inline void set_is_buy_surrender(bool value);

  // optional int64 challenge_coin = 10;
  inline bool has_challenge_coin() const;
  inline void clear_challenge_coin();
  static const int kChallengeCoinFieldNumber = 10;
  inline ::google::protobuf::int64 challenge_coin() const;
  inline void set_challenge_coin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgBlackjackPlayerInfo)
 private:
  inline void set_has_player_base();
  inline void clear_has_player_base();
  inline void set_has_hand_cards_stop();
  inline void clear_has_hand_cards_stop();
  inline void set_has_hand_cards_double();
  inline void clear_has_hand_cards_double();
  inline void set_has_split_cards_stop();
  inline void clear_has_split_cards_stop();
  inline void set_has_split_cards_double();
  inline void clear_has_split_cards_double();
  inline void set_has_is_buy_surrender();
  inline void clear_has_is_buy_surrender();
  inline void set_has_challenge_coin();
  inline void clear_has_challenge_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MsgPlayerInfo* player_base_;
  ::google::protobuf::RepeatedPtrField< ::MsgPour > pour_;
  ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard > hand_cards_;
  ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard > split_cards_;
  bool hand_cards_stop_;
  bool hand_cards_double_;
  bool split_cards_stop_;
  bool split_cards_double_;
  bool is_buy_surrender_;
  ::google::protobuf::int64 challenge_coin_;
  friend void  protobuf_AddDesc_msg_5fblackjack_2eproto();
  friend void protobuf_AssignDesc_msg_5fblackjack_2eproto();
  friend void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

  void InitAsDefaultInstance();
  static MsgBlackjackPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgBlackjackRoomInfo : public ::google::protobuf::Message {
 public:
  MsgBlackjackRoomInfo();
  virtual ~MsgBlackjackRoomInfo();

  MsgBlackjackRoomInfo(const MsgBlackjackRoomInfo& from);

  inline MsgBlackjackRoomInfo& operator=(const MsgBlackjackRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBlackjackRoomInfo& default_instance();

  void Swap(MsgBlackjackRoomInfo* other);

  // implements Message ----------------------------------------------

  MsgBlackjackRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBlackjackRoomInfo& from);
  void MergeFrom(const MsgBlackjackRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TBlackJackState room_state = 1;
  inline bool has_room_state() const;
  inline void clear_room_state();
  static const int kRoomStateFieldNumber = 1;
  inline ::TBlackJackState room_state() const;
  inline void set_room_state(::TBlackJackState value);

  // optional int64 sur_time = 2;
  inline bool has_sur_time() const;
  inline void clear_sur_time();
  static const int kSurTimeFieldNumber = 2;
  inline ::google::protobuf::int64 sur_time() const;
  inline void set_sur_time(::google::protobuf::int64 value);

  // optional .MsgBlackjackPlayerInfo makers = 3;
  inline bool has_makers() const;
  inline void clear_makers();
  static const int kMakersFieldNumber = 3;
  inline const ::MsgBlackjackPlayerInfo& makers() const;
  inline ::MsgBlackjackPlayerInfo* mutable_makers();
  inline ::MsgBlackjackPlayerInfo* release_makers();
  inline void set_allocated_makers(::MsgBlackjackPlayerInfo* makers);

  // repeated .MsgBlackjackPlayerInfo player_list = 4;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 4;
  inline const ::MsgBlackjackPlayerInfo& player_list(int index) const;
  inline ::MsgBlackjackPlayerInfo* mutable_player_list(int index);
  inline ::MsgBlackjackPlayerInfo* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackjackPlayerInfo >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgBlackjackPlayerInfo >*
      mutable_player_list();

  // repeated uint64 seats = 5;
  inline int seats_size() const;
  inline void clear_seats();
  static const int kSeatsFieldNumber = 5;
  inline ::google::protobuf::uint64 seats(int index) const;
  inline void set_seats(int index, ::google::protobuf::uint64 value);
  inline void add_seats(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      seats() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_seats();

  // optional uint32 round = 6;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 6;
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional uint64 room_id = 7;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 7;
  inline ::google::protobuf::uint64 room_id() const;
  inline void set_room_id(::google::protobuf::uint64 value);

  // optional .MsgBaseRoomInfo room_info = 8;
  inline bool has_room_info() const;
  inline void clear_room_info();
  static const int kRoomInfoFieldNumber = 8;
  inline const ::MsgBaseRoomInfo& room_info() const;
  inline ::MsgBaseRoomInfo* mutable_room_info();
  inline ::MsgBaseRoomInfo* release_room_info();
  inline void set_allocated_room_info(::MsgBaseRoomInfo* room_info);

  // @@protoc_insertion_point(class_scope:MsgBlackjackRoomInfo)
 private:
  inline void set_has_room_state();
  inline void clear_has_room_state();
  inline void set_has_sur_time();
  inline void clear_has_sur_time();
  inline void set_has_makers();
  inline void clear_has_makers();
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_info();
  inline void clear_has_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sur_time_;
  ::MsgBlackjackPlayerInfo* makers_;
  int room_state_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::RepeatedPtrField< ::MsgBlackjackPlayerInfo > player_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > seats_;
  ::google::protobuf::uint64 room_id_;
  ::MsgBaseRoomInfo* room_info_;
  friend void  protobuf_AddDesc_msg_5fblackjack_2eproto();
  friend void protobuf_AssignDesc_msg_5fblackjack_2eproto();
  friend void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

  void InitAsDefaultInstance();
  static MsgBlackjackRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgAddPourRes : public ::google::protobuf::Message {
 public:
  MsgAddPourRes();
  virtual ~MsgAddPourRes();

  MsgAddPourRes(const MsgAddPourRes& from);

  inline MsgAddPourRes& operator=(const MsgAddPourRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAddPourRes& default_instance();

  void Swap(MsgAddPourRes* other);

  // implements Message ----------------------------------------------

  MsgAddPourRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAddPourRes& from);
  void MergeFrom(const MsgAddPourRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional uint64 pour = 2;
  inline bool has_pour() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 2;
  inline ::google::protobuf::uint64 pour() const;
  inline void set_pour(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgAddPourRes)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_pour();
  inline void clear_has_pour();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 pour_;
  friend void  protobuf_AddDesc_msg_5fblackjack_2eproto();
  friend void protobuf_AssignDesc_msg_5fblackjack_2eproto();
  friend void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

  void InitAsDefaultInstance();
  static MsgAddPourRes* default_instance_;
};
// -------------------------------------------------------------------

class MsgAskforCardsRes : public ::google::protobuf::Message {
 public:
  MsgAskforCardsRes();
  virtual ~MsgAskforCardsRes();

  MsgAskforCardsRes(const MsgAskforCardsRes& from);

  inline MsgAskforCardsRes& operator=(const MsgAskforCardsRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAskforCardsRes& default_instance();

  void Swap(MsgAskforCardsRes* other);

  // implements Message ----------------------------------------------

  MsgAskforCardsRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAskforCardsRes& from);
  void MergeFrom(const MsgAskforCardsRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional bool is_hand = 2;
  inline bool has_is_hand() const;
  inline void clear_is_hand();
  static const int kIsHandFieldNumber = 2;
  inline bool is_hand() const;
  inline void set_is_hand(bool value);

  // repeated .MsgBlackJackCard cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::MsgBlackJackCard& cards(int index) const;
  inline ::MsgBlackJackCard* mutable_cards(int index);
  inline ::MsgBlackJackCard* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:MsgAskforCardsRes)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_is_hand();
  inline void clear_has_is_hand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard > cards_;
  bool is_hand_;
  friend void  protobuf_AddDesc_msg_5fblackjack_2eproto();
  friend void protobuf_AssignDesc_msg_5fblackjack_2eproto();
  friend void protobuf_ShutdownFile_msg_5fblackjack_2eproto();

  void InitAsDefaultInstance();
  static MsgAskforCardsRes* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgBlackJackCard

// optional .TCardsType suit = 1;
inline bool MsgBlackJackCard::has_suit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBlackJackCard::set_has_suit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBlackJackCard::clear_has_suit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBlackJackCard::clear_suit() {
  suit_ = 0;
  clear_has_suit();
}
inline ::TCardsType MsgBlackJackCard::suit() const {
  // @@protoc_insertion_point(field_get:MsgBlackJackCard.suit)
  return static_cast< ::TCardsType >(suit_);
}
inline void MsgBlackJackCard::set_suit(::TCardsType value) {
  assert(::TCardsType_IsValid(value));
  set_has_suit();
  suit_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackJackCard.suit)
}

// optional uint32 index = 2;
inline bool MsgBlackJackCard::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBlackJackCard::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBlackJackCard::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBlackJackCard::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 MsgBlackJackCard::index() const {
  // @@protoc_insertion_point(field_get:MsgBlackJackCard.index)
  return index_;
}
inline void MsgBlackJackCard::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackJackCard.index)
}

// -------------------------------------------------------------------

// MsgPour

// optional uint64 pour = 1;
inline bool MsgPour::has_pour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPour::set_has_pour() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPour::clear_has_pour() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPour::clear_pour() {
  pour_ = GOOGLE_ULONGLONG(0);
  clear_has_pour();
}
inline ::google::protobuf::uint64 MsgPour::pour() const {
  // @@protoc_insertion_point(field_get:MsgPour.pour)
  return pour_;
}
inline void MsgPour::set_pour(::google::protobuf::uint64 value) {
  set_has_pour();
  pour_ = value;
  // @@protoc_insertion_point(field_set:MsgPour.pour)
}

// optional uint32 num = 2;
inline bool MsgPour::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPour::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPour::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPour::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 MsgPour::num() const {
  // @@protoc_insertion_point(field_get:MsgPour.num)
  return num_;
}
inline void MsgPour::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:MsgPour.num)
}

// -------------------------------------------------------------------

// MsgBlackJackPourList

// repeated .MsgPour pour_list = 1;
inline int MsgBlackJackPourList::pour_list_size() const {
  return pour_list_.size();
}
inline void MsgBlackJackPourList::clear_pour_list() {
  pour_list_.Clear();
}
inline const ::MsgPour& MsgBlackJackPourList::pour_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlackJackPourList.pour_list)
  return pour_list_.Get(index);
}
inline ::MsgPour* MsgBlackJackPourList::mutable_pour_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBlackJackPourList.pour_list)
  return pour_list_.Mutable(index);
}
inline ::MsgPour* MsgBlackJackPourList::add_pour_list() {
  // @@protoc_insertion_point(field_add:MsgBlackJackPourList.pour_list)
  return pour_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgPour >&
MsgBlackJackPourList::pour_list() const {
  // @@protoc_insertion_point(field_list:MsgBlackJackPourList.pour_list)
  return pour_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgPour >*
MsgBlackJackPourList::mutable_pour_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlackJackPourList.pour_list)
  return &pour_list_;
}

// -------------------------------------------------------------------

// MsgBlackjackPlayerInfo

// optional .MsgPlayerInfo player_base = 1;
inline bool MsgBlackjackPlayerInfo::has_player_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBlackjackPlayerInfo::set_has_player_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBlackjackPlayerInfo::clear_has_player_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBlackjackPlayerInfo::clear_player_base() {
  if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
  clear_has_player_base();
}
inline const ::MsgPlayerInfo& MsgBlackjackPlayerInfo::player_base() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.player_base)
  return player_base_ != NULL ? *player_base_ : *default_instance_->player_base_;
}
inline ::MsgPlayerInfo* MsgBlackjackPlayerInfo::mutable_player_base() {
  set_has_player_base();
  if (player_base_ == NULL) player_base_ = new ::MsgPlayerInfo;
  // @@protoc_insertion_point(field_mutable:MsgBlackjackPlayerInfo.player_base)
  return player_base_;
}
inline ::MsgPlayerInfo* MsgBlackjackPlayerInfo::release_player_base() {
  clear_has_player_base();
  ::MsgPlayerInfo* temp = player_base_;
  player_base_ = NULL;
  return temp;
}
inline void MsgBlackjackPlayerInfo::set_allocated_player_base(::MsgPlayerInfo* player_base) {
  delete player_base_;
  player_base_ = player_base;
  if (player_base) {
    set_has_player_base();
  } else {
    clear_has_player_base();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBlackjackPlayerInfo.player_base)
}

// repeated .MsgPour pour = 2;
inline int MsgBlackjackPlayerInfo::pour_size() const {
  return pour_.size();
}
inline void MsgBlackjackPlayerInfo::clear_pour() {
  pour_.Clear();
}
inline const ::MsgPour& MsgBlackjackPlayerInfo::pour(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.pour)
  return pour_.Get(index);
}
inline ::MsgPour* MsgBlackjackPlayerInfo::mutable_pour(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBlackjackPlayerInfo.pour)
  return pour_.Mutable(index);
}
inline ::MsgPour* MsgBlackjackPlayerInfo::add_pour() {
  // @@protoc_insertion_point(field_add:MsgBlackjackPlayerInfo.pour)
  return pour_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgPour >&
MsgBlackjackPlayerInfo::pour() const {
  // @@protoc_insertion_point(field_list:MsgBlackjackPlayerInfo.pour)
  return pour_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgPour >*
MsgBlackjackPlayerInfo::mutable_pour() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlackjackPlayerInfo.pour)
  return &pour_;
}

// repeated .MsgBlackJackCard hand_cards = 3;
inline int MsgBlackjackPlayerInfo::hand_cards_size() const {
  return hand_cards_.size();
}
inline void MsgBlackjackPlayerInfo::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::MsgBlackJackCard& MsgBlackjackPlayerInfo::hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.hand_cards)
  return hand_cards_.Get(index);
}
inline ::MsgBlackJackCard* MsgBlackjackPlayerInfo::mutable_hand_cards(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBlackjackPlayerInfo.hand_cards)
  return hand_cards_.Mutable(index);
}
inline ::MsgBlackJackCard* MsgBlackjackPlayerInfo::add_hand_cards() {
  // @@protoc_insertion_point(field_add:MsgBlackjackPlayerInfo.hand_cards)
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >&
MsgBlackjackPlayerInfo::hand_cards() const {
  // @@protoc_insertion_point(field_list:MsgBlackjackPlayerInfo.hand_cards)
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >*
MsgBlackjackPlayerInfo::mutable_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlackjackPlayerInfo.hand_cards)
  return &hand_cards_;
}

// optional bool hand_cards_stop = 4;
inline bool MsgBlackjackPlayerInfo::has_hand_cards_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgBlackjackPlayerInfo::set_has_hand_cards_stop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgBlackjackPlayerInfo::clear_has_hand_cards_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgBlackjackPlayerInfo::clear_hand_cards_stop() {
  hand_cards_stop_ = false;
  clear_has_hand_cards_stop();
}
inline bool MsgBlackjackPlayerInfo::hand_cards_stop() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.hand_cards_stop)
  return hand_cards_stop_;
}
inline void MsgBlackjackPlayerInfo::set_hand_cards_stop(bool value) {
  set_has_hand_cards_stop();
  hand_cards_stop_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackPlayerInfo.hand_cards_stop)
}

// optional bool hand_cards_double = 5;
inline bool MsgBlackjackPlayerInfo::has_hand_cards_double() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgBlackjackPlayerInfo::set_has_hand_cards_double() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgBlackjackPlayerInfo::clear_has_hand_cards_double() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgBlackjackPlayerInfo::clear_hand_cards_double() {
  hand_cards_double_ = false;
  clear_has_hand_cards_double();
}
inline bool MsgBlackjackPlayerInfo::hand_cards_double() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.hand_cards_double)
  return hand_cards_double_;
}
inline void MsgBlackjackPlayerInfo::set_hand_cards_double(bool value) {
  set_has_hand_cards_double();
  hand_cards_double_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackPlayerInfo.hand_cards_double)
}

// repeated .MsgBlackJackCard split_cards = 6;
inline int MsgBlackjackPlayerInfo::split_cards_size() const {
  return split_cards_.size();
}
inline void MsgBlackjackPlayerInfo::clear_split_cards() {
  split_cards_.Clear();
}
inline const ::MsgBlackJackCard& MsgBlackjackPlayerInfo::split_cards(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.split_cards)
  return split_cards_.Get(index);
}
inline ::MsgBlackJackCard* MsgBlackjackPlayerInfo::mutable_split_cards(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBlackjackPlayerInfo.split_cards)
  return split_cards_.Mutable(index);
}
inline ::MsgBlackJackCard* MsgBlackjackPlayerInfo::add_split_cards() {
  // @@protoc_insertion_point(field_add:MsgBlackjackPlayerInfo.split_cards)
  return split_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >&
MsgBlackjackPlayerInfo::split_cards() const {
  // @@protoc_insertion_point(field_list:MsgBlackjackPlayerInfo.split_cards)
  return split_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >*
MsgBlackjackPlayerInfo::mutable_split_cards() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlackjackPlayerInfo.split_cards)
  return &split_cards_;
}

// optional bool split_cards_stop = 7;
inline bool MsgBlackjackPlayerInfo::has_split_cards_stop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgBlackjackPlayerInfo::set_has_split_cards_stop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgBlackjackPlayerInfo::clear_has_split_cards_stop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgBlackjackPlayerInfo::clear_split_cards_stop() {
  split_cards_stop_ = false;
  clear_has_split_cards_stop();
}
inline bool MsgBlackjackPlayerInfo::split_cards_stop() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.split_cards_stop)
  return split_cards_stop_;
}
inline void MsgBlackjackPlayerInfo::set_split_cards_stop(bool value) {
  set_has_split_cards_stop();
  split_cards_stop_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackPlayerInfo.split_cards_stop)
}

// optional bool split_cards_double = 8;
inline bool MsgBlackjackPlayerInfo::has_split_cards_double() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgBlackjackPlayerInfo::set_has_split_cards_double() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgBlackjackPlayerInfo::clear_has_split_cards_double() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgBlackjackPlayerInfo::clear_split_cards_double() {
  split_cards_double_ = false;
  clear_has_split_cards_double();
}
inline bool MsgBlackjackPlayerInfo::split_cards_double() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.split_cards_double)
  return split_cards_double_;
}
inline void MsgBlackjackPlayerInfo::set_split_cards_double(bool value) {
  set_has_split_cards_double();
  split_cards_double_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackPlayerInfo.split_cards_double)
}

// optional bool is_buy_surrender = 9;
inline bool MsgBlackjackPlayerInfo::has_is_buy_surrender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgBlackjackPlayerInfo::set_has_is_buy_surrender() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgBlackjackPlayerInfo::clear_has_is_buy_surrender() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgBlackjackPlayerInfo::clear_is_buy_surrender() {
  is_buy_surrender_ = false;
  clear_has_is_buy_surrender();
}
inline bool MsgBlackjackPlayerInfo::is_buy_surrender() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.is_buy_surrender)
  return is_buy_surrender_;
}
inline void MsgBlackjackPlayerInfo::set_is_buy_surrender(bool value) {
  set_has_is_buy_surrender();
  is_buy_surrender_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackPlayerInfo.is_buy_surrender)
}

// optional int64 challenge_coin = 10;
inline bool MsgBlackjackPlayerInfo::has_challenge_coin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgBlackjackPlayerInfo::set_has_challenge_coin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgBlackjackPlayerInfo::clear_has_challenge_coin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgBlackjackPlayerInfo::clear_challenge_coin() {
  challenge_coin_ = GOOGLE_LONGLONG(0);
  clear_has_challenge_coin();
}
inline ::google::protobuf::int64 MsgBlackjackPlayerInfo::challenge_coin() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackPlayerInfo.challenge_coin)
  return challenge_coin_;
}
inline void MsgBlackjackPlayerInfo::set_challenge_coin(::google::protobuf::int64 value) {
  set_has_challenge_coin();
  challenge_coin_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackPlayerInfo.challenge_coin)
}

// -------------------------------------------------------------------

// MsgBlackjackRoomInfo

// optional .TBlackJackState room_state = 1;
inline bool MsgBlackjackRoomInfo::has_room_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBlackjackRoomInfo::set_has_room_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBlackjackRoomInfo::clear_has_room_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBlackjackRoomInfo::clear_room_state() {
  room_state_ = 0;
  clear_has_room_state();
}
inline ::TBlackJackState MsgBlackjackRoomInfo::room_state() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.room_state)
  return static_cast< ::TBlackJackState >(room_state_);
}
inline void MsgBlackjackRoomInfo::set_room_state(::TBlackJackState value) {
  assert(::TBlackJackState_IsValid(value));
  set_has_room_state();
  room_state_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackRoomInfo.room_state)
}

// optional int64 sur_time = 2;
inline bool MsgBlackjackRoomInfo::has_sur_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBlackjackRoomInfo::set_has_sur_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBlackjackRoomInfo::clear_has_sur_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBlackjackRoomInfo::clear_sur_time() {
  sur_time_ = GOOGLE_LONGLONG(0);
  clear_has_sur_time();
}
inline ::google::protobuf::int64 MsgBlackjackRoomInfo::sur_time() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.sur_time)
  return sur_time_;
}
inline void MsgBlackjackRoomInfo::set_sur_time(::google::protobuf::int64 value) {
  set_has_sur_time();
  sur_time_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackRoomInfo.sur_time)
}

// optional .MsgBlackjackPlayerInfo makers = 3;
inline bool MsgBlackjackRoomInfo::has_makers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgBlackjackRoomInfo::set_has_makers() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgBlackjackRoomInfo::clear_has_makers() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgBlackjackRoomInfo::clear_makers() {
  if (makers_ != NULL) makers_->::MsgBlackjackPlayerInfo::Clear();
  clear_has_makers();
}
inline const ::MsgBlackjackPlayerInfo& MsgBlackjackRoomInfo::makers() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.makers)
  return makers_ != NULL ? *makers_ : *default_instance_->makers_;
}
inline ::MsgBlackjackPlayerInfo* MsgBlackjackRoomInfo::mutable_makers() {
  set_has_makers();
  if (makers_ == NULL) makers_ = new ::MsgBlackjackPlayerInfo;
  // @@protoc_insertion_point(field_mutable:MsgBlackjackRoomInfo.makers)
  return makers_;
}
inline ::MsgBlackjackPlayerInfo* MsgBlackjackRoomInfo::release_makers() {
  clear_has_makers();
  ::MsgBlackjackPlayerInfo* temp = makers_;
  makers_ = NULL;
  return temp;
}
inline void MsgBlackjackRoomInfo::set_allocated_makers(::MsgBlackjackPlayerInfo* makers) {
  delete makers_;
  makers_ = makers;
  if (makers) {
    set_has_makers();
  } else {
    clear_has_makers();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBlackjackRoomInfo.makers)
}

// repeated .MsgBlackjackPlayerInfo player_list = 4;
inline int MsgBlackjackRoomInfo::player_list_size() const {
  return player_list_.size();
}
inline void MsgBlackjackRoomInfo::clear_player_list() {
  player_list_.Clear();
}
inline const ::MsgBlackjackPlayerInfo& MsgBlackjackRoomInfo::player_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.player_list)
  return player_list_.Get(index);
}
inline ::MsgBlackjackPlayerInfo* MsgBlackjackRoomInfo::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBlackjackRoomInfo.player_list)
  return player_list_.Mutable(index);
}
inline ::MsgBlackjackPlayerInfo* MsgBlackjackRoomInfo::add_player_list() {
  // @@protoc_insertion_point(field_add:MsgBlackjackRoomInfo.player_list)
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackjackPlayerInfo >&
MsgBlackjackRoomInfo::player_list() const {
  // @@protoc_insertion_point(field_list:MsgBlackjackRoomInfo.player_list)
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgBlackjackPlayerInfo >*
MsgBlackjackRoomInfo::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlackjackRoomInfo.player_list)
  return &player_list_;
}

// repeated uint64 seats = 5;
inline int MsgBlackjackRoomInfo::seats_size() const {
  return seats_.size();
}
inline void MsgBlackjackRoomInfo::clear_seats() {
  seats_.Clear();
}
inline ::google::protobuf::uint64 MsgBlackjackRoomInfo::seats(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.seats)
  return seats_.Get(index);
}
inline void MsgBlackjackRoomInfo::set_seats(int index, ::google::protobuf::uint64 value) {
  seats_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgBlackjackRoomInfo.seats)
}
inline void MsgBlackjackRoomInfo::add_seats(::google::protobuf::uint64 value) {
  seats_.Add(value);
  // @@protoc_insertion_point(field_add:MsgBlackjackRoomInfo.seats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MsgBlackjackRoomInfo::seats() const {
  // @@protoc_insertion_point(field_list:MsgBlackjackRoomInfo.seats)
  return seats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MsgBlackjackRoomInfo::mutable_seats() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlackjackRoomInfo.seats)
  return &seats_;
}

// optional uint32 round = 6;
inline bool MsgBlackjackRoomInfo::has_round() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgBlackjackRoomInfo::set_has_round() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgBlackjackRoomInfo::clear_has_round() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgBlackjackRoomInfo::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 MsgBlackjackRoomInfo::round() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.round)
  return round_;
}
inline void MsgBlackjackRoomInfo::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackRoomInfo.round)
}

// optional uint64 room_id = 7;
inline bool MsgBlackjackRoomInfo::has_room_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgBlackjackRoomInfo::set_has_room_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgBlackjackRoomInfo::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgBlackjackRoomInfo::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
  clear_has_room_id();
}
inline ::google::protobuf::uint64 MsgBlackjackRoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.room_id)
  return room_id_;
}
inline void MsgBlackjackRoomInfo::set_room_id(::google::protobuf::uint64 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackjackRoomInfo.room_id)
}

// optional .MsgBaseRoomInfo room_info = 8;
inline bool MsgBlackjackRoomInfo::has_room_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgBlackjackRoomInfo::set_has_room_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgBlackjackRoomInfo::clear_has_room_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgBlackjackRoomInfo::clear_room_info() {
  if (room_info_ != NULL) room_info_->::MsgBaseRoomInfo::Clear();
  clear_has_room_info();
}
inline const ::MsgBaseRoomInfo& MsgBlackjackRoomInfo::room_info() const {
  // @@protoc_insertion_point(field_get:MsgBlackjackRoomInfo.room_info)
  return room_info_ != NULL ? *room_info_ : *default_instance_->room_info_;
}
inline ::MsgBaseRoomInfo* MsgBlackjackRoomInfo::mutable_room_info() {
  set_has_room_info();
  if (room_info_ == NULL) room_info_ = new ::MsgBaseRoomInfo;
  // @@protoc_insertion_point(field_mutable:MsgBlackjackRoomInfo.room_info)
  return room_info_;
}
inline ::MsgBaseRoomInfo* MsgBlackjackRoomInfo::release_room_info() {
  clear_has_room_info();
  ::MsgBaseRoomInfo* temp = room_info_;
  room_info_ = NULL;
  return temp;
}
inline void MsgBlackjackRoomInfo::set_allocated_room_info(::MsgBaseRoomInfo* room_info) {
  delete room_info_;
  room_info_ = room_info;
  if (room_info) {
    set_has_room_info();
  } else {
    clear_has_room_info();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBlackjackRoomInfo.room_info)
}

// -------------------------------------------------------------------

// MsgAddPourRes

// optional uint64 pid = 1;
inline bool MsgAddPourRes::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAddPourRes::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAddPourRes::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAddPourRes::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 MsgAddPourRes::pid() const {
  // @@protoc_insertion_point(field_get:MsgAddPourRes.pid)
  return pid_;
}
inline void MsgAddPourRes::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:MsgAddPourRes.pid)
}

// optional uint64 pour = 2;
inline bool MsgAddPourRes::has_pour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgAddPourRes::set_has_pour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgAddPourRes::clear_has_pour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgAddPourRes::clear_pour() {
  pour_ = GOOGLE_ULONGLONG(0);
  clear_has_pour();
}
inline ::google::protobuf::uint64 MsgAddPourRes::pour() const {
  // @@protoc_insertion_point(field_get:MsgAddPourRes.pour)
  return pour_;
}
inline void MsgAddPourRes::set_pour(::google::protobuf::uint64 value) {
  set_has_pour();
  pour_ = value;
  // @@protoc_insertion_point(field_set:MsgAddPourRes.pour)
}

// -------------------------------------------------------------------

// MsgAskforCardsRes

// optional uint64 pid = 1;
inline bool MsgAskforCardsRes::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAskforCardsRes::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAskforCardsRes::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAskforCardsRes::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 MsgAskforCardsRes::pid() const {
  // @@protoc_insertion_point(field_get:MsgAskforCardsRes.pid)
  return pid_;
}
inline void MsgAskforCardsRes::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:MsgAskforCardsRes.pid)
}

// optional bool is_hand = 2;
inline bool MsgAskforCardsRes::has_is_hand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgAskforCardsRes::set_has_is_hand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgAskforCardsRes::clear_has_is_hand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgAskforCardsRes::clear_is_hand() {
  is_hand_ = false;
  clear_has_is_hand();
}
inline bool MsgAskforCardsRes::is_hand() const {
  // @@protoc_insertion_point(field_get:MsgAskforCardsRes.is_hand)
  return is_hand_;
}
inline void MsgAskforCardsRes::set_is_hand(bool value) {
  set_has_is_hand();
  is_hand_ = value;
  // @@protoc_insertion_point(field_set:MsgAskforCardsRes.is_hand)
}

// repeated .MsgBlackJackCard cards = 3;
inline int MsgAskforCardsRes::cards_size() const {
  return cards_.size();
}
inline void MsgAskforCardsRes::clear_cards() {
  cards_.Clear();
}
inline const ::MsgBlackJackCard& MsgAskforCardsRes::cards(int index) const {
  // @@protoc_insertion_point(field_get:MsgAskforCardsRes.cards)
  return cards_.Get(index);
}
inline ::MsgBlackJackCard* MsgAskforCardsRes::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:MsgAskforCardsRes.cards)
  return cards_.Mutable(index);
}
inline ::MsgBlackJackCard* MsgAskforCardsRes::add_cards() {
  // @@protoc_insertion_point(field_add:MsgAskforCardsRes.cards)
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >&
MsgAskforCardsRes::cards() const {
  // @@protoc_insertion_point(field_list:MsgAskforCardsRes.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgBlackJackCard >*
MsgAskforCardsRes::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:MsgAskforCardsRes.cards)
  return &cards_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TBlackJackState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TBlackJackState>() {
  return ::TBlackJackState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5fblackjack_2eproto__INCLUDED
