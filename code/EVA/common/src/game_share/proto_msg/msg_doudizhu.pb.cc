// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_doudizhu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_doudizhu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgQiangDiZhu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQiangDiZhu_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQiangDiZhuResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQiangDiZhuResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBRQiangDiZhuResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBRQiangDiZhuResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDiPaiMutiple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDiPaiMutiple_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMingPaiResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMingPaiResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJiaBeiResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJiaBeiResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZActon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZActon_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZUserOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZUserOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZRoomShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZRoomShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZIntegralCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZIntegralCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDDZShowDownEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDDZShowDownEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZPlayerWik_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZCT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZBottomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZQiangDiZhu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZJiaoFen_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZAddTimes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDDZMingPaiType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fdoudizhu_2eproto() {
  protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_doudizhu.proto");
  GOOGLE_CHECK(file != NULL);
  MsgQiangDiZhu_descriptor_ = file->message_type(0);
  static const int MsgQiangDiZhu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhu, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhu, qingdizhu_wiki_),
  };
  MsgQiangDiZhu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQiangDiZhu_descriptor_,
      MsgQiangDiZhu::default_instance_,
      MsgQiangDiZhu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQiangDiZhu));
  MsgQiangDiZhuResult_descriptor_ = file->message_type(1);
  static const int MsgQiangDiZhuResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, dizhu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, multiple_),
  };
  MsgQiangDiZhuResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQiangDiZhuResult_descriptor_,
      MsgQiangDiZhuResult::default_instance_,
      MsgQiangDiZhuResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQiangDiZhuResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQiangDiZhuResult));
  MsgBRQiangDiZhuResult_descriptor_ = file->message_type(2);
  static const int MsgBRQiangDiZhuResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBRQiangDiZhuResult, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBRQiangDiZhuResult, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBRQiangDiZhuResult, dipai_multi_list_),
  };
  MsgBRQiangDiZhuResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBRQiangDiZhuResult_descriptor_,
      MsgBRQiangDiZhuResult::default_instance_,
      MsgBRQiangDiZhuResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBRQiangDiZhuResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBRQiangDiZhuResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBRQiangDiZhuResult));
  MsgDiPaiMutiple_descriptor_ = file->message_type(3);
  static const int MsgDiPaiMutiple_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDiPaiMutiple, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDiPaiMutiple, count_),
  };
  MsgDiPaiMutiple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDiPaiMutiple_descriptor_,
      MsgDiPaiMutiple::default_instance_,
      MsgDiPaiMutiple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDiPaiMutiple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDiPaiMutiple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDiPaiMutiple));
  MsgMingPaiResult_descriptor_ = file->message_type(4);
  static const int MsgMingPaiResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMingPaiResult, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMingPaiResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMingPaiResult, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMingPaiResult, dizhu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMingPaiResult, multiple_),
  };
  MsgMingPaiResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMingPaiResult_descriptor_,
      MsgMingPaiResult::default_instance_,
      MsgMingPaiResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMingPaiResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMingPaiResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMingPaiResult));
  MsgJiaBeiResult_descriptor_ = file->message_type(5);
  static const int MsgJiaBeiResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaBeiResult, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaBeiResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaBeiResult, state_),
  };
  MsgJiaBeiResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJiaBeiResult_descriptor_,
      MsgJiaBeiResult::default_instance_,
      MsgJiaBeiResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaBeiResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaBeiResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJiaBeiResult));
  MsgDDZPlayer_descriptor_ = file->message_type(6);
  static const int MsgDDZPlayer_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, show_down_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, qingdizhu_wiki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, qingdizhu_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, integral_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, out_type_),
  };
  MsgDDZPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZPlayer_descriptor_,
      MsgDDZPlayer::default_instance_,
      MsgDDZPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZPlayer));
  MsgDDZCardInfo_descriptor_ = file->message_type(7);
  static const int MsgDDZCardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZCardInfo, card_),
  };
  MsgDDZCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZCardInfo_descriptor_,
      MsgDDZCardInfo::default_instance_,
      MsgDDZCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZCardInfo));
  MsgDDZActon_descriptor_ = file->message_type(8);
  static const int MsgDDZActon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, new_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, old_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, last_out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, last_out_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, player_list_),
  };
  MsgDDZActon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZActon_descriptor_,
      MsgDDZActon::default_instance_,
      MsgDDZActon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZActon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZActon));
  MsgDDZUserOutCard_descriptor_ = file->message_type(9);
  static const int MsgDDZUserOutCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, old_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, out_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, hand_card_),
  };
  MsgDDZUserOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZUserOutCard_descriptor_,
      MsgDDZUserOutCard::default_instance_,
      MsgDDZUserOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZUserOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZUserOutCard));
  MsgDDZRoom_descriptor_ = file->message_type(10);
  static const int MsgDDZRoom_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, private_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, last_outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, bottom_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, dipai_multi_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, room_pay_type_),
  };
  MsgDDZRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZRoom_descriptor_,
      MsgDDZRoom::default_instance_,
      MsgDDZRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZRoom));
  MsgDDZRoomShowDown_descriptor_ = file->message_type(11);
  static const int MsgDDZRoomShowDown_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, game_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, event_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, integral_list_),
  };
  MsgDDZRoomShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZRoomShowDown_descriptor_,
      MsgDDZRoomShowDown::default_instance_,
      MsgDDZRoomShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZRoomShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZRoomShowDown));
  MsgDDZIntegralCount_descriptor_ = file->message_type(12);
  static const int MsgDDZIntegralCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZIntegralCount, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZIntegralCount, count_),
  };
  MsgDDZIntegralCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZIntegralCount_descriptor_,
      MsgDDZIntegralCount::default_instance_,
      MsgDDZIntegralCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZIntegralCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZIntegralCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZIntegralCount));
  MsgDDZShowDownEvent_descriptor_ = file->message_type(13);
  static const int MsgDDZShowDownEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZShowDownEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZShowDownEvent, count_),
  };
  MsgDDZShowDownEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDDZShowDownEvent_descriptor_,
      MsgDDZShowDownEvent::default_instance_,
      MsgDDZShowDownEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZShowDownEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDDZShowDownEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDDZShowDownEvent));
  TDDZPlayerWik_descriptor_ = file->enum_type(0);
  TDDZPlayerState_descriptor_ = file->enum_type(1);
  TDDZState_descriptor_ = file->enum_type(2);
  TDDZCT_descriptor_ = file->enum_type(3);
  TDDZBottomType_descriptor_ = file->enum_type(4);
  TDDZQiangDiZhu_descriptor_ = file->enum_type(5);
  TDDZJiaoFen_descriptor_ = file->enum_type(6);
  TDDZAddTimes_descriptor_ = file->enum_type(7);
  TDDZMingPaiType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fdoudizhu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQiangDiZhu_descriptor_, &MsgQiangDiZhu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQiangDiZhuResult_descriptor_, &MsgQiangDiZhuResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBRQiangDiZhuResult_descriptor_, &MsgBRQiangDiZhuResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDiPaiMutiple_descriptor_, &MsgDiPaiMutiple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMingPaiResult_descriptor_, &MsgMingPaiResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJiaBeiResult_descriptor_, &MsgJiaBeiResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZPlayer_descriptor_, &MsgDDZPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZCardInfo_descriptor_, &MsgDDZCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZActon_descriptor_, &MsgDDZActon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZUserOutCard_descriptor_, &MsgDDZUserOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZRoom_descriptor_, &MsgDDZRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZRoomShowDown_descriptor_, &MsgDDZRoomShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZIntegralCount_descriptor_, &MsgDDZIntegralCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDDZShowDownEvent_descriptor_, &MsgDDZShowDownEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fdoudizhu_2eproto() {
  delete MsgQiangDiZhu::default_instance_;
  delete MsgQiangDiZhu_reflection_;
  delete MsgQiangDiZhuResult::default_instance_;
  delete MsgQiangDiZhuResult_reflection_;
  delete MsgBRQiangDiZhuResult::default_instance_;
  delete MsgBRQiangDiZhuResult_reflection_;
  delete MsgDiPaiMutiple::default_instance_;
  delete MsgDiPaiMutiple_reflection_;
  delete MsgMingPaiResult::default_instance_;
  delete MsgMingPaiResult_reflection_;
  delete MsgJiaBeiResult::default_instance_;
  delete MsgJiaBeiResult_reflection_;
  delete MsgDDZPlayer::default_instance_;
  delete MsgDDZPlayer_reflection_;
  delete MsgDDZCardInfo::default_instance_;
  delete MsgDDZCardInfo_reflection_;
  delete MsgDDZActon::default_instance_;
  delete MsgDDZActon_reflection_;
  delete MsgDDZUserOutCard::default_instance_;
  delete MsgDDZUserOutCard_reflection_;
  delete MsgDDZRoom::default_instance_;
  delete MsgDDZRoom_reflection_;
  delete MsgDDZRoomShowDown::default_instance_;
  delete MsgDDZRoomShowDown_reflection_;
  delete MsgDDZIntegralCount::default_instance_;
  delete MsgDDZIntegralCount_reflection_;
  delete MsgDDZShowDownEvent::default_instance_;
  delete MsgDDZShowDownEvent_reflection_;
}

void protobuf_AddDesc_msg_5fdoudizhu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022msg_doudizhu.proto\032\020public_pro.proto\"7"
    "\n\rMsgQiangDiZhu\022\016\n\006playid\030\001 \001(\004\022\026\n\016qingd"
    "izhu_wiki\030\002 \001(\004\"\216\001\n\023MsgQiangDiZhuResult\022"
    "\016\n\006playid\030\001 \001(\004\022\016\n\006result\030\002 \001(\004\022\r\n\005state"
    "\030\003 \001(\004\022#\n\ndizhu_card\030\004 \003(\0132\017.MsgDDZCardI"
    "nfo\022\021\n\tCardCount\030\005 \001(\004\022\020\n\010multiple\030\006 \001(\004"
    "\"\200\001\n\025MsgBRQiangDiZhuResult\022)\n\013player_lis"
    "t\030\001 \003(\0132\024.MsgQiangDiZhuResult\022\020\n\010multipl"
    "e\030\002 \001(\004\022*\n\020dipai_multi_list\030\003 \003(\0132\020.MsgD"
    "iPaiMutiple\"2\n\017MsgDiPaiMutiple\022\020\n\010event_"
    "id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"x\n\020MsgMingPaiRes"
    "ult\022\016\n\006playid\030\001 \001(\004\022\016\n\006result\030\002 \001(\004\022\r\n\005s"
    "tate\030\003 \001(\004\022#\n\ndizhu_card\030\004 \003(\0132\017.MsgDDZC"
    "ardInfo\022\020\n\010multiple\030\005 \001(\004\"@\n\017MsgJiaBeiRe"
    "sult\022\016\n\006playid\030\001 \001(\004\022\016\n\006result\030\002 \001(\004\022\r\n\005"
    "state\030\003 \001(\004\"\277\002\n\014MsgDDZPlayer\022#\n\013player_b"
    "ase\030\001 \001(\0132\016.MsgPlayerInfo\022\r\n\005state\030\002 \001(\r"
    "\022\022\n\nhand_count\030\003 \001(\r\022\"\n\tcard_list\030\004 \003(\0132"
    "\017.MsgDDZCardInfo\022\r\n\005seats\030\005 \001(\r\022\r\n\005score"
    "\030\006 \001(\003\022\027\n\017show_down_score\030\007 \001(\003\022\026\n\016qingd"
    "izhu_wiki\030\010 \001(\r\022\027\n\017qingdizhu_value\030\t \001(\r"
    "\022\020\n\010multiple\030\n \001(\r\022\024\n\014integral_num\030\013 \001(\r"
    "\022!\n\010out_card\030\014 \003(\0132\017.MsgDDZCardInfo\022\020\n\010o"
    "ut_type\030\r \001(\r\"\036\n\016MsgDDZCardInfo\022\014\n\004card\030"
    "\001 \001(\r\"\251\001\n\013MsgDDZActon\022\024\n\014new_actionid\030\001 "
    "\001(\004\022\024\n\014old_actionid\030\002 \001(\004\022&\n\rlast_out_ca"
    "rd\030\003 \003(\0132\017.MsgDDZCardInfo\022\025\n\rlast_out_ty"
    "pe\030\004 \001(\r\022\013\n\003wik\030\005 \001(\r\022\"\n\013player_list\030\006 \003"
    "(\0132\r.MsgDDZPlayer\"\250\001\n\021MsgDDZUserOutCard\022"
    "\024\n\014old_actionid\030\001 \001(\004\022\020\n\010out_type\030\002 \001(\r\022"
    "\022\n\nhand_count\030\003 \001(\r\022!\n\010out_card\030\004 \003(\0132\017."
    "MsgDDZCardInfo\022\020\n\010multiple\030\005 \001(\004\022\"\n\thand"
    "_card\030\006 \003(\0132\017.MsgDDZCardInfo\"\373\002\n\nMsgDDZR"
    "oom\022\036\n\nroom_state\030\001 \001(\0162\n.TDDZState\022\022\n\ns"
    "tate_time\030\002 \001(\r\022\"\n\013player_list\030\003 \003(\0132\r.M"
    "sgDDZPlayer\022\021\n\taction_id\030\004 \001(\004\022\017\n\007room_i"
    "d\030\005 \001(\004\022\022\n\ngame_count\030\006 \001(\r\022+\n\014private_r"
    "oom\030\007 \001(\0132\025.MsgCreatePrivateRoom\022(\n\014last"
    "_outcard\030\010 \001(\0132\022.MsgDDZUserOutCard\022\013\n\003wi"
    "k\030\t \001(\r\022$\n\013bottom_card\030\n \003(\0132\017.MsgDDZCar"
    "dInfo\022\020\n\010multiple\030\013 \001(\004\022*\n\020dipai_multi_l"
    "ist\030\014 \003(\0132\020.MsgDiPaiMutiple\022\025\n\rroom_pay_"
    "type\030\r \001(\r\"\212\002\n\022MsgDDZRoomShowDown\022\036\n\nroo"
    "m_state\030\001 \001(\0162\n.TDDZState\022\022\n\nstate_time\030"
    "\002 \001(\r\022\"\n\013player_list\030\003 \003(\0132\r.MsgDDZPlaye"
    "r\022\017\n\007room_id\030\004 \001(\004\022\022\n\ngame_count\030\005 \001(\r\022\014"
    "\n\004time\030\006 \001(\r\022\021\n\tgame_over\030\010 \001(\010\022)\n\013event"
    "_count\030\t \003(\0132\024.MsgDDZShowDownEvent\022+\n\rin"
    "tegral_list\030\n \003(\0132\024.MsgDDZIntegralCount\""
    "4\n\023MsgDDZIntegralCount\022\016\n\006roleid\030\001 \001(\004\022\r"
    "\n\005count\030\002 \001(\r\"6\n\023MsgDDZShowDownEvent\022\020\n\010"
    "event_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r*v\n\rTDDZPla"
    "yerWik\022\020\n\014ASK_DDZ_NULL\020\001\022\021\n\rASK_DDZ_TISH"
    "I\020\002\022\021\n\rASK_DDZ_BUCHU\020\004\022\022\n\016ASK_DDZ_CHUPAI"
    "\020\010\022\031\n\025ASK_DDZ_DIZHU_MINGPAI\020\020*\325\003\n\017TDDZPl"
    "ayerState\022\023\n\017STATE_DDZ_READY\020\001\022\024\n\020STATE_"
    "DDZ_GUOPAI\020\002\022\026\n\022STATE_DDZ_CHUNTIAN\020\004\022\025\n\021"
    "STATE_DDZ_NEWROLE\020\010\022\030\n\024STATE_DDZ_ROOM_OW"
    "NER\020\020\022\025\n\021STATE_DDZ_RELIEVE\020 \022\023\n\017STATE_DD"
    "Z_LEAVE\020@\022\024\n\017STATE_DDZ_LIMIT\020\200\001\022\026\n\021STATE"
    "_DDZ_OFFLINE\020\200\002\022\026\n\021STATE_DDZ_MINGPAI\020\200\004\022"
    "\024\n\017STATE_DDZ_DIZHU\020\200\010\022\027\n\022STATE_DDZ_NONGM"
    "ING\020\200\020\022\025\n\020STATE_DDZ_JIABEI\020\200 \022\031\n\024STATE_D"
    "DZ_QIANGDIZHU\020\200@\022\035\n\027STATE_DDZ_SELECT_JIA"
    "BEI\020\200\200\001\022#\n\035STATE_DDZ_SELECT_MINGPAISTART"
    "\020\200\200\002\022\030\n\022STATE_DDZ_FENGDING\020\200\200\004\022\035\n\027STATE_"
    "DDZ_CONTINUE_GAME\020\200\200\010*\236\002\n\tTDDZState\022\021\n\rT"
    "DDZStateWait\020\000\022\033\n\027TDDZStateCheckStartGam"
    "e\020\001\022 \n\034TDDZStateSelectMingCardStart\020\002\022\026\n"
    "\022TDDZStateStartGame\020\003\022\025\n\021TDDZStateSendCa"
    "rd\020\004\022\027\n\023TDDZStateQiangDiZhu\020\005\022\033\n\027TDDZSta"
    "teSelectAddTimes\020\006\022\023\n\017TDDZStateAction\020\007\022"
    "\024\n\020TDDZStateOutCard\020\010\022\025\n\021TDDZStateShowDo"
    "wn\020\t\022\030\n\024TDDZStateRelieveRoom\020\n*\373\002\n\006TDDZC"
    "T\022\020\n\014CT_DDZ_ERROR\020\000\022\021\n\rCT_DDZ_SINGLE\020\001\022\021"
    "\n\rCT_DDZ_DOUBLE\020\002\022\025\n\021CT_DDZ_THREE_TIAO\020\003"
    "\022\036\n\032CT_DDZ_THREE_TIAO_WITH_ONE\020\004\022 \n\034CT_D"
    "DZ_THREE_TIAO_WITH_YIDUI\020\005\022\022\n\016CT_DDZ_SHU"
    "N_ZI\020\006\022\023\n\017CT_DDZ_LIAN_DUI\020\007\022\032\n\026CT_DDZ_FE"
    "IJI_WITH_NULL\020\010\022\031\n\025CT_DDZ_FEIJI_WITH_ONE"
    "\020\t\022\033\n\027CT_DDZ_FEIJI_WITH_YIDUI\020\n\022\032\n\026CT_DD"
    "Z_FOUR_WITHDOUBLE\020\013\022\030\n\024CT_DDZ_FOUR_LIANG"
    "DUI\020\014\022\031\n\025CT_DDZ_ZHADAN_SIZHANG\020\r\022\022\n\016CT_D"
    "DZ_HUOJIAN\020\016*\261\001\n\016TDDZBottomType\022\017\n\013DDZ_B"
    "T_NULL\020\000\022\024\n\020DDZ_BT_XIAO_KING\020\001\022\022\n\016DDZ_BT"
    "_DA_KING\020\002\022\020\n\014DDZ_BT_DUIZI\020\003\022\022\n\016DDZ_BT_T"
    "ONGHUA\020\004\022\021\n\rDDZ_BT_SHUNZI\020\005\022\023\n\017DDZ_BT_SA"
    "NZHANG\020\006\022\026\n\022DDZ_BT_TONGHUASHUN\020\007*h\n\016TDDZ"
    "QiangDiZhu\022\025\n\021DDZ_QDZ_JIAODIZHU\020\001\022\022\n\016DDZ"
    "_QDZ_BUJIAO\020\002\022\026\n\022DDZ_QDZ_QIANGDIZHU\020\004\022\023\n"
    "\017DDZ_QDZ_BUQIANG\020\010*a\n\013TDDZJiaoFen\022\021\n\rDDZ"
    "_JF_BUJIAO\020\001\022\023\n\017DDZ_JF_JIAO_ONE\020\002\022\023\n\017DDZ"
    "_JF_JIAO_TWO\020\004\022\025\n\021DDZ_JF_JIAO_THREE\020\010*G\n"
    "\014TDDZAddTimes\022\017\n\013DDZ_AT_NULL\020\000\022\023\n\017DDZ_AT"
    "_BUJIABIE\020\001\022\021\n\rDDZ_AT_JIABIE\020\002*S\n\017TDDZMi"
    "ngPaiType\022\017\n\013DDZ_MP_NULL\020\000\022\026\n\022DDZ_MP_NOR"
    "MALSTART\020\001\022\027\n\023DDZ_MP_MINGPAISTART\020\002", 3875);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_doudizhu.proto", &protobuf_RegisterTypes);
  MsgQiangDiZhu::default_instance_ = new MsgQiangDiZhu();
  MsgQiangDiZhuResult::default_instance_ = new MsgQiangDiZhuResult();
  MsgBRQiangDiZhuResult::default_instance_ = new MsgBRQiangDiZhuResult();
  MsgDiPaiMutiple::default_instance_ = new MsgDiPaiMutiple();
  MsgMingPaiResult::default_instance_ = new MsgMingPaiResult();
  MsgJiaBeiResult::default_instance_ = new MsgJiaBeiResult();
  MsgDDZPlayer::default_instance_ = new MsgDDZPlayer();
  MsgDDZCardInfo::default_instance_ = new MsgDDZCardInfo();
  MsgDDZActon::default_instance_ = new MsgDDZActon();
  MsgDDZUserOutCard::default_instance_ = new MsgDDZUserOutCard();
  MsgDDZRoom::default_instance_ = new MsgDDZRoom();
  MsgDDZRoomShowDown::default_instance_ = new MsgDDZRoomShowDown();
  MsgDDZIntegralCount::default_instance_ = new MsgDDZIntegralCount();
  MsgDDZShowDownEvent::default_instance_ = new MsgDDZShowDownEvent();
  MsgQiangDiZhu::default_instance_->InitAsDefaultInstance();
  MsgQiangDiZhuResult::default_instance_->InitAsDefaultInstance();
  MsgBRQiangDiZhuResult::default_instance_->InitAsDefaultInstance();
  MsgDiPaiMutiple::default_instance_->InitAsDefaultInstance();
  MsgMingPaiResult::default_instance_->InitAsDefaultInstance();
  MsgJiaBeiResult::default_instance_->InitAsDefaultInstance();
  MsgDDZPlayer::default_instance_->InitAsDefaultInstance();
  MsgDDZCardInfo::default_instance_->InitAsDefaultInstance();
  MsgDDZActon::default_instance_->InitAsDefaultInstance();
  MsgDDZUserOutCard::default_instance_->InitAsDefaultInstance();
  MsgDDZRoom::default_instance_->InitAsDefaultInstance();
  MsgDDZRoomShowDown::default_instance_->InitAsDefaultInstance();
  MsgDDZIntegralCount::default_instance_->InitAsDefaultInstance();
  MsgDDZShowDownEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fdoudizhu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fdoudizhu_2eproto {
  StaticDescriptorInitializer_msg_5fdoudizhu_2eproto() {
    protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  }
} static_descriptor_initializer_msg_5fdoudizhu_2eproto_;
const ::google::protobuf::EnumDescriptor* TDDZPlayerWik_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZPlayerWik_descriptor_;
}
bool TDDZPlayerWik_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZPlayerState_descriptor_;
}
bool TDDZPlayerState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZState_descriptor_;
}
bool TDDZState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZCT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZCT_descriptor_;
}
bool TDDZCT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZBottomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZBottomType_descriptor_;
}
bool TDDZBottomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZQiangDiZhu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZQiangDiZhu_descriptor_;
}
bool TDDZQiangDiZhu_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZJiaoFen_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZJiaoFen_descriptor_;
}
bool TDDZJiaoFen_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZAddTimes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZAddTimes_descriptor_;
}
bool TDDZAddTimes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDDZMingPaiType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDDZMingPaiType_descriptor_;
}
bool TDDZMingPaiType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQiangDiZhu::kPlayidFieldNumber;
const int MsgQiangDiZhu::kQingdizhuWikiFieldNumber;
#endif  // !_MSC_VER

MsgQiangDiZhu::MsgQiangDiZhu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQiangDiZhu)
}

void MsgQiangDiZhu::InitAsDefaultInstance() {
}

MsgQiangDiZhu::MsgQiangDiZhu(const MsgQiangDiZhu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQiangDiZhu)
}

void MsgQiangDiZhu::SharedCtor() {
  _cached_size_ = 0;
  playid_ = GOOGLE_ULONGLONG(0);
  qingdizhu_wiki_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQiangDiZhu::~MsgQiangDiZhu() {
  // @@protoc_insertion_point(destructor:MsgQiangDiZhu)
  SharedDtor();
}

void MsgQiangDiZhu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQiangDiZhu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQiangDiZhu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQiangDiZhu_descriptor_;
}

const MsgQiangDiZhu& MsgQiangDiZhu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgQiangDiZhu* MsgQiangDiZhu::default_instance_ = NULL;

MsgQiangDiZhu* MsgQiangDiZhu::New() const {
  return new MsgQiangDiZhu;
}

void MsgQiangDiZhu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQiangDiZhu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playid_, qingdizhu_wiki_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQiangDiZhu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQiangDiZhu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qingdizhu_wiki;
        break;
      }

      // optional uint64 qingdizhu_wiki = 2;
      case 2: {
        if (tag == 16) {
         parse_qingdizhu_wiki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qingdizhu_wiki_)));
          set_has_qingdizhu_wiki();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQiangDiZhu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQiangDiZhu)
  return false;
#undef DO_
}

void MsgQiangDiZhu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQiangDiZhu)
  // optional uint64 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playid(), output);
  }

  // optional uint64 qingdizhu_wiki = 2;
  if (has_qingdizhu_wiki()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->qingdizhu_wiki(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQiangDiZhu)
}

::google::protobuf::uint8* MsgQiangDiZhu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQiangDiZhu)
  // optional uint64 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playid(), target);
  }

  // optional uint64 qingdizhu_wiki = 2;
  if (has_qingdizhu_wiki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->qingdizhu_wiki(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQiangDiZhu)
  return target;
}

int MsgQiangDiZhu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playid());
    }

    // optional uint64 qingdizhu_wiki = 2;
    if (has_qingdizhu_wiki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qingdizhu_wiki());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQiangDiZhu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQiangDiZhu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQiangDiZhu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQiangDiZhu::MergeFrom(const MsgQiangDiZhu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_qingdizhu_wiki()) {
      set_qingdizhu_wiki(from.qingdizhu_wiki());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQiangDiZhu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQiangDiZhu::CopyFrom(const MsgQiangDiZhu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQiangDiZhu::IsInitialized() const {

  return true;
}

void MsgQiangDiZhu::Swap(MsgQiangDiZhu* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    std::swap(qingdizhu_wiki_, other->qingdizhu_wiki_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQiangDiZhu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQiangDiZhu_descriptor_;
  metadata.reflection = MsgQiangDiZhu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQiangDiZhuResult::kPlayidFieldNumber;
const int MsgQiangDiZhuResult::kResultFieldNumber;
const int MsgQiangDiZhuResult::kStateFieldNumber;
const int MsgQiangDiZhuResult::kDizhuCardFieldNumber;
const int MsgQiangDiZhuResult::kCardCountFieldNumber;
const int MsgQiangDiZhuResult::kMultipleFieldNumber;
#endif  // !_MSC_VER

MsgQiangDiZhuResult::MsgQiangDiZhuResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQiangDiZhuResult)
}

void MsgQiangDiZhuResult::InitAsDefaultInstance() {
}

MsgQiangDiZhuResult::MsgQiangDiZhuResult(const MsgQiangDiZhuResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQiangDiZhuResult)
}

void MsgQiangDiZhuResult::SharedCtor() {
  _cached_size_ = 0;
  playid_ = GOOGLE_ULONGLONG(0);
  result_ = GOOGLE_ULONGLONG(0);
  state_ = GOOGLE_ULONGLONG(0);
  cardcount_ = GOOGLE_ULONGLONG(0);
  multiple_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQiangDiZhuResult::~MsgQiangDiZhuResult() {
  // @@protoc_insertion_point(destructor:MsgQiangDiZhuResult)
  SharedDtor();
}

void MsgQiangDiZhuResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQiangDiZhuResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQiangDiZhuResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQiangDiZhuResult_descriptor_;
}

const MsgQiangDiZhuResult& MsgQiangDiZhuResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgQiangDiZhuResult* MsgQiangDiZhuResult::default_instance_ = NULL;

MsgQiangDiZhuResult* MsgQiangDiZhuResult::New() const {
  return new MsgQiangDiZhuResult;
}

void MsgQiangDiZhuResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQiangDiZhuResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(playid_, state_);
    ZR_(cardcount_, multiple_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dizhu_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQiangDiZhuResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQiangDiZhuResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint64 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint64 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dizhu_card;
        break;
      }

      // repeated .MsgDDZCardInfo dizhu_card = 4;
      case 4: {
        if (tag == 34) {
         parse_dizhu_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dizhu_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dizhu_card;
        if (input->ExpectTag(40)) goto parse_CardCount;
        break;
      }

      // optional uint64 CardCount = 5;
      case 5: {
        if (tag == 40) {
         parse_CardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_multiple;
        break;
      }

      // optional uint64 multiple = 6;
      case 6: {
        if (tag == 48) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQiangDiZhuResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQiangDiZhuResult)
  return false;
#undef DO_
}

void MsgQiangDiZhuResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQiangDiZhuResult)
  // optional uint64 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playid(), output);
  }

  // optional uint64 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->result(), output);
  }

  // optional uint64 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->state(), output);
  }

  // repeated .MsgDDZCardInfo dizhu_card = 4;
  for (int i = 0; i < this->dizhu_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dizhu_card(i), output);
  }

  // optional uint64 CardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cardcount(), output);
  }

  // optional uint64 multiple = 6;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->multiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQiangDiZhuResult)
}

::google::protobuf::uint8* MsgQiangDiZhuResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQiangDiZhuResult)
  // optional uint64 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playid(), target);
  }

  // optional uint64 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->result(), target);
  }

  // optional uint64 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->state(), target);
  }

  // repeated .MsgDDZCardInfo dizhu_card = 4;
  for (int i = 0; i < this->dizhu_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dizhu_card(i), target);
  }

  // optional uint64 CardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cardcount(), target);
  }

  // optional uint64 multiple = 6;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->multiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQiangDiZhuResult)
  return target;
}

int MsgQiangDiZhuResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playid());
    }

    // optional uint64 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->result());
    }

    // optional uint64 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->state());
    }

    // optional uint64 CardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cardcount());
    }

    // optional uint64 multiple = 6;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->multiple());
    }

  }
  // repeated .MsgDDZCardInfo dizhu_card = 4;
  total_size += 1 * this->dizhu_card_size();
  for (int i = 0; i < this->dizhu_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dizhu_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQiangDiZhuResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQiangDiZhuResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQiangDiZhuResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQiangDiZhuResult::MergeFrom(const MsgQiangDiZhuResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dizhu_card_.MergeFrom(from.dizhu_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQiangDiZhuResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQiangDiZhuResult::CopyFrom(const MsgQiangDiZhuResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQiangDiZhuResult::IsInitialized() const {

  return true;
}

void MsgQiangDiZhuResult::Swap(MsgQiangDiZhuResult* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    std::swap(result_, other->result_);
    std::swap(state_, other->state_);
    dizhu_card_.Swap(&other->dizhu_card_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(multiple_, other->multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQiangDiZhuResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQiangDiZhuResult_descriptor_;
  metadata.reflection = MsgQiangDiZhuResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBRQiangDiZhuResult::kPlayerListFieldNumber;
const int MsgBRQiangDiZhuResult::kMultipleFieldNumber;
const int MsgBRQiangDiZhuResult::kDipaiMultiListFieldNumber;
#endif  // !_MSC_VER

MsgBRQiangDiZhuResult::MsgBRQiangDiZhuResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBRQiangDiZhuResult)
}

void MsgBRQiangDiZhuResult::InitAsDefaultInstance() {
}

MsgBRQiangDiZhuResult::MsgBRQiangDiZhuResult(const MsgBRQiangDiZhuResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBRQiangDiZhuResult)
}

void MsgBRQiangDiZhuResult::SharedCtor() {
  _cached_size_ = 0;
  multiple_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBRQiangDiZhuResult::~MsgBRQiangDiZhuResult() {
  // @@protoc_insertion_point(destructor:MsgBRQiangDiZhuResult)
  SharedDtor();
}

void MsgBRQiangDiZhuResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBRQiangDiZhuResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBRQiangDiZhuResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBRQiangDiZhuResult_descriptor_;
}

const MsgBRQiangDiZhuResult& MsgBRQiangDiZhuResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgBRQiangDiZhuResult* MsgBRQiangDiZhuResult::default_instance_ = NULL;

MsgBRQiangDiZhuResult* MsgBRQiangDiZhuResult::New() const {
  return new MsgBRQiangDiZhuResult;
}

void MsgBRQiangDiZhuResult::Clear() {
  multiple_ = GOOGLE_ULONGLONG(0);
  player_list_.Clear();
  dipai_multi_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBRQiangDiZhuResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBRQiangDiZhuResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgQiangDiZhuResult player_list = 1;
      case 1: {
        if (tag == 10) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectTag(16)) goto parse_multiple;
        break;
      }

      // optional uint64 multiple = 2;
      case 2: {
        if (tag == 16) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dipai_multi_list;
        break;
      }

      // repeated .MsgDiPaiMutiple dipai_multi_list = 3;
      case 3: {
        if (tag == 26) {
         parse_dipai_multi_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dipai_multi_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dipai_multi_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBRQiangDiZhuResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBRQiangDiZhuResult)
  return false;
#undef DO_
}

void MsgBRQiangDiZhuResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBRQiangDiZhuResult)
  // repeated .MsgQiangDiZhuResult player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }

  // optional uint64 multiple = 2;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->multiple(), output);
  }

  // repeated .MsgDiPaiMutiple dipai_multi_list = 3;
  for (int i = 0; i < this->dipai_multi_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dipai_multi_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBRQiangDiZhuResult)
}

::google::protobuf::uint8* MsgBRQiangDiZhuResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBRQiangDiZhuResult)
  // repeated .MsgQiangDiZhuResult player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }

  // optional uint64 multiple = 2;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->multiple(), target);
  }

  // repeated .MsgDiPaiMutiple dipai_multi_list = 3;
  for (int i = 0; i < this->dipai_multi_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dipai_multi_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBRQiangDiZhuResult)
  return target;
}

int MsgBRQiangDiZhuResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 multiple = 2;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->multiple());
    }

  }
  // repeated .MsgQiangDiZhuResult player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgDiPaiMutiple dipai_multi_list = 3;
  total_size += 1 * this->dipai_multi_list_size();
  for (int i = 0; i < this->dipai_multi_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dipai_multi_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBRQiangDiZhuResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBRQiangDiZhuResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBRQiangDiZhuResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBRQiangDiZhuResult::MergeFrom(const MsgBRQiangDiZhuResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  dipai_multi_list_.MergeFrom(from.dipai_multi_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBRQiangDiZhuResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBRQiangDiZhuResult::CopyFrom(const MsgBRQiangDiZhuResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBRQiangDiZhuResult::IsInitialized() const {

  return true;
}

void MsgBRQiangDiZhuResult::Swap(MsgBRQiangDiZhuResult* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    std::swap(multiple_, other->multiple_);
    dipai_multi_list_.Swap(&other->dipai_multi_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBRQiangDiZhuResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBRQiangDiZhuResult_descriptor_;
  metadata.reflection = MsgBRQiangDiZhuResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDiPaiMutiple::kEventIdFieldNumber;
const int MsgDiPaiMutiple::kCountFieldNumber;
#endif  // !_MSC_VER

MsgDiPaiMutiple::MsgDiPaiMutiple()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDiPaiMutiple)
}

void MsgDiPaiMutiple::InitAsDefaultInstance() {
}

MsgDiPaiMutiple::MsgDiPaiMutiple(const MsgDiPaiMutiple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDiPaiMutiple)
}

void MsgDiPaiMutiple::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDiPaiMutiple::~MsgDiPaiMutiple() {
  // @@protoc_insertion_point(destructor:MsgDiPaiMutiple)
  SharedDtor();
}

void MsgDiPaiMutiple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDiPaiMutiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDiPaiMutiple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDiPaiMutiple_descriptor_;
}

const MsgDiPaiMutiple& MsgDiPaiMutiple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDiPaiMutiple* MsgDiPaiMutiple::default_instance_ = NULL;

MsgDiPaiMutiple* MsgDiPaiMutiple::New() const {
  return new MsgDiPaiMutiple;
}

void MsgDiPaiMutiple::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDiPaiMutiple*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDiPaiMutiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDiPaiMutiple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDiPaiMutiple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDiPaiMutiple)
  return false;
#undef DO_
}

void MsgDiPaiMutiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDiPaiMutiple)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDiPaiMutiple)
}

::google::protobuf::uint8* MsgDiPaiMutiple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDiPaiMutiple)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDiPaiMutiple)
  return target;
}

int MsgDiPaiMutiple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDiPaiMutiple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDiPaiMutiple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDiPaiMutiple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDiPaiMutiple::MergeFrom(const MsgDiPaiMutiple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDiPaiMutiple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDiPaiMutiple::CopyFrom(const MsgDiPaiMutiple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDiPaiMutiple::IsInitialized() const {

  return true;
}

void MsgDiPaiMutiple::Swap(MsgDiPaiMutiple* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDiPaiMutiple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDiPaiMutiple_descriptor_;
  metadata.reflection = MsgDiPaiMutiple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMingPaiResult::kPlayidFieldNumber;
const int MsgMingPaiResult::kResultFieldNumber;
const int MsgMingPaiResult::kStateFieldNumber;
const int MsgMingPaiResult::kDizhuCardFieldNumber;
const int MsgMingPaiResult::kMultipleFieldNumber;
#endif  // !_MSC_VER

MsgMingPaiResult::MsgMingPaiResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMingPaiResult)
}

void MsgMingPaiResult::InitAsDefaultInstance() {
}

MsgMingPaiResult::MsgMingPaiResult(const MsgMingPaiResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMingPaiResult)
}

void MsgMingPaiResult::SharedCtor() {
  _cached_size_ = 0;
  playid_ = GOOGLE_ULONGLONG(0);
  result_ = GOOGLE_ULONGLONG(0);
  state_ = GOOGLE_ULONGLONG(0);
  multiple_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMingPaiResult::~MsgMingPaiResult() {
  // @@protoc_insertion_point(destructor:MsgMingPaiResult)
  SharedDtor();
}

void MsgMingPaiResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMingPaiResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMingPaiResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMingPaiResult_descriptor_;
}

const MsgMingPaiResult& MsgMingPaiResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgMingPaiResult* MsgMingPaiResult::default_instance_ = NULL;

MsgMingPaiResult* MsgMingPaiResult::New() const {
  return new MsgMingPaiResult;
}

void MsgMingPaiResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMingPaiResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(playid_, state_);
    multiple_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dizhu_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMingPaiResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMingPaiResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint64 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint64 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dizhu_card;
        break;
      }

      // repeated .MsgDDZCardInfo dizhu_card = 4;
      case 4: {
        if (tag == 34) {
         parse_dizhu_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dizhu_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dizhu_card;
        if (input->ExpectTag(40)) goto parse_multiple;
        break;
      }

      // optional uint64 multiple = 5;
      case 5: {
        if (tag == 40) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMingPaiResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMingPaiResult)
  return false;
#undef DO_
}

void MsgMingPaiResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMingPaiResult)
  // optional uint64 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playid(), output);
  }

  // optional uint64 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->result(), output);
  }

  // optional uint64 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->state(), output);
  }

  // repeated .MsgDDZCardInfo dizhu_card = 4;
  for (int i = 0; i < this->dizhu_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dizhu_card(i), output);
  }

  // optional uint64 multiple = 5;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->multiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMingPaiResult)
}

::google::protobuf::uint8* MsgMingPaiResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMingPaiResult)
  // optional uint64 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playid(), target);
  }

  // optional uint64 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->result(), target);
  }

  // optional uint64 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->state(), target);
  }

  // repeated .MsgDDZCardInfo dizhu_card = 4;
  for (int i = 0; i < this->dizhu_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dizhu_card(i), target);
  }

  // optional uint64 multiple = 5;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->multiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMingPaiResult)
  return target;
}

int MsgMingPaiResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playid());
    }

    // optional uint64 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->result());
    }

    // optional uint64 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->state());
    }

    // optional uint64 multiple = 5;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->multiple());
    }

  }
  // repeated .MsgDDZCardInfo dizhu_card = 4;
  total_size += 1 * this->dizhu_card_size();
  for (int i = 0; i < this->dizhu_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dizhu_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMingPaiResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMingPaiResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMingPaiResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMingPaiResult::MergeFrom(const MsgMingPaiResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dizhu_card_.MergeFrom(from.dizhu_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMingPaiResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMingPaiResult::CopyFrom(const MsgMingPaiResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMingPaiResult::IsInitialized() const {

  return true;
}

void MsgMingPaiResult::Swap(MsgMingPaiResult* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    std::swap(result_, other->result_);
    std::swap(state_, other->state_);
    dizhu_card_.Swap(&other->dizhu_card_);
    std::swap(multiple_, other->multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMingPaiResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMingPaiResult_descriptor_;
  metadata.reflection = MsgMingPaiResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJiaBeiResult::kPlayidFieldNumber;
const int MsgJiaBeiResult::kResultFieldNumber;
const int MsgJiaBeiResult::kStateFieldNumber;
#endif  // !_MSC_VER

MsgJiaBeiResult::MsgJiaBeiResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgJiaBeiResult)
}

void MsgJiaBeiResult::InitAsDefaultInstance() {
}

MsgJiaBeiResult::MsgJiaBeiResult(const MsgJiaBeiResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgJiaBeiResult)
}

void MsgJiaBeiResult::SharedCtor() {
  _cached_size_ = 0;
  playid_ = GOOGLE_ULONGLONG(0);
  result_ = GOOGLE_ULONGLONG(0);
  state_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJiaBeiResult::~MsgJiaBeiResult() {
  // @@protoc_insertion_point(destructor:MsgJiaBeiResult)
  SharedDtor();
}

void MsgJiaBeiResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgJiaBeiResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJiaBeiResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJiaBeiResult_descriptor_;
}

const MsgJiaBeiResult& MsgJiaBeiResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgJiaBeiResult* MsgJiaBeiResult::default_instance_ = NULL;

MsgJiaBeiResult* MsgJiaBeiResult::New() const {
  return new MsgJiaBeiResult;
}

void MsgJiaBeiResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgJiaBeiResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJiaBeiResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgJiaBeiResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint64 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint64 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgJiaBeiResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgJiaBeiResult)
  return false;
#undef DO_
}

void MsgJiaBeiResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgJiaBeiResult)
  // optional uint64 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playid(), output);
  }

  // optional uint64 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->result(), output);
  }

  // optional uint64 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgJiaBeiResult)
}

::google::protobuf::uint8* MsgJiaBeiResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgJiaBeiResult)
  // optional uint64 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playid(), target);
  }

  // optional uint64 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->result(), target);
  }

  // optional uint64 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgJiaBeiResult)
  return target;
}

int MsgJiaBeiResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playid());
    }

    // optional uint64 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->result());
    }

    // optional uint64 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJiaBeiResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJiaBeiResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJiaBeiResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJiaBeiResult::MergeFrom(const MsgJiaBeiResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJiaBeiResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJiaBeiResult::CopyFrom(const MsgJiaBeiResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJiaBeiResult::IsInitialized() const {

  return true;
}

void MsgJiaBeiResult::Swap(MsgJiaBeiResult* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    std::swap(result_, other->result_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJiaBeiResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJiaBeiResult_descriptor_;
  metadata.reflection = MsgJiaBeiResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZPlayer::kPlayerBaseFieldNumber;
const int MsgDDZPlayer::kStateFieldNumber;
const int MsgDDZPlayer::kHandCountFieldNumber;
const int MsgDDZPlayer::kCardListFieldNumber;
const int MsgDDZPlayer::kSeatsFieldNumber;
const int MsgDDZPlayer::kScoreFieldNumber;
const int MsgDDZPlayer::kShowDownScoreFieldNumber;
const int MsgDDZPlayer::kQingdizhuWikiFieldNumber;
const int MsgDDZPlayer::kQingdizhuValueFieldNumber;
const int MsgDDZPlayer::kMultipleFieldNumber;
const int MsgDDZPlayer::kIntegralNumFieldNumber;
const int MsgDDZPlayer::kOutCardFieldNumber;
const int MsgDDZPlayer::kOutTypeFieldNumber;
#endif  // !_MSC_VER

MsgDDZPlayer::MsgDDZPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZPlayer)
}

void MsgDDZPlayer::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgDDZPlayer::MsgDDZPlayer(const MsgDDZPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZPlayer)
}

void MsgDDZPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  state_ = 0u;
  hand_count_ = 0u;
  seats_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  show_down_score_ = GOOGLE_LONGLONG(0);
  qingdizhu_wiki_ = 0u;
  qingdizhu_value_ = 0u;
  multiple_ = 0u;
  integral_num_ = 0u;
  out_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZPlayer::~MsgDDZPlayer() {
  // @@protoc_insertion_point(destructor:MsgDDZPlayer)
  SharedDtor();
}

void MsgDDZPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
  }
}

void MsgDDZPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZPlayer_descriptor_;
}

const MsgDDZPlayer& MsgDDZPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZPlayer* MsgDDZPlayer::default_instance_ = NULL;

MsgDDZPlayer* MsgDDZPlayer::New() const {
  return new MsgDDZPlayer;
}

void MsgDDZPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDDZPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(state_, hand_count_);
    ZR_(score_, show_down_score_);
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
  }
  ZR_(qingdizhu_value_, multiple_);
  ZR_(integral_num_, out_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_list_.Clear();
  out_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_card_list;
        break;
      }

      // repeated .MsgDDZCardInfo card_list = 4;
      case 4: {
        if (tag == 34) {
         parse_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_card_list;
        if (input->ExpectTag(40)) goto parse_seats;
        break;
      }

      // optional uint32 seats = 5;
      case 5: {
        if (tag == 40) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
          set_has_seats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int64 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_show_down_score;
        break;
      }

      // optional int64 show_down_score = 7;
      case 7: {
        if (tag == 56) {
         parse_show_down_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &show_down_score_)));
          set_has_show_down_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_qingdizhu_wiki;
        break;
      }

      // optional uint32 qingdizhu_wiki = 8;
      case 8: {
        if (tag == 64) {
         parse_qingdizhu_wiki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qingdizhu_wiki_)));
          set_has_qingdizhu_wiki();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_qingdizhu_value;
        break;
      }

      // optional uint32 qingdizhu_value = 9;
      case 9: {
        if (tag == 72) {
         parse_qingdizhu_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qingdizhu_value_)));
          set_has_qingdizhu_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_multiple;
        break;
      }

      // optional uint32 multiple = 10;
      case 10: {
        if (tag == 80) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_integral_num;
        break;
      }

      // optional uint32 integral_num = 11;
      case 11: {
        if (tag == 88) {
         parse_integral_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_num_)));
          set_has_integral_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_out_card;
        break;
      }

      // repeated .MsgDDZCardInfo out_card = 12;
      case 12: {
        if (tag == 98) {
         parse_out_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_out_card;
        if (input->ExpectTag(104)) goto parse_out_type;
        break;
      }

      // optional uint32 out_type = 13;
      case 13: {
        if (tag == 104) {
         parse_out_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_type_)));
          set_has_out_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZPlayer)
  return false;
#undef DO_
}

void MsgDDZPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_count(), output);
  }

  // repeated .MsgDDZCardInfo card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->card_list(i), output);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seats(), output);
  }

  // optional int64 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->score(), output);
  }

  // optional int64 show_down_score = 7;
  if (has_show_down_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->show_down_score(), output);
  }

  // optional uint32 qingdizhu_wiki = 8;
  if (has_qingdizhu_wiki()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->qingdizhu_wiki(), output);
  }

  // optional uint32 qingdizhu_value = 9;
  if (has_qingdizhu_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->qingdizhu_value(), output);
  }

  // optional uint32 multiple = 10;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->multiple(), output);
  }

  // optional uint32 integral_num = 11;
  if (has_integral_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->integral_num(), output);
  }

  // repeated .MsgDDZCardInfo out_card = 12;
  for (int i = 0; i < this->out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->out_card(i), output);
  }

  // optional uint32 out_type = 13;
  if (has_out_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->out_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZPlayer)
}

::google::protobuf::uint8* MsgDDZPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_count(), target);
  }

  // repeated .MsgDDZCardInfo card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->card_list(i), target);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seats(), target);
  }

  // optional int64 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->score(), target);
  }

  // optional int64 show_down_score = 7;
  if (has_show_down_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->show_down_score(), target);
  }

  // optional uint32 qingdizhu_wiki = 8;
  if (has_qingdizhu_wiki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->qingdizhu_wiki(), target);
  }

  // optional uint32 qingdizhu_value = 9;
  if (has_qingdizhu_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->qingdizhu_value(), target);
  }

  // optional uint32 multiple = 10;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->multiple(), target);
  }

  // optional uint32 integral_num = 11;
  if (has_integral_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->integral_num(), target);
  }

  // repeated .MsgDDZCardInfo out_card = 12;
  for (int i = 0; i < this->out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->out_card(i), target);
  }

  // optional uint32 out_type = 13;
  if (has_out_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->out_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZPlayer)
  return target;
}

int MsgDDZPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 hand_count = 3;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional uint32 seats = 5;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional int64 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 show_down_score = 7;
    if (has_show_down_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->show_down_score());
    }

    // optional uint32 qingdizhu_wiki = 8;
    if (has_qingdizhu_wiki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qingdizhu_wiki());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 qingdizhu_value = 9;
    if (has_qingdizhu_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qingdizhu_value());
    }

    // optional uint32 multiple = 10;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // optional uint32 integral_num = 11;
    if (has_integral_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral_num());
    }

    // optional uint32 out_type = 13;
    if (has_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_type());
    }

  }
  // repeated .MsgDDZCardInfo card_list = 4;
  total_size += 1 * this->card_list_size();
  for (int i = 0; i < this->card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_list(i));
  }

  // repeated .MsgDDZCardInfo out_card = 12;
  total_size += 1 * this->out_card_size();
  for (int i = 0; i < this->out_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZPlayer::MergeFrom(const MsgDDZPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
  out_card_.MergeFrom(from.out_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_seats()) {
      set_seats(from.seats());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_show_down_score()) {
      set_show_down_score(from.show_down_score());
    }
    if (from.has_qingdizhu_wiki()) {
      set_qingdizhu_wiki(from.qingdizhu_wiki());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qingdizhu_value()) {
      set_qingdizhu_value(from.qingdizhu_value());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_integral_num()) {
      set_integral_num(from.integral_num());
    }
    if (from.has_out_type()) {
      set_out_type(from.out_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZPlayer::CopyFrom(const MsgDDZPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZPlayer::IsInitialized() const {

  return true;
}

void MsgDDZPlayer::Swap(MsgDDZPlayer* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(state_, other->state_);
    std::swap(hand_count_, other->hand_count_);
    card_list_.Swap(&other->card_list_);
    std::swap(seats_, other->seats_);
    std::swap(score_, other->score_);
    std::swap(show_down_score_, other->show_down_score_);
    std::swap(qingdizhu_wiki_, other->qingdizhu_wiki_);
    std::swap(qingdizhu_value_, other->qingdizhu_value_);
    std::swap(multiple_, other->multiple_);
    std::swap(integral_num_, other->integral_num_);
    out_card_.Swap(&other->out_card_);
    std::swap(out_type_, other->out_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZPlayer_descriptor_;
  metadata.reflection = MsgDDZPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZCardInfo::kCardFieldNumber;
#endif  // !_MSC_VER

MsgDDZCardInfo::MsgDDZCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZCardInfo)
}

void MsgDDZCardInfo::InitAsDefaultInstance() {
}

MsgDDZCardInfo::MsgDDZCardInfo(const MsgDDZCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZCardInfo)
}

void MsgDDZCardInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZCardInfo::~MsgDDZCardInfo() {
  // @@protoc_insertion_point(destructor:MsgDDZCardInfo)
  SharedDtor();
}

void MsgDDZCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDDZCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZCardInfo_descriptor_;
}

const MsgDDZCardInfo& MsgDDZCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZCardInfo* MsgDDZCardInfo::default_instance_ = NULL;

MsgDDZCardInfo* MsgDDZCardInfo::New() const {
  return new MsgDDZCardInfo;
}

void MsgDDZCardInfo::Clear() {
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZCardInfo)
  return false;
#undef DO_
}

void MsgDDZCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZCardInfo)
  // optional uint32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZCardInfo)
}

::google::protobuf::uint8* MsgDDZCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZCardInfo)
  // optional uint32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZCardInfo)
  return target;
}

int MsgDDZCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZCardInfo::MergeFrom(const MsgDDZCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZCardInfo::CopyFrom(const MsgDDZCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZCardInfo::IsInitialized() const {

  return true;
}

void MsgDDZCardInfo::Swap(MsgDDZCardInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZCardInfo_descriptor_;
  metadata.reflection = MsgDDZCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZActon::kNewActionidFieldNumber;
const int MsgDDZActon::kOldActionidFieldNumber;
const int MsgDDZActon::kLastOutCardFieldNumber;
const int MsgDDZActon::kLastOutTypeFieldNumber;
const int MsgDDZActon::kWikFieldNumber;
const int MsgDDZActon::kPlayerListFieldNumber;
#endif  // !_MSC_VER

MsgDDZActon::MsgDDZActon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZActon)
}

void MsgDDZActon::InitAsDefaultInstance() {
}

MsgDDZActon::MsgDDZActon(const MsgDDZActon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZActon)
}

void MsgDDZActon::SharedCtor() {
  _cached_size_ = 0;
  new_actionid_ = GOOGLE_ULONGLONG(0);
  old_actionid_ = GOOGLE_ULONGLONG(0);
  last_out_type_ = 0u;
  wik_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZActon::~MsgDDZActon() {
  // @@protoc_insertion_point(destructor:MsgDDZActon)
  SharedDtor();
}

void MsgDDZActon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDDZActon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZActon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZActon_descriptor_;
}

const MsgDDZActon& MsgDDZActon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZActon* MsgDDZActon::default_instance_ = NULL;

MsgDDZActon* MsgDDZActon::New() const {
  return new MsgDDZActon;
}

void MsgDDZActon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDDZActon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(new_actionid_, old_actionid_);
  ZR_(last_out_type_, wik_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  last_out_card_.Clear();
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZActon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZActon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 new_actionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_actionid_)));
          set_has_new_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_old_actionid;
        break;
      }

      // optional uint64 old_actionid = 2;
      case 2: {
        if (tag == 16) {
         parse_old_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_actionid_)));
          set_has_old_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_out_card;
        break;
      }

      // repeated .MsgDDZCardInfo last_out_card = 3;
      case 3: {
        if (tag == 26) {
         parse_last_out_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_out_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_out_card;
        if (input->ExpectTag(32)) goto parse_last_out_type;
        break;
      }

      // optional uint32 last_out_type = 4;
      case 4: {
        if (tag == 32) {
         parse_last_out_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_out_type_)));
          set_has_last_out_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 5;
      case 5: {
        if (tag == 40) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_list;
        break;
      }

      // repeated .MsgDDZPlayer player_list = 6;
      case 6: {
        if (tag == 50) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZActon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZActon)
  return false;
#undef DO_
}

void MsgDDZActon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZActon)
  // optional uint64 new_actionid = 1;
  if (has_new_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->new_actionid(), output);
  }

  // optional uint64 old_actionid = 2;
  if (has_old_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->old_actionid(), output);
  }

  // repeated .MsgDDZCardInfo last_out_card = 3;
  for (int i = 0; i < this->last_out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->last_out_card(i), output);
  }

  // optional uint32 last_out_type = 4;
  if (has_last_out_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_out_type(), output);
  }

  // optional uint32 wik = 5;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wik(), output);
  }

  // repeated .MsgDDZPlayer player_list = 6;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZActon)
}

::google::protobuf::uint8* MsgDDZActon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZActon)
  // optional uint64 new_actionid = 1;
  if (has_new_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->new_actionid(), target);
  }

  // optional uint64 old_actionid = 2;
  if (has_old_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->old_actionid(), target);
  }

  // repeated .MsgDDZCardInfo last_out_card = 3;
  for (int i = 0; i < this->last_out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->last_out_card(i), target);
  }

  // optional uint32 last_out_type = 4;
  if (has_last_out_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_out_type(), target);
  }

  // optional uint32 wik = 5;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wik(), target);
  }

  // repeated .MsgDDZPlayer player_list = 6;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZActon)
  return target;
}

int MsgDDZActon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 new_actionid = 1;
    if (has_new_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_actionid());
    }

    // optional uint64 old_actionid = 2;
    if (has_old_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_actionid());
    }

    // optional uint32 last_out_type = 4;
    if (has_last_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_out_type());
    }

    // optional uint32 wik = 5;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

  }
  // repeated .MsgDDZCardInfo last_out_card = 3;
  total_size += 1 * this->last_out_card_size();
  for (int i = 0; i < this->last_out_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_out_card(i));
  }

  // repeated .MsgDDZPlayer player_list = 6;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZActon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZActon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZActon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZActon::MergeFrom(const MsgDDZActon& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_out_card_.MergeFrom(from.last_out_card_);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_actionid()) {
      set_new_actionid(from.new_actionid());
    }
    if (from.has_old_actionid()) {
      set_old_actionid(from.old_actionid());
    }
    if (from.has_last_out_type()) {
      set_last_out_type(from.last_out_type());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZActon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZActon::CopyFrom(const MsgDDZActon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZActon::IsInitialized() const {

  return true;
}

void MsgDDZActon::Swap(MsgDDZActon* other) {
  if (other != this) {
    std::swap(new_actionid_, other->new_actionid_);
    std::swap(old_actionid_, other->old_actionid_);
    last_out_card_.Swap(&other->last_out_card_);
    std::swap(last_out_type_, other->last_out_type_);
    std::swap(wik_, other->wik_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZActon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZActon_descriptor_;
  metadata.reflection = MsgDDZActon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZUserOutCard::kOldActionidFieldNumber;
const int MsgDDZUserOutCard::kOutTypeFieldNumber;
const int MsgDDZUserOutCard::kHandCountFieldNumber;
const int MsgDDZUserOutCard::kOutCardFieldNumber;
const int MsgDDZUserOutCard::kMultipleFieldNumber;
const int MsgDDZUserOutCard::kHandCardFieldNumber;
#endif  // !_MSC_VER

MsgDDZUserOutCard::MsgDDZUserOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZUserOutCard)
}

void MsgDDZUserOutCard::InitAsDefaultInstance() {
}

MsgDDZUserOutCard::MsgDDZUserOutCard(const MsgDDZUserOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZUserOutCard)
}

void MsgDDZUserOutCard::SharedCtor() {
  _cached_size_ = 0;
  old_actionid_ = GOOGLE_ULONGLONG(0);
  out_type_ = 0u;
  hand_count_ = 0u;
  multiple_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZUserOutCard::~MsgDDZUserOutCard() {
  // @@protoc_insertion_point(destructor:MsgDDZUserOutCard)
  SharedDtor();
}

void MsgDDZUserOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDDZUserOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZUserOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZUserOutCard_descriptor_;
}

const MsgDDZUserOutCard& MsgDDZUserOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZUserOutCard* MsgDDZUserOutCard::default_instance_ = NULL;

MsgDDZUserOutCard* MsgDDZUserOutCard::New() const {
  return new MsgDDZUserOutCard;
}

void MsgDDZUserOutCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDDZUserOutCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(old_actionid_, hand_count_);
    multiple_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  out_card_.Clear();
  hand_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZUserOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZUserOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 old_actionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_actionid_)));
          set_has_old_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_out_type;
        break;
      }

      // optional uint32 out_type = 2;
      case 2: {
        if (tag == 16) {
         parse_out_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_type_)));
          set_has_out_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_out_card;
        break;
      }

      // repeated .MsgDDZCardInfo out_card = 4;
      case 4: {
        if (tag == 34) {
         parse_out_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_out_card;
        if (input->ExpectTag(40)) goto parse_multiple;
        break;
      }

      // optional uint64 multiple = 5;
      case 5: {
        if (tag == 40) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hand_card;
        break;
      }

      // repeated .MsgDDZCardInfo hand_card = 6;
      case 6: {
        if (tag == 50) {
         parse_hand_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hand_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZUserOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZUserOutCard)
  return false;
#undef DO_
}

void MsgDDZUserOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZUserOutCard)
  // optional uint64 old_actionid = 1;
  if (has_old_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->old_actionid(), output);
  }

  // optional uint32 out_type = 2;
  if (has_out_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_type(), output);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_count(), output);
  }

  // repeated .MsgDDZCardInfo out_card = 4;
  for (int i = 0; i < this->out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->out_card(i), output);
  }

  // optional uint64 multiple = 5;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->multiple(), output);
  }

  // repeated .MsgDDZCardInfo hand_card = 6;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hand_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZUserOutCard)
}

::google::protobuf::uint8* MsgDDZUserOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZUserOutCard)
  // optional uint64 old_actionid = 1;
  if (has_old_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->old_actionid(), target);
  }

  // optional uint32 out_type = 2;
  if (has_out_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_type(), target);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_count(), target);
  }

  // repeated .MsgDDZCardInfo out_card = 4;
  for (int i = 0; i < this->out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->out_card(i), target);
  }

  // optional uint64 multiple = 5;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->multiple(), target);
  }

  // repeated .MsgDDZCardInfo hand_card = 6;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hand_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZUserOutCard)
  return target;
}

int MsgDDZUserOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 old_actionid = 1;
    if (has_old_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_actionid());
    }

    // optional uint32 out_type = 2;
    if (has_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_type());
    }

    // optional uint32 hand_count = 3;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional uint64 multiple = 5;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->multiple());
    }

  }
  // repeated .MsgDDZCardInfo out_card = 4;
  total_size += 1 * this->out_card_size();
  for (int i = 0; i < this->out_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out_card(i));
  }

  // repeated .MsgDDZCardInfo hand_card = 6;
  total_size += 1 * this->hand_card_size();
  for (int i = 0; i < this->hand_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZUserOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZUserOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZUserOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZUserOutCard::MergeFrom(const MsgDDZUserOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  out_card_.MergeFrom(from.out_card_);
  hand_card_.MergeFrom(from.hand_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_actionid()) {
      set_old_actionid(from.old_actionid());
    }
    if (from.has_out_type()) {
      set_out_type(from.out_type());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZUserOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZUserOutCard::CopyFrom(const MsgDDZUserOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZUserOutCard::IsInitialized() const {

  return true;
}

void MsgDDZUserOutCard::Swap(MsgDDZUserOutCard* other) {
  if (other != this) {
    std::swap(old_actionid_, other->old_actionid_);
    std::swap(out_type_, other->out_type_);
    std::swap(hand_count_, other->hand_count_);
    out_card_.Swap(&other->out_card_);
    std::swap(multiple_, other->multiple_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZUserOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZUserOutCard_descriptor_;
  metadata.reflection = MsgDDZUserOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZRoom::kRoomStateFieldNumber;
const int MsgDDZRoom::kStateTimeFieldNumber;
const int MsgDDZRoom::kPlayerListFieldNumber;
const int MsgDDZRoom::kActionIdFieldNumber;
const int MsgDDZRoom::kRoomIdFieldNumber;
const int MsgDDZRoom::kGameCountFieldNumber;
const int MsgDDZRoom::kPrivateRoomFieldNumber;
const int MsgDDZRoom::kLastOutcardFieldNumber;
const int MsgDDZRoom::kWikFieldNumber;
const int MsgDDZRoom::kBottomCardFieldNumber;
const int MsgDDZRoom::kMultipleFieldNumber;
const int MsgDDZRoom::kDipaiMultiListFieldNumber;
const int MsgDDZRoom::kRoomPayTypeFieldNumber;
#endif  // !_MSC_VER

MsgDDZRoom::MsgDDZRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZRoom)
}

void MsgDDZRoom::InitAsDefaultInstance() {
  private_room_ = const_cast< ::MsgCreatePrivateRoom*>(&::MsgCreatePrivateRoom::default_instance());
  last_outcard_ = const_cast< ::MsgDDZUserOutCard*>(&::MsgDDZUserOutCard::default_instance());
}

MsgDDZRoom::MsgDDZRoom(const MsgDDZRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZRoom)
}

void MsgDDZRoom::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  action_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  private_room_ = NULL;
  last_outcard_ = NULL;
  wik_ = 0u;
  multiple_ = GOOGLE_ULONGLONG(0);
  room_pay_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZRoom::~MsgDDZRoom() {
  // @@protoc_insertion_point(destructor:MsgDDZRoom)
  SharedDtor();
}

void MsgDDZRoom::SharedDtor() {
  if (this != default_instance_) {
    delete private_room_;
    delete last_outcard_;
  }
}

void MsgDDZRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZRoom_descriptor_;
}

const MsgDDZRoom& MsgDDZRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZRoom* MsgDDZRoom::default_instance_ = NULL;

MsgDDZRoom* MsgDDZRoom::New() const {
  return new MsgDDZRoom;
}

void MsgDDZRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDDZRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(room_state_, state_time_);
    ZR_(action_id_, room_id_);
    game_count_ = 0u;
    if (has_private_room()) {
      if (private_room_ != NULL) private_room_->::MsgCreatePrivateRoom::Clear();
    }
    if (has_last_outcard()) {
      if (last_outcard_ != NULL) last_outcard_->::MsgDDZUserOutCard::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 5376) {
    wik_ = 0u;
    multiple_ = GOOGLE_ULONGLONG(0);
    room_pay_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  bottom_card_.Clear();
  dipai_multi_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TDDZState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TDDZState_IsValid(value)) {
            set_room_state(static_cast< ::TDDZState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgDDZPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint64 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 5;
      case 5: {
        if (tag == 40) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 6;
      case 6: {
        if (tag == 48) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_private_room;
        break;
      }

      // optional .MsgCreatePrivateRoom private_room = 7;
      case 7: {
        if (tag == 58) {
         parse_private_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_last_outcard;
        break;
      }

      // optional .MsgDDZUserOutCard last_outcard = 8;
      case 8: {
        if (tag == 66) {
         parse_last_outcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_outcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 9;
      case 9: {
        if (tag == 72) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bottom_card;
        break;
      }

      // repeated .MsgDDZCardInfo bottom_card = 10;
      case 10: {
        if (tag == 82) {
         parse_bottom_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bottom_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bottom_card;
        if (input->ExpectTag(88)) goto parse_multiple;
        break;
      }

      // optional uint64 multiple = 11;
      case 11: {
        if (tag == 88) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_dipai_multi_list;
        break;
      }

      // repeated .MsgDiPaiMutiple dipai_multi_list = 12;
      case 12: {
        if (tag == 98) {
         parse_dipai_multi_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dipai_multi_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_dipai_multi_list;
        if (input->ExpectTag(104)) goto parse_room_pay_type;
        break;
      }

      // optional uint32 room_pay_type = 13;
      case 13: {
        if (tag == 104) {
         parse_room_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_pay_type_)));
          set_has_room_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZRoom)
  return false;
#undef DO_
}

void MsgDDZRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZRoom)
  // optional .TDDZState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgDDZPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->action_id(), output);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_id(), output);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_count(), output);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->private_room(), output);
  }

  // optional .MsgDDZUserOutCard last_outcard = 8;
  if (has_last_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->last_outcard(), output);
  }

  // optional uint32 wik = 9;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wik(), output);
  }

  // repeated .MsgDDZCardInfo bottom_card = 10;
  for (int i = 0; i < this->bottom_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bottom_card(i), output);
  }

  // optional uint64 multiple = 11;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->multiple(), output);
  }

  // repeated .MsgDiPaiMutiple dipai_multi_list = 12;
  for (int i = 0; i < this->dipai_multi_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dipai_multi_list(i), output);
  }

  // optional uint32 room_pay_type = 13;
  if (has_room_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->room_pay_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZRoom)
}

::google::protobuf::uint8* MsgDDZRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZRoom)
  // optional .TDDZState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgDDZPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->action_id(), target);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_id(), target);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_count(), target);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->private_room(), target);
  }

  // optional .MsgDDZUserOutCard last_outcard = 8;
  if (has_last_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->last_outcard(), target);
  }

  // optional uint32 wik = 9;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wik(), target);
  }

  // repeated .MsgDDZCardInfo bottom_card = 10;
  for (int i = 0; i < this->bottom_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bottom_card(i), target);
  }

  // optional uint64 multiple = 11;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->multiple(), target);
  }

  // repeated .MsgDiPaiMutiple dipai_multi_list = 12;
  for (int i = 0; i < this->dipai_multi_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dipai_multi_list(i), target);
  }

  // optional uint32 room_pay_type = 13;
  if (has_room_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->room_pay_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZRoom)
  return target;
}

int MsgDDZRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TDDZState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional uint64 room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 6;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional .MsgCreatePrivateRoom private_room = 7;
    if (has_private_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_room());
    }

    // optional .MsgDDZUserOutCard last_outcard = 8;
    if (has_last_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_outcard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 wik = 9;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint64 multiple = 11;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->multiple());
    }

    // optional uint32 room_pay_type = 13;
    if (has_room_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_pay_type());
    }

  }
  // repeated .MsgDDZPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgDDZCardInfo bottom_card = 10;
  total_size += 1 * this->bottom_card_size();
  for (int i = 0; i < this->bottom_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bottom_card(i));
  }

  // repeated .MsgDiPaiMutiple dipai_multi_list = 12;
  total_size += 1 * this->dipai_multi_list_size();
  for (int i = 0; i < this->dipai_multi_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dipai_multi_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZRoom::MergeFrom(const MsgDDZRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  bottom_card_.MergeFrom(from.bottom_card_);
  dipai_multi_list_.MergeFrom(from.dipai_multi_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_private_room()) {
      mutable_private_room()->::MsgCreatePrivateRoom::MergeFrom(from.private_room());
    }
    if (from.has_last_outcard()) {
      mutable_last_outcard()->::MsgDDZUserOutCard::MergeFrom(from.last_outcard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_room_pay_type()) {
      set_room_pay_type(from.room_pay_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZRoom::CopyFrom(const MsgDDZRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZRoom::IsInitialized() const {

  return true;
}

void MsgDDZRoom::Swap(MsgDDZRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(action_id_, other->action_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(private_room_, other->private_room_);
    std::swap(last_outcard_, other->last_outcard_);
    std::swap(wik_, other->wik_);
    bottom_card_.Swap(&other->bottom_card_);
    std::swap(multiple_, other->multiple_);
    dipai_multi_list_.Swap(&other->dipai_multi_list_);
    std::swap(room_pay_type_, other->room_pay_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZRoom_descriptor_;
  metadata.reflection = MsgDDZRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZRoomShowDown::kRoomStateFieldNumber;
const int MsgDDZRoomShowDown::kStateTimeFieldNumber;
const int MsgDDZRoomShowDown::kPlayerListFieldNumber;
const int MsgDDZRoomShowDown::kRoomIdFieldNumber;
const int MsgDDZRoomShowDown::kGameCountFieldNumber;
const int MsgDDZRoomShowDown::kTimeFieldNumber;
const int MsgDDZRoomShowDown::kGameOverFieldNumber;
const int MsgDDZRoomShowDown::kEventCountFieldNumber;
const int MsgDDZRoomShowDown::kIntegralListFieldNumber;
#endif  // !_MSC_VER

MsgDDZRoomShowDown::MsgDDZRoomShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZRoomShowDown)
}

void MsgDDZRoomShowDown::InitAsDefaultInstance() {
}

MsgDDZRoomShowDown::MsgDDZRoomShowDown(const MsgDDZRoomShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZRoomShowDown)
}

void MsgDDZRoomShowDown::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  time_ = 0u;
  game_over_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZRoomShowDown::~MsgDDZRoomShowDown() {
  // @@protoc_insertion_point(destructor:MsgDDZRoomShowDown)
  SharedDtor();
}

void MsgDDZRoomShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDDZRoomShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZRoomShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZRoomShowDown_descriptor_;
}

const MsgDDZRoomShowDown& MsgDDZRoomShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZRoomShowDown* MsgDDZRoomShowDown::default_instance_ = NULL;

MsgDDZRoomShowDown* MsgDDZRoomShowDown::New() const {
  return new MsgDDZRoomShowDown;
}

void MsgDDZRoomShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDDZRoomShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(room_state_, state_time_);
    ZR_(room_id_, time_);
    game_over_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  event_count_.Clear();
  integral_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZRoomShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZRoomShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TDDZState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TDDZState_IsValid(value)) {
            set_room_state(static_cast< ::TDDZState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgDDZPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 5;
      case 5: {
        if (tag == 40) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_game_over;
        break;
      }

      // optional bool game_over = 8;
      case 8: {
        if (tag == 64) {
         parse_game_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_over_)));
          set_has_game_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_event_count;
        break;
      }

      // repeated .MsgDDZShowDownEvent event_count = 9;
      case 9: {
        if (tag == 74) {
         parse_event_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_event_count;
        if (input->ExpectTag(82)) goto parse_integral_list;
        break;
      }

      // repeated .MsgDDZIntegralCount integral_list = 10;
      case 10: {
        if (tag == 82) {
         parse_integral_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_integral_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZRoomShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZRoomShowDown)
  return false;
#undef DO_
}

void MsgDDZRoomShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZRoomShowDown)
  // optional .TDDZState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgDDZPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->room_id(), output);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_count(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional bool game_over = 8;
  if (has_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->game_over(), output);
  }

  // repeated .MsgDDZShowDownEvent event_count = 9;
  for (int i = 0; i < this->event_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->event_count(i), output);
  }

  // repeated .MsgDDZIntegralCount integral_list = 10;
  for (int i = 0; i < this->integral_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->integral_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZRoomShowDown)
}

::google::protobuf::uint8* MsgDDZRoomShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZRoomShowDown)
  // optional .TDDZState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgDDZPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_count(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional bool game_over = 8;
  if (has_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->game_over(), target);
  }

  // repeated .MsgDDZShowDownEvent event_count = 9;
  for (int i = 0; i < this->event_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->event_count(i), target);
  }

  // repeated .MsgDDZIntegralCount integral_list = 10;
  for (int i = 0; i < this->integral_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->integral_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZRoomShowDown)
  return target;
}

int MsgDDZRoomShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TDDZState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 5;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool game_over = 8;
    if (has_game_over()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MsgDDZPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgDDZShowDownEvent event_count = 9;
  total_size += 1 * this->event_count_size();
  for (int i = 0; i < this->event_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_count(i));
  }

  // repeated .MsgDDZIntegralCount integral_list = 10;
  total_size += 1 * this->integral_list_size();
  for (int i = 0; i < this->integral_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZRoomShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZRoomShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZRoomShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZRoomShowDown::MergeFrom(const MsgDDZRoomShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  event_count_.MergeFrom(from.event_count_);
  integral_list_.MergeFrom(from.integral_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_game_over()) {
      set_game_over(from.game_over());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZRoomShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZRoomShowDown::CopyFrom(const MsgDDZRoomShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZRoomShowDown::IsInitialized() const {

  return true;
}

void MsgDDZRoomShowDown::Swap(MsgDDZRoomShowDown* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(time_, other->time_);
    std::swap(game_over_, other->game_over_);
    event_count_.Swap(&other->event_count_);
    integral_list_.Swap(&other->integral_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZRoomShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZRoomShowDown_descriptor_;
  metadata.reflection = MsgDDZRoomShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZIntegralCount::kRoleidFieldNumber;
const int MsgDDZIntegralCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgDDZIntegralCount::MsgDDZIntegralCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZIntegralCount)
}

void MsgDDZIntegralCount::InitAsDefaultInstance() {
}

MsgDDZIntegralCount::MsgDDZIntegralCount(const MsgDDZIntegralCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZIntegralCount)
}

void MsgDDZIntegralCount::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZIntegralCount::~MsgDDZIntegralCount() {
  // @@protoc_insertion_point(destructor:MsgDDZIntegralCount)
  SharedDtor();
}

void MsgDDZIntegralCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDDZIntegralCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZIntegralCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZIntegralCount_descriptor_;
}

const MsgDDZIntegralCount& MsgDDZIntegralCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZIntegralCount* MsgDDZIntegralCount::default_instance_ = NULL;

MsgDDZIntegralCount* MsgDDZIntegralCount::New() const {
  return new MsgDDZIntegralCount;
}

void MsgDDZIntegralCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDDZIntegralCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZIntegralCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZIntegralCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZIntegralCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZIntegralCount)
  return false;
#undef DO_
}

void MsgDDZIntegralCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZIntegralCount)
}

::google::protobuf::uint8* MsgDDZIntegralCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZIntegralCount)
  return target;
}

int MsgDDZIntegralCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZIntegralCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZIntegralCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZIntegralCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZIntegralCount::MergeFrom(const MsgDDZIntegralCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZIntegralCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZIntegralCount::CopyFrom(const MsgDDZIntegralCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZIntegralCount::IsInitialized() const {

  return true;
}

void MsgDDZIntegralCount::Swap(MsgDDZIntegralCount* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZIntegralCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZIntegralCount_descriptor_;
  metadata.reflection = MsgDDZIntegralCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDDZShowDownEvent::kEventIdFieldNumber;
const int MsgDDZShowDownEvent::kCountFieldNumber;
#endif  // !_MSC_VER

MsgDDZShowDownEvent::MsgDDZShowDownEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDDZShowDownEvent)
}

void MsgDDZShowDownEvent::InitAsDefaultInstance() {
}

MsgDDZShowDownEvent::MsgDDZShowDownEvent(const MsgDDZShowDownEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDDZShowDownEvent)
}

void MsgDDZShowDownEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDDZShowDownEvent::~MsgDDZShowDownEvent() {
  // @@protoc_insertion_point(destructor:MsgDDZShowDownEvent)
  SharedDtor();
}

void MsgDDZShowDownEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDDZShowDownEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDDZShowDownEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDDZShowDownEvent_descriptor_;
}

const MsgDDZShowDownEvent& MsgDDZShowDownEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdoudizhu_2eproto();
  return *default_instance_;
}

MsgDDZShowDownEvent* MsgDDZShowDownEvent::default_instance_ = NULL;

MsgDDZShowDownEvent* MsgDDZShowDownEvent::New() const {
  return new MsgDDZShowDownEvent;
}

void MsgDDZShowDownEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDDZShowDownEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDDZShowDownEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDDZShowDownEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDDZShowDownEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDDZShowDownEvent)
  return false;
#undef DO_
}

void MsgDDZShowDownEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDDZShowDownEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDDZShowDownEvent)
}

::google::protobuf::uint8* MsgDDZShowDownEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDDZShowDownEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDDZShowDownEvent)
  return target;
}

int MsgDDZShowDownEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDDZShowDownEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDDZShowDownEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDDZShowDownEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDDZShowDownEvent::MergeFrom(const MsgDDZShowDownEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDDZShowDownEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDDZShowDownEvent::CopyFrom(const MsgDDZShowDownEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDDZShowDownEvent::IsInitialized() const {

  return true;
}

void MsgDDZShowDownEvent::Swap(MsgDDZShowDownEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDDZShowDownEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDDZShowDownEvent_descriptor_;
  metadata.reflection = MsgDDZShowDownEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
