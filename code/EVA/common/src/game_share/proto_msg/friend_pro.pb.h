// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_pro.proto

#ifndef PROTOBUF_friend_5fpro_2eproto__INCLUDED
#define PROTOBUF_friend_5fpro_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "public_pro.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_5fpro_2eproto();
void protobuf_AssignDesc_friend_5fpro_2eproto();
void protobuf_ShutdownFile_friend_5fpro_2eproto();

class MsgFriendGift;
class MsgFriendGiftResult;
class MsgFriendBase;
class MsgFriendList;
class MsgFriendDetail;
class MsgInviteEnter;
class MsgRecommend;
class MsgRecommendList;
class MsgBlackListCont;
class MsgBlackList;
class MsgBindDstInfo;
class MsgBindFriendInfo;
class MsgTissueRole;
class MsgTissueGame;
class MsgTissueRoom;
class MsgHandlesTissue;
class MsgTissueData;
class MsgTissueDataCount;

enum TBindFriendStateKind {
  BF_NULL = 0,
  BF_GET_BIND_REWARD = 1,
  BF_GET_PLAY_REWARD = 2
};
bool TBindFriendStateKind_IsValid(int value);
const TBindFriendStateKind TBindFriendStateKind_MIN = BF_NULL;
const TBindFriendStateKind TBindFriendStateKind_MAX = BF_GET_PLAY_REWARD;
const int TBindFriendStateKind_ARRAYSIZE = TBindFriendStateKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* TBindFriendStateKind_descriptor();
inline const ::std::string& TBindFriendStateKind_Name(TBindFriendStateKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    TBindFriendStateKind_descriptor(), value);
}
inline bool TBindFriendStateKind_Parse(
    const ::std::string& name, TBindFriendStateKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TBindFriendStateKind>(
    TBindFriendStateKind_descriptor(), name, value);
}
// ===================================================================

class MsgFriendGift : public ::google::protobuf::Message {
 public:
  MsgFriendGift();
  virtual ~MsgFriendGift();

  MsgFriendGift(const MsgFriendGift& from);

  inline MsgFriendGift& operator=(const MsgFriendGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFriendGift& default_instance();

  void Swap(MsgFriendGift* other);

  // implements Message ----------------------------------------------

  MsgFriendGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFriendGift& from);
  void MergeFrom(const MsgFriendGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint64 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgFriendGift)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint64 money_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgFriendGift* default_instance_;
};
// -------------------------------------------------------------------

class MsgFriendGiftResult : public ::google::protobuf::Message {
 public:
  MsgFriendGiftResult();
  virtual ~MsgFriendGiftResult();

  MsgFriendGiftResult(const MsgFriendGiftResult& from);

  inline MsgFriendGiftResult& operator=(const MsgFriendGiftResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFriendGiftResult& default_instance();

  void Swap(MsgFriendGiftResult* other);

  // implements Message ----------------------------------------------

  MsgFriendGiftResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFriendGiftResult& from);
  void MergeFrom(const MsgFriendGiftResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgFriendGiftResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 money_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgFriendGiftResult* default_instance_;
};
// -------------------------------------------------------------------

class MsgFriendBase : public ::google::protobuf::Message {
 public:
  MsgFriendBase();
  virtual ~MsgFriendBase();

  MsgFriendBase(const MsgFriendBase& from);

  inline MsgFriendBase& operator=(const MsgFriendBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFriendBase& default_instance();

  void Swap(MsgFriendBase* other);

  // implements Message ----------------------------------------------

  MsgFriendBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFriendBase& from);
  void MergeFrom(const MsgFriendBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string portrait = 3;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 3;
  inline const ::std::string& portrait() const;
  inline void set_portrait(const ::std::string& value);
  inline void set_portrait(const char* value);
  inline void set_portrait(const char* value, size_t size);
  inline ::std::string* mutable_portrait();
  inline ::std::string* release_portrait();
  inline void set_allocated_portrait(::std::string* portrait);

  // optional bool state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline bool state() const;
  inline void set_state(bool value);

  // optional uint32 channel_id = 5;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 5;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional string username = 6;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 6;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint32 head_portrait = 7;
  inline bool has_head_portrait() const;
  inline void clear_head_portrait();
  static const int kHeadPortraitFieldNumber = 7;
  inline ::google::protobuf::uint32 head_portrait() const;
  inline void set_head_portrait(::google::protobuf::uint32 value);

  // optional uint64 money = 8;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 8;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // optional uint32 sex = 9;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 9;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 like = 10;
  inline bool has_like() const;
  inline void clear_like();
  static const int kLikeFieldNumber = 10;
  inline ::google::protobuf::uint32 like() const;
  inline void set_like(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgFriendBase)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_head_portrait();
  inline void clear_has_head_portrait();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_like();
  inline void clear_has_like();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* name_;
  ::std::string* portrait_;
  bool state_;
  ::google::protobuf::uint32 channel_id_;
  ::std::string* username_;
  ::google::protobuf::uint64 money_;
  ::google::protobuf::uint32 head_portrait_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 like_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgFriendBase* default_instance_;
};
// -------------------------------------------------------------------

class MsgFriendList : public ::google::protobuf::Message {
 public:
  MsgFriendList();
  virtual ~MsgFriendList();

  MsgFriendList(const MsgFriendList& from);

  inline MsgFriendList& operator=(const MsgFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFriendList& default_instance();

  void Swap(MsgFriendList* other);

  // implements Message ----------------------------------------------

  MsgFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFriendList& from);
  void MergeFrom(const MsgFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 check = 1;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 1;
  inline ::google::protobuf::uint32 check() const;
  inline void set_check(::google::protobuf::uint32 value);

  // repeated .MsgFriendBase friend_list = 2;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 2;
  inline const ::MsgFriendBase& friend_list(int index) const;
  inline ::MsgFriendBase* mutable_friend_list(int index);
  inline ::MsgFriendBase* add_friend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgFriendBase >&
      friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgFriendBase >*
      mutable_friend_list();

  // @@protoc_insertion_point(class_scope:MsgFriendList)
 private:
  inline void set_has_check();
  inline void clear_has_check();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgFriendBase > friend_list_;
  ::google::protobuf::uint32 check_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgFriendList* default_instance_;
};
// -------------------------------------------------------------------

class MsgFriendDetail : public ::google::protobuf::Message {
 public:
  MsgFriendDetail();
  virtual ~MsgFriendDetail();

  MsgFriendDetail(const MsgFriendDetail& from);

  inline MsgFriendDetail& operator=(const MsgFriendDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFriendDetail& default_instance();

  void Swap(MsgFriendDetail* other);

  // implements Message ----------------------------------------------

  MsgFriendDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFriendDetail& from);
  void MergeFrom(const MsgFriendDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint32 nationality = 2;
  inline bool has_nationality() const;
  inline void clear_nationality();
  static const int kNationalityFieldNumber = 2;
  inline ::google::protobuf::uint32 nationality() const;
  inline void set_nationality(::google::protobuf::uint32 value);

  // optional uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint64 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // optional string gametype = 5;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 5;
  inline const ::std::string& gametype() const;
  inline void set_gametype(const ::std::string& value);
  inline void set_gametype(const char* value);
  inline void set_gametype(const char* value, size_t size);
  inline ::std::string* mutable_gametype();
  inline ::std::string* release_gametype();
  inline void set_allocated_gametype(::std::string* gametype);

  // optional .MsgKPICount count = 6;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline const ::MsgKPICount& count() const;
  inline ::MsgKPICount* mutable_count();
  inline ::MsgKPICount* release_count();
  inline void set_allocated_count(::MsgKPICount* count);

  // optional .MsgFriendBase info = 7;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 7;
  inline const ::MsgFriendBase& info() const;
  inline ::MsgFriendBase* mutable_info();
  inline ::MsgFriendBase* release_info();
  inline void set_allocated_info(::MsgFriendBase* info);

  // optional uint32 channel_id = 8;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 8;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional string username = 9;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 9;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:MsgFriendDetail)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nationality();
  inline void clear_has_nationality();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint32 nationality_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint64 money_;
  ::std::string* gametype_;
  ::MsgKPICount* count_;
  ::MsgFriendBase* info_;
  ::std::string* username_;
  ::google::protobuf::uint32 channel_id_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgFriendDetail* default_instance_;
};
// -------------------------------------------------------------------

class MsgInviteEnter : public ::google::protobuf::Message {
 public:
  MsgInviteEnter();
  virtual ~MsgInviteEnter();

  MsgInviteEnter(const MsgInviteEnter& from);

  inline MsgInviteEnter& operator=(const MsgInviteEnter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgInviteEnter& default_instance();

  void Swap(MsgInviteEnter* other);

  // implements Message ----------------------------------------------

  MsgInviteEnter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgInviteEnter& from);
  void MergeFrom(const MsgInviteEnter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tarID = 1;
  inline bool has_tarid() const;
  inline void clear_tarid();
  static const int kTarIDFieldNumber = 1;
  inline ::google::protobuf::uint64 tarid() const;
  inline void set_tarid(::google::protobuf::uint64 value);

  // optional string roomType = 2;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomTypeFieldNumber = 2;
  inline const ::std::string& roomtype() const;
  inline void set_roomtype(const ::std::string& value);
  inline void set_roomtype(const char* value);
  inline void set_roomtype(const char* value, size_t size);
  inline ::std::string* mutable_roomtype();
  inline ::std::string* release_roomtype();
  inline void set_allocated_roomtype(::std::string* roomtype);

  // @@protoc_insertion_point(class_scope:MsgInviteEnter)
 private:
  inline void set_has_tarid();
  inline void clear_has_tarid();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 tarid_;
  ::std::string* roomtype_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgInviteEnter* default_instance_;
};
// -------------------------------------------------------------------

class MsgRecommend : public ::google::protobuf::Message {
 public:
  MsgRecommend();
  virtual ~MsgRecommend();

  MsgRecommend(const MsgRecommend& from);

  inline MsgRecommend& operator=(const MsgRecommend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRecommend& default_instance();

  void Swap(MsgRecommend* other);

  // implements Message ----------------------------------------------

  MsgRecommend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRecommend& from);
  void MergeFrom(const MsgRecommend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tarID = 1;
  inline bool has_tarid() const;
  inline void clear_tarid();
  static const int kTarIDFieldNumber = 1;
  inline ::google::protobuf::uint64 tarid() const;
  inline void set_tarid(::google::protobuf::uint64 value);

  // optional uint32 head_portrait = 2;
  inline bool has_head_portrait() const;
  inline void clear_head_portrait();
  static const int kHeadPortraitFieldNumber = 2;
  inline ::google::protobuf::uint32 head_portrait() const;
  inline void set_head_portrait(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional string username = 4;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 4;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MsgRecommend)
 private:
  inline void set_has_tarid();
  inline void clear_has_tarid();
  inline void set_has_head_portrait();
  inline void clear_has_head_portrait();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 tarid_;
  ::google::protobuf::uint32 head_portrait_;
  ::google::protobuf::uint32 channel_id_;
  ::std::string* username_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgRecommend* default_instance_;
};
// -------------------------------------------------------------------

class MsgRecommendList : public ::google::protobuf::Message {
 public:
  MsgRecommendList();
  virtual ~MsgRecommendList();

  MsgRecommendList(const MsgRecommendList& from);

  inline MsgRecommendList& operator=(const MsgRecommendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRecommendList& default_instance();

  void Swap(MsgRecommendList* other);

  // implements Message ----------------------------------------------

  MsgRecommendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRecommendList& from);
  void MergeFrom(const MsgRecommendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgRecommend list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::MsgRecommend& list(int index) const;
  inline ::MsgRecommend* mutable_list(int index);
  inline ::MsgRecommend* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgRecommend >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgRecommend >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:MsgRecommendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgRecommend > list_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgRecommendList* default_instance_;
};
// -------------------------------------------------------------------

class MsgBlackListCont : public ::google::protobuf::Message {
 public:
  MsgBlackListCont();
  virtual ~MsgBlackListCont();

  MsgBlackListCont(const MsgBlackListCont& from);

  inline MsgBlackListCont& operator=(const MsgBlackListCont& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBlackListCont& default_instance();

  void Swap(MsgBlackListCont* other);

  // implements Message ----------------------------------------------

  MsgBlackListCont* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBlackListCont& from);
  void MergeFrom(const MsgBlackListCont& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 check = 1;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 1;
  inline ::google::protobuf::uint32 check() const;
  inline void set_check(::google::protobuf::uint32 value);

  // repeated .MsgBlackList black_list = 2;
  inline int black_list_size() const;
  inline void clear_black_list();
  static const int kBlackListFieldNumber = 2;
  inline const ::MsgBlackList& black_list(int index) const;
  inline ::MsgBlackList* mutable_black_list(int index);
  inline ::MsgBlackList* add_black_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackList >&
      black_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgBlackList >*
      mutable_black_list();

  // @@protoc_insertion_point(class_scope:MsgBlackListCont)
 private:
  inline void set_has_check();
  inline void clear_has_check();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgBlackList > black_list_;
  ::google::protobuf::uint32 check_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgBlackListCont* default_instance_;
};
// -------------------------------------------------------------------

class MsgBlackList : public ::google::protobuf::Message {
 public:
  MsgBlackList();
  virtual ~MsgBlackList();

  MsgBlackList(const MsgBlackList& from);

  inline MsgBlackList& operator=(const MsgBlackList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBlackList& default_instance();

  void Swap(MsgBlackList* other);

  // implements Message ----------------------------------------------

  MsgBlackList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBlackList& from);
  void MergeFrom(const MsgBlackList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 head_portrait = 3;
  inline bool has_head_portrait() const;
  inline void clear_head_portrait();
  static const int kHeadPortraitFieldNumber = 3;
  inline ::google::protobuf::uint32 head_portrait() const;
  inline void set_head_portrait(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgBlackList)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head_portrait();
  inline void clear_has_head_portrait();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 pid_;
  ::std::string* name_;
  ::google::protobuf::uint32 head_portrait_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 state_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgBlackList* default_instance_;
};
// -------------------------------------------------------------------

class MsgBindDstInfo : public ::google::protobuf::Message {
 public:
  MsgBindDstInfo();
  virtual ~MsgBindDstInfo();

  MsgBindDstInfo(const MsgBindDstInfo& from);

  inline MsgBindDstInfo& operator=(const MsgBindDstInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBindDstInfo& default_instance();

  void Swap(MsgBindDstInfo* other);

  // implements Message ----------------------------------------------

  MsgBindDstInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBindDstInfo& from);
  void MergeFrom(const MsgBindDstInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 dst_pid = 1;
  inline bool has_dst_pid() const;
  inline void clear_dst_pid();
  static const int kDstPidFieldNumber = 1;
  inline ::google::protobuf::uint64 dst_pid() const;
  inline void set_dst_pid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgBindDstInfo)
 private:
  inline void set_has_dst_pid();
  inline void clear_has_dst_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 dst_pid_;
  ::std::string* name_;
  ::std::string* username_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgBindDstInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgBindFriendInfo : public ::google::protobuf::Message {
 public:
  MsgBindFriendInfo();
  virtual ~MsgBindFriendInfo();

  MsgBindFriendInfo(const MsgBindFriendInfo& from);

  inline MsgBindFriendInfo& operator=(const MsgBindFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBindFriendInfo& default_instance();

  void Swap(MsgBindFriendInfo* other);

  // implements Message ----------------------------------------------

  MsgBindFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBindFriendInfo& from);
  void MergeFrom(const MsgBindFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgBindDstInfo dst_list = 1;
  inline int dst_list_size() const;
  inline void clear_dst_list();
  static const int kDstListFieldNumber = 1;
  inline const ::MsgBindDstInfo& dst_list(int index) const;
  inline ::MsgBindDstInfo* mutable_dst_list(int index);
  inline ::MsgBindDstInfo* add_dst_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgBindDstInfo >&
      dst_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgBindDstInfo >*
      mutable_dst_list();

  // optional uint64 src_pid = 2;
  inline bool has_src_pid() const;
  inline void clear_src_pid();
  static const int kSrcPidFieldNumber = 2;
  inline ::google::protobuf::uint64 src_pid() const;
  inline void set_src_pid(::google::protobuf::uint64 value);

  // optional uint32 self_state = 3;
  inline bool has_self_state() const;
  inline void clear_self_state();
  static const int kSelfStateFieldNumber = 3;
  inline ::google::protobuf::uint32 self_state() const;
  inline void set_self_state(::google::protobuf::uint32 value);

  // optional uint32 self_count = 4;
  inline bool has_self_count() const;
  inline void clear_self_count();
  static const int kSelfCountFieldNumber = 4;
  inline ::google::protobuf::uint32 self_count() const;
  inline void set_self_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgBindFriendInfo)
 private:
  inline void set_has_src_pid();
  inline void clear_has_src_pid();
  inline void set_has_self_state();
  inline void clear_has_self_state();
  inline void set_has_self_count();
  inline void clear_has_self_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgBindDstInfo > dst_list_;
  ::google::protobuf::uint64 src_pid_;
  ::google::protobuf::uint32 self_state_;
  ::google::protobuf::uint32 self_count_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgBindFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgTissueRole : public ::google::protobuf::Message {
 public:
  MsgTissueRole();
  virtual ~MsgTissueRole();

  MsgTissueRole(const MsgTissueRole& from);

  inline MsgTissueRole& operator=(const MsgTissueRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTissueRole& default_instance();

  void Swap(MsgTissueRole* other);

  // implements Message ----------------------------------------------

  MsgTissueRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTissueRole& from);
  void MergeFrom(const MsgTissueRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint32 jointime = 3;
  inline bool has_jointime() const;
  inline void clear_jointime();
  static const int kJointimeFieldNumber = 3;
  inline ::google::protobuf::uint32 jointime() const;
  inline void set_jointime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgTissueRole)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_jointime();
  inline void clear_has_jointime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* username_;
  ::google::protobuf::uint32 jointime_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgTissueRole* default_instance_;
};
// -------------------------------------------------------------------

class MsgTissueGame : public ::google::protobuf::Message {
 public:
  MsgTissueGame();
  virtual ~MsgTissueGame();

  MsgTissueGame(const MsgTissueGame& from);

  inline MsgTissueGame& operator=(const MsgTissueGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTissueGame& default_instance();

  void Swap(MsgTissueGame* other);

  // implements Message ----------------------------------------------

  MsgTissueGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTissueGame& from);
  void MergeFrom(const MsgTissueGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_type = 1;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 1;
  inline const ::std::string& room_type() const;
  inline void set_room_type(const ::std::string& value);
  inline void set_room_type(const char* value);
  inline void set_room_type(const char* value, size_t size);
  inline ::std::string* mutable_room_type();
  inline ::std::string* release_room_type();
  inline void set_allocated_room_type(::std::string* room_type);

  // optional uint32 consume_id = 2;
  inline bool has_consume_id() const;
  inline void clear_consume_id();
  static const int kConsumeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 consume_id() const;
  inline void set_consume_id(::google::protobuf::uint32 value);

  // optional uint32 special_kind = 3;
  inline bool has_special_kind() const;
  inline void clear_special_kind();
  static const int kSpecialKindFieldNumber = 3;
  inline ::google::protobuf::uint32 special_kind() const;
  inline void set_special_kind(::google::protobuf::uint32 value);

  // optional uint32 pay_mode = 4;
  inline bool has_pay_mode() const;
  inline void clear_pay_mode();
  static const int kPayModeFieldNumber = 4;
  inline ::google::protobuf::uint32 pay_mode() const;
  inline void set_pay_mode(::google::protobuf::uint32 value);

  // optional uint32 palyer_count = 5;
  inline bool has_palyer_count() const;
  inline void clear_palyer_count();
  static const int kPalyerCountFieldNumber = 5;
  inline ::google::protobuf::uint32 palyer_count() const;
  inline void set_palyer_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgTissueGame)
 private:
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_consume_id();
  inline void clear_has_consume_id();
  inline void set_has_special_kind();
  inline void clear_has_special_kind();
  inline void set_has_pay_mode();
  inline void clear_has_pay_mode();
  inline void set_has_palyer_count();
  inline void clear_has_palyer_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_type_;
  ::google::protobuf::uint32 consume_id_;
  ::google::protobuf::uint32 special_kind_;
  ::google::protobuf::uint32 pay_mode_;
  ::google::protobuf::uint32 palyer_count_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgTissueGame* default_instance_;
};
// -------------------------------------------------------------------

class MsgTissueRoom : public ::google::protobuf::Message {
 public:
  MsgTissueRoom();
  virtual ~MsgTissueRoom();

  MsgTissueRoom(const MsgTissueRoom& from);

  inline MsgTissueRoom& operator=(const MsgTissueRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTissueRoom& default_instance();

  void Swap(MsgTissueRoom* other);

  // implements Message ----------------------------------------------

  MsgTissueRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTissueRoom& from);
  void MergeFrom(const MsgTissueRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint64 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::uint64 room_id() const;
  inline void set_room_id(::google::protobuf::uint64 value);

  // optional uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 member_count = 5;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 5;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // optional .MsgCreatePrivateRoom room_info = 6;
  inline bool has_room_info() const;
  inline void clear_room_info();
  static const int kRoomInfoFieldNumber = 6;
  inline const ::MsgCreatePrivateRoom& room_info() const;
  inline ::MsgCreatePrivateRoom* mutable_room_info();
  inline ::MsgCreatePrivateRoom* release_room_info();
  inline void set_allocated_room_info(::MsgCreatePrivateRoom* room_info);

  // @@protoc_insertion_point(class_scope:MsgTissueRoom)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_member_count();
  inline void clear_has_member_count();
  inline void set_has_room_info();
  inline void clear_has_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* username_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 member_count_;
  ::MsgCreatePrivateRoom* room_info_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgTissueRoom* default_instance_;
};
// -------------------------------------------------------------------

class MsgHandlesTissue : public ::google::protobuf::Message {
 public:
  MsgHandlesTissue();
  virtual ~MsgHandlesTissue();

  MsgHandlesTissue(const MsgHandlesTissue& from);

  inline MsgHandlesTissue& operator=(const MsgHandlesTissue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHandlesTissue& default_instance();

  void Swap(MsgHandlesTissue* other);

  // implements Message ----------------------------------------------

  MsgHandlesTissue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHandlesTissue& from);
  void MergeFrom(const MsgHandlesTissue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tissue_id = 1;
  inline bool has_tissue_id() const;
  inline void clear_tissue_id();
  static const int kTissueIdFieldNumber = 1;
  inline ::google::protobuf::uint64 tissue_id() const;
  inline void set_tissue_id(::google::protobuf::uint64 value);

  // optional string role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline const ::std::string& role_id() const;
  inline void set_role_id(const ::std::string& value);
  inline void set_role_id(const char* value);
  inline void set_role_id(const char* value, size_t size);
  inline ::std::string* mutable_role_id();
  inline ::std::string* release_role_id();
  inline void set_allocated_role_id(::std::string* role_id);

  // optional string tissue_name = 3;
  inline bool has_tissue_name() const;
  inline void clear_tissue_name();
  static const int kTissueNameFieldNumber = 3;
  inline const ::std::string& tissue_name() const;
  inline void set_tissue_name(const ::std::string& value);
  inline void set_tissue_name(const char* value);
  inline void set_tissue_name(const char* value, size_t size);
  inline ::std::string* mutable_tissue_name();
  inline ::std::string* release_tissue_name();
  inline void set_allocated_tissue_name(::std::string* tissue_name);

  // optional string tissue_notity = 4;
  inline bool has_tissue_notity() const;
  inline void clear_tissue_notity();
  static const int kTissueNotityFieldNumber = 4;
  inline const ::std::string& tissue_notity() const;
  inline void set_tissue_notity(const ::std::string& value);
  inline void set_tissue_notity(const char* value);
  inline void set_tissue_notity(const char* value, size_t size);
  inline ::std::string* mutable_tissue_notity();
  inline ::std::string* release_tissue_notity();
  inline void set_allocated_tissue_notity(::std::string* tissue_notity);

  // optional uint32 area_id = 5;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 5;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // repeated .MsgTissueGame game_list = 7;
  inline int game_list_size() const;
  inline void clear_game_list();
  static const int kGameListFieldNumber = 7;
  inline const ::MsgTissueGame& game_list(int index) const;
  inline ::MsgTissueGame* mutable_game_list(int index);
  inline ::MsgTissueGame* add_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >&
      game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >*
      mutable_game_list();

  // optional uint64 version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // optional uint64 applylist_version = 9;
  inline bool has_applylist_version() const;
  inline void clear_applylist_version();
  static const int kApplylistVersionFieldNumber = 9;
  inline ::google::protobuf::uint64 applylist_version() const;
  inline void set_applylist_version(::google::protobuf::uint64 value);

  // optional uint64 handle_role_id = 10;
  inline bool has_handle_role_id() const;
  inline void clear_handle_role_id();
  static const int kHandleRoleIdFieldNumber = 10;
  inline ::google::protobuf::uint64 handle_role_id() const;
  inline void set_handle_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgHandlesTissue)
 private:
  inline void set_has_tissue_id();
  inline void clear_has_tissue_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_tissue_name();
  inline void clear_has_tissue_name();
  inline void set_has_tissue_notity();
  inline void clear_has_tissue_notity();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_applylist_version();
  inline void clear_has_applylist_version();
  inline void set_has_handle_role_id();
  inline void clear_has_handle_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 tissue_id_;
  ::std::string* role_id_;
  ::std::string* tissue_name_;
  ::std::string* tissue_notity_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::RepeatedPtrField< ::MsgTissueGame > game_list_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint64 applylist_version_;
  ::google::protobuf::uint64 handle_role_id_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgHandlesTissue* default_instance_;
};
// -------------------------------------------------------------------

class MsgTissueData : public ::google::protobuf::Message {
 public:
  MsgTissueData();
  virtual ~MsgTissueData();

  MsgTissueData(const MsgTissueData& from);

  inline MsgTissueData& operator=(const MsgTissueData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTissueData& default_instance();

  void Swap(MsgTissueData* other);

  // implements Message ----------------------------------------------

  MsgTissueData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTissueData& from);
  void MergeFrom(const MsgTissueData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tissue_id = 1;
  inline bool has_tissue_id() const;
  inline void clear_tissue_id();
  static const int kTissueIdFieldNumber = 1;
  inline ::google::protobuf::uint64 tissue_id() const;
  inline void set_tissue_id(::google::protobuf::uint64 value);

  // optional string tissue_name = 2;
  inline bool has_tissue_name() const;
  inline void clear_tissue_name();
  static const int kTissueNameFieldNumber = 2;
  inline const ::std::string& tissue_name() const;
  inline void set_tissue_name(const ::std::string& value);
  inline void set_tissue_name(const char* value);
  inline void set_tissue_name(const char* value, size_t size);
  inline ::std::string* mutable_tissue_name();
  inline ::std::string* release_tissue_name();
  inline void set_allocated_tissue_name(::std::string* tissue_name);

  // optional string tissue_notity = 3;
  inline bool has_tissue_notity() const;
  inline void clear_tissue_notity();
  static const int kTissueNotityFieldNumber = 3;
  inline const ::std::string& tissue_notity() const;
  inline void set_tissue_notity(const ::std::string& value);
  inline void set_tissue_notity(const char* value);
  inline void set_tissue_notity(const char* value, size_t size);
  inline ::std::string* mutable_tissue_notity();
  inline ::std::string* release_tissue_notity();
  inline void set_allocated_tissue_notity(::std::string* tissue_notity);

  // optional uint32 room_count = 4;
  inline bool has_room_count() const;
  inline void clear_room_count();
  static const int kRoomCountFieldNumber = 4;
  inline ::google::protobuf::uint32 room_count() const;
  inline void set_room_count(::google::protobuf::uint32 value);

  // optional uint32 member_count = 5;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 5;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // optional uint32 apply_count = 6;
  inline bool has_apply_count() const;
  inline void clear_apply_count();
  static const int kApplyCountFieldNumber = 6;
  inline ::google::protobuf::uint32 apply_count() const;
  inline void set_apply_count(::google::protobuf::uint32 value);

  // optional uint32 tissue_state = 7;
  inline bool has_tissue_state() const;
  inline void clear_tissue_state();
  static const int kTissueStateFieldNumber = 7;
  inline ::google::protobuf::uint32 tissue_state() const;
  inline void set_tissue_state(::google::protobuf::uint32 value);

  // optional uint64 version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // optional uint32 area_id = 9;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 9;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 total_money = 10;
  inline bool has_total_money() const;
  inline void clear_total_money();
  static const int kTotalMoneyFieldNumber = 10;
  inline ::google::protobuf::uint32 total_money() const;
  inline void set_total_money(::google::protobuf::uint32 value);

  // optional uint32 cost_limit = 11;
  inline bool has_cost_limit() const;
  inline void clear_cost_limit();
  static const int kCostLimitFieldNumber = 11;
  inline ::google::protobuf::uint32 cost_limit() const;
  inline void set_cost_limit(::google::protobuf::uint32 value);

  // optional uint32 surpls_money = 12;
  inline bool has_surpls_money() const;
  inline void clear_surpls_money();
  static const int kSurplsMoneyFieldNumber = 12;
  inline ::google::protobuf::uint32 surpls_money() const;
  inline void set_surpls_money(::google::protobuf::uint32 value);

  // repeated .MsgTissueRole role_list = 13;
  inline int role_list_size() const;
  inline void clear_role_list();
  static const int kRoleListFieldNumber = 13;
  inline const ::MsgTissueRole& role_list(int index) const;
  inline ::MsgTissueRole* mutable_role_list(int index);
  inline ::MsgTissueRole* add_role_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >&
      role_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >*
      mutable_role_list();

  // repeated .MsgTissueGame game_list = 14;
  inline int game_list_size() const;
  inline void clear_game_list();
  static const int kGameListFieldNumber = 14;
  inline const ::MsgTissueGame& game_list(int index) const;
  inline ::MsgTissueGame* mutable_game_list(int index);
  inline ::MsgTissueGame* add_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >&
      game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >*
      mutable_game_list();

  // repeated .MsgTissueRoom room_list = 15;
  inline int room_list_size() const;
  inline void clear_room_list();
  static const int kRoomListFieldNumber = 15;
  inline const ::MsgTissueRoom& room_list(int index) const;
  inline ::MsgTissueRoom* mutable_room_list(int index);
  inline ::MsgTissueRoom* add_room_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueRoom >&
      room_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgTissueRoom >*
      mutable_room_list();

  // repeated .MsgTissueRole apply_list = 16;
  inline int apply_list_size() const;
  inline void clear_apply_list();
  static const int kApplyListFieldNumber = 16;
  inline const ::MsgTissueRole& apply_list(int index) const;
  inline ::MsgTissueRole* mutable_apply_list(int index);
  inline ::MsgTissueRole* add_apply_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >&
      apply_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >*
      mutable_apply_list();

  // @@protoc_insertion_point(class_scope:MsgTissueData)
 private:
  inline void set_has_tissue_id();
  inline void clear_has_tissue_id();
  inline void set_has_tissue_name();
  inline void clear_has_tissue_name();
  inline void set_has_tissue_notity();
  inline void clear_has_tissue_notity();
  inline void set_has_room_count();
  inline void clear_has_room_count();
  inline void set_has_member_count();
  inline void clear_has_member_count();
  inline void set_has_apply_count();
  inline void clear_has_apply_count();
  inline void set_has_tissue_state();
  inline void clear_has_tissue_state();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_total_money();
  inline void clear_has_total_money();
  inline void set_has_cost_limit();
  inline void clear_has_cost_limit();
  inline void set_has_surpls_money();
  inline void clear_has_surpls_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 tissue_id_;
  ::std::string* tissue_name_;
  ::std::string* tissue_notity_;
  ::google::protobuf::uint32 room_count_;
  ::google::protobuf::uint32 member_count_;
  ::google::protobuf::uint32 apply_count_;
  ::google::protobuf::uint32 tissue_state_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 total_money_;
  ::google::protobuf::uint32 cost_limit_;
  ::google::protobuf::uint32 surpls_money_;
  ::google::protobuf::RepeatedPtrField< ::MsgTissueRole > role_list_;
  ::google::protobuf::RepeatedPtrField< ::MsgTissueGame > game_list_;
  ::google::protobuf::RepeatedPtrField< ::MsgTissueRoom > room_list_;
  ::google::protobuf::RepeatedPtrField< ::MsgTissueRole > apply_list_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgTissueData* default_instance_;
};
// -------------------------------------------------------------------

class MsgTissueDataCount : public ::google::protobuf::Message {
 public:
  MsgTissueDataCount();
  virtual ~MsgTissueDataCount();

  MsgTissueDataCount(const MsgTissueDataCount& from);

  inline MsgTissueDataCount& operator=(const MsgTissueDataCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTissueDataCount& default_instance();

  void Swap(MsgTissueDataCount* other);

  // implements Message ----------------------------------------------

  MsgTissueDataCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTissueDataCount& from);
  void MergeFrom(const MsgTissueDataCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgTissueData tissue_list = 1;
  inline int tissue_list_size() const;
  inline void clear_tissue_list();
  static const int kTissueListFieldNumber = 1;
  inline const ::MsgTissueData& tissue_list(int index) const;
  inline ::MsgTissueData* mutable_tissue_list(int index);
  inline ::MsgTissueData* add_tissue_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueData >&
      tissue_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgTissueData >*
      mutable_tissue_list();

  // @@protoc_insertion_point(class_scope:MsgTissueDataCount)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgTissueData > tissue_list_;
  friend void  protobuf_AddDesc_friend_5fpro_2eproto();
  friend void protobuf_AssignDesc_friend_5fpro_2eproto();
  friend void protobuf_ShutdownFile_friend_5fpro_2eproto();

  void InitAsDefaultInstance();
  static MsgTissueDataCount* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgFriendGift

// optional uint64 roleid = 1;
inline bool MsgFriendGift::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgFriendGift::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgFriendGift::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgFriendGift::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgFriendGift::roleid() const {
  // @@protoc_insertion_point(field_get:MsgFriendGift.roleid)
  return roleid_;
}
inline void MsgFriendGift::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendGift.roleid)
}

// optional uint64 money = 2;
inline bool MsgFriendGift::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgFriendGift::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgFriendGift::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgFriendGift::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 MsgFriendGift::money() const {
  // @@protoc_insertion_point(field_get:MsgFriendGift.money)
  return money_;
}
inline void MsgFriendGift::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendGift.money)
}

// -------------------------------------------------------------------

// MsgFriendGiftResult

// optional uint64 id = 1;
inline bool MsgFriendGiftResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgFriendGiftResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgFriendGiftResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgFriendGiftResult::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MsgFriendGiftResult::id() const {
  // @@protoc_insertion_point(field_get:MsgFriendGiftResult.id)
  return id_;
}
inline void MsgFriendGiftResult::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendGiftResult.id)
}

// optional string name = 2;
inline bool MsgFriendGiftResult::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgFriendGiftResult::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgFriendGiftResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgFriendGiftResult::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgFriendGiftResult::name() const {
  // @@protoc_insertion_point(field_get:MsgFriendGiftResult.name)
  return *name_;
}
inline void MsgFriendGiftResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgFriendGiftResult.name)
}
inline void MsgFriendGiftResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgFriendGiftResult.name)
}
inline void MsgFriendGiftResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgFriendGiftResult.name)
}
inline ::std::string* MsgFriendGiftResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgFriendGiftResult.name)
  return name_;
}
inline ::std::string* MsgFriendGiftResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgFriendGiftResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendGiftResult.name)
}

// optional uint64 money = 3;
inline bool MsgFriendGiftResult::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgFriendGiftResult::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgFriendGiftResult::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgFriendGiftResult::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 MsgFriendGiftResult::money() const {
  // @@protoc_insertion_point(field_get:MsgFriendGiftResult.money)
  return money_;
}
inline void MsgFriendGiftResult::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendGiftResult.money)
}

// -------------------------------------------------------------------

// MsgFriendBase

// optional uint64 roleid = 1;
inline bool MsgFriendBase::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgFriendBase::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgFriendBase::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgFriendBase::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgFriendBase::roleid() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.roleid)
  return roleid_;
}
inline void MsgFriendBase::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendBase.roleid)
}

// optional string name = 2;
inline bool MsgFriendBase::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgFriendBase::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgFriendBase::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgFriendBase::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgFriendBase::name() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.name)
  return *name_;
}
inline void MsgFriendBase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgFriendBase.name)
}
inline void MsgFriendBase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgFriendBase.name)
}
inline void MsgFriendBase::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgFriendBase.name)
}
inline ::std::string* MsgFriendBase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgFriendBase.name)
  return name_;
}
inline ::std::string* MsgFriendBase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgFriendBase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendBase.name)
}

// optional string portrait = 3;
inline bool MsgFriendBase::has_portrait() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgFriendBase::set_has_portrait() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgFriendBase::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgFriendBase::clear_portrait() {
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_->clear();
  }
  clear_has_portrait();
}
inline const ::std::string& MsgFriendBase::portrait() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.portrait)
  return *portrait_;
}
inline void MsgFriendBase::set_portrait(const ::std::string& value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
  // @@protoc_insertion_point(field_set:MsgFriendBase.portrait)
}
inline void MsgFriendBase::set_portrait(const char* value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgFriendBase.portrait)
}
inline void MsgFriendBase::set_portrait(const char* value, size_t size) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgFriendBase.portrait)
}
inline ::std::string* MsgFriendBase::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    portrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgFriendBase.portrait)
  return portrait_;
}
inline ::std::string* MsgFriendBase::release_portrait() {
  clear_has_portrait();
  if (portrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = portrait_;
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgFriendBase::set_allocated_portrait(::std::string* portrait) {
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (portrait) {
    set_has_portrait();
    portrait_ = portrait;
  } else {
    clear_has_portrait();
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendBase.portrait)
}

// optional bool state = 4;
inline bool MsgFriendBase::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgFriendBase::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgFriendBase::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgFriendBase::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool MsgFriendBase::state() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.state)
  return state_;
}
inline void MsgFriendBase::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendBase.state)
}

// optional uint32 channel_id = 5;
inline bool MsgFriendBase::has_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgFriendBase::set_has_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgFriendBase::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgFriendBase::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 MsgFriendBase::channel_id() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.channel_id)
  return channel_id_;
}
inline void MsgFriendBase::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendBase.channel_id)
}

// optional string username = 6;
inline bool MsgFriendBase::has_username() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgFriendBase::set_has_username() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgFriendBase::clear_has_username() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgFriendBase::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& MsgFriendBase::username() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.username)
  return *username_;
}
inline void MsgFriendBase::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:MsgFriendBase.username)
}
inline void MsgFriendBase::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgFriendBase.username)
}
inline void MsgFriendBase::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgFriendBase.username)
}
inline ::std::string* MsgFriendBase::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgFriendBase.username)
  return username_;
}
inline ::std::string* MsgFriendBase::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgFriendBase::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendBase.username)
}

// optional uint32 head_portrait = 7;
inline bool MsgFriendBase::has_head_portrait() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgFriendBase::set_has_head_portrait() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgFriendBase::clear_has_head_portrait() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgFriendBase::clear_head_portrait() {
  head_portrait_ = 0u;
  clear_has_head_portrait();
}
inline ::google::protobuf::uint32 MsgFriendBase::head_portrait() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.head_portrait)
  return head_portrait_;
}
inline void MsgFriendBase::set_head_portrait(::google::protobuf::uint32 value) {
  set_has_head_portrait();
  head_portrait_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendBase.head_portrait)
}

// optional uint64 money = 8;
inline bool MsgFriendBase::has_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgFriendBase::set_has_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgFriendBase::clear_has_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgFriendBase::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 MsgFriendBase::money() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.money)
  return money_;
}
inline void MsgFriendBase::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendBase.money)
}

// optional uint32 sex = 9;
inline bool MsgFriendBase::has_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgFriendBase::set_has_sex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgFriendBase::clear_has_sex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgFriendBase::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 MsgFriendBase::sex() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.sex)
  return sex_;
}
inline void MsgFriendBase::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendBase.sex)
}

// optional uint32 like = 10;
inline bool MsgFriendBase::has_like() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgFriendBase::set_has_like() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgFriendBase::clear_has_like() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgFriendBase::clear_like() {
  like_ = 0u;
  clear_has_like();
}
inline ::google::protobuf::uint32 MsgFriendBase::like() const {
  // @@protoc_insertion_point(field_get:MsgFriendBase.like)
  return like_;
}
inline void MsgFriendBase::set_like(::google::protobuf::uint32 value) {
  set_has_like();
  like_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendBase.like)
}

// -------------------------------------------------------------------

// MsgFriendList

// optional uint32 check = 1;
inline bool MsgFriendList::has_check() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgFriendList::set_has_check() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgFriendList::clear_has_check() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgFriendList::clear_check() {
  check_ = 0u;
  clear_has_check();
}
inline ::google::protobuf::uint32 MsgFriendList::check() const {
  // @@protoc_insertion_point(field_get:MsgFriendList.check)
  return check_;
}
inline void MsgFriendList::set_check(::google::protobuf::uint32 value) {
  set_has_check();
  check_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendList.check)
}

// repeated .MsgFriendBase friend_list = 2;
inline int MsgFriendList::friend_list_size() const {
  return friend_list_.size();
}
inline void MsgFriendList::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::MsgFriendBase& MsgFriendList::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgFriendList.friend_list)
  return friend_list_.Get(index);
}
inline ::MsgFriendBase* MsgFriendList::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgFriendList.friend_list)
  return friend_list_.Mutable(index);
}
inline ::MsgFriendBase* MsgFriendList::add_friend_list() {
  // @@protoc_insertion_point(field_add:MsgFriendList.friend_list)
  return friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgFriendBase >&
MsgFriendList::friend_list() const {
  // @@protoc_insertion_point(field_list:MsgFriendList.friend_list)
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgFriendBase >*
MsgFriendList::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgFriendList.friend_list)
  return &friend_list_;
}

// -------------------------------------------------------------------

// MsgFriendDetail

// optional uint64 roleid = 1;
inline bool MsgFriendDetail::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgFriendDetail::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgFriendDetail::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgFriendDetail::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgFriendDetail::roleid() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.roleid)
  return roleid_;
}
inline void MsgFriendDetail::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendDetail.roleid)
}

// optional uint32 nationality = 2;
inline bool MsgFriendDetail::has_nationality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgFriendDetail::set_has_nationality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgFriendDetail::clear_has_nationality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgFriendDetail::clear_nationality() {
  nationality_ = 0u;
  clear_has_nationality();
}
inline ::google::protobuf::uint32 MsgFriendDetail::nationality() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.nationality)
  return nationality_;
}
inline void MsgFriendDetail::set_nationality(::google::protobuf::uint32 value) {
  set_has_nationality();
  nationality_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendDetail.nationality)
}

// optional uint32 sex = 3;
inline bool MsgFriendDetail::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgFriendDetail::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgFriendDetail::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgFriendDetail::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 MsgFriendDetail::sex() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.sex)
  return sex_;
}
inline void MsgFriendDetail::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendDetail.sex)
}

// optional uint64 money = 4;
inline bool MsgFriendDetail::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgFriendDetail::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgFriendDetail::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgFriendDetail::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 MsgFriendDetail::money() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.money)
  return money_;
}
inline void MsgFriendDetail::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendDetail.money)
}

// optional string gametype = 5;
inline bool MsgFriendDetail::has_gametype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgFriendDetail::set_has_gametype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgFriendDetail::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgFriendDetail::clear_gametype() {
  if (gametype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gametype_->clear();
  }
  clear_has_gametype();
}
inline const ::std::string& MsgFriendDetail::gametype() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.gametype)
  return *gametype_;
}
inline void MsgFriendDetail::set_gametype(const ::std::string& value) {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gametype_ = new ::std::string;
  }
  gametype_->assign(value);
  // @@protoc_insertion_point(field_set:MsgFriendDetail.gametype)
}
inline void MsgFriendDetail::set_gametype(const char* value) {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gametype_ = new ::std::string;
  }
  gametype_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgFriendDetail.gametype)
}
inline void MsgFriendDetail::set_gametype(const char* value, size_t size) {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gametype_ = new ::std::string;
  }
  gametype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgFriendDetail.gametype)
}
inline ::std::string* MsgFriendDetail::mutable_gametype() {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gametype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgFriendDetail.gametype)
  return gametype_;
}
inline ::std::string* MsgFriendDetail::release_gametype() {
  clear_has_gametype();
  if (gametype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gametype_;
    gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgFriendDetail::set_allocated_gametype(::std::string* gametype) {
  if (gametype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gametype_;
  }
  if (gametype) {
    set_has_gametype();
    gametype_ = gametype;
  } else {
    clear_has_gametype();
    gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendDetail.gametype)
}

// optional .MsgKPICount count = 6;
inline bool MsgFriendDetail::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgFriendDetail::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgFriendDetail::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgFriendDetail::clear_count() {
  if (count_ != NULL) count_->::MsgKPICount::Clear();
  clear_has_count();
}
inline const ::MsgKPICount& MsgFriendDetail::count() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.count)
  return count_ != NULL ? *count_ : *default_instance_->count_;
}
inline ::MsgKPICount* MsgFriendDetail::mutable_count() {
  set_has_count();
  if (count_ == NULL) count_ = new ::MsgKPICount;
  // @@protoc_insertion_point(field_mutable:MsgFriendDetail.count)
  return count_;
}
inline ::MsgKPICount* MsgFriendDetail::release_count() {
  clear_has_count();
  ::MsgKPICount* temp = count_;
  count_ = NULL;
  return temp;
}
inline void MsgFriendDetail::set_allocated_count(::MsgKPICount* count) {
  delete count_;
  count_ = count;
  if (count) {
    set_has_count();
  } else {
    clear_has_count();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendDetail.count)
}

// optional .MsgFriendBase info = 7;
inline bool MsgFriendDetail::has_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgFriendDetail::set_has_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgFriendDetail::clear_has_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgFriendDetail::clear_info() {
  if (info_ != NULL) info_->::MsgFriendBase::Clear();
  clear_has_info();
}
inline const ::MsgFriendBase& MsgFriendDetail::info() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::MsgFriendBase* MsgFriendDetail::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::MsgFriendBase;
  // @@protoc_insertion_point(field_mutable:MsgFriendDetail.info)
  return info_;
}
inline ::MsgFriendBase* MsgFriendDetail::release_info() {
  clear_has_info();
  ::MsgFriendBase* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MsgFriendDetail::set_allocated_info(::MsgFriendBase* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendDetail.info)
}

// optional uint32 channel_id = 8;
inline bool MsgFriendDetail::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgFriendDetail::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgFriendDetail::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgFriendDetail::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 MsgFriendDetail::channel_id() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.channel_id)
  return channel_id_;
}
inline void MsgFriendDetail::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MsgFriendDetail.channel_id)
}

// optional string username = 9;
inline bool MsgFriendDetail::has_username() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgFriendDetail::set_has_username() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgFriendDetail::clear_has_username() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgFriendDetail::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& MsgFriendDetail::username() const {
  // @@protoc_insertion_point(field_get:MsgFriendDetail.username)
  return *username_;
}
inline void MsgFriendDetail::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:MsgFriendDetail.username)
}
inline void MsgFriendDetail::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgFriendDetail.username)
}
inline void MsgFriendDetail::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgFriendDetail.username)
}
inline ::std::string* MsgFriendDetail::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgFriendDetail.username)
  return username_;
}
inline ::std::string* MsgFriendDetail::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgFriendDetail::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgFriendDetail.username)
}

// -------------------------------------------------------------------

// MsgInviteEnter

// optional uint64 tarID = 1;
inline bool MsgInviteEnter::has_tarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgInviteEnter::set_has_tarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgInviteEnter::clear_has_tarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgInviteEnter::clear_tarid() {
  tarid_ = GOOGLE_ULONGLONG(0);
  clear_has_tarid();
}
inline ::google::protobuf::uint64 MsgInviteEnter::tarid() const {
  // @@protoc_insertion_point(field_get:MsgInviteEnter.tarID)
  return tarid_;
}
inline void MsgInviteEnter::set_tarid(::google::protobuf::uint64 value) {
  set_has_tarid();
  tarid_ = value;
  // @@protoc_insertion_point(field_set:MsgInviteEnter.tarID)
}

// optional string roomType = 2;
inline bool MsgInviteEnter::has_roomtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgInviteEnter::set_has_roomtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgInviteEnter::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgInviteEnter::clear_roomtype() {
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_->clear();
  }
  clear_has_roomtype();
}
inline const ::std::string& MsgInviteEnter::roomtype() const {
  // @@protoc_insertion_point(field_get:MsgInviteEnter.roomType)
  return *roomtype_;
}
inline void MsgInviteEnter::set_roomtype(const ::std::string& value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
  // @@protoc_insertion_point(field_set:MsgInviteEnter.roomType)
}
inline void MsgInviteEnter::set_roomtype(const char* value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgInviteEnter.roomType)
}
inline void MsgInviteEnter::set_roomtype(const char* value, size_t size) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgInviteEnter.roomType)
}
inline ::std::string* MsgInviteEnter::mutable_roomtype() {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgInviteEnter.roomType)
  return roomtype_;
}
inline ::std::string* MsgInviteEnter::release_roomtype() {
  clear_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomtype_;
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgInviteEnter::set_allocated_roomtype(::std::string* roomtype) {
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomtype_;
  }
  if (roomtype) {
    set_has_roomtype();
    roomtype_ = roomtype;
  } else {
    clear_has_roomtype();
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgInviteEnter.roomType)
}

// -------------------------------------------------------------------

// MsgRecommend

// optional uint64 tarID = 1;
inline bool MsgRecommend::has_tarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRecommend::set_has_tarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRecommend::clear_has_tarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRecommend::clear_tarid() {
  tarid_ = GOOGLE_ULONGLONG(0);
  clear_has_tarid();
}
inline ::google::protobuf::uint64 MsgRecommend::tarid() const {
  // @@protoc_insertion_point(field_get:MsgRecommend.tarID)
  return tarid_;
}
inline void MsgRecommend::set_tarid(::google::protobuf::uint64 value) {
  set_has_tarid();
  tarid_ = value;
  // @@protoc_insertion_point(field_set:MsgRecommend.tarID)
}

// optional uint32 head_portrait = 2;
inline bool MsgRecommend::has_head_portrait() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRecommend::set_has_head_portrait() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRecommend::clear_has_head_portrait() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRecommend::clear_head_portrait() {
  head_portrait_ = 0u;
  clear_has_head_portrait();
}
inline ::google::protobuf::uint32 MsgRecommend::head_portrait() const {
  // @@protoc_insertion_point(field_get:MsgRecommend.head_portrait)
  return head_portrait_;
}
inline void MsgRecommend::set_head_portrait(::google::protobuf::uint32 value) {
  set_has_head_portrait();
  head_portrait_ = value;
  // @@protoc_insertion_point(field_set:MsgRecommend.head_portrait)
}

// optional uint32 channel_id = 3;
inline bool MsgRecommend::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRecommend::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRecommend::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRecommend::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 MsgRecommend::channel_id() const {
  // @@protoc_insertion_point(field_get:MsgRecommend.channel_id)
  return channel_id_;
}
inline void MsgRecommend::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:MsgRecommend.channel_id)
}

// optional string username = 4;
inline bool MsgRecommend::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgRecommend::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgRecommend::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgRecommend::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& MsgRecommend::username() const {
  // @@protoc_insertion_point(field_get:MsgRecommend.username)
  return *username_;
}
inline void MsgRecommend::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:MsgRecommend.username)
}
inline void MsgRecommend::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgRecommend.username)
}
inline void MsgRecommend::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgRecommend.username)
}
inline ::std::string* MsgRecommend::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgRecommend.username)
  return username_;
}
inline ::std::string* MsgRecommend::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgRecommend::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgRecommend.username)
}

// optional string name = 5;
inline bool MsgRecommend::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgRecommend::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgRecommend::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgRecommend::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgRecommend::name() const {
  // @@protoc_insertion_point(field_get:MsgRecommend.name)
  return *name_;
}
inline void MsgRecommend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgRecommend.name)
}
inline void MsgRecommend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgRecommend.name)
}
inline void MsgRecommend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgRecommend.name)
}
inline ::std::string* MsgRecommend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgRecommend.name)
  return name_;
}
inline ::std::string* MsgRecommend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgRecommend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgRecommend.name)
}

// -------------------------------------------------------------------

// MsgRecommendList

// repeated .MsgRecommend list = 1;
inline int MsgRecommendList::list_size() const {
  return list_.size();
}
inline void MsgRecommendList::clear_list() {
  list_.Clear();
}
inline const ::MsgRecommend& MsgRecommendList::list(int index) const {
  // @@protoc_insertion_point(field_get:MsgRecommendList.list)
  return list_.Get(index);
}
inline ::MsgRecommend* MsgRecommendList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgRecommendList.list)
  return list_.Mutable(index);
}
inline ::MsgRecommend* MsgRecommendList::add_list() {
  // @@protoc_insertion_point(field_add:MsgRecommendList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgRecommend >&
MsgRecommendList::list() const {
  // @@protoc_insertion_point(field_list:MsgRecommendList.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgRecommend >*
MsgRecommendList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgRecommendList.list)
  return &list_;
}

// -------------------------------------------------------------------

// MsgBlackListCont

// optional uint32 check = 1;
inline bool MsgBlackListCont::has_check() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBlackListCont::set_has_check() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBlackListCont::clear_has_check() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBlackListCont::clear_check() {
  check_ = 0u;
  clear_has_check();
}
inline ::google::protobuf::uint32 MsgBlackListCont::check() const {
  // @@protoc_insertion_point(field_get:MsgBlackListCont.check)
  return check_;
}
inline void MsgBlackListCont::set_check(::google::protobuf::uint32 value) {
  set_has_check();
  check_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackListCont.check)
}

// repeated .MsgBlackList black_list = 2;
inline int MsgBlackListCont::black_list_size() const {
  return black_list_.size();
}
inline void MsgBlackListCont::clear_black_list() {
  black_list_.Clear();
}
inline const ::MsgBlackList& MsgBlackListCont::black_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgBlackListCont.black_list)
  return black_list_.Get(index);
}
inline ::MsgBlackList* MsgBlackListCont::mutable_black_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBlackListCont.black_list)
  return black_list_.Mutable(index);
}
inline ::MsgBlackList* MsgBlackListCont::add_black_list() {
  // @@protoc_insertion_point(field_add:MsgBlackListCont.black_list)
  return black_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgBlackList >&
MsgBlackListCont::black_list() const {
  // @@protoc_insertion_point(field_list:MsgBlackListCont.black_list)
  return black_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgBlackList >*
MsgBlackListCont::mutable_black_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgBlackListCont.black_list)
  return &black_list_;
}

// -------------------------------------------------------------------

// MsgBlackList

// optional uint64 pid = 1;
inline bool MsgBlackList::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBlackList::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBlackList::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBlackList::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 MsgBlackList::pid() const {
  // @@protoc_insertion_point(field_get:MsgBlackList.pid)
  return pid_;
}
inline void MsgBlackList::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackList.pid)
}

// optional string name = 2;
inline bool MsgBlackList::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBlackList::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBlackList::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBlackList::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgBlackList::name() const {
  // @@protoc_insertion_point(field_get:MsgBlackList.name)
  return *name_;
}
inline void MsgBlackList::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgBlackList.name)
}
inline void MsgBlackList::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgBlackList.name)
}
inline void MsgBlackList::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgBlackList.name)
}
inline ::std::string* MsgBlackList::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgBlackList.name)
  return name_;
}
inline ::std::string* MsgBlackList::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgBlackList::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBlackList.name)
}

// optional uint32 head_portrait = 3;
inline bool MsgBlackList::has_head_portrait() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgBlackList::set_has_head_portrait() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgBlackList::clear_has_head_portrait() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgBlackList::clear_head_portrait() {
  head_portrait_ = 0u;
  clear_has_head_portrait();
}
inline ::google::protobuf::uint32 MsgBlackList::head_portrait() const {
  // @@protoc_insertion_point(field_get:MsgBlackList.head_portrait)
  return head_portrait_;
}
inline void MsgBlackList::set_head_portrait(::google::protobuf::uint32 value) {
  set_has_head_portrait();
  head_portrait_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackList.head_portrait)
}

// optional uint32 sex = 4;
inline bool MsgBlackList::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgBlackList::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgBlackList::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgBlackList::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 MsgBlackList::sex() const {
  // @@protoc_insertion_point(field_get:MsgBlackList.sex)
  return sex_;
}
inline void MsgBlackList::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackList.sex)
}

// optional uint32 state = 5;
inline bool MsgBlackList::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgBlackList::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgBlackList::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgBlackList::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 MsgBlackList::state() const {
  // @@protoc_insertion_point(field_get:MsgBlackList.state)
  return state_;
}
inline void MsgBlackList::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:MsgBlackList.state)
}

// -------------------------------------------------------------------

// MsgBindDstInfo

// optional uint64 dst_pid = 1;
inline bool MsgBindDstInfo::has_dst_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBindDstInfo::set_has_dst_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBindDstInfo::clear_has_dst_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBindDstInfo::clear_dst_pid() {
  dst_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_dst_pid();
}
inline ::google::protobuf::uint64 MsgBindDstInfo::dst_pid() const {
  // @@protoc_insertion_point(field_get:MsgBindDstInfo.dst_pid)
  return dst_pid_;
}
inline void MsgBindDstInfo::set_dst_pid(::google::protobuf::uint64 value) {
  set_has_dst_pid();
  dst_pid_ = value;
  // @@protoc_insertion_point(field_set:MsgBindDstInfo.dst_pid)
}

// optional string name = 2;
inline bool MsgBindDstInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBindDstInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBindDstInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBindDstInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgBindDstInfo::name() const {
  // @@protoc_insertion_point(field_get:MsgBindDstInfo.name)
  return *name_;
}
inline void MsgBindDstInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgBindDstInfo.name)
}
inline void MsgBindDstInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgBindDstInfo.name)
}
inline void MsgBindDstInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgBindDstInfo.name)
}
inline ::std::string* MsgBindDstInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgBindDstInfo.name)
  return name_;
}
inline ::std::string* MsgBindDstInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgBindDstInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBindDstInfo.name)
}

// optional string username = 3;
inline bool MsgBindDstInfo::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgBindDstInfo::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgBindDstInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgBindDstInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& MsgBindDstInfo::username() const {
  // @@protoc_insertion_point(field_get:MsgBindDstInfo.username)
  return *username_;
}
inline void MsgBindDstInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:MsgBindDstInfo.username)
}
inline void MsgBindDstInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgBindDstInfo.username)
}
inline void MsgBindDstInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgBindDstInfo.username)
}
inline ::std::string* MsgBindDstInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgBindDstInfo.username)
  return username_;
}
inline ::std::string* MsgBindDstInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgBindDstInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBindDstInfo.username)
}

// optional uint32 state = 4;
inline bool MsgBindDstInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgBindDstInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgBindDstInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgBindDstInfo::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 MsgBindDstInfo::state() const {
  // @@protoc_insertion_point(field_get:MsgBindDstInfo.state)
  return state_;
}
inline void MsgBindDstInfo::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:MsgBindDstInfo.state)
}

// optional uint32 count = 5;
inline bool MsgBindDstInfo::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgBindDstInfo::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgBindDstInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgBindDstInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 MsgBindDstInfo::count() const {
  // @@protoc_insertion_point(field_get:MsgBindDstInfo.count)
  return count_;
}
inline void MsgBindDstInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MsgBindDstInfo.count)
}

// -------------------------------------------------------------------

// MsgBindFriendInfo

// repeated .MsgBindDstInfo dst_list = 1;
inline int MsgBindFriendInfo::dst_list_size() const {
  return dst_list_.size();
}
inline void MsgBindFriendInfo::clear_dst_list() {
  dst_list_.Clear();
}
inline const ::MsgBindDstInfo& MsgBindFriendInfo::dst_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgBindFriendInfo.dst_list)
  return dst_list_.Get(index);
}
inline ::MsgBindDstInfo* MsgBindFriendInfo::mutable_dst_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgBindFriendInfo.dst_list)
  return dst_list_.Mutable(index);
}
inline ::MsgBindDstInfo* MsgBindFriendInfo::add_dst_list() {
  // @@protoc_insertion_point(field_add:MsgBindFriendInfo.dst_list)
  return dst_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgBindDstInfo >&
MsgBindFriendInfo::dst_list() const {
  // @@protoc_insertion_point(field_list:MsgBindFriendInfo.dst_list)
  return dst_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgBindDstInfo >*
MsgBindFriendInfo::mutable_dst_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgBindFriendInfo.dst_list)
  return &dst_list_;
}

// optional uint64 src_pid = 2;
inline bool MsgBindFriendInfo::has_src_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBindFriendInfo::set_has_src_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBindFriendInfo::clear_has_src_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBindFriendInfo::clear_src_pid() {
  src_pid_ = GOOGLE_ULONGLONG(0);
  clear_has_src_pid();
}
inline ::google::protobuf::uint64 MsgBindFriendInfo::src_pid() const {
  // @@protoc_insertion_point(field_get:MsgBindFriendInfo.src_pid)
  return src_pid_;
}
inline void MsgBindFriendInfo::set_src_pid(::google::protobuf::uint64 value) {
  set_has_src_pid();
  src_pid_ = value;
  // @@protoc_insertion_point(field_set:MsgBindFriendInfo.src_pid)
}

// optional uint32 self_state = 3;
inline bool MsgBindFriendInfo::has_self_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgBindFriendInfo::set_has_self_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgBindFriendInfo::clear_has_self_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgBindFriendInfo::clear_self_state() {
  self_state_ = 0u;
  clear_has_self_state();
}
inline ::google::protobuf::uint32 MsgBindFriendInfo::self_state() const {
  // @@protoc_insertion_point(field_get:MsgBindFriendInfo.self_state)
  return self_state_;
}
inline void MsgBindFriendInfo::set_self_state(::google::protobuf::uint32 value) {
  set_has_self_state();
  self_state_ = value;
  // @@protoc_insertion_point(field_set:MsgBindFriendInfo.self_state)
}

// optional uint32 self_count = 4;
inline bool MsgBindFriendInfo::has_self_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgBindFriendInfo::set_has_self_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgBindFriendInfo::clear_has_self_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgBindFriendInfo::clear_self_count() {
  self_count_ = 0u;
  clear_has_self_count();
}
inline ::google::protobuf::uint32 MsgBindFriendInfo::self_count() const {
  // @@protoc_insertion_point(field_get:MsgBindFriendInfo.self_count)
  return self_count_;
}
inline void MsgBindFriendInfo::set_self_count(::google::protobuf::uint32 value) {
  set_has_self_count();
  self_count_ = value;
  // @@protoc_insertion_point(field_set:MsgBindFriendInfo.self_count)
}

// -------------------------------------------------------------------

// MsgTissueRole

// optional uint64 roleid = 1;
inline bool MsgTissueRole::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTissueRole::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTissueRole::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTissueRole::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgTissueRole::roleid() const {
  // @@protoc_insertion_point(field_get:MsgTissueRole.roleid)
  return roleid_;
}
inline void MsgTissueRole::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueRole.roleid)
}

// optional string username = 2;
inline bool MsgTissueRole::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTissueRole::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTissueRole::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTissueRole::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& MsgTissueRole::username() const {
  // @@protoc_insertion_point(field_get:MsgTissueRole.username)
  return *username_;
}
inline void MsgTissueRole::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:MsgTissueRole.username)
}
inline void MsgTissueRole::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgTissueRole.username)
}
inline void MsgTissueRole::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgTissueRole.username)
}
inline ::std::string* MsgTissueRole::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgTissueRole.username)
  return username_;
}
inline ::std::string* MsgTissueRole::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTissueRole::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTissueRole.username)
}

// optional uint32 jointime = 3;
inline bool MsgTissueRole::has_jointime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTissueRole::set_has_jointime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTissueRole::clear_has_jointime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTissueRole::clear_jointime() {
  jointime_ = 0u;
  clear_has_jointime();
}
inline ::google::protobuf::uint32 MsgTissueRole::jointime() const {
  // @@protoc_insertion_point(field_get:MsgTissueRole.jointime)
  return jointime_;
}
inline void MsgTissueRole::set_jointime(::google::protobuf::uint32 value) {
  set_has_jointime();
  jointime_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueRole.jointime)
}

// -------------------------------------------------------------------

// MsgTissueGame

// optional string room_type = 1;
inline bool MsgTissueGame::has_room_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTissueGame::set_has_room_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTissueGame::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTissueGame::clear_room_type() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_->clear();
  }
  clear_has_room_type();
}
inline const ::std::string& MsgTissueGame::room_type() const {
  // @@protoc_insertion_point(field_get:MsgTissueGame.room_type)
  return *room_type_;
}
inline void MsgTissueGame::set_room_type(const ::std::string& value) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(value);
  // @@protoc_insertion_point(field_set:MsgTissueGame.room_type)
}
inline void MsgTissueGame::set_room_type(const char* value) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgTissueGame.room_type)
}
inline void MsgTissueGame::set_room_type(const char* value, size_t size) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgTissueGame.room_type)
}
inline ::std::string* MsgTissueGame::mutable_room_type() {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgTissueGame.room_type)
  return room_type_;
}
inline ::std::string* MsgTissueGame::release_room_type() {
  clear_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_type_;
    room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTissueGame::set_allocated_room_type(::std::string* room_type) {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (room_type) {
    set_has_room_type();
    room_type_ = room_type;
  } else {
    clear_has_room_type();
    room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTissueGame.room_type)
}

// optional uint32 consume_id = 2;
inline bool MsgTissueGame::has_consume_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTissueGame::set_has_consume_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTissueGame::clear_has_consume_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTissueGame::clear_consume_id() {
  consume_id_ = 0u;
  clear_has_consume_id();
}
inline ::google::protobuf::uint32 MsgTissueGame::consume_id() const {
  // @@protoc_insertion_point(field_get:MsgTissueGame.consume_id)
  return consume_id_;
}
inline void MsgTissueGame::set_consume_id(::google::protobuf::uint32 value) {
  set_has_consume_id();
  consume_id_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueGame.consume_id)
}

// optional uint32 special_kind = 3;
inline bool MsgTissueGame::has_special_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTissueGame::set_has_special_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTissueGame::clear_has_special_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTissueGame::clear_special_kind() {
  special_kind_ = 0u;
  clear_has_special_kind();
}
inline ::google::protobuf::uint32 MsgTissueGame::special_kind() const {
  // @@protoc_insertion_point(field_get:MsgTissueGame.special_kind)
  return special_kind_;
}
inline void MsgTissueGame::set_special_kind(::google::protobuf::uint32 value) {
  set_has_special_kind();
  special_kind_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueGame.special_kind)
}

// optional uint32 pay_mode = 4;
inline bool MsgTissueGame::has_pay_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTissueGame::set_has_pay_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTissueGame::clear_has_pay_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTissueGame::clear_pay_mode() {
  pay_mode_ = 0u;
  clear_has_pay_mode();
}
inline ::google::protobuf::uint32 MsgTissueGame::pay_mode() const {
  // @@protoc_insertion_point(field_get:MsgTissueGame.pay_mode)
  return pay_mode_;
}
inline void MsgTissueGame::set_pay_mode(::google::protobuf::uint32 value) {
  set_has_pay_mode();
  pay_mode_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueGame.pay_mode)
}

// optional uint32 palyer_count = 5;
inline bool MsgTissueGame::has_palyer_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgTissueGame::set_has_palyer_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgTissueGame::clear_has_palyer_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgTissueGame::clear_palyer_count() {
  palyer_count_ = 0u;
  clear_has_palyer_count();
}
inline ::google::protobuf::uint32 MsgTissueGame::palyer_count() const {
  // @@protoc_insertion_point(field_get:MsgTissueGame.palyer_count)
  return palyer_count_;
}
inline void MsgTissueGame::set_palyer_count(::google::protobuf::uint32 value) {
  set_has_palyer_count();
  palyer_count_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueGame.palyer_count)
}

// -------------------------------------------------------------------

// MsgTissueRoom

// optional uint64 roleid = 1;
inline bool MsgTissueRoom::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTissueRoom::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTissueRoom::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTissueRoom::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgTissueRoom::roleid() const {
  // @@protoc_insertion_point(field_get:MsgTissueRoom.roleid)
  return roleid_;
}
inline void MsgTissueRoom::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueRoom.roleid)
}

// optional string username = 2;
inline bool MsgTissueRoom::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTissueRoom::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTissueRoom::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTissueRoom::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& MsgTissueRoom::username() const {
  // @@protoc_insertion_point(field_get:MsgTissueRoom.username)
  return *username_;
}
inline void MsgTissueRoom::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:MsgTissueRoom.username)
}
inline void MsgTissueRoom::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgTissueRoom.username)
}
inline void MsgTissueRoom::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgTissueRoom.username)
}
inline ::std::string* MsgTissueRoom::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgTissueRoom.username)
  return username_;
}
inline ::std::string* MsgTissueRoom::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTissueRoom::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTissueRoom.username)
}

// optional uint64 room_id = 3;
inline bool MsgTissueRoom::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTissueRoom::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTissueRoom::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTissueRoom::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
  clear_has_room_id();
}
inline ::google::protobuf::uint64 MsgTissueRoom::room_id() const {
  // @@protoc_insertion_point(field_get:MsgTissueRoom.room_id)
  return room_id_;
}
inline void MsgTissueRoom::set_room_id(::google::protobuf::uint64 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueRoom.room_id)
}

// optional uint32 time = 4;
inline bool MsgTissueRoom::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTissueRoom::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTissueRoom::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTissueRoom::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MsgTissueRoom::time() const {
  // @@protoc_insertion_point(field_get:MsgTissueRoom.time)
  return time_;
}
inline void MsgTissueRoom::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueRoom.time)
}

// optional uint32 member_count = 5;
inline bool MsgTissueRoom::has_member_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgTissueRoom::set_has_member_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgTissueRoom::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgTissueRoom::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 MsgTissueRoom::member_count() const {
  // @@protoc_insertion_point(field_get:MsgTissueRoom.member_count)
  return member_count_;
}
inline void MsgTissueRoom::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueRoom.member_count)
}

// optional .MsgCreatePrivateRoom room_info = 6;
inline bool MsgTissueRoom::has_room_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgTissueRoom::set_has_room_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgTissueRoom::clear_has_room_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgTissueRoom::clear_room_info() {
  if (room_info_ != NULL) room_info_->::MsgCreatePrivateRoom::Clear();
  clear_has_room_info();
}
inline const ::MsgCreatePrivateRoom& MsgTissueRoom::room_info() const {
  // @@protoc_insertion_point(field_get:MsgTissueRoom.room_info)
  return room_info_ != NULL ? *room_info_ : *default_instance_->room_info_;
}
inline ::MsgCreatePrivateRoom* MsgTissueRoom::mutable_room_info() {
  set_has_room_info();
  if (room_info_ == NULL) room_info_ = new ::MsgCreatePrivateRoom;
  // @@protoc_insertion_point(field_mutable:MsgTissueRoom.room_info)
  return room_info_;
}
inline ::MsgCreatePrivateRoom* MsgTissueRoom::release_room_info() {
  clear_has_room_info();
  ::MsgCreatePrivateRoom* temp = room_info_;
  room_info_ = NULL;
  return temp;
}
inline void MsgTissueRoom::set_allocated_room_info(::MsgCreatePrivateRoom* room_info) {
  delete room_info_;
  room_info_ = room_info;
  if (room_info) {
    set_has_room_info();
  } else {
    clear_has_room_info();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTissueRoom.room_info)
}

// -------------------------------------------------------------------

// MsgHandlesTissue

// optional uint64 tissue_id = 1;
inline bool MsgHandlesTissue::has_tissue_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHandlesTissue::set_has_tissue_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHandlesTissue::clear_has_tissue_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHandlesTissue::clear_tissue_id() {
  tissue_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tissue_id();
}
inline ::google::protobuf::uint64 MsgHandlesTissue::tissue_id() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.tissue_id)
  return tissue_id_;
}
inline void MsgHandlesTissue::set_tissue_id(::google::protobuf::uint64 value) {
  set_has_tissue_id();
  tissue_id_ = value;
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.tissue_id)
}

// optional string role_id = 2;
inline bool MsgHandlesTissue::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHandlesTissue::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHandlesTissue::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHandlesTissue::clear_role_id() {
  if (role_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_id_->clear();
  }
  clear_has_role_id();
}
inline const ::std::string& MsgHandlesTissue::role_id() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.role_id)
  return *role_id_;
}
inline void MsgHandlesTissue::set_role_id(const ::std::string& value) {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_id_ = new ::std::string;
  }
  role_id_->assign(value);
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.role_id)
}
inline void MsgHandlesTissue::set_role_id(const char* value) {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_id_ = new ::std::string;
  }
  role_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgHandlesTissue.role_id)
}
inline void MsgHandlesTissue::set_role_id(const char* value, size_t size) {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_id_ = new ::std::string;
  }
  role_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgHandlesTissue.role_id)
}
inline ::std::string* MsgHandlesTissue::mutable_role_id() {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgHandlesTissue.role_id)
  return role_id_;
}
inline ::std::string* MsgHandlesTissue::release_role_id() {
  clear_has_role_id();
  if (role_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = role_id_;
    role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgHandlesTissue::set_allocated_role_id(::std::string* role_id) {
  if (role_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_id_;
  }
  if (role_id) {
    set_has_role_id();
    role_id_ = role_id;
  } else {
    clear_has_role_id();
    role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgHandlesTissue.role_id)
}

// optional string tissue_name = 3;
inline bool MsgHandlesTissue::has_tissue_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgHandlesTissue::set_has_tissue_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgHandlesTissue::clear_has_tissue_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgHandlesTissue::clear_tissue_name() {
  if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_->clear();
  }
  clear_has_tissue_name();
}
inline const ::std::string& MsgHandlesTissue::tissue_name() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.tissue_name)
  return *tissue_name_;
}
inline void MsgHandlesTissue::set_tissue_name(const ::std::string& value) {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  tissue_name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.tissue_name)
}
inline void MsgHandlesTissue::set_tissue_name(const char* value) {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  tissue_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgHandlesTissue.tissue_name)
}
inline void MsgHandlesTissue::set_tissue_name(const char* value, size_t size) {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  tissue_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgHandlesTissue.tissue_name)
}
inline ::std::string* MsgHandlesTissue::mutable_tissue_name() {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgHandlesTissue.tissue_name)
  return tissue_name_;
}
inline ::std::string* MsgHandlesTissue::release_tissue_name() {
  clear_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tissue_name_;
    tissue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgHandlesTissue::set_allocated_tissue_name(::std::string* tissue_name) {
  if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_name_;
  }
  if (tissue_name) {
    set_has_tissue_name();
    tissue_name_ = tissue_name;
  } else {
    clear_has_tissue_name();
    tissue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgHandlesTissue.tissue_name)
}

// optional string tissue_notity = 4;
inline bool MsgHandlesTissue::has_tissue_notity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgHandlesTissue::set_has_tissue_notity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgHandlesTissue::clear_has_tissue_notity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgHandlesTissue::clear_tissue_notity() {
  if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_->clear();
  }
  clear_has_tissue_notity();
}
inline const ::std::string& MsgHandlesTissue::tissue_notity() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.tissue_notity)
  return *tissue_notity_;
}
inline void MsgHandlesTissue::set_tissue_notity(const ::std::string& value) {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  tissue_notity_->assign(value);
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.tissue_notity)
}
inline void MsgHandlesTissue::set_tissue_notity(const char* value) {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  tissue_notity_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgHandlesTissue.tissue_notity)
}
inline void MsgHandlesTissue::set_tissue_notity(const char* value, size_t size) {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  tissue_notity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgHandlesTissue.tissue_notity)
}
inline ::std::string* MsgHandlesTissue::mutable_tissue_notity() {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgHandlesTissue.tissue_notity)
  return tissue_notity_;
}
inline ::std::string* MsgHandlesTissue::release_tissue_notity() {
  clear_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tissue_notity_;
    tissue_notity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgHandlesTissue::set_allocated_tissue_notity(::std::string* tissue_notity) {
  if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_notity_;
  }
  if (tissue_notity) {
    set_has_tissue_notity();
    tissue_notity_ = tissue_notity;
  } else {
    clear_has_tissue_notity();
    tissue_notity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgHandlesTissue.tissue_notity)
}

// optional uint32 area_id = 5;
inline bool MsgHandlesTissue::has_area_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgHandlesTissue::set_has_area_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgHandlesTissue::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgHandlesTissue::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 MsgHandlesTissue::area_id() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.area_id)
  return area_id_;
}
inline void MsgHandlesTissue::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.area_id)
}

// optional uint32 state = 6;
inline bool MsgHandlesTissue::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgHandlesTissue::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgHandlesTissue::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgHandlesTissue::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 MsgHandlesTissue::state() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.state)
  return state_;
}
inline void MsgHandlesTissue::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.state)
}

// repeated .MsgTissueGame game_list = 7;
inline int MsgHandlesTissue::game_list_size() const {
  return game_list_.size();
}
inline void MsgHandlesTissue::clear_game_list() {
  game_list_.Clear();
}
inline const ::MsgTissueGame& MsgHandlesTissue::game_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.game_list)
  return game_list_.Get(index);
}
inline ::MsgTissueGame* MsgHandlesTissue::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgHandlesTissue.game_list)
  return game_list_.Mutable(index);
}
inline ::MsgTissueGame* MsgHandlesTissue::add_game_list() {
  // @@protoc_insertion_point(field_add:MsgHandlesTissue.game_list)
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >&
MsgHandlesTissue::game_list() const {
  // @@protoc_insertion_point(field_list:MsgHandlesTissue.game_list)
  return game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >*
MsgHandlesTissue::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgHandlesTissue.game_list)
  return &game_list_;
}

// optional uint64 version = 8;
inline bool MsgHandlesTissue::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgHandlesTissue::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgHandlesTissue::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgHandlesTissue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 MsgHandlesTissue::version() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.version)
  return version_;
}
inline void MsgHandlesTissue::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.version)
}

// optional uint64 applylist_version = 9;
inline bool MsgHandlesTissue::has_applylist_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgHandlesTissue::set_has_applylist_version() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgHandlesTissue::clear_has_applylist_version() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgHandlesTissue::clear_applylist_version() {
  applylist_version_ = GOOGLE_ULONGLONG(0);
  clear_has_applylist_version();
}
inline ::google::protobuf::uint64 MsgHandlesTissue::applylist_version() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.applylist_version)
  return applylist_version_;
}
inline void MsgHandlesTissue::set_applylist_version(::google::protobuf::uint64 value) {
  set_has_applylist_version();
  applylist_version_ = value;
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.applylist_version)
}

// optional uint64 handle_role_id = 10;
inline bool MsgHandlesTissue::has_handle_role_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgHandlesTissue::set_has_handle_role_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgHandlesTissue::clear_has_handle_role_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgHandlesTissue::clear_handle_role_id() {
  handle_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_handle_role_id();
}
inline ::google::protobuf::uint64 MsgHandlesTissue::handle_role_id() const {
  // @@protoc_insertion_point(field_get:MsgHandlesTissue.handle_role_id)
  return handle_role_id_;
}
inline void MsgHandlesTissue::set_handle_role_id(::google::protobuf::uint64 value) {
  set_has_handle_role_id();
  handle_role_id_ = value;
  // @@protoc_insertion_point(field_set:MsgHandlesTissue.handle_role_id)
}

// -------------------------------------------------------------------

// MsgTissueData

// optional uint64 tissue_id = 1;
inline bool MsgTissueData::has_tissue_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTissueData::set_has_tissue_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTissueData::clear_has_tissue_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTissueData::clear_tissue_id() {
  tissue_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tissue_id();
}
inline ::google::protobuf::uint64 MsgTissueData::tissue_id() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.tissue_id)
  return tissue_id_;
}
inline void MsgTissueData::set_tissue_id(::google::protobuf::uint64 value) {
  set_has_tissue_id();
  tissue_id_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.tissue_id)
}

// optional string tissue_name = 2;
inline bool MsgTissueData::has_tissue_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTissueData::set_has_tissue_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTissueData::clear_has_tissue_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTissueData::clear_tissue_name() {
  if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_->clear();
  }
  clear_has_tissue_name();
}
inline const ::std::string& MsgTissueData::tissue_name() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.tissue_name)
  return *tissue_name_;
}
inline void MsgTissueData::set_tissue_name(const ::std::string& value) {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  tissue_name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgTissueData.tissue_name)
}
inline void MsgTissueData::set_tissue_name(const char* value) {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  tissue_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgTissueData.tissue_name)
}
inline void MsgTissueData::set_tissue_name(const char* value, size_t size) {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  tissue_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgTissueData.tissue_name)
}
inline ::std::string* MsgTissueData::mutable_tissue_name() {
  set_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgTissueData.tissue_name)
  return tissue_name_;
}
inline ::std::string* MsgTissueData::release_tissue_name() {
  clear_has_tissue_name();
  if (tissue_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tissue_name_;
    tissue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTissueData::set_allocated_tissue_name(::std::string* tissue_name) {
  if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_name_;
  }
  if (tissue_name) {
    set_has_tissue_name();
    tissue_name_ = tissue_name;
  } else {
    clear_has_tissue_name();
    tissue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTissueData.tissue_name)
}

// optional string tissue_notity = 3;
inline bool MsgTissueData::has_tissue_notity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTissueData::set_has_tissue_notity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTissueData::clear_has_tissue_notity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTissueData::clear_tissue_notity() {
  if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_->clear();
  }
  clear_has_tissue_notity();
}
inline const ::std::string& MsgTissueData::tissue_notity() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.tissue_notity)
  return *tissue_notity_;
}
inline void MsgTissueData::set_tissue_notity(const ::std::string& value) {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  tissue_notity_->assign(value);
  // @@protoc_insertion_point(field_set:MsgTissueData.tissue_notity)
}
inline void MsgTissueData::set_tissue_notity(const char* value) {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  tissue_notity_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgTissueData.tissue_notity)
}
inline void MsgTissueData::set_tissue_notity(const char* value, size_t size) {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  tissue_notity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgTissueData.tissue_notity)
}
inline ::std::string* MsgTissueData::mutable_tissue_notity() {
  set_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tissue_notity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgTissueData.tissue_notity)
  return tissue_notity_;
}
inline ::std::string* MsgTissueData::release_tissue_notity() {
  clear_has_tissue_notity();
  if (tissue_notity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tissue_notity_;
    tissue_notity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgTissueData::set_allocated_tissue_notity(::std::string* tissue_notity) {
  if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_notity_;
  }
  if (tissue_notity) {
    set_has_tissue_notity();
    tissue_notity_ = tissue_notity;
  } else {
    clear_has_tissue_notity();
    tissue_notity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTissueData.tissue_notity)
}

// optional uint32 room_count = 4;
inline bool MsgTissueData::has_room_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTissueData::set_has_room_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTissueData::clear_has_room_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTissueData::clear_room_count() {
  room_count_ = 0u;
  clear_has_room_count();
}
inline ::google::protobuf::uint32 MsgTissueData::room_count() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.room_count)
  return room_count_;
}
inline void MsgTissueData::set_room_count(::google::protobuf::uint32 value) {
  set_has_room_count();
  room_count_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.room_count)
}

// optional uint32 member_count = 5;
inline bool MsgTissueData::has_member_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgTissueData::set_has_member_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgTissueData::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgTissueData::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 MsgTissueData::member_count() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.member_count)
  return member_count_;
}
inline void MsgTissueData::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.member_count)
}

// optional uint32 apply_count = 6;
inline bool MsgTissueData::has_apply_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgTissueData::set_has_apply_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgTissueData::clear_has_apply_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgTissueData::clear_apply_count() {
  apply_count_ = 0u;
  clear_has_apply_count();
}
inline ::google::protobuf::uint32 MsgTissueData::apply_count() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.apply_count)
  return apply_count_;
}
inline void MsgTissueData::set_apply_count(::google::protobuf::uint32 value) {
  set_has_apply_count();
  apply_count_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.apply_count)
}

// optional uint32 tissue_state = 7;
inline bool MsgTissueData::has_tissue_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgTissueData::set_has_tissue_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgTissueData::clear_has_tissue_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgTissueData::clear_tissue_state() {
  tissue_state_ = 0u;
  clear_has_tissue_state();
}
inline ::google::protobuf::uint32 MsgTissueData::tissue_state() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.tissue_state)
  return tissue_state_;
}
inline void MsgTissueData::set_tissue_state(::google::protobuf::uint32 value) {
  set_has_tissue_state();
  tissue_state_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.tissue_state)
}

// optional uint64 version = 8;
inline bool MsgTissueData::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgTissueData::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgTissueData::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgTissueData::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 MsgTissueData::version() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.version)
  return version_;
}
inline void MsgTissueData::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.version)
}

// optional uint32 area_id = 9;
inline bool MsgTissueData::has_area_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgTissueData::set_has_area_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgTissueData::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgTissueData::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 MsgTissueData::area_id() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.area_id)
  return area_id_;
}
inline void MsgTissueData::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.area_id)
}

// optional uint32 total_money = 10;
inline bool MsgTissueData::has_total_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgTissueData::set_has_total_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgTissueData::clear_has_total_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgTissueData::clear_total_money() {
  total_money_ = 0u;
  clear_has_total_money();
}
inline ::google::protobuf::uint32 MsgTissueData::total_money() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.total_money)
  return total_money_;
}
inline void MsgTissueData::set_total_money(::google::protobuf::uint32 value) {
  set_has_total_money();
  total_money_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.total_money)
}

// optional uint32 cost_limit = 11;
inline bool MsgTissueData::has_cost_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgTissueData::set_has_cost_limit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgTissueData::clear_has_cost_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgTissueData::clear_cost_limit() {
  cost_limit_ = 0u;
  clear_has_cost_limit();
}
inline ::google::protobuf::uint32 MsgTissueData::cost_limit() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.cost_limit)
  return cost_limit_;
}
inline void MsgTissueData::set_cost_limit(::google::protobuf::uint32 value) {
  set_has_cost_limit();
  cost_limit_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.cost_limit)
}

// optional uint32 surpls_money = 12;
inline bool MsgTissueData::has_surpls_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgTissueData::set_has_surpls_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgTissueData::clear_has_surpls_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgTissueData::clear_surpls_money() {
  surpls_money_ = 0u;
  clear_has_surpls_money();
}
inline ::google::protobuf::uint32 MsgTissueData::surpls_money() const {
  // @@protoc_insertion_point(field_get:MsgTissueData.surpls_money)
  return surpls_money_;
}
inline void MsgTissueData::set_surpls_money(::google::protobuf::uint32 value) {
  set_has_surpls_money();
  surpls_money_ = value;
  // @@protoc_insertion_point(field_set:MsgTissueData.surpls_money)
}

// repeated .MsgTissueRole role_list = 13;
inline int MsgTissueData::role_list_size() const {
  return role_list_.size();
}
inline void MsgTissueData::clear_role_list() {
  role_list_.Clear();
}
inline const ::MsgTissueRole& MsgTissueData::role_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgTissueData.role_list)
  return role_list_.Get(index);
}
inline ::MsgTissueRole* MsgTissueData::mutable_role_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTissueData.role_list)
  return role_list_.Mutable(index);
}
inline ::MsgTissueRole* MsgTissueData::add_role_list() {
  // @@protoc_insertion_point(field_add:MsgTissueData.role_list)
  return role_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >&
MsgTissueData::role_list() const {
  // @@protoc_insertion_point(field_list:MsgTissueData.role_list)
  return role_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >*
MsgTissueData::mutable_role_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgTissueData.role_list)
  return &role_list_;
}

// repeated .MsgTissueGame game_list = 14;
inline int MsgTissueData::game_list_size() const {
  return game_list_.size();
}
inline void MsgTissueData::clear_game_list() {
  game_list_.Clear();
}
inline const ::MsgTissueGame& MsgTissueData::game_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgTissueData.game_list)
  return game_list_.Get(index);
}
inline ::MsgTissueGame* MsgTissueData::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTissueData.game_list)
  return game_list_.Mutable(index);
}
inline ::MsgTissueGame* MsgTissueData::add_game_list() {
  // @@protoc_insertion_point(field_add:MsgTissueData.game_list)
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >&
MsgTissueData::game_list() const {
  // @@protoc_insertion_point(field_list:MsgTissueData.game_list)
  return game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgTissueGame >*
MsgTissueData::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgTissueData.game_list)
  return &game_list_;
}

// repeated .MsgTissueRoom room_list = 15;
inline int MsgTissueData::room_list_size() const {
  return room_list_.size();
}
inline void MsgTissueData::clear_room_list() {
  room_list_.Clear();
}
inline const ::MsgTissueRoom& MsgTissueData::room_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgTissueData.room_list)
  return room_list_.Get(index);
}
inline ::MsgTissueRoom* MsgTissueData::mutable_room_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTissueData.room_list)
  return room_list_.Mutable(index);
}
inline ::MsgTissueRoom* MsgTissueData::add_room_list() {
  // @@protoc_insertion_point(field_add:MsgTissueData.room_list)
  return room_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueRoom >&
MsgTissueData::room_list() const {
  // @@protoc_insertion_point(field_list:MsgTissueData.room_list)
  return room_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgTissueRoom >*
MsgTissueData::mutable_room_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgTissueData.room_list)
  return &room_list_;
}

// repeated .MsgTissueRole apply_list = 16;
inline int MsgTissueData::apply_list_size() const {
  return apply_list_.size();
}
inline void MsgTissueData::clear_apply_list() {
  apply_list_.Clear();
}
inline const ::MsgTissueRole& MsgTissueData::apply_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgTissueData.apply_list)
  return apply_list_.Get(index);
}
inline ::MsgTissueRole* MsgTissueData::mutable_apply_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTissueData.apply_list)
  return apply_list_.Mutable(index);
}
inline ::MsgTissueRole* MsgTissueData::add_apply_list() {
  // @@protoc_insertion_point(field_add:MsgTissueData.apply_list)
  return apply_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >&
MsgTissueData::apply_list() const {
  // @@protoc_insertion_point(field_list:MsgTissueData.apply_list)
  return apply_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgTissueRole >*
MsgTissueData::mutable_apply_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgTissueData.apply_list)
  return &apply_list_;
}

// -------------------------------------------------------------------

// MsgTissueDataCount

// repeated .MsgTissueData tissue_list = 1;
inline int MsgTissueDataCount::tissue_list_size() const {
  return tissue_list_.size();
}
inline void MsgTissueDataCount::clear_tissue_list() {
  tissue_list_.Clear();
}
inline const ::MsgTissueData& MsgTissueDataCount::tissue_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgTissueDataCount.tissue_list)
  return tissue_list_.Get(index);
}
inline ::MsgTissueData* MsgTissueDataCount::mutable_tissue_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTissueDataCount.tissue_list)
  return tissue_list_.Mutable(index);
}
inline ::MsgTissueData* MsgTissueDataCount::add_tissue_list() {
  // @@protoc_insertion_point(field_add:MsgTissueDataCount.tissue_list)
  return tissue_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgTissueData >&
MsgTissueDataCount::tissue_list() const {
  // @@protoc_insertion_point(field_list:MsgTissueDataCount.tissue_list)
  return tissue_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgTissueData >*
MsgTissueDataCount::mutable_tissue_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgTissueDataCount.tissue_list)
  return &tissue_list_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TBindFriendStateKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TBindFriendStateKind>() {
  return ::TBindFriendStateKind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_5fpro_2eproto__INCLUDED
