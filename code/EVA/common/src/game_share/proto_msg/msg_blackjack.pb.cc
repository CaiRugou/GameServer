// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_blackjack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_blackjack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgBlackJackCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBlackJackCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPour_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBlackJackPourList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBlackJackPourList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBlackjackPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBlackjackPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBlackjackRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBlackjackRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAddPourRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAddPourRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAskforCardsRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAskforCardsRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TBlackJackState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fblackjack_2eproto() {
  protobuf_AddDesc_msg_5fblackjack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_blackjack.proto");
  GOOGLE_CHECK(file != NULL);
  MsgBlackJackCard_descriptor_ = file->message_type(0);
  static const int MsgBlackJackCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackJackCard, suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackJackCard, index_),
  };
  MsgBlackJackCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBlackJackCard_descriptor_,
      MsgBlackJackCard::default_instance_,
      MsgBlackJackCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackJackCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackJackCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBlackJackCard));
  MsgPour_descriptor_ = file->message_type(1);
  static const int MsgPour_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPour, pour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPour, num_),
  };
  MsgPour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPour_descriptor_,
      MsgPour::default_instance_,
      MsgPour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPour));
  MsgBlackJackPourList_descriptor_ = file->message_type(2);
  static const int MsgBlackJackPourList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackJackPourList, pour_list_),
  };
  MsgBlackJackPourList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBlackJackPourList_descriptor_,
      MsgBlackJackPourList::default_instance_,
      MsgBlackJackPourList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackJackPourList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackJackPourList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBlackJackPourList));
  MsgBlackjackPlayerInfo_descriptor_ = file->message_type(3);
  static const int MsgBlackjackPlayerInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, pour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, hand_cards_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, hand_cards_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, split_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, split_cards_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, split_cards_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, is_buy_surrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, challenge_coin_),
  };
  MsgBlackjackPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBlackjackPlayerInfo_descriptor_,
      MsgBlackjackPlayerInfo::default_instance_,
      MsgBlackjackPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBlackjackPlayerInfo));
  MsgBlackjackRoomInfo_descriptor_ = file->message_type(4);
  static const int MsgBlackjackRoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, sur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, makers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, room_info_),
  };
  MsgBlackjackRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBlackjackRoomInfo_descriptor_,
      MsgBlackjackRoomInfo::default_instance_,
      MsgBlackjackRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackjackRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBlackjackRoomInfo));
  MsgAddPourRes_descriptor_ = file->message_type(5);
  static const int MsgAddPourRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddPourRes, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddPourRes, pour_),
  };
  MsgAddPourRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAddPourRes_descriptor_,
      MsgAddPourRes::default_instance_,
      MsgAddPourRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddPourRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddPourRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAddPourRes));
  MsgAskforCardsRes_descriptor_ = file->message_type(6);
  static const int MsgAskforCardsRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAskforCardsRes, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAskforCardsRes, is_hand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAskforCardsRes, cards_),
  };
  MsgAskforCardsRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAskforCardsRes_descriptor_,
      MsgAskforCardsRes::default_instance_,
      MsgAskforCardsRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAskforCardsRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAskforCardsRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAskforCardsRes));
  TBlackJackState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fblackjack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBlackJackCard_descriptor_, &MsgBlackJackCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPour_descriptor_, &MsgPour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBlackJackPourList_descriptor_, &MsgBlackJackPourList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBlackjackPlayerInfo_descriptor_, &MsgBlackjackPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBlackjackRoomInfo_descriptor_, &MsgBlackjackRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAddPourRes_descriptor_, &MsgAddPourRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAskforCardsRes_descriptor_, &MsgAskforCardsRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fblackjack_2eproto() {
  delete MsgBlackJackCard::default_instance_;
  delete MsgBlackJackCard_reflection_;
  delete MsgPour::default_instance_;
  delete MsgPour_reflection_;
  delete MsgBlackJackPourList::default_instance_;
  delete MsgBlackJackPourList_reflection_;
  delete MsgBlackjackPlayerInfo::default_instance_;
  delete MsgBlackjackPlayerInfo_reflection_;
  delete MsgBlackjackRoomInfo::default_instance_;
  delete MsgBlackjackRoomInfo_reflection_;
  delete MsgAddPourRes::default_instance_;
  delete MsgAddPourRes_reflection_;
  delete MsgAskforCardsRes::default_instance_;
  delete MsgAskforCardsRes_reflection_;
}

void protobuf_AddDesc_msg_5fblackjack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::protobuf_AddDesc_define_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023msg_blackjack.proto\032\020public_pro.proto\032"
    "\020define_pro.proto\"<\n\020MsgBlackJackCard\022\031\n"
    "\004suit\030\001 \001(\0162\013.TCardsType\022\r\n\005index\030\002 \001(\r\""
    "$\n\007MsgPour\022\014\n\004pour\030\001 \001(\004\022\013\n\003num\030\002 \001(\r\"3\n"
    "\024MsgBlackJackPourList\022\033\n\tpour_list\030\001 \003(\013"
    "2\010.MsgPour\"\300\002\n\026MsgBlackjackPlayerInfo\022#\n"
    "\013player_base\030\001 \001(\0132\016.MsgPlayerInfo\022\026\n\004po"
    "ur\030\002 \003(\0132\010.MsgPour\022%\n\nhand_cards\030\003 \003(\0132\021"
    ".MsgBlackJackCard\022\027\n\017hand_cards_stop\030\004 \001"
    "(\010\022\031\n\021hand_cards_double\030\005 \001(\010\022&\n\013split_c"
    "ards\030\006 \003(\0132\021.MsgBlackJackCard\022\030\n\020split_c"
    "ards_stop\030\007 \001(\010\022\032\n\022split_cards_double\030\010 "
    "\001(\010\022\030\n\020is_buy_surrender\030\t \001(\010\022\026\n\016challen"
    "ge_coin\030\n \001(\003\"\371\001\n\024MsgBlackjackRoomInfo\022$"
    "\n\nroom_state\030\001 \001(\0162\020.TBlackJackState\022\020\n\010"
    "sur_time\030\002 \001(\003\022\'\n\006makers\030\003 \001(\0132\027.MsgBlac"
    "kjackPlayerInfo\022,\n\013player_list\030\004 \003(\0132\027.M"
    "sgBlackjackPlayerInfo\022\r\n\005seats\030\005 \003(\004\022\r\n\005"
    "round\030\006 \001(\r\022\017\n\007room_id\030\007 \001(\004\022#\n\troom_inf"
    "o\030\010 \001(\0132\020.MsgBaseRoomInfo\"*\n\rMsgAddPourR"
    "es\022\013\n\003pid\030\001 \001(\004\022\014\n\004pour\030\002 \001(\004\"S\n\021MsgAskf"
    "orCardsRes\022\013\n\003pid\030\001 \001(\004\022\017\n\007is_hand\030\002 \001(\010"
    "\022 \n\005cards\030\003 \003(\0132\021.MsgBlackJackCard*\217\002\n\017T"
    "BlackJackState\022\033\n\027BlackJackStateStartGam"
    "e\020\000\022\033\n\027BlackJackStateStartPour\020\001\022\031\n\025Blac"
    "kJackStateEndPour\020\002\022\035\n\031BlackJackStateSta"
    "rtToDeal\020\003\022\033\n\027BlackJackStateEndToDeal\020\004\022"
    "\033\n\027BlackJackStateDetermine\020\005\022\034\n\030BlackJac"
    "kStateRoleAction\020\006\022\030\n\024BlackJackStateFini"
    "sh\020\007\022\026\n\022BlackJackStateWait\020\010", 1188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_blackjack.proto", &protobuf_RegisterTypes);
  MsgBlackJackCard::default_instance_ = new MsgBlackJackCard();
  MsgPour::default_instance_ = new MsgPour();
  MsgBlackJackPourList::default_instance_ = new MsgBlackJackPourList();
  MsgBlackjackPlayerInfo::default_instance_ = new MsgBlackjackPlayerInfo();
  MsgBlackjackRoomInfo::default_instance_ = new MsgBlackjackRoomInfo();
  MsgAddPourRes::default_instance_ = new MsgAddPourRes();
  MsgAskforCardsRes::default_instance_ = new MsgAskforCardsRes();
  MsgBlackJackCard::default_instance_->InitAsDefaultInstance();
  MsgPour::default_instance_->InitAsDefaultInstance();
  MsgBlackJackPourList::default_instance_->InitAsDefaultInstance();
  MsgBlackjackPlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgBlackjackRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgAddPourRes::default_instance_->InitAsDefaultInstance();
  MsgAskforCardsRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fblackjack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fblackjack_2eproto {
  StaticDescriptorInitializer_msg_5fblackjack_2eproto() {
    protobuf_AddDesc_msg_5fblackjack_2eproto();
  }
} static_descriptor_initializer_msg_5fblackjack_2eproto_;
const ::google::protobuf::EnumDescriptor* TBlackJackState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBlackJackState_descriptor_;
}
bool TBlackJackState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBlackJackCard::kSuitFieldNumber;
const int MsgBlackJackCard::kIndexFieldNumber;
#endif  // !_MSC_VER

MsgBlackJackCard::MsgBlackJackCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBlackJackCard)
}

void MsgBlackJackCard::InitAsDefaultInstance() {
}

MsgBlackJackCard::MsgBlackJackCard(const MsgBlackJackCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBlackJackCard)
}

void MsgBlackJackCard::SharedCtor() {
  _cached_size_ = 0;
  suit_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBlackJackCard::~MsgBlackJackCard() {
  // @@protoc_insertion_point(destructor:MsgBlackJackCard)
  SharedDtor();
}

void MsgBlackJackCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBlackJackCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBlackJackCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBlackJackCard_descriptor_;
}

const MsgBlackJackCard& MsgBlackJackCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fblackjack_2eproto();
  return *default_instance_;
}

MsgBlackJackCard* MsgBlackJackCard::default_instance_ = NULL;

MsgBlackJackCard* MsgBlackJackCard::New() const {
  return new MsgBlackJackCard;
}

void MsgBlackJackCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBlackJackCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(suit_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBlackJackCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBlackJackCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TCardsType suit = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TCardsType_IsValid(value)) {
            set_suit(static_cast< ::TCardsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBlackJackCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBlackJackCard)
  return false;
#undef DO_
}

void MsgBlackJackCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBlackJackCard)
  // optional .TCardsType suit = 1;
  if (has_suit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->suit(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBlackJackCard)
}

::google::protobuf::uint8* MsgBlackJackCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBlackJackCard)
  // optional .TCardsType suit = 1;
  if (has_suit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->suit(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBlackJackCard)
  return target;
}

int MsgBlackJackCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TCardsType suit = 1;
    if (has_suit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->suit());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBlackJackCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBlackJackCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBlackJackCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBlackJackCard::MergeFrom(const MsgBlackJackCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suit()) {
      set_suit(from.suit());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBlackJackCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlackJackCard::CopyFrom(const MsgBlackJackCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlackJackCard::IsInitialized() const {

  return true;
}

void MsgBlackJackCard::Swap(MsgBlackJackCard* other) {
  if (other != this) {
    std::swap(suit_, other->suit_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBlackJackCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBlackJackCard_descriptor_;
  metadata.reflection = MsgBlackJackCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPour::kPourFieldNumber;
const int MsgPour::kNumFieldNumber;
#endif  // !_MSC_VER

MsgPour::MsgPour()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPour)
}

void MsgPour::InitAsDefaultInstance() {
}

MsgPour::MsgPour(const MsgPour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPour)
}

void MsgPour::SharedCtor() {
  _cached_size_ = 0;
  pour_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPour::~MsgPour() {
  // @@protoc_insertion_point(destructor:MsgPour)
  SharedDtor();
}

void MsgPour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPour_descriptor_;
}

const MsgPour& MsgPour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fblackjack_2eproto();
  return *default_instance_;
}

MsgPour* MsgPour::default_instance_ = NULL;

MsgPour* MsgPour::New() const {
  return new MsgPour;
}

void MsgPour::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPour*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pour_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPour)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pour = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_)));
          set_has_pour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPour)
  return false;
#undef DO_
}

void MsgPour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPour)
  // optional uint64 pour = 1;
  if (has_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pour(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPour)
}

::google::protobuf::uint8* MsgPour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPour)
  // optional uint64 pour = 1;
  if (has_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pour(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPour)
  return target;
}

int MsgPour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pour = 1;
    if (has_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPour::MergeFrom(const MsgPour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pour()) {
      set_pour(from.pour());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPour::CopyFrom(const MsgPour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPour::IsInitialized() const {

  return true;
}

void MsgPour::Swap(MsgPour* other) {
  if (other != this) {
    std::swap(pour_, other->pour_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPour_descriptor_;
  metadata.reflection = MsgPour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBlackJackPourList::kPourListFieldNumber;
#endif  // !_MSC_VER

MsgBlackJackPourList::MsgBlackJackPourList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBlackJackPourList)
}

void MsgBlackJackPourList::InitAsDefaultInstance() {
}

MsgBlackJackPourList::MsgBlackJackPourList(const MsgBlackJackPourList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBlackJackPourList)
}

void MsgBlackJackPourList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBlackJackPourList::~MsgBlackJackPourList() {
  // @@protoc_insertion_point(destructor:MsgBlackJackPourList)
  SharedDtor();
}

void MsgBlackJackPourList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBlackJackPourList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBlackJackPourList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBlackJackPourList_descriptor_;
}

const MsgBlackJackPourList& MsgBlackJackPourList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fblackjack_2eproto();
  return *default_instance_;
}

MsgBlackJackPourList* MsgBlackJackPourList::default_instance_ = NULL;

MsgBlackJackPourList* MsgBlackJackPourList::New() const {
  return new MsgBlackJackPourList;
}

void MsgBlackJackPourList::Clear() {
  pour_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBlackJackPourList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBlackJackPourList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPour pour_list = 1;
      case 1: {
        if (tag == 10) {
         parse_pour_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pour_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pour_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBlackJackPourList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBlackJackPourList)
  return false;
#undef DO_
}

void MsgBlackJackPourList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBlackJackPourList)
  // repeated .MsgPour pour_list = 1;
  for (int i = 0; i < this->pour_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pour_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBlackJackPourList)
}

::google::protobuf::uint8* MsgBlackJackPourList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBlackJackPourList)
  // repeated .MsgPour pour_list = 1;
  for (int i = 0; i < this->pour_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pour_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBlackJackPourList)
  return target;
}

int MsgBlackJackPourList::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPour pour_list = 1;
  total_size += 1 * this->pour_list_size();
  for (int i = 0; i < this->pour_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pour_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBlackJackPourList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBlackJackPourList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBlackJackPourList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBlackJackPourList::MergeFrom(const MsgBlackJackPourList& from) {
  GOOGLE_CHECK_NE(&from, this);
  pour_list_.MergeFrom(from.pour_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBlackJackPourList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlackJackPourList::CopyFrom(const MsgBlackJackPourList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlackJackPourList::IsInitialized() const {

  return true;
}

void MsgBlackJackPourList::Swap(MsgBlackJackPourList* other) {
  if (other != this) {
    pour_list_.Swap(&other->pour_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBlackJackPourList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBlackJackPourList_descriptor_;
  metadata.reflection = MsgBlackJackPourList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBlackjackPlayerInfo::kPlayerBaseFieldNumber;
const int MsgBlackjackPlayerInfo::kPourFieldNumber;
const int MsgBlackjackPlayerInfo::kHandCardsFieldNumber;
const int MsgBlackjackPlayerInfo::kHandCardsStopFieldNumber;
const int MsgBlackjackPlayerInfo::kHandCardsDoubleFieldNumber;
const int MsgBlackjackPlayerInfo::kSplitCardsFieldNumber;
const int MsgBlackjackPlayerInfo::kSplitCardsStopFieldNumber;
const int MsgBlackjackPlayerInfo::kSplitCardsDoubleFieldNumber;
const int MsgBlackjackPlayerInfo::kIsBuySurrenderFieldNumber;
const int MsgBlackjackPlayerInfo::kChallengeCoinFieldNumber;
#endif  // !_MSC_VER

MsgBlackjackPlayerInfo::MsgBlackjackPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBlackjackPlayerInfo)
}

void MsgBlackjackPlayerInfo::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgBlackjackPlayerInfo::MsgBlackjackPlayerInfo(const MsgBlackjackPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBlackjackPlayerInfo)
}

void MsgBlackjackPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  hand_cards_stop_ = false;
  hand_cards_double_ = false;
  split_cards_stop_ = false;
  split_cards_double_ = false;
  is_buy_surrender_ = false;
  challenge_coin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBlackjackPlayerInfo::~MsgBlackjackPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgBlackjackPlayerInfo)
  SharedDtor();
}

void MsgBlackjackPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
  }
}

void MsgBlackjackPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBlackjackPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBlackjackPlayerInfo_descriptor_;
}

const MsgBlackjackPlayerInfo& MsgBlackjackPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fblackjack_2eproto();
  return *default_instance_;
}

MsgBlackjackPlayerInfo* MsgBlackjackPlayerInfo::default_instance_ = NULL;

MsgBlackjackPlayerInfo* MsgBlackjackPlayerInfo::New() const {
  return new MsgBlackjackPlayerInfo;
}

void MsgBlackjackPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBlackjackPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 217) {
    ZR_(hand_cards_stop_, split_cards_double_);
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
  }
  ZR_(is_buy_surrender_, challenge_coin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  pour_.Clear();
  hand_cards_.Clear();
  split_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBlackjackPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBlackjackPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pour;
        break;
      }

      // repeated .MsgPour pour = 2;
      case 2: {
        if (tag == 18) {
         parse_pour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pour()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pour;
        if (input->ExpectTag(26)) goto parse_hand_cards;
        break;
      }

      // repeated .MsgBlackJackCard hand_cards = 3;
      case 3: {
        if (tag == 26) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hand_cards;
        if (input->ExpectTag(32)) goto parse_hand_cards_stop;
        break;
      }

      // optional bool hand_cards_stop = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_cards_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hand_cards_stop_)));
          set_has_hand_cards_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_cards_double;
        break;
      }

      // optional bool hand_cards_double = 5;
      case 5: {
        if (tag == 40) {
         parse_hand_cards_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hand_cards_double_)));
          set_has_hand_cards_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_split_cards;
        break;
      }

      // repeated .MsgBlackJackCard split_cards = 6;
      case 6: {
        if (tag == 50) {
         parse_split_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_split_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_split_cards;
        if (input->ExpectTag(56)) goto parse_split_cards_stop;
        break;
      }

      // optional bool split_cards_stop = 7;
      case 7: {
        if (tag == 56) {
         parse_split_cards_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_cards_stop_)));
          set_has_split_cards_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_split_cards_double;
        break;
      }

      // optional bool split_cards_double = 8;
      case 8: {
        if (tag == 64) {
         parse_split_cards_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_cards_double_)));
          set_has_split_cards_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_buy_surrender;
        break;
      }

      // optional bool is_buy_surrender = 9;
      case 9: {
        if (tag == 72) {
         parse_is_buy_surrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buy_surrender_)));
          set_has_is_buy_surrender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_challenge_coin;
        break;
      }

      // optional int64 challenge_coin = 10;
      case 10: {
        if (tag == 80) {
         parse_challenge_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &challenge_coin_)));
          set_has_challenge_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBlackjackPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBlackjackPlayerInfo)
  return false;
#undef DO_
}

void MsgBlackjackPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBlackjackPlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // repeated .MsgPour pour = 2;
  for (int i = 0; i < this->pour_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pour(i), output);
  }

  // repeated .MsgBlackJackCard hand_cards = 3;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hand_cards(i), output);
  }

  // optional bool hand_cards_stop = 4;
  if (has_hand_cards_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hand_cards_stop(), output);
  }

  // optional bool hand_cards_double = 5;
  if (has_hand_cards_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hand_cards_double(), output);
  }

  // repeated .MsgBlackJackCard split_cards = 6;
  for (int i = 0; i < this->split_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->split_cards(i), output);
  }

  // optional bool split_cards_stop = 7;
  if (has_split_cards_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->split_cards_stop(), output);
  }

  // optional bool split_cards_double = 8;
  if (has_split_cards_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->split_cards_double(), output);
  }

  // optional bool is_buy_surrender = 9;
  if (has_is_buy_surrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_buy_surrender(), output);
  }

  // optional int64 challenge_coin = 10;
  if (has_challenge_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->challenge_coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBlackjackPlayerInfo)
}

::google::protobuf::uint8* MsgBlackjackPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBlackjackPlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // repeated .MsgPour pour = 2;
  for (int i = 0; i < this->pour_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pour(i), target);
  }

  // repeated .MsgBlackJackCard hand_cards = 3;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hand_cards(i), target);
  }

  // optional bool hand_cards_stop = 4;
  if (has_hand_cards_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hand_cards_stop(), target);
  }

  // optional bool hand_cards_double = 5;
  if (has_hand_cards_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hand_cards_double(), target);
  }

  // repeated .MsgBlackJackCard split_cards = 6;
  for (int i = 0; i < this->split_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->split_cards(i), target);
  }

  // optional bool split_cards_stop = 7;
  if (has_split_cards_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->split_cards_stop(), target);
  }

  // optional bool split_cards_double = 8;
  if (has_split_cards_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->split_cards_double(), target);
  }

  // optional bool is_buy_surrender = 9;
  if (has_is_buy_surrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_buy_surrender(), target);
  }

  // optional int64 challenge_coin = 10;
  if (has_challenge_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->challenge_coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBlackjackPlayerInfo)
  return target;
}

int MsgBlackjackPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional bool hand_cards_stop = 4;
    if (has_hand_cards_stop()) {
      total_size += 1 + 1;
    }

    // optional bool hand_cards_double = 5;
    if (has_hand_cards_double()) {
      total_size += 1 + 1;
    }

    // optional bool split_cards_stop = 7;
    if (has_split_cards_stop()) {
      total_size += 1 + 1;
    }

    // optional bool split_cards_double = 8;
    if (has_split_cards_double()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_buy_surrender = 9;
    if (has_is_buy_surrender()) {
      total_size += 1 + 1;
    }

    // optional int64 challenge_coin = 10;
    if (has_challenge_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->challenge_coin());
    }

  }
  // repeated .MsgPour pour = 2;
  total_size += 1 * this->pour_size();
  for (int i = 0; i < this->pour_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pour(i));
  }

  // repeated .MsgBlackJackCard hand_cards = 3;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated .MsgBlackJackCard split_cards = 6;
  total_size += 1 * this->split_cards_size();
  for (int i = 0; i < this->split_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->split_cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBlackjackPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBlackjackPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBlackjackPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBlackjackPlayerInfo::MergeFrom(const MsgBlackjackPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pour_.MergeFrom(from.pour_);
  hand_cards_.MergeFrom(from.hand_cards_);
  split_cards_.MergeFrom(from.split_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_hand_cards_stop()) {
      set_hand_cards_stop(from.hand_cards_stop());
    }
    if (from.has_hand_cards_double()) {
      set_hand_cards_double(from.hand_cards_double());
    }
    if (from.has_split_cards_stop()) {
      set_split_cards_stop(from.split_cards_stop());
    }
    if (from.has_split_cards_double()) {
      set_split_cards_double(from.split_cards_double());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_buy_surrender()) {
      set_is_buy_surrender(from.is_buy_surrender());
    }
    if (from.has_challenge_coin()) {
      set_challenge_coin(from.challenge_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBlackjackPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlackjackPlayerInfo::CopyFrom(const MsgBlackjackPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlackjackPlayerInfo::IsInitialized() const {

  return true;
}

void MsgBlackjackPlayerInfo::Swap(MsgBlackjackPlayerInfo* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    pour_.Swap(&other->pour_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(hand_cards_stop_, other->hand_cards_stop_);
    std::swap(hand_cards_double_, other->hand_cards_double_);
    split_cards_.Swap(&other->split_cards_);
    std::swap(split_cards_stop_, other->split_cards_stop_);
    std::swap(split_cards_double_, other->split_cards_double_);
    std::swap(is_buy_surrender_, other->is_buy_surrender_);
    std::swap(challenge_coin_, other->challenge_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBlackjackPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBlackjackPlayerInfo_descriptor_;
  metadata.reflection = MsgBlackjackPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBlackjackRoomInfo::kRoomStateFieldNumber;
const int MsgBlackjackRoomInfo::kSurTimeFieldNumber;
const int MsgBlackjackRoomInfo::kMakersFieldNumber;
const int MsgBlackjackRoomInfo::kPlayerListFieldNumber;
const int MsgBlackjackRoomInfo::kSeatsFieldNumber;
const int MsgBlackjackRoomInfo::kRoundFieldNumber;
const int MsgBlackjackRoomInfo::kRoomIdFieldNumber;
const int MsgBlackjackRoomInfo::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

MsgBlackjackRoomInfo::MsgBlackjackRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBlackjackRoomInfo)
}

void MsgBlackjackRoomInfo::InitAsDefaultInstance() {
  makers_ = const_cast< ::MsgBlackjackPlayerInfo*>(&::MsgBlackjackPlayerInfo::default_instance());
  room_info_ = const_cast< ::MsgBaseRoomInfo*>(&::MsgBaseRoomInfo::default_instance());
}

MsgBlackjackRoomInfo::MsgBlackjackRoomInfo(const MsgBlackjackRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBlackjackRoomInfo)
}

void MsgBlackjackRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  sur_time_ = GOOGLE_LONGLONG(0);
  makers_ = NULL;
  round_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBlackjackRoomInfo::~MsgBlackjackRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgBlackjackRoomInfo)
  SharedDtor();
}

void MsgBlackjackRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete makers_;
    delete room_info_;
  }
}

void MsgBlackjackRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBlackjackRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBlackjackRoomInfo_descriptor_;
}

const MsgBlackjackRoomInfo& MsgBlackjackRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fblackjack_2eproto();
  return *default_instance_;
}

MsgBlackjackRoomInfo* MsgBlackjackRoomInfo::default_instance_ = NULL;

MsgBlackjackRoomInfo* MsgBlackjackRoomInfo::New() const {
  return new MsgBlackjackRoomInfo;
}

void MsgBlackjackRoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBlackjackRoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(room_state_, round_);
    sur_time_ = GOOGLE_LONGLONG(0);
    if (has_makers()) {
      if (makers_ != NULL) makers_->::MsgBlackjackPlayerInfo::Clear();
    }
    room_id_ = GOOGLE_ULONGLONG(0);
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::MsgBaseRoomInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  seats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBlackjackRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBlackjackRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TBlackJackState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TBlackJackState_IsValid(value)) {
            set_room_state(static_cast< ::TBlackJackState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sur_time;
        break;
      }

      // optional int64 sur_time = 2;
      case 2: {
        if (tag == 16) {
         parse_sur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sur_time_)));
          set_has_sur_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_makers;
        break;
      }

      // optional .MsgBlackjackPlayerInfo makers = 3;
      case 3: {
        if (tag == 26) {
         parse_makers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_makers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        break;
      }

      // repeated .MsgBlackjackPlayerInfo player_list = 4;
      case 4: {
        if (tag == 34) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        if (input->ExpectTag(40)) goto parse_seats;
        break;
      }

      // repeated uint64 seats = 5;
      case 5: {
        if (tag == 40) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_seats())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_seats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seats;
        if (input->ExpectTag(48)) goto parse_round;
        break;
      }

      // optional uint32 round = 6;
      case 6: {
        if (tag == 48) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 7;
      case 7: {
        if (tag == 56) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_room_info;
        break;
      }

      // optional .MsgBaseRoomInfo room_info = 8;
      case 8: {
        if (tag == 66) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBlackjackRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBlackjackRoomInfo)
  return false;
#undef DO_
}

void MsgBlackjackRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBlackjackRoomInfo)
  // optional .TBlackJackState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional int64 sur_time = 2;
  if (has_sur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sur_time(), output);
  }

  // optional .MsgBlackjackPlayerInfo makers = 3;
  if (has_makers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->makers(), output);
  }

  // repeated .MsgBlackjackPlayerInfo player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(i), output);
  }

  // repeated uint64 seats = 5;
  for (int i = 0; i < this->seats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->seats(i), output);
  }

  // optional uint32 round = 6;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->round(), output);
  }

  // optional uint64 room_id = 7;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->room_id(), output);
  }

  // optional .MsgBaseRoomInfo room_info = 8;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->room_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBlackjackRoomInfo)
}

::google::protobuf::uint8* MsgBlackjackRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBlackjackRoomInfo)
  // optional .TBlackJackState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional int64 sur_time = 2;
  if (has_sur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sur_time(), target);
  }

  // optional .MsgBlackjackPlayerInfo makers = 3;
  if (has_makers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->makers(), target);
  }

  // repeated .MsgBlackjackPlayerInfo player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_list(i), target);
  }

  // repeated uint64 seats = 5;
  for (int i = 0; i < this->seats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->seats(i), target);
  }

  // optional uint32 round = 6;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->round(), target);
  }

  // optional uint64 room_id = 7;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->room_id(), target);
  }

  // optional .MsgBaseRoomInfo room_info = 8;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->room_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBlackjackRoomInfo)
  return target;
}

int MsgBlackjackRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TBlackJackState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional int64 sur_time = 2;
    if (has_sur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sur_time());
    }

    // optional .MsgBlackjackPlayerInfo makers = 3;
    if (has_makers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->makers());
    }

    // optional uint32 round = 6;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional uint64 room_id = 7;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional .MsgBaseRoomInfo room_info = 8;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  // repeated .MsgBlackjackPlayerInfo player_list = 4;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated uint64 seats = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->seats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->seats(i));
    }
    total_size += 1 * this->seats_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBlackjackRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBlackjackRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBlackjackRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBlackjackRoomInfo::MergeFrom(const MsgBlackjackRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  seats_.MergeFrom(from.seats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_sur_time()) {
      set_sur_time(from.sur_time());
    }
    if (from.has_makers()) {
      mutable_makers()->::MsgBlackjackPlayerInfo::MergeFrom(from.makers());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::MsgBaseRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBlackjackRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlackjackRoomInfo::CopyFrom(const MsgBlackjackRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlackjackRoomInfo::IsInitialized() const {

  return true;
}

void MsgBlackjackRoomInfo::Swap(MsgBlackjackRoomInfo* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(sur_time_, other->sur_time_);
    std::swap(makers_, other->makers_);
    player_list_.Swap(&other->player_list_);
    seats_.Swap(&other->seats_);
    std::swap(round_, other->round_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_info_, other->room_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBlackjackRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBlackjackRoomInfo_descriptor_;
  metadata.reflection = MsgBlackjackRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAddPourRes::kPidFieldNumber;
const int MsgAddPourRes::kPourFieldNumber;
#endif  // !_MSC_VER

MsgAddPourRes::MsgAddPourRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAddPourRes)
}

void MsgAddPourRes::InitAsDefaultInstance() {
}

MsgAddPourRes::MsgAddPourRes(const MsgAddPourRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAddPourRes)
}

void MsgAddPourRes::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  pour_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAddPourRes::~MsgAddPourRes() {
  // @@protoc_insertion_point(destructor:MsgAddPourRes)
  SharedDtor();
}

void MsgAddPourRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAddPourRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAddPourRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAddPourRes_descriptor_;
}

const MsgAddPourRes& MsgAddPourRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fblackjack_2eproto();
  return *default_instance_;
}

MsgAddPourRes* MsgAddPourRes::default_instance_ = NULL;

MsgAddPourRes* MsgAddPourRes::New() const {
  return new MsgAddPourRes;
}

void MsgAddPourRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAddPourRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, pour_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAddPourRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAddPourRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pour;
        break;
      }

      // optional uint64 pour = 2;
      case 2: {
        if (tag == 16) {
         parse_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_)));
          set_has_pour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAddPourRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAddPourRes)
  return false;
#undef DO_
}

void MsgAddPourRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAddPourRes)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional uint64 pour = 2;
  if (has_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pour(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAddPourRes)
}

::google::protobuf::uint8* MsgAddPourRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAddPourRes)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional uint64 pour = 2;
  if (has_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pour(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAddPourRes)
  return target;
}

int MsgAddPourRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint64 pour = 2;
    if (has_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAddPourRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAddPourRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAddPourRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAddPourRes::MergeFrom(const MsgAddPourRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_pour()) {
      set_pour(from.pour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAddPourRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAddPourRes::CopyFrom(const MsgAddPourRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAddPourRes::IsInitialized() const {

  return true;
}

void MsgAddPourRes::Swap(MsgAddPourRes* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(pour_, other->pour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAddPourRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAddPourRes_descriptor_;
  metadata.reflection = MsgAddPourRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAskforCardsRes::kPidFieldNumber;
const int MsgAskforCardsRes::kIsHandFieldNumber;
const int MsgAskforCardsRes::kCardsFieldNumber;
#endif  // !_MSC_VER

MsgAskforCardsRes::MsgAskforCardsRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAskforCardsRes)
}

void MsgAskforCardsRes::InitAsDefaultInstance() {
}

MsgAskforCardsRes::MsgAskforCardsRes(const MsgAskforCardsRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAskforCardsRes)
}

void MsgAskforCardsRes::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  is_hand_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAskforCardsRes::~MsgAskforCardsRes() {
  // @@protoc_insertion_point(destructor:MsgAskforCardsRes)
  SharedDtor();
}

void MsgAskforCardsRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAskforCardsRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAskforCardsRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAskforCardsRes_descriptor_;
}

const MsgAskforCardsRes& MsgAskforCardsRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fblackjack_2eproto();
  return *default_instance_;
}

MsgAskforCardsRes* MsgAskforCardsRes::default_instance_ = NULL;

MsgAskforCardsRes* MsgAskforCardsRes::New() const {
  return new MsgAskforCardsRes;
}

void MsgAskforCardsRes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    pid_ = GOOGLE_ULONGLONG(0);
    is_hand_ = false;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAskforCardsRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAskforCardsRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_hand;
        break;
      }

      // optional bool is_hand = 2;
      case 2: {
        if (tag == 16) {
         parse_is_hand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hand_)));
          set_has_is_hand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }

      // repeated .MsgBlackJackCard cards = 3;
      case 3: {
        if (tag == 26) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAskforCardsRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAskforCardsRes)
  return false;
#undef DO_
}

void MsgAskforCardsRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAskforCardsRes)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional bool is_hand = 2;
  if (has_is_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_hand(), output);
  }

  // repeated .MsgBlackJackCard cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAskforCardsRes)
}

::google::protobuf::uint8* MsgAskforCardsRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAskforCardsRes)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional bool is_hand = 2;
  if (has_is_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_hand(), target);
  }

  // repeated .MsgBlackJackCard cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAskforCardsRes)
  return target;
}

int MsgAskforCardsRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional bool is_hand = 2;
    if (has_is_hand()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MsgBlackJackCard cards = 3;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAskforCardsRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAskforCardsRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAskforCardsRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAskforCardsRes::MergeFrom(const MsgAskforCardsRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_is_hand()) {
      set_is_hand(from.is_hand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAskforCardsRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAskforCardsRes::CopyFrom(const MsgAskforCardsRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAskforCardsRes::IsInitialized() const {

  return true;
}

void MsgAskforCardsRes::Swap(MsgAskforCardsRes* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(is_hand_, other->is_hand_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAskforCardsRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAskforCardsRes_descriptor_;
  metadata.reflection = MsgAskforCardsRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
