// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_runfast.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_runfast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgRunFastPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastActon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastActon_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastUserOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastUserOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastMSGRoomParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastMSGRoomParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastGameOverInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastGameOverInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastRoomShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastRoomShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRunFastIntegralCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRunFastIntegralCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TRunFastPlayerWik_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TRunFastPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TRunFastState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TRunFastCT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5frunfast_2eproto() {
  protobuf_AddDesc_msg_5frunfast_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_runfast.proto");
  GOOGLE_CHECK(file != NULL);
  MsgRunFastPlayer_descriptor_ = file->message_type(0);
  static const int MsgRunFastPlayer_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, zhadan_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, show_down_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, integral_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, out_type_),
  };
  MsgRunFastPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastPlayer_descriptor_,
      MsgRunFastPlayer::default_instance_,
      MsgRunFastPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastPlayer));
  MsgRunFastCardInfo_descriptor_ = file->message_type(1);
  static const int MsgRunFastCardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastCardInfo, card_),
  };
  MsgRunFastCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastCardInfo_descriptor_,
      MsgRunFastCardInfo::default_instance_,
      MsgRunFastCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastCardInfo));
  MsgRunFastActon_descriptor_ = file->message_type(2);
  static const int MsgRunFastActon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, new_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, old_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, last_out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, last_out_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, player_list_),
  };
  MsgRunFastActon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastActon_descriptor_,
      MsgRunFastActon::default_instance_,
      MsgRunFastActon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastActon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastActon));
  MsgRunFastUserOutCard_descriptor_ = file->message_type(3);
  static const int MsgRunFastUserOutCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, old_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, out_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, outcard_laizilogic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, is_baodan_),
  };
  MsgRunFastUserOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastUserOutCard_descriptor_,
      MsgRunFastUserOutCard::default_instance_,
      MsgRunFastUserOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastUserOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastUserOutCard));
  MsgRunFastMSGRoomParam_descriptor_ = file->message_type(4);
  static const int MsgRunFastMSGRoomParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastMSGRoomParam, room_run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastMSGRoomParam, room_param_),
  };
  MsgRunFastMSGRoomParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastMSGRoomParam_descriptor_,
      MsgRunFastMSGRoomParam::default_instance_,
      MsgRunFastMSGRoomParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastMSGRoomParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastMSGRoomParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastMSGRoomParam));
  MsgRunFastRoom_descriptor_ = file->message_type(5);
  static const int MsgRunFastRoom_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, private_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, last_outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, room_pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, msg_room_param_),
  };
  MsgRunFastRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastRoom_descriptor_,
      MsgRunFastRoom::default_instance_,
      MsgRunFastRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastRoom));
  MsgRunFastGameOverInfo_descriptor_ = file->message_type(6);
  static const int MsgRunFastGameOverInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastGameOverInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastGameOverInfo, max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastGameOverInfo, zhadan_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastGameOverInfo, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastGameOverInfo, lose_count_),
  };
  MsgRunFastGameOverInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastGameOverInfo_descriptor_,
      MsgRunFastGameOverInfo::default_instance_,
      MsgRunFastGameOverInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastGameOverInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastGameOverInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastGameOverInfo));
  MsgRunFastRoomShowDown_descriptor_ = file->message_type(7);
  static const int MsgRunFastRoomShowDown_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, over_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, integral_list_),
  };
  MsgRunFastRoomShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastRoomShowDown_descriptor_,
      MsgRunFastRoomShowDown::default_instance_,
      MsgRunFastRoomShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastRoomShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastRoomShowDown));
  MsgRunFastIntegralCount_descriptor_ = file->message_type(8);
  static const int MsgRunFastIntegralCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastIntegralCount, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastIntegralCount, count_),
  };
  MsgRunFastIntegralCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRunFastIntegralCount_descriptor_,
      MsgRunFastIntegralCount::default_instance_,
      MsgRunFastIntegralCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastIntegralCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRunFastIntegralCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRunFastIntegralCount));
  TRunFastPlayerWik_descriptor_ = file->enum_type(0);
  TRunFastPlayerState_descriptor_ = file->enum_type(1);
  TRunFastState_descriptor_ = file->enum_type(2);
  TRunFastCT_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5frunfast_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastPlayer_descriptor_, &MsgRunFastPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastCardInfo_descriptor_, &MsgRunFastCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastActon_descriptor_, &MsgRunFastActon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastUserOutCard_descriptor_, &MsgRunFastUserOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastMSGRoomParam_descriptor_, &MsgRunFastMSGRoomParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastRoom_descriptor_, &MsgRunFastRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastGameOverInfo_descriptor_, &MsgRunFastGameOverInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastRoomShowDown_descriptor_, &MsgRunFastRoomShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRunFastIntegralCount_descriptor_, &MsgRunFastIntegralCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5frunfast_2eproto() {
  delete MsgRunFastPlayer::default_instance_;
  delete MsgRunFastPlayer_reflection_;
  delete MsgRunFastCardInfo::default_instance_;
  delete MsgRunFastCardInfo_reflection_;
  delete MsgRunFastActon::default_instance_;
  delete MsgRunFastActon_reflection_;
  delete MsgRunFastUserOutCard::default_instance_;
  delete MsgRunFastUserOutCard_reflection_;
  delete MsgRunFastMSGRoomParam::default_instance_;
  delete MsgRunFastMSGRoomParam_reflection_;
  delete MsgRunFastRoom::default_instance_;
  delete MsgRunFastRoom_reflection_;
  delete MsgRunFastGameOverInfo::default_instance_;
  delete MsgRunFastGameOverInfo_reflection_;
  delete MsgRunFastRoomShowDown::default_instance_;
  delete MsgRunFastRoomShowDown_reflection_;
  delete MsgRunFastIntegralCount::default_instance_;
  delete MsgRunFastIntegralCount_reflection_;
}

void protobuf_AddDesc_msg_5frunfast_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021msg_runfast.proto\032\020public_pro.proto\"\236\002"
    "\n\020MsgRunFastPlayer\022#\n\013player_base\030\001 \001(\0132"
    "\016.MsgPlayerInfo\022\r\n\005state\030\002 \001(\r\022\022\n\nhand_c"
    "ount\030\003 \001(\r\022&\n\tcard_list\030\004 \003(\0132\023.MsgRunFa"
    "stCardInfo\022\r\n\005seats\030\005 \001(\r\022\024\n\014zhadan_coun"
    "t\030\006 \001(\r\022\r\n\005score\030\007 \001(\003\022\027\n\017show_down_scor"
    "e\030\010 \001(\003\022\024\n\014integral_num\030\t \001(\r\022%\n\010out_car"
    "d\030\n \003(\0132\023.MsgRunFastCardInfo\022\020\n\010out_type"
    "\030\013 \001(\r\"\"\n\022MsgRunFastCardInfo\022\014\n\004card\030\001 \001"
    "(\r\"\265\001\n\017MsgRunFastActon\022\024\n\014new_actionid\030\001"
    " \001(\004\022\024\n\014old_actionid\030\002 \001(\004\022*\n\rlast_out_c"
    "ard\030\003 \003(\0132\023.MsgRunFastCardInfo\022\025\n\rlast_o"
    "ut_type\030\004 \001(\r\022\013\n\003wik\030\005 \001(\r\022&\n\013player_lis"
    "t\030\006 \003(\0132\021.MsgRunFastPlayer\"\251\001\n\025MsgRunFas"
    "tUserOutCard\022\024\n\014old_actionid\030\001 \001(\004\022\020\n\010ou"
    "t_type\030\002 \001(\r\022\022\n\nhand_count\030\003 \001(\r\022\032\n\022outc"
    "ard_laiziLogic\030\004 \003(\r\022%\n\010out_card\030\005 \003(\0132\023"
    ".MsgRunFastCardInfo\022\021\n\tis_baodan\030\006 \001(\010\"C"
    "\n\026MsgRunFastMSGRoomParam\022\025\n\rroom_run_tim"
    "e\030\001 \001(\r\022\022\n\nroom_param\030\002 \001(\r\"\330\002\n\016MsgRunFa"
    "stRoom\022\"\n\nroom_state\030\001 \001(\0162\016.TRunFastSta"
    "te\022\022\n\nstate_time\030\002 \001(\r\022&\n\013player_list\030\003 "
    "\003(\0132\021.MsgRunFastPlayer\022\021\n\taction_id\030\004 \001("
    "\004\022\017\n\007room_id\030\005 \001(\004\022\022\n\ngame_count\030\006 \001(\r\022+"
    "\n\014private_room\030\007 \001(\0132\025.MsgCreatePrivateR"
    "oom\022,\n\014last_outcard\030\010 \001(\0132\026.MsgRunFastUs"
    "erOutCard\022\013\n\003wik\030\n \001(\r\022\025\n\rroom_pay_type\030"
    "\013 \001(\r\022/\n\016msg_room_param\030\014 \001(\0132\027.MsgRunFa"
    "stMSGRoomParam\"y\n\026MsgRunFastGameOverInfo"
    "\022\017\n\007role_id\030\001 \001(\004\022\021\n\tmax_score\030\002 \001(\003\022\024\n\014"
    "zhadan_count\030\003 \001(\r\022\021\n\twin_count\030\004 \001(\r\022\022\n"
    "\nlose_count\030\005 \001(\r\"\210\002\n\026MsgRunFastRoomShow"
    "Down\022\"\n\nroom_state\030\001 \001(\0162\016.TRunFastState"
    "\022\022\n\nstate_time\030\002 \001(\r\022&\n\013player_list\030\003 \003("
    "\0132\021.MsgRunFastPlayer\022\017\n\007room_id\030\004 \001(\004\022\022\n"
    "\ngame_count\030\005 \001(\r\022\014\n\004time\030\006 \001(\r\022*\n\tover_"
    "info\030\007 \003(\0132\027.MsgRunFastGameOverInfo\022/\n\ri"
    "ntegral_list\030\010 \003(\0132\030.MsgRunFastIntegralC"
    "ount\"8\n\027MsgRunFastIntegralCount\022\016\n\006rolei"
    "d\030\001 \001(\004\022\r\n\005count\030\002 \001(\r*R\n\021TRunFastPlayer"
    "Wik\022\017\n\013ASK_RF_NULL\020\001\022\r\n\tASK_TISHI\020\002\022\r\n\tA"
    "SK_BUCHU\020\004\022\016\n\nASK_CHUPAI\020\010*\302\002\n\023TRunFastP"
    "layerState\022\022\n\016STATE_RF_READY\020\001\022\020\n\014STATE_"
    "BAODAN\020\002\022\020\n\014STATE_GUOPAI\020\004\022\020\n\014STATE_BAOP"
    "EI\020\010\022\021\n\rSTATE_GUANMEN\020\020\022\024\n\020STATE_RF_NEWR"
    "OLE\020 \022\027\n\023STATE_RF_ROOM_OWNER\020@\022\025\n\020STATE_"
    "RF_RELIEVE\020\200\001\022\023\n\016STATE_RF_LEAVE\020\200\002\022\023\n\016ST"
    "ATE_RF_LIMIT\020\200\004\022\025\n\020STATE_RF_OFFLINE\020\200\010\022\023"
    "\n\016STATE_RF_TRUST\020\200\020\022\026\n\021STATE_RF_TRUSTMAX"
    "\020\200 \022\032\n\025STATE_RF_CONTINUEGAME\020\200@*\352\001\n\rTRun"
    "FastState\022\025\n\021TRunFastStateWait\020\000\022\037\n\033TRun"
    "FastStateCheckStartGame\020\001\022\032\n\026TRunFastSta"
    "teStartGame\020\002\022\031\n\025TRunFastStateSendCard\020\003"
    "\022\027\n\023TRunFastStateAction\020\004\022\030\n\024TRunFastSta"
    "teOutCard\020\005\022\031\n\025TRunFastStateShowDown\020\006\022\034"
    "\n\030TRunFastStateRelieveRoom\020\007*\303\002\n\nTRunFas"
    "tCT\022\017\n\013CT_RF_ERROR\020\000\022\020\n\014CT_RF_SINGLE\020\001\022\020"
    "\n\014CT_RF_DOUBLE\020\002\022\024\n\020CT_RF_THREE_TIAO\020\003\022\035"
    "\n\031CT_RF_THREE_TIAO_WITH_ONE\020\004\022 \n\034CT_RF_T"
    "HREE_TIAO_WITH_DOUBLE\020\005\022\021\n\rCT_RF_SHUN_ZI"
    "\020\006\022\022\n\016CT_RF_LIAN_DUI\020\007\022\017\n\013CT_RF_FEIJI\020\010\022"
    "\025\n\021CT_RF_ZHADAN_RUAN\020\t\022\025\n\021CT_RF_ZHADAN_Y"
    "ING\020\n\022\026\n\022CT_RF_ZHADAN_LAIZI\020\013\022\023\n\017CT_RF_F"
    "OUR_KING\020\014\022\026\n\022CT_RF_TONG_HUA_SHU\020\r", 2554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_runfast.proto", &protobuf_RegisterTypes);
  MsgRunFastPlayer::default_instance_ = new MsgRunFastPlayer();
  MsgRunFastCardInfo::default_instance_ = new MsgRunFastCardInfo();
  MsgRunFastActon::default_instance_ = new MsgRunFastActon();
  MsgRunFastUserOutCard::default_instance_ = new MsgRunFastUserOutCard();
  MsgRunFastMSGRoomParam::default_instance_ = new MsgRunFastMSGRoomParam();
  MsgRunFastRoom::default_instance_ = new MsgRunFastRoom();
  MsgRunFastGameOverInfo::default_instance_ = new MsgRunFastGameOverInfo();
  MsgRunFastRoomShowDown::default_instance_ = new MsgRunFastRoomShowDown();
  MsgRunFastIntegralCount::default_instance_ = new MsgRunFastIntegralCount();
  MsgRunFastPlayer::default_instance_->InitAsDefaultInstance();
  MsgRunFastCardInfo::default_instance_->InitAsDefaultInstance();
  MsgRunFastActon::default_instance_->InitAsDefaultInstance();
  MsgRunFastUserOutCard::default_instance_->InitAsDefaultInstance();
  MsgRunFastMSGRoomParam::default_instance_->InitAsDefaultInstance();
  MsgRunFastRoom::default_instance_->InitAsDefaultInstance();
  MsgRunFastGameOverInfo::default_instance_->InitAsDefaultInstance();
  MsgRunFastRoomShowDown::default_instance_->InitAsDefaultInstance();
  MsgRunFastIntegralCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5frunfast_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5frunfast_2eproto {
  StaticDescriptorInitializer_msg_5frunfast_2eproto() {
    protobuf_AddDesc_msg_5frunfast_2eproto();
  }
} static_descriptor_initializer_msg_5frunfast_2eproto_;
const ::google::protobuf::EnumDescriptor* TRunFastPlayerWik_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRunFastPlayerWik_descriptor_;
}
bool TRunFastPlayerWik_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRunFastPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRunFastPlayerState_descriptor_;
}
bool TRunFastPlayerState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRunFastState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRunFastState_descriptor_;
}
bool TRunFastState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRunFastCT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRunFastCT_descriptor_;
}
bool TRunFastCT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastPlayer::kPlayerBaseFieldNumber;
const int MsgRunFastPlayer::kStateFieldNumber;
const int MsgRunFastPlayer::kHandCountFieldNumber;
const int MsgRunFastPlayer::kCardListFieldNumber;
const int MsgRunFastPlayer::kSeatsFieldNumber;
const int MsgRunFastPlayer::kZhadanCountFieldNumber;
const int MsgRunFastPlayer::kScoreFieldNumber;
const int MsgRunFastPlayer::kShowDownScoreFieldNumber;
const int MsgRunFastPlayer::kIntegralNumFieldNumber;
const int MsgRunFastPlayer::kOutCardFieldNumber;
const int MsgRunFastPlayer::kOutTypeFieldNumber;
#endif  // !_MSC_VER

MsgRunFastPlayer::MsgRunFastPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastPlayer)
}

void MsgRunFastPlayer::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgRunFastPlayer::MsgRunFastPlayer(const MsgRunFastPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastPlayer)
}

void MsgRunFastPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  state_ = 0u;
  hand_count_ = 0u;
  seats_ = 0u;
  zhadan_count_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  show_down_score_ = GOOGLE_LONGLONG(0);
  integral_num_ = 0u;
  out_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastPlayer::~MsgRunFastPlayer() {
  // @@protoc_insertion_point(destructor:MsgRunFastPlayer)
  SharedDtor();
}

void MsgRunFastPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
  }
}

void MsgRunFastPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastPlayer_descriptor_;
}

const MsgRunFastPlayer& MsgRunFastPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastPlayer* MsgRunFastPlayer::default_instance_ = NULL;

MsgRunFastPlayer* MsgRunFastPlayer::New() const {
  return new MsgRunFastPlayer;
}

void MsgRunFastPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(state_, hand_count_);
    ZR_(seats_, show_down_score_);
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
  }
  ZR_(integral_num_, out_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_list_.Clear();
  out_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_card_list;
        break;
      }

      // repeated .MsgRunFastCardInfo card_list = 4;
      case 4: {
        if (tag == 34) {
         parse_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_card_list;
        if (input->ExpectTag(40)) goto parse_seats;
        break;
      }

      // optional uint32 seats = 5;
      case 5: {
        if (tag == 40) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
          set_has_seats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_zhadan_count;
        break;
      }

      // optional uint32 zhadan_count = 6;
      case 6: {
        if (tag == 48) {
         parse_zhadan_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zhadan_count_)));
          set_has_zhadan_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }

      // optional int64 score = 7;
      case 7: {
        if (tag == 56) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_show_down_score;
        break;
      }

      // optional int64 show_down_score = 8;
      case 8: {
        if (tag == 64) {
         parse_show_down_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &show_down_score_)));
          set_has_show_down_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_integral_num;
        break;
      }

      // optional uint32 integral_num = 9;
      case 9: {
        if (tag == 72) {
         parse_integral_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_num_)));
          set_has_integral_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_out_card;
        break;
      }

      // repeated .MsgRunFastCardInfo out_card = 10;
      case 10: {
        if (tag == 82) {
         parse_out_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_out_card;
        if (input->ExpectTag(88)) goto parse_out_type;
        break;
      }

      // optional uint32 out_type = 11;
      case 11: {
        if (tag == 88) {
         parse_out_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_type_)));
          set_has_out_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastPlayer)
  return false;
#undef DO_
}

void MsgRunFastPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_count(), output);
  }

  // repeated .MsgRunFastCardInfo card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->card_list(i), output);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seats(), output);
  }

  // optional uint32 zhadan_count = 6;
  if (has_zhadan_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zhadan_count(), output);
  }

  // optional int64 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->score(), output);
  }

  // optional int64 show_down_score = 8;
  if (has_show_down_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->show_down_score(), output);
  }

  // optional uint32 integral_num = 9;
  if (has_integral_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->integral_num(), output);
  }

  // repeated .MsgRunFastCardInfo out_card = 10;
  for (int i = 0; i < this->out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->out_card(i), output);
  }

  // optional uint32 out_type = 11;
  if (has_out_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->out_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastPlayer)
}

::google::protobuf::uint8* MsgRunFastPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_count(), target);
  }

  // repeated .MsgRunFastCardInfo card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->card_list(i), target);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seats(), target);
  }

  // optional uint32 zhadan_count = 6;
  if (has_zhadan_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zhadan_count(), target);
  }

  // optional int64 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->score(), target);
  }

  // optional int64 show_down_score = 8;
  if (has_show_down_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->show_down_score(), target);
  }

  // optional uint32 integral_num = 9;
  if (has_integral_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->integral_num(), target);
  }

  // repeated .MsgRunFastCardInfo out_card = 10;
  for (int i = 0; i < this->out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->out_card(i), target);
  }

  // optional uint32 out_type = 11;
  if (has_out_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->out_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastPlayer)
  return target;
}

int MsgRunFastPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 hand_count = 3;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional uint32 seats = 5;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional uint32 zhadan_count = 6;
    if (has_zhadan_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zhadan_count());
    }

    // optional int64 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 show_down_score = 8;
    if (has_show_down_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->show_down_score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 integral_num = 9;
    if (has_integral_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral_num());
    }

    // optional uint32 out_type = 11;
    if (has_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_type());
    }

  }
  // repeated .MsgRunFastCardInfo card_list = 4;
  total_size += 1 * this->card_list_size();
  for (int i = 0; i < this->card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_list(i));
  }

  // repeated .MsgRunFastCardInfo out_card = 10;
  total_size += 1 * this->out_card_size();
  for (int i = 0; i < this->out_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastPlayer::MergeFrom(const MsgRunFastPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
  out_card_.MergeFrom(from.out_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_seats()) {
      set_seats(from.seats());
    }
    if (from.has_zhadan_count()) {
      set_zhadan_count(from.zhadan_count());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_show_down_score()) {
      set_show_down_score(from.show_down_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_integral_num()) {
      set_integral_num(from.integral_num());
    }
    if (from.has_out_type()) {
      set_out_type(from.out_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastPlayer::CopyFrom(const MsgRunFastPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastPlayer::IsInitialized() const {

  return true;
}

void MsgRunFastPlayer::Swap(MsgRunFastPlayer* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(state_, other->state_);
    std::swap(hand_count_, other->hand_count_);
    card_list_.Swap(&other->card_list_);
    std::swap(seats_, other->seats_);
    std::swap(zhadan_count_, other->zhadan_count_);
    std::swap(score_, other->score_);
    std::swap(show_down_score_, other->show_down_score_);
    std::swap(integral_num_, other->integral_num_);
    out_card_.Swap(&other->out_card_);
    std::swap(out_type_, other->out_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastPlayer_descriptor_;
  metadata.reflection = MsgRunFastPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastCardInfo::kCardFieldNumber;
#endif  // !_MSC_VER

MsgRunFastCardInfo::MsgRunFastCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastCardInfo)
}

void MsgRunFastCardInfo::InitAsDefaultInstance() {
}

MsgRunFastCardInfo::MsgRunFastCardInfo(const MsgRunFastCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastCardInfo)
}

void MsgRunFastCardInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastCardInfo::~MsgRunFastCardInfo() {
  // @@protoc_insertion_point(destructor:MsgRunFastCardInfo)
  SharedDtor();
}

void MsgRunFastCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRunFastCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastCardInfo_descriptor_;
}

const MsgRunFastCardInfo& MsgRunFastCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastCardInfo* MsgRunFastCardInfo::default_instance_ = NULL;

MsgRunFastCardInfo* MsgRunFastCardInfo::New() const {
  return new MsgRunFastCardInfo;
}

void MsgRunFastCardInfo::Clear() {
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastCardInfo)
  return false;
#undef DO_
}

void MsgRunFastCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastCardInfo)
  // optional uint32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastCardInfo)
}

::google::protobuf::uint8* MsgRunFastCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastCardInfo)
  // optional uint32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastCardInfo)
  return target;
}

int MsgRunFastCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastCardInfo::MergeFrom(const MsgRunFastCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastCardInfo::CopyFrom(const MsgRunFastCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastCardInfo::IsInitialized() const {

  return true;
}

void MsgRunFastCardInfo::Swap(MsgRunFastCardInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastCardInfo_descriptor_;
  metadata.reflection = MsgRunFastCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastActon::kNewActionidFieldNumber;
const int MsgRunFastActon::kOldActionidFieldNumber;
const int MsgRunFastActon::kLastOutCardFieldNumber;
const int MsgRunFastActon::kLastOutTypeFieldNumber;
const int MsgRunFastActon::kWikFieldNumber;
const int MsgRunFastActon::kPlayerListFieldNumber;
#endif  // !_MSC_VER

MsgRunFastActon::MsgRunFastActon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastActon)
}

void MsgRunFastActon::InitAsDefaultInstance() {
}

MsgRunFastActon::MsgRunFastActon(const MsgRunFastActon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastActon)
}

void MsgRunFastActon::SharedCtor() {
  _cached_size_ = 0;
  new_actionid_ = GOOGLE_ULONGLONG(0);
  old_actionid_ = GOOGLE_ULONGLONG(0);
  last_out_type_ = 0u;
  wik_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastActon::~MsgRunFastActon() {
  // @@protoc_insertion_point(destructor:MsgRunFastActon)
  SharedDtor();
}

void MsgRunFastActon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRunFastActon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastActon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastActon_descriptor_;
}

const MsgRunFastActon& MsgRunFastActon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastActon* MsgRunFastActon::default_instance_ = NULL;

MsgRunFastActon* MsgRunFastActon::New() const {
  return new MsgRunFastActon;
}

void MsgRunFastActon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastActon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(new_actionid_, old_actionid_);
  ZR_(last_out_type_, wik_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  last_out_card_.Clear();
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastActon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastActon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 new_actionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_actionid_)));
          set_has_new_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_old_actionid;
        break;
      }

      // optional uint64 old_actionid = 2;
      case 2: {
        if (tag == 16) {
         parse_old_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_actionid_)));
          set_has_old_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_out_card;
        break;
      }

      // repeated .MsgRunFastCardInfo last_out_card = 3;
      case 3: {
        if (tag == 26) {
         parse_last_out_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_out_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_out_card;
        if (input->ExpectTag(32)) goto parse_last_out_type;
        break;
      }

      // optional uint32 last_out_type = 4;
      case 4: {
        if (tag == 32) {
         parse_last_out_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_out_type_)));
          set_has_last_out_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 5;
      case 5: {
        if (tag == 40) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_list;
        break;
      }

      // repeated .MsgRunFastPlayer player_list = 6;
      case 6: {
        if (tag == 50) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastActon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastActon)
  return false;
#undef DO_
}

void MsgRunFastActon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastActon)
  // optional uint64 new_actionid = 1;
  if (has_new_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->new_actionid(), output);
  }

  // optional uint64 old_actionid = 2;
  if (has_old_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->old_actionid(), output);
  }

  // repeated .MsgRunFastCardInfo last_out_card = 3;
  for (int i = 0; i < this->last_out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->last_out_card(i), output);
  }

  // optional uint32 last_out_type = 4;
  if (has_last_out_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_out_type(), output);
  }

  // optional uint32 wik = 5;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wik(), output);
  }

  // repeated .MsgRunFastPlayer player_list = 6;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastActon)
}

::google::protobuf::uint8* MsgRunFastActon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastActon)
  // optional uint64 new_actionid = 1;
  if (has_new_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->new_actionid(), target);
  }

  // optional uint64 old_actionid = 2;
  if (has_old_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->old_actionid(), target);
  }

  // repeated .MsgRunFastCardInfo last_out_card = 3;
  for (int i = 0; i < this->last_out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->last_out_card(i), target);
  }

  // optional uint32 last_out_type = 4;
  if (has_last_out_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_out_type(), target);
  }

  // optional uint32 wik = 5;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wik(), target);
  }

  // repeated .MsgRunFastPlayer player_list = 6;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastActon)
  return target;
}

int MsgRunFastActon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 new_actionid = 1;
    if (has_new_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_actionid());
    }

    // optional uint64 old_actionid = 2;
    if (has_old_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_actionid());
    }

    // optional uint32 last_out_type = 4;
    if (has_last_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_out_type());
    }

    // optional uint32 wik = 5;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

  }
  // repeated .MsgRunFastCardInfo last_out_card = 3;
  total_size += 1 * this->last_out_card_size();
  for (int i = 0; i < this->last_out_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_out_card(i));
  }

  // repeated .MsgRunFastPlayer player_list = 6;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastActon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastActon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastActon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastActon::MergeFrom(const MsgRunFastActon& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_out_card_.MergeFrom(from.last_out_card_);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_actionid()) {
      set_new_actionid(from.new_actionid());
    }
    if (from.has_old_actionid()) {
      set_old_actionid(from.old_actionid());
    }
    if (from.has_last_out_type()) {
      set_last_out_type(from.last_out_type());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastActon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastActon::CopyFrom(const MsgRunFastActon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastActon::IsInitialized() const {

  return true;
}

void MsgRunFastActon::Swap(MsgRunFastActon* other) {
  if (other != this) {
    std::swap(new_actionid_, other->new_actionid_);
    std::swap(old_actionid_, other->old_actionid_);
    last_out_card_.Swap(&other->last_out_card_);
    std::swap(last_out_type_, other->last_out_type_);
    std::swap(wik_, other->wik_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastActon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastActon_descriptor_;
  metadata.reflection = MsgRunFastActon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastUserOutCard::kOldActionidFieldNumber;
const int MsgRunFastUserOutCard::kOutTypeFieldNumber;
const int MsgRunFastUserOutCard::kHandCountFieldNumber;
const int MsgRunFastUserOutCard::kOutcardLaiziLogicFieldNumber;
const int MsgRunFastUserOutCard::kOutCardFieldNumber;
const int MsgRunFastUserOutCard::kIsBaodanFieldNumber;
#endif  // !_MSC_VER

MsgRunFastUserOutCard::MsgRunFastUserOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastUserOutCard)
}

void MsgRunFastUserOutCard::InitAsDefaultInstance() {
}

MsgRunFastUserOutCard::MsgRunFastUserOutCard(const MsgRunFastUserOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastUserOutCard)
}

void MsgRunFastUserOutCard::SharedCtor() {
  _cached_size_ = 0;
  old_actionid_ = GOOGLE_ULONGLONG(0);
  out_type_ = 0u;
  hand_count_ = 0u;
  is_baodan_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastUserOutCard::~MsgRunFastUserOutCard() {
  // @@protoc_insertion_point(destructor:MsgRunFastUserOutCard)
  SharedDtor();
}

void MsgRunFastUserOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRunFastUserOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastUserOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastUserOutCard_descriptor_;
}

const MsgRunFastUserOutCard& MsgRunFastUserOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastUserOutCard* MsgRunFastUserOutCard::default_instance_ = NULL;

MsgRunFastUserOutCard* MsgRunFastUserOutCard::New() const {
  return new MsgRunFastUserOutCard;
}

void MsgRunFastUserOutCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastUserOutCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(old_actionid_, hand_count_);
    is_baodan_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  outcard_laizilogic_.Clear();
  out_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastUserOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastUserOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 old_actionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_actionid_)));
          set_has_old_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_out_type;
        break;
      }

      // optional uint32 out_type = 2;
      case 2: {
        if (tag == 16) {
         parse_out_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_type_)));
          set_has_out_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_outcard_laiziLogic;
        break;
      }

      // repeated uint32 outcard_laiziLogic = 4;
      case 4: {
        if (tag == 32) {
         parse_outcard_laiziLogic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_outcard_laizilogic())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_outcard_laizilogic())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_outcard_laiziLogic;
        if (input->ExpectTag(42)) goto parse_out_card;
        break;
      }

      // repeated .MsgRunFastCardInfo out_card = 5;
      case 5: {
        if (tag == 42) {
         parse_out_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_out_card;
        if (input->ExpectTag(48)) goto parse_is_baodan;
        break;
      }

      // optional bool is_baodan = 6;
      case 6: {
        if (tag == 48) {
         parse_is_baodan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_baodan_)));
          set_has_is_baodan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastUserOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastUserOutCard)
  return false;
#undef DO_
}

void MsgRunFastUserOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastUserOutCard)
  // optional uint64 old_actionid = 1;
  if (has_old_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->old_actionid(), output);
  }

  // optional uint32 out_type = 2;
  if (has_out_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_type(), output);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_count(), output);
  }

  // repeated uint32 outcard_laiziLogic = 4;
  for (int i = 0; i < this->outcard_laizilogic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->outcard_laizilogic(i), output);
  }

  // repeated .MsgRunFastCardInfo out_card = 5;
  for (int i = 0; i < this->out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->out_card(i), output);
  }

  // optional bool is_baodan = 6;
  if (has_is_baodan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_baodan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastUserOutCard)
}

::google::protobuf::uint8* MsgRunFastUserOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastUserOutCard)
  // optional uint64 old_actionid = 1;
  if (has_old_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->old_actionid(), target);
  }

  // optional uint32 out_type = 2;
  if (has_out_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_type(), target);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_count(), target);
  }

  // repeated uint32 outcard_laiziLogic = 4;
  for (int i = 0; i < this->outcard_laizilogic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->outcard_laizilogic(i), target);
  }

  // repeated .MsgRunFastCardInfo out_card = 5;
  for (int i = 0; i < this->out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->out_card(i), target);
  }

  // optional bool is_baodan = 6;
  if (has_is_baodan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_baodan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastUserOutCard)
  return target;
}

int MsgRunFastUserOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 old_actionid = 1;
    if (has_old_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_actionid());
    }

    // optional uint32 out_type = 2;
    if (has_out_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_type());
    }

    // optional uint32 hand_count = 3;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional bool is_baodan = 6;
    if (has_is_baodan()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 outcard_laiziLogic = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcard_laizilogic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->outcard_laizilogic(i));
    }
    total_size += 1 * this->outcard_laizilogic_size() + data_size;
  }

  // repeated .MsgRunFastCardInfo out_card = 5;
  total_size += 1 * this->out_card_size();
  for (int i = 0; i < this->out_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastUserOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastUserOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastUserOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastUserOutCard::MergeFrom(const MsgRunFastUserOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  outcard_laizilogic_.MergeFrom(from.outcard_laizilogic_);
  out_card_.MergeFrom(from.out_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_actionid()) {
      set_old_actionid(from.old_actionid());
    }
    if (from.has_out_type()) {
      set_out_type(from.out_type());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_is_baodan()) {
      set_is_baodan(from.is_baodan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastUserOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastUserOutCard::CopyFrom(const MsgRunFastUserOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastUserOutCard::IsInitialized() const {

  return true;
}

void MsgRunFastUserOutCard::Swap(MsgRunFastUserOutCard* other) {
  if (other != this) {
    std::swap(old_actionid_, other->old_actionid_);
    std::swap(out_type_, other->out_type_);
    std::swap(hand_count_, other->hand_count_);
    outcard_laizilogic_.Swap(&other->outcard_laizilogic_);
    out_card_.Swap(&other->out_card_);
    std::swap(is_baodan_, other->is_baodan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastUserOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastUserOutCard_descriptor_;
  metadata.reflection = MsgRunFastUserOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastMSGRoomParam::kRoomRunTimeFieldNumber;
const int MsgRunFastMSGRoomParam::kRoomParamFieldNumber;
#endif  // !_MSC_VER

MsgRunFastMSGRoomParam::MsgRunFastMSGRoomParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastMSGRoomParam)
}

void MsgRunFastMSGRoomParam::InitAsDefaultInstance() {
}

MsgRunFastMSGRoomParam::MsgRunFastMSGRoomParam(const MsgRunFastMSGRoomParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastMSGRoomParam)
}

void MsgRunFastMSGRoomParam::SharedCtor() {
  _cached_size_ = 0;
  room_run_time_ = 0u;
  room_param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastMSGRoomParam::~MsgRunFastMSGRoomParam() {
  // @@protoc_insertion_point(destructor:MsgRunFastMSGRoomParam)
  SharedDtor();
}

void MsgRunFastMSGRoomParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRunFastMSGRoomParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastMSGRoomParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastMSGRoomParam_descriptor_;
}

const MsgRunFastMSGRoomParam& MsgRunFastMSGRoomParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastMSGRoomParam* MsgRunFastMSGRoomParam::default_instance_ = NULL;

MsgRunFastMSGRoomParam* MsgRunFastMSGRoomParam::New() const {
  return new MsgRunFastMSGRoomParam;
}

void MsgRunFastMSGRoomParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastMSGRoomParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(room_run_time_, room_param_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastMSGRoomParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastMSGRoomParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_run_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_run_time_)));
          set_has_room_run_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_param;
        break;
      }

      // optional uint32 room_param = 2;
      case 2: {
        if (tag == 16) {
         parse_room_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_param_)));
          set_has_room_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastMSGRoomParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastMSGRoomParam)
  return false;
#undef DO_
}

void MsgRunFastMSGRoomParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastMSGRoomParam)
  // optional uint32 room_run_time = 1;
  if (has_room_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_run_time(), output);
  }

  // optional uint32 room_param = 2;
  if (has_room_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastMSGRoomParam)
}

::google::protobuf::uint8* MsgRunFastMSGRoomParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastMSGRoomParam)
  // optional uint32 room_run_time = 1;
  if (has_room_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_run_time(), target);
  }

  // optional uint32 room_param = 2;
  if (has_room_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastMSGRoomParam)
  return target;
}

int MsgRunFastMSGRoomParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_run_time = 1;
    if (has_room_run_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_run_time());
    }

    // optional uint32 room_param = 2;
    if (has_room_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastMSGRoomParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastMSGRoomParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastMSGRoomParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastMSGRoomParam::MergeFrom(const MsgRunFastMSGRoomParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_run_time()) {
      set_room_run_time(from.room_run_time());
    }
    if (from.has_room_param()) {
      set_room_param(from.room_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastMSGRoomParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastMSGRoomParam::CopyFrom(const MsgRunFastMSGRoomParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastMSGRoomParam::IsInitialized() const {

  return true;
}

void MsgRunFastMSGRoomParam::Swap(MsgRunFastMSGRoomParam* other) {
  if (other != this) {
    std::swap(room_run_time_, other->room_run_time_);
    std::swap(room_param_, other->room_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastMSGRoomParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastMSGRoomParam_descriptor_;
  metadata.reflection = MsgRunFastMSGRoomParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastRoom::kRoomStateFieldNumber;
const int MsgRunFastRoom::kStateTimeFieldNumber;
const int MsgRunFastRoom::kPlayerListFieldNumber;
const int MsgRunFastRoom::kActionIdFieldNumber;
const int MsgRunFastRoom::kRoomIdFieldNumber;
const int MsgRunFastRoom::kGameCountFieldNumber;
const int MsgRunFastRoom::kPrivateRoomFieldNumber;
const int MsgRunFastRoom::kLastOutcardFieldNumber;
const int MsgRunFastRoom::kWikFieldNumber;
const int MsgRunFastRoom::kRoomPayTypeFieldNumber;
const int MsgRunFastRoom::kMsgRoomParamFieldNumber;
#endif  // !_MSC_VER

MsgRunFastRoom::MsgRunFastRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastRoom)
}

void MsgRunFastRoom::InitAsDefaultInstance() {
  private_room_ = const_cast< ::MsgCreatePrivateRoom*>(&::MsgCreatePrivateRoom::default_instance());
  last_outcard_ = const_cast< ::MsgRunFastUserOutCard*>(&::MsgRunFastUserOutCard::default_instance());
  msg_room_param_ = const_cast< ::MsgRunFastMSGRoomParam*>(&::MsgRunFastMSGRoomParam::default_instance());
}

MsgRunFastRoom::MsgRunFastRoom(const MsgRunFastRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastRoom)
}

void MsgRunFastRoom::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  action_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  private_room_ = NULL;
  last_outcard_ = NULL;
  wik_ = 0u;
  room_pay_type_ = 0u;
  msg_room_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastRoom::~MsgRunFastRoom() {
  // @@protoc_insertion_point(destructor:MsgRunFastRoom)
  SharedDtor();
}

void MsgRunFastRoom::SharedDtor() {
  if (this != default_instance_) {
    delete private_room_;
    delete last_outcard_;
    delete msg_room_param_;
  }
}

void MsgRunFastRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastRoom_descriptor_;
}

const MsgRunFastRoom& MsgRunFastRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastRoom* MsgRunFastRoom::default_instance_ = NULL;

MsgRunFastRoom* MsgRunFastRoom::New() const {
  return new MsgRunFastRoom;
}

void MsgRunFastRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(room_state_, state_time_);
    ZR_(action_id_, room_id_);
    game_count_ = 0u;
    if (has_private_room()) {
      if (private_room_ != NULL) private_room_->::MsgCreatePrivateRoom::Clear();
    }
    if (has_last_outcard()) {
      if (last_outcard_ != NULL) last_outcard_->::MsgRunFastUserOutCard::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    wik_ = 0u;
    room_pay_type_ = 0u;
    if (has_msg_room_param()) {
      if (msg_room_param_ != NULL) msg_room_param_->::MsgRunFastMSGRoomParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TRunFastState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TRunFastState_IsValid(value)) {
            set_room_state(static_cast< ::TRunFastState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgRunFastPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint64 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 5;
      case 5: {
        if (tag == 40) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 6;
      case 6: {
        if (tag == 48) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_private_room;
        break;
      }

      // optional .MsgCreatePrivateRoom private_room = 7;
      case 7: {
        if (tag == 58) {
         parse_private_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_last_outcard;
        break;
      }

      // optional .MsgRunFastUserOutCard last_outcard = 8;
      case 8: {
        if (tag == 66) {
         parse_last_outcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_outcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 10;
      case 10: {
        if (tag == 80) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_room_pay_type;
        break;
      }

      // optional uint32 room_pay_type = 11;
      case 11: {
        if (tag == 88) {
         parse_room_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_pay_type_)));
          set_has_room_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_msg_room_param;
        break;
      }

      // optional .MsgRunFastMSGRoomParam msg_room_param = 12;
      case 12: {
        if (tag == 98) {
         parse_msg_room_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_room_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastRoom)
  return false;
#undef DO_
}

void MsgRunFastRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastRoom)
  // optional .TRunFastState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgRunFastPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->action_id(), output);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_id(), output);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_count(), output);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->private_room(), output);
  }

  // optional .MsgRunFastUserOutCard last_outcard = 8;
  if (has_last_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->last_outcard(), output);
  }

  // optional uint32 wik = 10;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wik(), output);
  }

  // optional uint32 room_pay_type = 11;
  if (has_room_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->room_pay_type(), output);
  }

  // optional .MsgRunFastMSGRoomParam msg_room_param = 12;
  if (has_msg_room_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->msg_room_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastRoom)
}

::google::protobuf::uint8* MsgRunFastRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastRoom)
  // optional .TRunFastState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgRunFastPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->action_id(), target);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_id(), target);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_count(), target);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->private_room(), target);
  }

  // optional .MsgRunFastUserOutCard last_outcard = 8;
  if (has_last_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->last_outcard(), target);
  }

  // optional uint32 wik = 10;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wik(), target);
  }

  // optional uint32 room_pay_type = 11;
  if (has_room_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->room_pay_type(), target);
  }

  // optional .MsgRunFastMSGRoomParam msg_room_param = 12;
  if (has_msg_room_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->msg_room_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastRoom)
  return target;
}

int MsgRunFastRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TRunFastState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional uint64 room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 6;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional .MsgCreatePrivateRoom private_room = 7;
    if (has_private_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_room());
    }

    // optional .MsgRunFastUserOutCard last_outcard = 8;
    if (has_last_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_outcard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 wik = 10;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 room_pay_type = 11;
    if (has_room_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_pay_type());
    }

    // optional .MsgRunFastMSGRoomParam msg_room_param = 12;
    if (has_msg_room_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_room_param());
    }

  }
  // repeated .MsgRunFastPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastRoom::MergeFrom(const MsgRunFastRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_private_room()) {
      mutable_private_room()->::MsgCreatePrivateRoom::MergeFrom(from.private_room());
    }
    if (from.has_last_outcard()) {
      mutable_last_outcard()->::MsgRunFastUserOutCard::MergeFrom(from.last_outcard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_room_pay_type()) {
      set_room_pay_type(from.room_pay_type());
    }
    if (from.has_msg_room_param()) {
      mutable_msg_room_param()->::MsgRunFastMSGRoomParam::MergeFrom(from.msg_room_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastRoom::CopyFrom(const MsgRunFastRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastRoom::IsInitialized() const {

  return true;
}

void MsgRunFastRoom::Swap(MsgRunFastRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(action_id_, other->action_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(private_room_, other->private_room_);
    std::swap(last_outcard_, other->last_outcard_);
    std::swap(wik_, other->wik_);
    std::swap(room_pay_type_, other->room_pay_type_);
    std::swap(msg_room_param_, other->msg_room_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastRoom_descriptor_;
  metadata.reflection = MsgRunFastRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastGameOverInfo::kRoleIdFieldNumber;
const int MsgRunFastGameOverInfo::kMaxScoreFieldNumber;
const int MsgRunFastGameOverInfo::kZhadanCountFieldNumber;
const int MsgRunFastGameOverInfo::kWinCountFieldNumber;
const int MsgRunFastGameOverInfo::kLoseCountFieldNumber;
#endif  // !_MSC_VER

MsgRunFastGameOverInfo::MsgRunFastGameOverInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastGameOverInfo)
}

void MsgRunFastGameOverInfo::InitAsDefaultInstance() {
}

MsgRunFastGameOverInfo::MsgRunFastGameOverInfo(const MsgRunFastGameOverInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastGameOverInfo)
}

void MsgRunFastGameOverInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  max_score_ = GOOGLE_LONGLONG(0);
  zhadan_count_ = 0u;
  win_count_ = 0u;
  lose_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastGameOverInfo::~MsgRunFastGameOverInfo() {
  // @@protoc_insertion_point(destructor:MsgRunFastGameOverInfo)
  SharedDtor();
}

void MsgRunFastGameOverInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRunFastGameOverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastGameOverInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastGameOverInfo_descriptor_;
}

const MsgRunFastGameOverInfo& MsgRunFastGameOverInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastGameOverInfo* MsgRunFastGameOverInfo::default_instance_ = NULL;

MsgRunFastGameOverInfo* MsgRunFastGameOverInfo::New() const {
  return new MsgRunFastGameOverInfo;
}

void MsgRunFastGameOverInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastGameOverInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(role_id_, lose_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastGameOverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastGameOverInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_score;
        break;
      }

      // optional int64 max_score = 2;
      case 2: {
        if (tag == 16) {
         parse_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_score_)));
          set_has_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zhadan_count;
        break;
      }

      // optional uint32 zhadan_count = 3;
      case 3: {
        if (tag == 24) {
         parse_zhadan_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zhadan_count_)));
          set_has_zhadan_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_win_count;
        break;
      }

      // optional uint32 win_count = 4;
      case 4: {
        if (tag == 32) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lose_count;
        break;
      }

      // optional uint32 lose_count = 5;
      case 5: {
        if (tag == 40) {
         parse_lose_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_count_)));
          set_has_lose_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastGameOverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastGameOverInfo)
  return false;
#undef DO_
}

void MsgRunFastGameOverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastGameOverInfo)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional int64 max_score = 2;
  if (has_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_score(), output);
  }

  // optional uint32 zhadan_count = 3;
  if (has_zhadan_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zhadan_count(), output);
  }

  // optional uint32 win_count = 4;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win_count(), output);
  }

  // optional uint32 lose_count = 5;
  if (has_lose_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lose_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastGameOverInfo)
}

::google::protobuf::uint8* MsgRunFastGameOverInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastGameOverInfo)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional int64 max_score = 2;
  if (has_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_score(), target);
  }

  // optional uint32 zhadan_count = 3;
  if (has_zhadan_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zhadan_count(), target);
  }

  // optional uint32 win_count = 4;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win_count(), target);
  }

  // optional uint32 lose_count = 5;
  if (has_lose_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lose_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastGameOverInfo)
  return target;
}

int MsgRunFastGameOverInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int64 max_score = 2;
    if (has_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_score());
    }

    // optional uint32 zhadan_count = 3;
    if (has_zhadan_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zhadan_count());
    }

    // optional uint32 win_count = 4;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional uint32 lose_count = 5;
    if (has_lose_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastGameOverInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastGameOverInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastGameOverInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastGameOverInfo::MergeFrom(const MsgRunFastGameOverInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_max_score()) {
      set_max_score(from.max_score());
    }
    if (from.has_zhadan_count()) {
      set_zhadan_count(from.zhadan_count());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_lose_count()) {
      set_lose_count(from.lose_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastGameOverInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastGameOverInfo::CopyFrom(const MsgRunFastGameOverInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastGameOverInfo::IsInitialized() const {

  return true;
}

void MsgRunFastGameOverInfo::Swap(MsgRunFastGameOverInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(max_score_, other->max_score_);
    std::swap(zhadan_count_, other->zhadan_count_);
    std::swap(win_count_, other->win_count_);
    std::swap(lose_count_, other->lose_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastGameOverInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastGameOverInfo_descriptor_;
  metadata.reflection = MsgRunFastGameOverInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastRoomShowDown::kRoomStateFieldNumber;
const int MsgRunFastRoomShowDown::kStateTimeFieldNumber;
const int MsgRunFastRoomShowDown::kPlayerListFieldNumber;
const int MsgRunFastRoomShowDown::kRoomIdFieldNumber;
const int MsgRunFastRoomShowDown::kGameCountFieldNumber;
const int MsgRunFastRoomShowDown::kTimeFieldNumber;
const int MsgRunFastRoomShowDown::kOverInfoFieldNumber;
const int MsgRunFastRoomShowDown::kIntegralListFieldNumber;
#endif  // !_MSC_VER

MsgRunFastRoomShowDown::MsgRunFastRoomShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastRoomShowDown)
}

void MsgRunFastRoomShowDown::InitAsDefaultInstance() {
}

MsgRunFastRoomShowDown::MsgRunFastRoomShowDown(const MsgRunFastRoomShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastRoomShowDown)
}

void MsgRunFastRoomShowDown::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastRoomShowDown::~MsgRunFastRoomShowDown() {
  // @@protoc_insertion_point(destructor:MsgRunFastRoomShowDown)
  SharedDtor();
}

void MsgRunFastRoomShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRunFastRoomShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastRoomShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastRoomShowDown_descriptor_;
}

const MsgRunFastRoomShowDown& MsgRunFastRoomShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastRoomShowDown* MsgRunFastRoomShowDown::default_instance_ = NULL;

MsgRunFastRoomShowDown* MsgRunFastRoomShowDown::New() const {
  return new MsgRunFastRoomShowDown;
}

void MsgRunFastRoomShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastRoomShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(room_state_, state_time_);
    ZR_(room_id_, time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  over_info_.Clear();
  integral_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastRoomShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastRoomShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TRunFastState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TRunFastState_IsValid(value)) {
            set_room_state(static_cast< ::TRunFastState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgRunFastPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 5;
      case 5: {
        if (tag == 40) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_over_info;
        break;
      }

      // repeated .MsgRunFastGameOverInfo over_info = 7;
      case 7: {
        if (tag == 58) {
         parse_over_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_over_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_over_info;
        if (input->ExpectTag(66)) goto parse_integral_list;
        break;
      }

      // repeated .MsgRunFastIntegralCount integral_list = 8;
      case 8: {
        if (tag == 66) {
         parse_integral_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_integral_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastRoomShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastRoomShowDown)
  return false;
#undef DO_
}

void MsgRunFastRoomShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastRoomShowDown)
  // optional .TRunFastState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgRunFastPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->room_id(), output);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_count(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // repeated .MsgRunFastGameOverInfo over_info = 7;
  for (int i = 0; i < this->over_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->over_info(i), output);
  }

  // repeated .MsgRunFastIntegralCount integral_list = 8;
  for (int i = 0; i < this->integral_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->integral_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastRoomShowDown)
}

::google::protobuf::uint8* MsgRunFastRoomShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastRoomShowDown)
  // optional .TRunFastState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgRunFastPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_count(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // repeated .MsgRunFastGameOverInfo over_info = 7;
  for (int i = 0; i < this->over_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->over_info(i), target);
  }

  // repeated .MsgRunFastIntegralCount integral_list = 8;
  for (int i = 0; i < this->integral_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->integral_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastRoomShowDown)
  return target;
}

int MsgRunFastRoomShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TRunFastState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 5;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .MsgRunFastPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgRunFastGameOverInfo over_info = 7;
  total_size += 1 * this->over_info_size();
  for (int i = 0; i < this->over_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->over_info(i));
  }

  // repeated .MsgRunFastIntegralCount integral_list = 8;
  total_size += 1 * this->integral_list_size();
  for (int i = 0; i < this->integral_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastRoomShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastRoomShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastRoomShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastRoomShowDown::MergeFrom(const MsgRunFastRoomShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  over_info_.MergeFrom(from.over_info_);
  integral_list_.MergeFrom(from.integral_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastRoomShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastRoomShowDown::CopyFrom(const MsgRunFastRoomShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastRoomShowDown::IsInitialized() const {

  return true;
}

void MsgRunFastRoomShowDown::Swap(MsgRunFastRoomShowDown* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(time_, other->time_);
    over_info_.Swap(&other->over_info_);
    integral_list_.Swap(&other->integral_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastRoomShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastRoomShowDown_descriptor_;
  metadata.reflection = MsgRunFastRoomShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRunFastIntegralCount::kRoleidFieldNumber;
const int MsgRunFastIntegralCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgRunFastIntegralCount::MsgRunFastIntegralCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRunFastIntegralCount)
}

void MsgRunFastIntegralCount::InitAsDefaultInstance() {
}

MsgRunFastIntegralCount::MsgRunFastIntegralCount(const MsgRunFastIntegralCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRunFastIntegralCount)
}

void MsgRunFastIntegralCount::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRunFastIntegralCount::~MsgRunFastIntegralCount() {
  // @@protoc_insertion_point(destructor:MsgRunFastIntegralCount)
  SharedDtor();
}

void MsgRunFastIntegralCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRunFastIntegralCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRunFastIntegralCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRunFastIntegralCount_descriptor_;
}

const MsgRunFastIntegralCount& MsgRunFastIntegralCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_2eproto();
  return *default_instance_;
}

MsgRunFastIntegralCount* MsgRunFastIntegralCount::default_instance_ = NULL;

MsgRunFastIntegralCount* MsgRunFastIntegralCount::New() const {
  return new MsgRunFastIntegralCount;
}

void MsgRunFastIntegralCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRunFastIntegralCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRunFastIntegralCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRunFastIntegralCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRunFastIntegralCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRunFastIntegralCount)
  return false;
#undef DO_
}

void MsgRunFastIntegralCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRunFastIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRunFastIntegralCount)
}

::google::protobuf::uint8* MsgRunFastIntegralCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRunFastIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRunFastIntegralCount)
  return target;
}

int MsgRunFastIntegralCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRunFastIntegralCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRunFastIntegralCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRunFastIntegralCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRunFastIntegralCount::MergeFrom(const MsgRunFastIntegralCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRunFastIntegralCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRunFastIntegralCount::CopyFrom(const MsgRunFastIntegralCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRunFastIntegralCount::IsInitialized() const {

  return true;
}

void MsgRunFastIntegralCount::Swap(MsgRunFastIntegralCount* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRunFastIntegralCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRunFastIntegralCount_descriptor_;
  metadata.reflection = MsgRunFastIntegralCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
