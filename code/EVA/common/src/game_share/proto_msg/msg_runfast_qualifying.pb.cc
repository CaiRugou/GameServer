// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_runfast_qualifying.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_runfast_qualifying.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgActionRfQualifying_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgActionRfQualifying_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJoinRfQualifying_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJoinRfQualifying_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRfQualifyingCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRfQualifyingCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRfQualifyingInforState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRfQualifyingInforState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRfQualifyingDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRfQualifyingDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRfQualifyingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRfQualifyingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutoQualifyingJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutoQualifyingJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutoQualifyingStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutoQualifyingStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRankRfQualifying_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRankRfQualifying_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingHistoryScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingHistoryScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingHistorySingleScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingHistorySingleScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingAllHistoryScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingAllHistoryScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingTrustCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingTrustCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingConfigInfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingConfigInfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingShowDownInfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingShowDownInfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingRefreshRoomInfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingRefreshRoomInfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingLoginInfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingLoginInfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingRoomInfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingRoomInfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingFXInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingFXInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingFXRefreshSD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingFXRefreshSD_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingQYRqKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingQYRqKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingQYDisKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingQYDisKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingJNBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingJNBack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enRfQualifyingState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enQualifyingCostType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enRfQualifyingActionOrder_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enQualifyingKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enQualifyingVerifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enQualifyingTabType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enQualifyingResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enRfQualifyingOrderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5frunfast_5fqualifying_2eproto() {
  protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_runfast_qualifying.proto");
  GOOGLE_CHECK(file != NULL);
  MsgActionRfQualifying_descriptor_ = file->message_type(0);
  static const int MsgActionRfQualifying_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionRfQualifying, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionRfQualifying, qualifying_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionRfQualifying, cost_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionRfQualifying, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionRfQualifying, str_code_),
  };
  MsgActionRfQualifying_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgActionRfQualifying_descriptor_,
      MsgActionRfQualifying::default_instance_,
      MsgActionRfQualifying_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionRfQualifying, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionRfQualifying, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgActionRfQualifying));
  MsgJoinRfQualifying_descriptor_ = file->message_type(1);
  static const int MsgJoinRfQualifying_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinRfQualifying, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinRfQualifying, cost_config_id_),
  };
  MsgJoinRfQualifying_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJoinRfQualifying_descriptor_,
      MsgJoinRfQualifying::default_instance_,
      MsgJoinRfQualifying_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinRfQualifying, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJoinRfQualifying, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJoinRfQualifying));
  MsgRfQualifyingCode_descriptor_ = file->message_type(2);
  static const int MsgRfQualifyingCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingCode, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingCode, extra_time_),
  };
  MsgRfQualifyingCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRfQualifyingCode_descriptor_,
      MsgRfQualifyingCode::default_instance_,
      MsgRfQualifyingCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRfQualifyingCode));
  MsgRfQualifyingInforState_descriptor_ = file->message_type(3);
  static const int MsgRfQualifyingInforState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingInforState, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingInforState, qualifying_state_),
  };
  MsgRfQualifyingInforState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRfQualifyingInforState_descriptor_,
      MsgRfQualifyingInforState::default_instance_,
      MsgRfQualifyingInforState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingInforState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingInforState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRfQualifyingInforState));
  MsgRfQualifyingDataList_descriptor_ = file->message_type(4);
  static const int MsgRfQualifyingDataList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingDataList, qualifying_tab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingDataList, qualifyingdata_list_),
  };
  MsgRfQualifyingDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRfQualifyingDataList_descriptor_,
      MsgRfQualifyingDataList::default_instance_,
      MsgRfQualifyingDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRfQualifyingDataList));
  MsgRfQualifyingData_descriptor_ = file->message_type(5);
  static const int MsgRfQualifyingData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, qualifying_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, qualifying_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, qualifying_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, qualifying_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, qualifying_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, qualifying_order_),
  };
  MsgRfQualifyingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRfQualifyingData_descriptor_,
      MsgRfQualifyingData::default_instance_,
      MsgRfQualifyingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRfQualifyingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRfQualifyingData));
  MsgAutoQualifyingJoin_descriptor_ = file->message_type(6);
  static const int MsgAutoQualifyingJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutoQualifyingJoin, qualifying_config_),
  };
  MsgAutoQualifyingJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutoQualifyingJoin_descriptor_,
      MsgAutoQualifyingJoin::default_instance_,
      MsgAutoQualifyingJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutoQualifyingJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutoQualifyingJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutoQualifyingJoin));
  MsgAutoQualifyingStart_descriptor_ = file->message_type(7);
  static const int MsgAutoQualifyingStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutoQualifyingStart, qualifying_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutoQualifyingStart, cost_config_id_),
  };
  MsgAutoQualifyingStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutoQualifyingStart_descriptor_,
      MsgAutoQualifyingStart::default_instance_,
      MsgAutoQualifyingStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutoQualifyingStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutoQualifyingStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutoQualifyingStart));
  MsgRankRfQualifying_descriptor_ = file->message_type(8);
  static const int MsgRankRfQualifying_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankRfQualifying, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankRfQualifying, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankRfQualifying, qualifyingdata_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankRfQualifying, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankRfQualifying, match_stage_),
  };
  MsgRankRfQualifying_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRankRfQualifying_descriptor_,
      MsgRankRfQualifying::default_instance_,
      MsgRankRfQualifying_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankRfQualifying, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankRfQualifying, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRankRfQualifying));
  MsgQualifyingHistoryScore_descriptor_ = file->message_type(9);
  static const int MsgQualifyingHistoryScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistoryScore, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistoryScore, score_),
  };
  MsgQualifyingHistoryScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingHistoryScore_descriptor_,
      MsgQualifyingHistoryScore::default_instance_,
      MsgQualifyingHistoryScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistoryScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistoryScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingHistoryScore));
  MsgQualifyingHistorySingleScore_descriptor_ = file->message_type(10);
  static const int MsgQualifyingHistorySingleScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistorySingleScore, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistorySingleScore, score_list_),
  };
  MsgQualifyingHistorySingleScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingHistorySingleScore_descriptor_,
      MsgQualifyingHistorySingleScore::default_instance_,
      MsgQualifyingHistorySingleScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistorySingleScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingHistorySingleScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingHistorySingleScore));
  MsgQualifyingAllHistoryScore_descriptor_ = file->message_type(11);
  static const int MsgQualifyingAllHistoryScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingAllHistoryScore, room_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingAllHistoryScore, use_time_),
  };
  MsgQualifyingAllHistoryScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingAllHistoryScore_descriptor_,
      MsgQualifyingAllHistoryScore::default_instance_,
      MsgQualifyingAllHistoryScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingAllHistoryScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingAllHistoryScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingAllHistoryScore));
  MsgQualifyingTrustCount_descriptor_ = file->message_type(12);
  static const int MsgQualifyingTrustCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingTrustCount, trust_count_),
  };
  MsgQualifyingTrustCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingTrustCount_descriptor_,
      MsgQualifyingTrustCount::default_instance_,
      MsgQualifyingTrustCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingTrustCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingTrustCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingTrustCount));
  MsgQualifyingConfigInfor_descriptor_ = file->message_type(13);
  static const int MsgQualifyingConfigInfor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingConfigInfor, config_id_),
  };
  MsgQualifyingConfigInfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingConfigInfor_descriptor_,
      MsgQualifyingConfigInfor::default_instance_,
      MsgQualifyingConfigInfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingConfigInfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingConfigInfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingConfigInfor));
  MsgQualifyingShowDownInfor_descriptor_ = file->message_type(14);
  static const int MsgQualifyingShowDownInfor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingShowDownInfor, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingShowDownInfor, room_extra_),
  };
  MsgQualifyingShowDownInfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingShowDownInfor_descriptor_,
      MsgQualifyingShowDownInfor::default_instance_,
      MsgQualifyingShowDownInfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingShowDownInfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingShowDownInfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingShowDownInfor));
  MsgQualifyingRefreshRoomInfor_descriptor_ = file->message_type(15);
  static const int MsgQualifyingRefreshRoomInfor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRefreshRoomInfor, room_extra_),
  };
  MsgQualifyingRefreshRoomInfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingRefreshRoomInfor_descriptor_,
      MsgQualifyingRefreshRoomInfor::default_instance_,
      MsgQualifyingRefreshRoomInfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRefreshRoomInfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRefreshRoomInfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingRefreshRoomInfor));
  MsgQualifyingLoginInfor_descriptor_ = file->message_type(16);
  static const int MsgQualifyingLoginInfor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingLoginInfor, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingLoginInfor, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingLoginInfor, qualifying_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingLoginInfor, player_state_),
  };
  MsgQualifyingLoginInfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingLoginInfor_descriptor_,
      MsgQualifyingLoginInfor::default_instance_,
      MsgQualifyingLoginInfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingLoginInfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingLoginInfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingLoginInfor));
  MsgQualifyingRoomInfor_descriptor_ = file->message_type(17);
  static const int MsgQualifyingRoomInfor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRoomInfor, qualifying_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRoomInfor, use_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRoomInfor, last_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRoomInfor, match_stage_),
  };
  MsgQualifyingRoomInfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingRoomInfor_descriptor_,
      MsgQualifyingRoomInfor::default_instance_,
      MsgQualifyingRoomInfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRoomInfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRoomInfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingRoomInfor));
  MsgQualifyingRequest_descriptor_ = file->message_type(18);
  static const int MsgQualifyingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRequest, qualifying_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRequest, app_name_),
  };
  MsgQualifyingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingRequest_descriptor_,
      MsgQualifyingRequest::default_instance_,
      MsgQualifyingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingRequest));
  MsgQualifyingFXInfo_descriptor_ = file->message_type(19);
  static const int MsgQualifyingFXInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXInfo, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXInfo, game_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXInfo, current_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXInfo, tatal_rank_),
  };
  MsgQualifyingFXInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingFXInfo_descriptor_,
      MsgQualifyingFXInfo::default_instance_,
      MsgQualifyingFXInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingFXInfo));
  MsgQualifyingFXRefreshSD_descriptor_ = file->message_type(20);
  static const int MsgQualifyingFXRefreshSD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXRefreshSD, cout_list_),
  };
  MsgQualifyingFXRefreshSD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingFXRefreshSD_descriptor_,
      MsgQualifyingFXRefreshSD::default_instance_,
      MsgQualifyingFXRefreshSD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXRefreshSD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingFXRefreshSD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingFXRefreshSD));
  MsgQualifyingQYRqKey_descriptor_ = file->message_type(21);
  static const int MsgQualifyingQYRqKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYRqKey, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYRqKey, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYRqKey, service_id_),
  };
  MsgQualifyingQYRqKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingQYRqKey_descriptor_,
      MsgQualifyingQYRqKey::default_instance_,
      MsgQualifyingQYRqKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYRqKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYRqKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingQYRqKey));
  MsgQualifyingQYDisKey_descriptor_ = file->message_type(22);
  static const int MsgQualifyingQYDisKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYDisKey, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYDisKey, own_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYDisKey, up_key_),
  };
  MsgQualifyingQYDisKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingQYDisKey_descriptor_,
      MsgQualifyingQYDisKey::default_instance_,
      MsgQualifyingQYDisKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYDisKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingQYDisKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingQYDisKey));
  MsgQualifyingJNBack_descriptor_ = file->message_type(23);
  static const int MsgQualifyingJNBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingJNBack, invite_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingJNBack, role_id_),
  };
  MsgQualifyingJNBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingJNBack_descriptor_,
      MsgQualifyingJNBack::default_instance_,
      MsgQualifyingJNBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingJNBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingJNBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingJNBack));
  enRfQualifyingState_descriptor_ = file->enum_type(0);
  enQualifyingCostType_descriptor_ = file->enum_type(1);
  enRfQualifyingActionOrder_descriptor_ = file->enum_type(2);
  enQualifyingKind_descriptor_ = file->enum_type(3);
  enQualifyingVerifyType_descriptor_ = file->enum_type(4);
  enQualifyingTabType_descriptor_ = file->enum_type(5);
  enQualifyingResult_descriptor_ = file->enum_type(6);
  enRfQualifyingOrderType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5frunfast_5fqualifying_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgActionRfQualifying_descriptor_, &MsgActionRfQualifying::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJoinRfQualifying_descriptor_, &MsgJoinRfQualifying::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRfQualifyingCode_descriptor_, &MsgRfQualifyingCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRfQualifyingInforState_descriptor_, &MsgRfQualifyingInforState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRfQualifyingDataList_descriptor_, &MsgRfQualifyingDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRfQualifyingData_descriptor_, &MsgRfQualifyingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutoQualifyingJoin_descriptor_, &MsgAutoQualifyingJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutoQualifyingStart_descriptor_, &MsgAutoQualifyingStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRankRfQualifying_descriptor_, &MsgRankRfQualifying::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingHistoryScore_descriptor_, &MsgQualifyingHistoryScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingHistorySingleScore_descriptor_, &MsgQualifyingHistorySingleScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingAllHistoryScore_descriptor_, &MsgQualifyingAllHistoryScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingTrustCount_descriptor_, &MsgQualifyingTrustCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingConfigInfor_descriptor_, &MsgQualifyingConfigInfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingShowDownInfor_descriptor_, &MsgQualifyingShowDownInfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingRefreshRoomInfor_descriptor_, &MsgQualifyingRefreshRoomInfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingLoginInfor_descriptor_, &MsgQualifyingLoginInfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingRoomInfor_descriptor_, &MsgQualifyingRoomInfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingRequest_descriptor_, &MsgQualifyingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingFXInfo_descriptor_, &MsgQualifyingFXInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingFXRefreshSD_descriptor_, &MsgQualifyingFXRefreshSD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingQYRqKey_descriptor_, &MsgQualifyingQYRqKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingQYDisKey_descriptor_, &MsgQualifyingQYDisKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingJNBack_descriptor_, &MsgQualifyingJNBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5frunfast_5fqualifying_2eproto() {
  delete MsgActionRfQualifying::default_instance_;
  delete MsgActionRfQualifying_reflection_;
  delete MsgJoinRfQualifying::default_instance_;
  delete MsgJoinRfQualifying_reflection_;
  delete MsgRfQualifyingCode::default_instance_;
  delete MsgRfQualifyingCode_reflection_;
  delete MsgRfQualifyingInforState::default_instance_;
  delete MsgRfQualifyingInforState_reflection_;
  delete MsgRfQualifyingDataList::default_instance_;
  delete MsgRfQualifyingDataList_reflection_;
  delete MsgRfQualifyingData::default_instance_;
  delete MsgRfQualifyingData_reflection_;
  delete MsgAutoQualifyingJoin::default_instance_;
  delete MsgAutoQualifyingJoin_reflection_;
  delete MsgAutoQualifyingStart::default_instance_;
  delete MsgAutoQualifyingStart_reflection_;
  delete MsgRankRfQualifying::default_instance_;
  delete MsgRankRfQualifying_reflection_;
  delete MsgQualifyingHistoryScore::default_instance_;
  delete MsgQualifyingHistoryScore_reflection_;
  delete MsgQualifyingHistorySingleScore::default_instance_;
  delete MsgQualifyingHistorySingleScore_reflection_;
  delete MsgQualifyingAllHistoryScore::default_instance_;
  delete MsgQualifyingAllHistoryScore_reflection_;
  delete MsgQualifyingTrustCount::default_instance_;
  delete MsgQualifyingTrustCount_reflection_;
  delete MsgQualifyingConfigInfor::default_instance_;
  delete MsgQualifyingConfigInfor_reflection_;
  delete MsgQualifyingShowDownInfor::default_instance_;
  delete MsgQualifyingShowDownInfor_reflection_;
  delete MsgQualifyingRefreshRoomInfor::default_instance_;
  delete MsgQualifyingRefreshRoomInfor_reflection_;
  delete MsgQualifyingLoginInfor::default_instance_;
  delete MsgQualifyingLoginInfor_reflection_;
  delete MsgQualifyingRoomInfor::default_instance_;
  delete MsgQualifyingRoomInfor_reflection_;
  delete MsgQualifyingRequest::default_instance_;
  delete MsgQualifyingRequest_reflection_;
  delete MsgQualifyingFXInfo::default_instance_;
  delete MsgQualifyingFXInfo_reflection_;
  delete MsgQualifyingFXRefreshSD::default_instance_;
  delete MsgQualifyingFXRefreshSD_reflection_;
  delete MsgQualifyingQYRqKey::default_instance_;
  delete MsgQualifyingQYRqKey_reflection_;
  delete MsgQualifyingQYDisKey::default_instance_;
  delete MsgQualifyingQYDisKey_reflection_;
  delete MsgQualifyingJNBack::default_instance_;
  delete MsgQualifyingJNBack_reflection_;
}

void protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034msg_runfast_qualifying.proto\"\202\001\n\025MsgAc"
    "tionRfQualifying\022\021\n\tconfig_id\030\001 \001(\r\022\027\n\017q"
    "ualifying_time\030\002 \001(\r\022\026\n\016cost_config_id\030\003"
    " \001(\r\022\023\n\013invite_code\030\004 \001(\004\022\020\n\010str_code\030\005 "
    "\001(\t\"B\n\023MsgJoinRfQualifying\022\023\n\013invite_cod"
    "e\030\001 \001(\004\022\026\n\016cost_config_id\030\002 \001(\r\">\n\023MsgRf"
    "QualifyingCode\022\023\n\013invite_code\030\001 \001(\004\022\022\n\ne"
    "xtra_time\030\002 \001(\r\"J\n\031MsgRfQualifyingInforS"
    "tate\022\023\n\013invite_code\030\001 \001(\004\022\030\n\020qualifying_"
    "state\030\002 \001(\r\"d\n\027MsgRfQualifyingDataList\022\026"
    "\n\016qualifying_tab\030\001 \001(\r\0221\n\023qualifyingData"
    "_list\030\002 \003(\0132\024.MsgRfQualifyingData\"\261\001\n\023Ms"
    "gRfQualifyingData\022\031\n\021qualifying_config\030\001"
    " \001(\r\022\027\n\017qualifying_time\030\002 \001(\r\022\031\n\021qualify"
    "ing_number\030\003 \001(\r\022\027\n\017qualifying_code\030\004 \001("
    "\004\022\030\n\020qualifying_state\030\005 \001(\r\022\030\n\020qualifyin"
    "g_order\030\006 \001(\r\"2\n\025MsgAutoQualifyingJoin\022\031"
    "\n\021qualifying_config\030\001 \001(\r\"K\n\026MsgAutoQual"
    "ifyingStart\022\031\n\021qualifying_config\030\001 \001(\r\022\026"
    "\n\016cost_config_id\030\002 \001(\r\"\200\001\n\023MsgRankRfQual"
    "ifying\022\021\n\tconfig_id\030\001 \001(\r\022\014\n\004rank\030\002 \001(\r\022"
    "\035\n\025qualifyingData_result\030\003 \001(\r\022\024\n\014total_"
    "number\030\004 \001(\r\022\023\n\013match_stage\030\005 \001(\r\">\n\031Msg"
    "QualifyingHistoryScore\022\022\n\ngame_count\030\001 \001"
    "(\r\022\r\n\005score\030\002 \001(\003\"b\n\037MsgQualifyingHistor"
    "ySingleScore\022\017\n\007role_id\030\001 \001(\004\022.\n\nscore_l"
    "ist\030\002 \003(\0132\032.MsgQualifyingHistoryScore\"f\n"
    "\034MsgQualifyingAllHistoryScore\0224\n\nroom_sc"
    "ore\030\001 \003(\0132 .MsgQualifyingHistorySingleSc"
    "ore\022\020\n\010use_time\030\002 \001(\r\".\n\027MsgQualifyingTr"
    "ustCount\022\023\n\013trust_count\030\001 \001(\r\"-\n\030MsgQual"
    "ifyingConfigInfor\022\021\n\tconfig_id\030\001 \001(\r\"E\n\032"
    "MsgQualifyingShowDownInfor\022\023\n\013total_scor"
    "e\030\001 \001(\003\022\022\n\nroom_extra\030\002 \001(\r\"3\n\035MsgQualif"
    "yingRefreshRoomInfor\022\022\n\nroom_extra\030\001 \001(\r"
    "\"p\n\027MsgQualifyingLoginInfor\022\023\n\013invite_co"
    "de\030\001 \001(\004\022\021\n\tconfig_id\030\002 \001(\r\022\027\n\017qualifyin"
    "g_time\030\003 \001(\r\022\024\n\014player_state\030\004 \001(\r\"m\n\026Ms"
    "gQualifyingRoomInfor\022\031\n\021qualifying_confi"
    "g\030\001 \001(\r\022\020\n\010use_time\030\002 \001(\r\022\021\n\tlast_rank\030\003"
    " \001(\r\022\023\n\013match_stage\030\004 \001(\r\"A\n\024MsgQualifyi"
    "ngRequest\022\027\n\017qualifying_type\030\001 \001(\r\022\020\n\010ap"
    "p_name\030\002 \001(\t\"g\n\023MsgQualifyingFXInfo\022\022\n\ng"
    "ame_count\030\001 \001(\r\022\022\n\ngame_score\030\002 \001(\003\022\024\n\014c"
    "urrent_rank\030\003 \001(\r\022\022\n\ntatal_rank\030\004 \001(\r\"C\n"
    "\030MsgQualifyingFXRefreshSD\022\'\n\tcout_list\030\001"
    " \003(\0132\024.MsgQualifyingFXInfo\"R\n\024MsgQualify"
    "ingQYRqKey\022\023\n\013invite_code\030\001 \001(\004\022\021\n\tconfi"
    "g_id\030\002 \001(\r\022\022\n\nservice_id\030\003 \001(\r\"M\n\025MsgQua"
    "lifyingQYDisKey\022\023\n\013invite_code\030\001 \001(\004\022\017\n\007"
    "own_key\030\002 \001(\t\022\016\n\006up_key\030\003 \001(\t\";\n\023MsgQual"
    "ifyingJNBack\022\023\n\013invite_code\030\001 \001(\004\022\017\n\007rol"
    "e_id\030\002 \001(\004*\241\002\n\023enRfQualifyingState\022\030\n\024St"
    "ate_QualifyingNone\020\000\022\036\n\032State_Qualifying"
    "WaitReview\020\001\022\032\n\026State_QualifyingCancel\020\002"
    "\022\032\n\026State_QualifyingAction\020\003\022\031\n\025State_Qu"
    "alifyingFinal\020\004\022\031\n\025State_QualifyingMatch"
    "\020\005\022\032\n\026State_QualifyingGaming\020\006\022\030\n\024State_"
    "QualifyingOver\020\007\022\024\n\020State_NoneReview\020\010\022\026"
    "\n\022State_ActiveCancel\020\t*\230\001\n\024enQualifyingC"
    "ostType\022\027\n\023en_QualifyingCostHZ\020\000\022\031\n\025en_Q"
    "ualifyingCostGold\020\001\022\031\n\025en_QualifyingCost"
    "Item\020\002\022\030\n\024en_QualfiyingCostZYG\020\003\022\027\n\023en_Q"
    "ualfiyingCostJF\020\004*\231\001\n\031enRfQualifyingActi"
    "onOrder\022\037\n\033en_QualifyingApplyAction_Ok\020\000"
    "\022#\n\037en_QualifyingApplyAction_Cancel\020\001\022\030\n"
    "\024en_QualifyingJoin_Ok\020\002\022\034\n\030en_Qualifying"
    "Join_Cancel\020\003*\242\001\n\020enQualifyingKind\022\031\n\025en"
    "_QualifyingKindNone\020\000\022\033\n\027en_QualifyingKi"
    "ndFriend\020\001\022\036\n\032en_QualifyingCommonSpecial"
    "\020\002\022\033\n\027en_QualifyingCommonLoop\020\003\022\031\n\025en_Qu"
    "alifyingCompound\020\004*P\n\026enQualifyingVerify"
    "Type\022\033\n\027en_QualifyingVerifyNone\020\000\022\031\n\025en_"
    "QualifyingVerifyQy\020\001*h\n\023enQualifyingTabT"
    "ype\022\030\n\024en_QualifyingTabNone\020\000\022\032\n\026en_Qual"
    "ifyingTabFriend\020\001\022\033\n\027en_QualifyingTabZWM"
    "atch\020\002*:\n\022enQualifyingResult\022\023\n\017Result_O"
    "bselute\020\001\022\017\n\013Result_Over\020\002*\214\001\n\027enRfQuali"
    "fyingOrderType\022\032\n\026en_QualifyingType_None"
    "\020\000\022\034\n\030en_QualifyingType_Action\020\001\022\032\n\026en_Q"
    "ualifyingType_Join\020\002\022\033\n\027en_QualifyingTyp"
    "e_Nomal\020\003", 3249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_runfast_qualifying.proto", &protobuf_RegisterTypes);
  MsgActionRfQualifying::default_instance_ = new MsgActionRfQualifying();
  MsgJoinRfQualifying::default_instance_ = new MsgJoinRfQualifying();
  MsgRfQualifyingCode::default_instance_ = new MsgRfQualifyingCode();
  MsgRfQualifyingInforState::default_instance_ = new MsgRfQualifyingInforState();
  MsgRfQualifyingDataList::default_instance_ = new MsgRfQualifyingDataList();
  MsgRfQualifyingData::default_instance_ = new MsgRfQualifyingData();
  MsgAutoQualifyingJoin::default_instance_ = new MsgAutoQualifyingJoin();
  MsgAutoQualifyingStart::default_instance_ = new MsgAutoQualifyingStart();
  MsgRankRfQualifying::default_instance_ = new MsgRankRfQualifying();
  MsgQualifyingHistoryScore::default_instance_ = new MsgQualifyingHistoryScore();
  MsgQualifyingHistorySingleScore::default_instance_ = new MsgQualifyingHistorySingleScore();
  MsgQualifyingAllHistoryScore::default_instance_ = new MsgQualifyingAllHistoryScore();
  MsgQualifyingTrustCount::default_instance_ = new MsgQualifyingTrustCount();
  MsgQualifyingConfigInfor::default_instance_ = new MsgQualifyingConfigInfor();
  MsgQualifyingShowDownInfor::default_instance_ = new MsgQualifyingShowDownInfor();
  MsgQualifyingRefreshRoomInfor::default_instance_ = new MsgQualifyingRefreshRoomInfor();
  MsgQualifyingLoginInfor::default_instance_ = new MsgQualifyingLoginInfor();
  MsgQualifyingRoomInfor::default_instance_ = new MsgQualifyingRoomInfor();
  MsgQualifyingRequest::default_instance_ = new MsgQualifyingRequest();
  MsgQualifyingFXInfo::default_instance_ = new MsgQualifyingFXInfo();
  MsgQualifyingFXRefreshSD::default_instance_ = new MsgQualifyingFXRefreshSD();
  MsgQualifyingQYRqKey::default_instance_ = new MsgQualifyingQYRqKey();
  MsgQualifyingQYDisKey::default_instance_ = new MsgQualifyingQYDisKey();
  MsgQualifyingJNBack::default_instance_ = new MsgQualifyingJNBack();
  MsgActionRfQualifying::default_instance_->InitAsDefaultInstance();
  MsgJoinRfQualifying::default_instance_->InitAsDefaultInstance();
  MsgRfQualifyingCode::default_instance_->InitAsDefaultInstance();
  MsgRfQualifyingInforState::default_instance_->InitAsDefaultInstance();
  MsgRfQualifyingDataList::default_instance_->InitAsDefaultInstance();
  MsgRfQualifyingData::default_instance_->InitAsDefaultInstance();
  MsgAutoQualifyingJoin::default_instance_->InitAsDefaultInstance();
  MsgAutoQualifyingStart::default_instance_->InitAsDefaultInstance();
  MsgRankRfQualifying::default_instance_->InitAsDefaultInstance();
  MsgQualifyingHistoryScore::default_instance_->InitAsDefaultInstance();
  MsgQualifyingHistorySingleScore::default_instance_->InitAsDefaultInstance();
  MsgQualifyingAllHistoryScore::default_instance_->InitAsDefaultInstance();
  MsgQualifyingTrustCount::default_instance_->InitAsDefaultInstance();
  MsgQualifyingConfigInfor::default_instance_->InitAsDefaultInstance();
  MsgQualifyingShowDownInfor::default_instance_->InitAsDefaultInstance();
  MsgQualifyingRefreshRoomInfor::default_instance_->InitAsDefaultInstance();
  MsgQualifyingLoginInfor::default_instance_->InitAsDefaultInstance();
  MsgQualifyingRoomInfor::default_instance_->InitAsDefaultInstance();
  MsgQualifyingRequest::default_instance_->InitAsDefaultInstance();
  MsgQualifyingFXInfo::default_instance_->InitAsDefaultInstance();
  MsgQualifyingFXRefreshSD::default_instance_->InitAsDefaultInstance();
  MsgQualifyingQYRqKey::default_instance_->InitAsDefaultInstance();
  MsgQualifyingQYDisKey::default_instance_->InitAsDefaultInstance();
  MsgQualifyingJNBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5frunfast_5fqualifying_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5frunfast_5fqualifying_2eproto {
  StaticDescriptorInitializer_msg_5frunfast_5fqualifying_2eproto() {
    protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  }
} static_descriptor_initializer_msg_5frunfast_5fqualifying_2eproto_;
const ::google::protobuf::EnumDescriptor* enRfQualifyingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enRfQualifyingState_descriptor_;
}
bool enRfQualifyingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enQualifyingCostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enQualifyingCostType_descriptor_;
}
bool enQualifyingCostType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enRfQualifyingActionOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enRfQualifyingActionOrder_descriptor_;
}
bool enRfQualifyingActionOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enQualifyingKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enQualifyingKind_descriptor_;
}
bool enQualifyingKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enQualifyingVerifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enQualifyingVerifyType_descriptor_;
}
bool enQualifyingVerifyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enQualifyingTabType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enQualifyingTabType_descriptor_;
}
bool enQualifyingTabType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enQualifyingResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enQualifyingResult_descriptor_;
}
bool enQualifyingResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enRfQualifyingOrderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enRfQualifyingOrderType_descriptor_;
}
bool enRfQualifyingOrderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgActionRfQualifying::kConfigIdFieldNumber;
const int MsgActionRfQualifying::kQualifyingTimeFieldNumber;
const int MsgActionRfQualifying::kCostConfigIdFieldNumber;
const int MsgActionRfQualifying::kInviteCodeFieldNumber;
const int MsgActionRfQualifying::kStrCodeFieldNumber;
#endif  // !_MSC_VER

MsgActionRfQualifying::MsgActionRfQualifying()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgActionRfQualifying)
}

void MsgActionRfQualifying::InitAsDefaultInstance() {
}

MsgActionRfQualifying::MsgActionRfQualifying(const MsgActionRfQualifying& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgActionRfQualifying)
}

void MsgActionRfQualifying::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  config_id_ = 0u;
  qualifying_time_ = 0u;
  cost_config_id_ = 0u;
  invite_code_ = GOOGLE_ULONGLONG(0);
  str_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgActionRfQualifying::~MsgActionRfQualifying() {
  // @@protoc_insertion_point(destructor:MsgActionRfQualifying)
  SharedDtor();
}

void MsgActionRfQualifying::SharedDtor() {
  if (str_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_code_;
  }
  if (this != default_instance_) {
  }
}

void MsgActionRfQualifying::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgActionRfQualifying::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgActionRfQualifying_descriptor_;
}

const MsgActionRfQualifying& MsgActionRfQualifying::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgActionRfQualifying* MsgActionRfQualifying::default_instance_ = NULL;

MsgActionRfQualifying* MsgActionRfQualifying::New() const {
  return new MsgActionRfQualifying;
}

void MsgActionRfQualifying::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgActionRfQualifying*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(config_id_, invite_code_);
    cost_config_id_ = 0u;
    if (has_str_code()) {
      if (str_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_code_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgActionRfQualifying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgActionRfQualifying)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qualifying_time;
        break;
      }

      // optional uint32 qualifying_time = 2;
      case 2: {
        if (tag == 16) {
         parse_qualifying_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_time_)));
          set_has_qualifying_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost_config_id;
        break;
      }

      // optional uint32 cost_config_id = 3;
      case 3: {
        if (tag == 24) {
         parse_cost_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_config_id_)));
          set_has_cost_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_invite_code;
        break;
      }

      // optional uint64 invite_code = 4;
      case 4: {
        if (tag == 32) {
         parse_invite_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_str_code;
        break;
      }

      // optional string str_code = 5;
      case 5: {
        if (tag == 42) {
         parse_str_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_code().data(), this->str_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgActionRfQualifying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgActionRfQualifying)
  return false;
#undef DO_
}

void MsgActionRfQualifying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgActionRfQualifying)
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_id(), output);
  }

  // optional uint32 qualifying_time = 2;
  if (has_qualifying_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qualifying_time(), output);
  }

  // optional uint32 cost_config_id = 3;
  if (has_cost_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_config_id(), output);
  }

  // optional uint64 invite_code = 4;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->invite_code(), output);
  }

  // optional string str_code = 5;
  if (has_str_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_code().data(), this->str_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->str_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgActionRfQualifying)
}

::google::protobuf::uint8* MsgActionRfQualifying::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgActionRfQualifying)
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_id(), target);
  }

  // optional uint32 qualifying_time = 2;
  if (has_qualifying_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qualifying_time(), target);
  }

  // optional uint32 cost_config_id = 3;
  if (has_cost_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_config_id(), target);
  }

  // optional uint64 invite_code = 4;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->invite_code(), target);
  }

  // optional string str_code = 5;
  if (has_str_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_code().data(), this->str_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgActionRfQualifying)
  return target;
}

int MsgActionRfQualifying::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional uint32 qualifying_time = 2;
    if (has_qualifying_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_time());
    }

    // optional uint32 cost_config_id = 3;
    if (has_cost_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_config_id());
    }

    // optional uint64 invite_code = 4;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional string str_code = 5;
    if (has_str_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgActionRfQualifying::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgActionRfQualifying* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgActionRfQualifying*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgActionRfQualifying::MergeFrom(const MsgActionRfQualifying& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_qualifying_time()) {
      set_qualifying_time(from.qualifying_time());
    }
    if (from.has_cost_config_id()) {
      set_cost_config_id(from.cost_config_id());
    }
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_str_code()) {
      set_str_code(from.str_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgActionRfQualifying::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActionRfQualifying::CopyFrom(const MsgActionRfQualifying& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActionRfQualifying::IsInitialized() const {

  return true;
}

void MsgActionRfQualifying::Swap(MsgActionRfQualifying* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(qualifying_time_, other->qualifying_time_);
    std::swap(cost_config_id_, other->cost_config_id_);
    std::swap(invite_code_, other->invite_code_);
    std::swap(str_code_, other->str_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgActionRfQualifying::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgActionRfQualifying_descriptor_;
  metadata.reflection = MsgActionRfQualifying_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJoinRfQualifying::kInviteCodeFieldNumber;
const int MsgJoinRfQualifying::kCostConfigIdFieldNumber;
#endif  // !_MSC_VER

MsgJoinRfQualifying::MsgJoinRfQualifying()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgJoinRfQualifying)
}

void MsgJoinRfQualifying::InitAsDefaultInstance() {
}

MsgJoinRfQualifying::MsgJoinRfQualifying(const MsgJoinRfQualifying& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgJoinRfQualifying)
}

void MsgJoinRfQualifying::SharedCtor() {
  _cached_size_ = 0;
  invite_code_ = GOOGLE_ULONGLONG(0);
  cost_config_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJoinRfQualifying::~MsgJoinRfQualifying() {
  // @@protoc_insertion_point(destructor:MsgJoinRfQualifying)
  SharedDtor();
}

void MsgJoinRfQualifying::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgJoinRfQualifying::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJoinRfQualifying::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJoinRfQualifying_descriptor_;
}

const MsgJoinRfQualifying& MsgJoinRfQualifying::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgJoinRfQualifying* MsgJoinRfQualifying::default_instance_ = NULL;

MsgJoinRfQualifying* MsgJoinRfQualifying::New() const {
  return new MsgJoinRfQualifying;
}

void MsgJoinRfQualifying::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgJoinRfQualifying*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invite_code_, cost_config_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJoinRfQualifying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgJoinRfQualifying)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost_config_id;
        break;
      }

      // optional uint32 cost_config_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cost_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_config_id_)));
          set_has_cost_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgJoinRfQualifying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgJoinRfQualifying)
  return false;
#undef DO_
}

void MsgJoinRfQualifying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgJoinRfQualifying)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_code(), output);
  }

  // optional uint32 cost_config_id = 2;
  if (has_cost_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgJoinRfQualifying)
}

::google::protobuf::uint8* MsgJoinRfQualifying::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgJoinRfQualifying)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_code(), target);
  }

  // optional uint32 cost_config_id = 2;
  if (has_cost_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgJoinRfQualifying)
  return target;
}

int MsgJoinRfQualifying::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional uint32 cost_config_id = 2;
    if (has_cost_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJoinRfQualifying::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJoinRfQualifying* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJoinRfQualifying*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJoinRfQualifying::MergeFrom(const MsgJoinRfQualifying& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_cost_config_id()) {
      set_cost_config_id(from.cost_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJoinRfQualifying::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJoinRfQualifying::CopyFrom(const MsgJoinRfQualifying& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJoinRfQualifying::IsInitialized() const {

  return true;
}

void MsgJoinRfQualifying::Swap(MsgJoinRfQualifying* other) {
  if (other != this) {
    std::swap(invite_code_, other->invite_code_);
    std::swap(cost_config_id_, other->cost_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJoinRfQualifying::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJoinRfQualifying_descriptor_;
  metadata.reflection = MsgJoinRfQualifying_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRfQualifyingCode::kInviteCodeFieldNumber;
const int MsgRfQualifyingCode::kExtraTimeFieldNumber;
#endif  // !_MSC_VER

MsgRfQualifyingCode::MsgRfQualifyingCode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRfQualifyingCode)
}

void MsgRfQualifyingCode::InitAsDefaultInstance() {
}

MsgRfQualifyingCode::MsgRfQualifyingCode(const MsgRfQualifyingCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRfQualifyingCode)
}

void MsgRfQualifyingCode::SharedCtor() {
  _cached_size_ = 0;
  invite_code_ = GOOGLE_ULONGLONG(0);
  extra_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRfQualifyingCode::~MsgRfQualifyingCode() {
  // @@protoc_insertion_point(destructor:MsgRfQualifyingCode)
  SharedDtor();
}

void MsgRfQualifyingCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRfQualifyingCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRfQualifyingCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRfQualifyingCode_descriptor_;
}

const MsgRfQualifyingCode& MsgRfQualifyingCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgRfQualifyingCode* MsgRfQualifyingCode::default_instance_ = NULL;

MsgRfQualifyingCode* MsgRfQualifyingCode::New() const {
  return new MsgRfQualifyingCode;
}

void MsgRfQualifyingCode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRfQualifyingCode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invite_code_, extra_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRfQualifyingCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRfQualifyingCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_extra_time;
        break;
      }

      // optional uint32 extra_time = 2;
      case 2: {
        if (tag == 16) {
         parse_extra_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_time_)));
          set_has_extra_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRfQualifyingCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRfQualifyingCode)
  return false;
#undef DO_
}

void MsgRfQualifyingCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRfQualifyingCode)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_code(), output);
  }

  // optional uint32 extra_time = 2;
  if (has_extra_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->extra_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRfQualifyingCode)
}

::google::protobuf::uint8* MsgRfQualifyingCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRfQualifyingCode)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_code(), target);
  }

  // optional uint32 extra_time = 2;
  if (has_extra_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->extra_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRfQualifyingCode)
  return target;
}

int MsgRfQualifyingCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional uint32 extra_time = 2;
    if (has_extra_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRfQualifyingCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRfQualifyingCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRfQualifyingCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRfQualifyingCode::MergeFrom(const MsgRfQualifyingCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_extra_time()) {
      set_extra_time(from.extra_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRfQualifyingCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRfQualifyingCode::CopyFrom(const MsgRfQualifyingCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRfQualifyingCode::IsInitialized() const {

  return true;
}

void MsgRfQualifyingCode::Swap(MsgRfQualifyingCode* other) {
  if (other != this) {
    std::swap(invite_code_, other->invite_code_);
    std::swap(extra_time_, other->extra_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRfQualifyingCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRfQualifyingCode_descriptor_;
  metadata.reflection = MsgRfQualifyingCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRfQualifyingInforState::kInviteCodeFieldNumber;
const int MsgRfQualifyingInforState::kQualifyingStateFieldNumber;
#endif  // !_MSC_VER

MsgRfQualifyingInforState::MsgRfQualifyingInforState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRfQualifyingInforState)
}

void MsgRfQualifyingInforState::InitAsDefaultInstance() {
}

MsgRfQualifyingInforState::MsgRfQualifyingInforState(const MsgRfQualifyingInforState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRfQualifyingInforState)
}

void MsgRfQualifyingInforState::SharedCtor() {
  _cached_size_ = 0;
  invite_code_ = GOOGLE_ULONGLONG(0);
  qualifying_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRfQualifyingInforState::~MsgRfQualifyingInforState() {
  // @@protoc_insertion_point(destructor:MsgRfQualifyingInforState)
  SharedDtor();
}

void MsgRfQualifyingInforState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRfQualifyingInforState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRfQualifyingInforState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRfQualifyingInforState_descriptor_;
}

const MsgRfQualifyingInforState& MsgRfQualifyingInforState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgRfQualifyingInforState* MsgRfQualifyingInforState::default_instance_ = NULL;

MsgRfQualifyingInforState* MsgRfQualifyingInforState::New() const {
  return new MsgRfQualifyingInforState;
}

void MsgRfQualifyingInforState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRfQualifyingInforState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invite_code_, qualifying_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRfQualifyingInforState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRfQualifyingInforState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qualifying_state;
        break;
      }

      // optional uint32 qualifying_state = 2;
      case 2: {
        if (tag == 16) {
         parse_qualifying_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_state_)));
          set_has_qualifying_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRfQualifyingInforState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRfQualifyingInforState)
  return false;
#undef DO_
}

void MsgRfQualifyingInforState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRfQualifyingInforState)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_code(), output);
  }

  // optional uint32 qualifying_state = 2;
  if (has_qualifying_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qualifying_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRfQualifyingInforState)
}

::google::protobuf::uint8* MsgRfQualifyingInforState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRfQualifyingInforState)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_code(), target);
  }

  // optional uint32 qualifying_state = 2;
  if (has_qualifying_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qualifying_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRfQualifyingInforState)
  return target;
}

int MsgRfQualifyingInforState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional uint32 qualifying_state = 2;
    if (has_qualifying_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRfQualifyingInforState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRfQualifyingInforState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRfQualifyingInforState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRfQualifyingInforState::MergeFrom(const MsgRfQualifyingInforState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_qualifying_state()) {
      set_qualifying_state(from.qualifying_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRfQualifyingInforState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRfQualifyingInforState::CopyFrom(const MsgRfQualifyingInforState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRfQualifyingInforState::IsInitialized() const {

  return true;
}

void MsgRfQualifyingInforState::Swap(MsgRfQualifyingInforState* other) {
  if (other != this) {
    std::swap(invite_code_, other->invite_code_);
    std::swap(qualifying_state_, other->qualifying_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRfQualifyingInforState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRfQualifyingInforState_descriptor_;
  metadata.reflection = MsgRfQualifyingInforState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRfQualifyingDataList::kQualifyingTabFieldNumber;
const int MsgRfQualifyingDataList::kQualifyingDataListFieldNumber;
#endif  // !_MSC_VER

MsgRfQualifyingDataList::MsgRfQualifyingDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRfQualifyingDataList)
}

void MsgRfQualifyingDataList::InitAsDefaultInstance() {
}

MsgRfQualifyingDataList::MsgRfQualifyingDataList(const MsgRfQualifyingDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRfQualifyingDataList)
}

void MsgRfQualifyingDataList::SharedCtor() {
  _cached_size_ = 0;
  qualifying_tab_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRfQualifyingDataList::~MsgRfQualifyingDataList() {
  // @@protoc_insertion_point(destructor:MsgRfQualifyingDataList)
  SharedDtor();
}

void MsgRfQualifyingDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRfQualifyingDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRfQualifyingDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRfQualifyingDataList_descriptor_;
}

const MsgRfQualifyingDataList& MsgRfQualifyingDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgRfQualifyingDataList* MsgRfQualifyingDataList::default_instance_ = NULL;

MsgRfQualifyingDataList* MsgRfQualifyingDataList::New() const {
  return new MsgRfQualifyingDataList;
}

void MsgRfQualifyingDataList::Clear() {
  qualifying_tab_ = 0u;
  qualifyingdata_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRfQualifyingDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRfQualifyingDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 qualifying_tab = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_tab_)));
          set_has_qualifying_tab();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qualifyingData_list;
        break;
      }

      // repeated .MsgRfQualifyingData qualifyingData_list = 2;
      case 2: {
        if (tag == 18) {
         parse_qualifyingData_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qualifyingdata_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qualifyingData_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRfQualifyingDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRfQualifyingDataList)
  return false;
#undef DO_
}

void MsgRfQualifyingDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRfQualifyingDataList)
  // optional uint32 qualifying_tab = 1;
  if (has_qualifying_tab()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qualifying_tab(), output);
  }

  // repeated .MsgRfQualifyingData qualifyingData_list = 2;
  for (int i = 0; i < this->qualifyingdata_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qualifyingdata_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRfQualifyingDataList)
}

::google::protobuf::uint8* MsgRfQualifyingDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRfQualifyingDataList)
  // optional uint32 qualifying_tab = 1;
  if (has_qualifying_tab()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qualifying_tab(), target);
  }

  // repeated .MsgRfQualifyingData qualifyingData_list = 2;
  for (int i = 0; i < this->qualifyingdata_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->qualifyingdata_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRfQualifyingDataList)
  return target;
}

int MsgRfQualifyingDataList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 qualifying_tab = 1;
    if (has_qualifying_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_tab());
    }

  }
  // repeated .MsgRfQualifyingData qualifyingData_list = 2;
  total_size += 1 * this->qualifyingdata_list_size();
  for (int i = 0; i < this->qualifyingdata_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qualifyingdata_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRfQualifyingDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRfQualifyingDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRfQualifyingDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRfQualifyingDataList::MergeFrom(const MsgRfQualifyingDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  qualifyingdata_list_.MergeFrom(from.qualifyingdata_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qualifying_tab()) {
      set_qualifying_tab(from.qualifying_tab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRfQualifyingDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRfQualifyingDataList::CopyFrom(const MsgRfQualifyingDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRfQualifyingDataList::IsInitialized() const {

  return true;
}

void MsgRfQualifyingDataList::Swap(MsgRfQualifyingDataList* other) {
  if (other != this) {
    std::swap(qualifying_tab_, other->qualifying_tab_);
    qualifyingdata_list_.Swap(&other->qualifyingdata_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRfQualifyingDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRfQualifyingDataList_descriptor_;
  metadata.reflection = MsgRfQualifyingDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRfQualifyingData::kQualifyingConfigFieldNumber;
const int MsgRfQualifyingData::kQualifyingTimeFieldNumber;
const int MsgRfQualifyingData::kQualifyingNumberFieldNumber;
const int MsgRfQualifyingData::kQualifyingCodeFieldNumber;
const int MsgRfQualifyingData::kQualifyingStateFieldNumber;
const int MsgRfQualifyingData::kQualifyingOrderFieldNumber;
#endif  // !_MSC_VER

MsgRfQualifyingData::MsgRfQualifyingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRfQualifyingData)
}

void MsgRfQualifyingData::InitAsDefaultInstance() {
}

MsgRfQualifyingData::MsgRfQualifyingData(const MsgRfQualifyingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRfQualifyingData)
}

void MsgRfQualifyingData::SharedCtor() {
  _cached_size_ = 0;
  qualifying_config_ = 0u;
  qualifying_time_ = 0u;
  qualifying_number_ = 0u;
  qualifying_code_ = GOOGLE_ULONGLONG(0);
  qualifying_state_ = 0u;
  qualifying_order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRfQualifyingData::~MsgRfQualifyingData() {
  // @@protoc_insertion_point(destructor:MsgRfQualifyingData)
  SharedDtor();
}

void MsgRfQualifyingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRfQualifyingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRfQualifyingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRfQualifyingData_descriptor_;
}

const MsgRfQualifyingData& MsgRfQualifyingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgRfQualifyingData* MsgRfQualifyingData::default_instance_ = NULL;

MsgRfQualifyingData* MsgRfQualifyingData::New() const {
  return new MsgRfQualifyingData;
}

void MsgRfQualifyingData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRfQualifyingData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(qualifying_config_, qualifying_order_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRfQualifyingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRfQualifyingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 qualifying_config = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_config_)));
          set_has_qualifying_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qualifying_time;
        break;
      }

      // optional uint32 qualifying_time = 2;
      case 2: {
        if (tag == 16) {
         parse_qualifying_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_time_)));
          set_has_qualifying_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qualifying_number;
        break;
      }

      // optional uint32 qualifying_number = 3;
      case 3: {
        if (tag == 24) {
         parse_qualifying_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_number_)));
          set_has_qualifying_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_qualifying_code;
        break;
      }

      // optional uint64 qualifying_code = 4;
      case 4: {
        if (tag == 32) {
         parse_qualifying_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qualifying_code_)));
          set_has_qualifying_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_qualifying_state;
        break;
      }

      // optional uint32 qualifying_state = 5;
      case 5: {
        if (tag == 40) {
         parse_qualifying_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_state_)));
          set_has_qualifying_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_qualifying_order;
        break;
      }

      // optional uint32 qualifying_order = 6;
      case 6: {
        if (tag == 48) {
         parse_qualifying_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_order_)));
          set_has_qualifying_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRfQualifyingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRfQualifyingData)
  return false;
#undef DO_
}

void MsgRfQualifyingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRfQualifyingData)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qualifying_config(), output);
  }

  // optional uint32 qualifying_time = 2;
  if (has_qualifying_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qualifying_time(), output);
  }

  // optional uint32 qualifying_number = 3;
  if (has_qualifying_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qualifying_number(), output);
  }

  // optional uint64 qualifying_code = 4;
  if (has_qualifying_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->qualifying_code(), output);
  }

  // optional uint32 qualifying_state = 5;
  if (has_qualifying_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->qualifying_state(), output);
  }

  // optional uint32 qualifying_order = 6;
  if (has_qualifying_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->qualifying_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRfQualifyingData)
}

::google::protobuf::uint8* MsgRfQualifyingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRfQualifyingData)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qualifying_config(), target);
  }

  // optional uint32 qualifying_time = 2;
  if (has_qualifying_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qualifying_time(), target);
  }

  // optional uint32 qualifying_number = 3;
  if (has_qualifying_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qualifying_number(), target);
  }

  // optional uint64 qualifying_code = 4;
  if (has_qualifying_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->qualifying_code(), target);
  }

  // optional uint32 qualifying_state = 5;
  if (has_qualifying_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->qualifying_state(), target);
  }

  // optional uint32 qualifying_order = 6;
  if (has_qualifying_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->qualifying_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRfQualifyingData)
  return target;
}

int MsgRfQualifyingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 qualifying_config = 1;
    if (has_qualifying_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_config());
    }

    // optional uint32 qualifying_time = 2;
    if (has_qualifying_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_time());
    }

    // optional uint32 qualifying_number = 3;
    if (has_qualifying_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_number());
    }

    // optional uint64 qualifying_code = 4;
    if (has_qualifying_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qualifying_code());
    }

    // optional uint32 qualifying_state = 5;
    if (has_qualifying_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_state());
    }

    // optional uint32 qualifying_order = 6;
    if (has_qualifying_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRfQualifyingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRfQualifyingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRfQualifyingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRfQualifyingData::MergeFrom(const MsgRfQualifyingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qualifying_config()) {
      set_qualifying_config(from.qualifying_config());
    }
    if (from.has_qualifying_time()) {
      set_qualifying_time(from.qualifying_time());
    }
    if (from.has_qualifying_number()) {
      set_qualifying_number(from.qualifying_number());
    }
    if (from.has_qualifying_code()) {
      set_qualifying_code(from.qualifying_code());
    }
    if (from.has_qualifying_state()) {
      set_qualifying_state(from.qualifying_state());
    }
    if (from.has_qualifying_order()) {
      set_qualifying_order(from.qualifying_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRfQualifyingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRfQualifyingData::CopyFrom(const MsgRfQualifyingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRfQualifyingData::IsInitialized() const {

  return true;
}

void MsgRfQualifyingData::Swap(MsgRfQualifyingData* other) {
  if (other != this) {
    std::swap(qualifying_config_, other->qualifying_config_);
    std::swap(qualifying_time_, other->qualifying_time_);
    std::swap(qualifying_number_, other->qualifying_number_);
    std::swap(qualifying_code_, other->qualifying_code_);
    std::swap(qualifying_state_, other->qualifying_state_);
    std::swap(qualifying_order_, other->qualifying_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRfQualifyingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRfQualifyingData_descriptor_;
  metadata.reflection = MsgRfQualifyingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutoQualifyingJoin::kQualifyingConfigFieldNumber;
#endif  // !_MSC_VER

MsgAutoQualifyingJoin::MsgAutoQualifyingJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAutoQualifyingJoin)
}

void MsgAutoQualifyingJoin::InitAsDefaultInstance() {
}

MsgAutoQualifyingJoin::MsgAutoQualifyingJoin(const MsgAutoQualifyingJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAutoQualifyingJoin)
}

void MsgAutoQualifyingJoin::SharedCtor() {
  _cached_size_ = 0;
  qualifying_config_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutoQualifyingJoin::~MsgAutoQualifyingJoin() {
  // @@protoc_insertion_point(destructor:MsgAutoQualifyingJoin)
  SharedDtor();
}

void MsgAutoQualifyingJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAutoQualifyingJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAutoQualifyingJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutoQualifyingJoin_descriptor_;
}

const MsgAutoQualifyingJoin& MsgAutoQualifyingJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgAutoQualifyingJoin* MsgAutoQualifyingJoin::default_instance_ = NULL;

MsgAutoQualifyingJoin* MsgAutoQualifyingJoin::New() const {
  return new MsgAutoQualifyingJoin;
}

void MsgAutoQualifyingJoin::Clear() {
  qualifying_config_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutoQualifyingJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAutoQualifyingJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 qualifying_config = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_config_)));
          set_has_qualifying_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAutoQualifyingJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAutoQualifyingJoin)
  return false;
#undef DO_
}

void MsgAutoQualifyingJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAutoQualifyingJoin)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qualifying_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAutoQualifyingJoin)
}

::google::protobuf::uint8* MsgAutoQualifyingJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAutoQualifyingJoin)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qualifying_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAutoQualifyingJoin)
  return target;
}

int MsgAutoQualifyingJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 qualifying_config = 1;
    if (has_qualifying_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAutoQualifyingJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutoQualifyingJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutoQualifyingJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutoQualifyingJoin::MergeFrom(const MsgAutoQualifyingJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qualifying_config()) {
      set_qualifying_config(from.qualifying_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutoQualifyingJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutoQualifyingJoin::CopyFrom(const MsgAutoQualifyingJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutoQualifyingJoin::IsInitialized() const {

  return true;
}

void MsgAutoQualifyingJoin::Swap(MsgAutoQualifyingJoin* other) {
  if (other != this) {
    std::swap(qualifying_config_, other->qualifying_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutoQualifyingJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutoQualifyingJoin_descriptor_;
  metadata.reflection = MsgAutoQualifyingJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutoQualifyingStart::kQualifyingConfigFieldNumber;
const int MsgAutoQualifyingStart::kCostConfigIdFieldNumber;
#endif  // !_MSC_VER

MsgAutoQualifyingStart::MsgAutoQualifyingStart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAutoQualifyingStart)
}

void MsgAutoQualifyingStart::InitAsDefaultInstance() {
}

MsgAutoQualifyingStart::MsgAutoQualifyingStart(const MsgAutoQualifyingStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAutoQualifyingStart)
}

void MsgAutoQualifyingStart::SharedCtor() {
  _cached_size_ = 0;
  qualifying_config_ = 0u;
  cost_config_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutoQualifyingStart::~MsgAutoQualifyingStart() {
  // @@protoc_insertion_point(destructor:MsgAutoQualifyingStart)
  SharedDtor();
}

void MsgAutoQualifyingStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAutoQualifyingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAutoQualifyingStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutoQualifyingStart_descriptor_;
}

const MsgAutoQualifyingStart& MsgAutoQualifyingStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgAutoQualifyingStart* MsgAutoQualifyingStart::default_instance_ = NULL;

MsgAutoQualifyingStart* MsgAutoQualifyingStart::New() const {
  return new MsgAutoQualifyingStart;
}

void MsgAutoQualifyingStart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAutoQualifyingStart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(qualifying_config_, cost_config_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutoQualifyingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAutoQualifyingStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 qualifying_config = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_config_)));
          set_has_qualifying_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost_config_id;
        break;
      }

      // optional uint32 cost_config_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cost_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_config_id_)));
          set_has_cost_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAutoQualifyingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAutoQualifyingStart)
  return false;
#undef DO_
}

void MsgAutoQualifyingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAutoQualifyingStart)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qualifying_config(), output);
  }

  // optional uint32 cost_config_id = 2;
  if (has_cost_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAutoQualifyingStart)
}

::google::protobuf::uint8* MsgAutoQualifyingStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAutoQualifyingStart)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qualifying_config(), target);
  }

  // optional uint32 cost_config_id = 2;
  if (has_cost_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAutoQualifyingStart)
  return target;
}

int MsgAutoQualifyingStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 qualifying_config = 1;
    if (has_qualifying_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_config());
    }

    // optional uint32 cost_config_id = 2;
    if (has_cost_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAutoQualifyingStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutoQualifyingStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutoQualifyingStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutoQualifyingStart::MergeFrom(const MsgAutoQualifyingStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qualifying_config()) {
      set_qualifying_config(from.qualifying_config());
    }
    if (from.has_cost_config_id()) {
      set_cost_config_id(from.cost_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutoQualifyingStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutoQualifyingStart::CopyFrom(const MsgAutoQualifyingStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutoQualifyingStart::IsInitialized() const {

  return true;
}

void MsgAutoQualifyingStart::Swap(MsgAutoQualifyingStart* other) {
  if (other != this) {
    std::swap(qualifying_config_, other->qualifying_config_);
    std::swap(cost_config_id_, other->cost_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutoQualifyingStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutoQualifyingStart_descriptor_;
  metadata.reflection = MsgAutoQualifyingStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRankRfQualifying::kConfigIdFieldNumber;
const int MsgRankRfQualifying::kRankFieldNumber;
const int MsgRankRfQualifying::kQualifyingDataResultFieldNumber;
const int MsgRankRfQualifying::kTotalNumberFieldNumber;
const int MsgRankRfQualifying::kMatchStageFieldNumber;
#endif  // !_MSC_VER

MsgRankRfQualifying::MsgRankRfQualifying()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRankRfQualifying)
}

void MsgRankRfQualifying::InitAsDefaultInstance() {
}

MsgRankRfQualifying::MsgRankRfQualifying(const MsgRankRfQualifying& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRankRfQualifying)
}

void MsgRankRfQualifying::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0u;
  rank_ = 0u;
  qualifyingdata_result_ = 0u;
  total_number_ = 0u;
  match_stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRankRfQualifying::~MsgRankRfQualifying() {
  // @@protoc_insertion_point(destructor:MsgRankRfQualifying)
  SharedDtor();
}

void MsgRankRfQualifying::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRankRfQualifying::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRankRfQualifying::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRankRfQualifying_descriptor_;
}

const MsgRankRfQualifying& MsgRankRfQualifying::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgRankRfQualifying* MsgRankRfQualifying::default_instance_ = NULL;

MsgRankRfQualifying* MsgRankRfQualifying::New() const {
  return new MsgRankRfQualifying;
}

void MsgRankRfQualifying::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRankRfQualifying*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(config_id_, match_stage_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRankRfQualifying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRankRfQualifying)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qualifyingData_result;
        break;
      }

      // optional uint32 qualifyingData_result = 3;
      case 3: {
        if (tag == 24) {
         parse_qualifyingData_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifyingdata_result_)));
          set_has_qualifyingdata_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_number;
        break;
      }

      // optional uint32 total_number = 4;
      case 4: {
        if (tag == 32) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_match_stage;
        break;
      }

      // optional uint32 match_stage = 5;
      case 5: {
        if (tag == 40) {
         parse_match_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_stage_)));
          set_has_match_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRankRfQualifying)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRankRfQualifying)
  return false;
#undef DO_
}

void MsgRankRfQualifying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRankRfQualifying)
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_id(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 qualifyingData_result = 3;
  if (has_qualifyingdata_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qualifyingdata_result(), output);
  }

  // optional uint32 total_number = 4;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_number(), output);
  }

  // optional uint32 match_stage = 5;
  if (has_match_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRankRfQualifying)
}

::google::protobuf::uint8* MsgRankRfQualifying::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRankRfQualifying)
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_id(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 qualifyingData_result = 3;
  if (has_qualifyingdata_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qualifyingdata_result(), target);
  }

  // optional uint32 total_number = 4;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_number(), target);
  }

  // optional uint32 match_stage = 5;
  if (has_match_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRankRfQualifying)
  return target;
}

int MsgRankRfQualifying::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 qualifyingData_result = 3;
    if (has_qualifyingdata_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifyingdata_result());
    }

    // optional uint32 total_number = 4;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_number());
    }

    // optional uint32 match_stage = 5;
    if (has_match_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRankRfQualifying::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRankRfQualifying* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRankRfQualifying*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRankRfQualifying::MergeFrom(const MsgRankRfQualifying& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_qualifyingdata_result()) {
      set_qualifyingdata_result(from.qualifyingdata_result());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_match_stage()) {
      set_match_stage(from.match_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRankRfQualifying::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRankRfQualifying::CopyFrom(const MsgRankRfQualifying& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRankRfQualifying::IsInitialized() const {

  return true;
}

void MsgRankRfQualifying::Swap(MsgRankRfQualifying* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(rank_, other->rank_);
    std::swap(qualifyingdata_result_, other->qualifyingdata_result_);
    std::swap(total_number_, other->total_number_);
    std::swap(match_stage_, other->match_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRankRfQualifying::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRankRfQualifying_descriptor_;
  metadata.reflection = MsgRankRfQualifying_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingHistoryScore::kGameCountFieldNumber;
const int MsgQualifyingHistoryScore::kScoreFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingHistoryScore::MsgQualifyingHistoryScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingHistoryScore)
}

void MsgQualifyingHistoryScore::InitAsDefaultInstance() {
}

MsgQualifyingHistoryScore::MsgQualifyingHistoryScore(const MsgQualifyingHistoryScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingHistoryScore)
}

void MsgQualifyingHistoryScore::SharedCtor() {
  _cached_size_ = 0;
  game_count_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingHistoryScore::~MsgQualifyingHistoryScore() {
  // @@protoc_insertion_point(destructor:MsgQualifyingHistoryScore)
  SharedDtor();
}

void MsgQualifyingHistoryScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingHistoryScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingHistoryScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingHistoryScore_descriptor_;
}

const MsgQualifyingHistoryScore& MsgQualifyingHistoryScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingHistoryScore* MsgQualifyingHistoryScore::default_instance_ = NULL;

MsgQualifyingHistoryScore* MsgQualifyingHistoryScore::New() const {
  return new MsgQualifyingHistoryScore;
}

void MsgQualifyingHistoryScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingHistoryScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, game_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingHistoryScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingHistoryScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingHistoryScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingHistoryScore)
  return false;
#undef DO_
}

void MsgQualifyingHistoryScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingHistoryScore)
  // optional uint32 game_count = 1;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_count(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingHistoryScore)
}

::google::protobuf::uint8* MsgQualifyingHistoryScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingHistoryScore)
  // optional uint32 game_count = 1;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_count(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingHistoryScore)
  return target;
}

int MsgQualifyingHistoryScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_count = 1;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingHistoryScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingHistoryScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingHistoryScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingHistoryScore::MergeFrom(const MsgQualifyingHistoryScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingHistoryScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingHistoryScore::CopyFrom(const MsgQualifyingHistoryScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingHistoryScore::IsInitialized() const {

  return true;
}

void MsgQualifyingHistoryScore::Swap(MsgQualifyingHistoryScore* other) {
  if (other != this) {
    std::swap(game_count_, other->game_count_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingHistoryScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingHistoryScore_descriptor_;
  metadata.reflection = MsgQualifyingHistoryScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingHistorySingleScore::kRoleIdFieldNumber;
const int MsgQualifyingHistorySingleScore::kScoreListFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingHistorySingleScore::MsgQualifyingHistorySingleScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingHistorySingleScore)
}

void MsgQualifyingHistorySingleScore::InitAsDefaultInstance() {
}

MsgQualifyingHistorySingleScore::MsgQualifyingHistorySingleScore(const MsgQualifyingHistorySingleScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingHistorySingleScore)
}

void MsgQualifyingHistorySingleScore::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingHistorySingleScore::~MsgQualifyingHistorySingleScore() {
  // @@protoc_insertion_point(destructor:MsgQualifyingHistorySingleScore)
  SharedDtor();
}

void MsgQualifyingHistorySingleScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingHistorySingleScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingHistorySingleScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingHistorySingleScore_descriptor_;
}

const MsgQualifyingHistorySingleScore& MsgQualifyingHistorySingleScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingHistorySingleScore* MsgQualifyingHistorySingleScore::default_instance_ = NULL;

MsgQualifyingHistorySingleScore* MsgQualifyingHistorySingleScore::New() const {
  return new MsgQualifyingHistorySingleScore;
}

void MsgQualifyingHistorySingleScore::Clear() {
  role_id_ = GOOGLE_ULONGLONG(0);
  score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingHistorySingleScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingHistorySingleScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_score_list;
        break;
      }

      // repeated .MsgQualifyingHistoryScore score_list = 2;
      case 2: {
        if (tag == 18) {
         parse_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_score_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingHistorySingleScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingHistorySingleScore)
  return false;
#undef DO_
}

void MsgQualifyingHistorySingleScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingHistorySingleScore)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // repeated .MsgQualifyingHistoryScore score_list = 2;
  for (int i = 0; i < this->score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->score_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingHistorySingleScore)
}

::google::protobuf::uint8* MsgQualifyingHistorySingleScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingHistorySingleScore)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // repeated .MsgQualifyingHistoryScore score_list = 2;
  for (int i = 0; i < this->score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->score_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingHistorySingleScore)
  return target;
}

int MsgQualifyingHistorySingleScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .MsgQualifyingHistoryScore score_list = 2;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingHistorySingleScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingHistorySingleScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingHistorySingleScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingHistorySingleScore::MergeFrom(const MsgQualifyingHistorySingleScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_list_.MergeFrom(from.score_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingHistorySingleScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingHistorySingleScore::CopyFrom(const MsgQualifyingHistorySingleScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingHistorySingleScore::IsInitialized() const {

  return true;
}

void MsgQualifyingHistorySingleScore::Swap(MsgQualifyingHistorySingleScore* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    score_list_.Swap(&other->score_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingHistorySingleScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingHistorySingleScore_descriptor_;
  metadata.reflection = MsgQualifyingHistorySingleScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingAllHistoryScore::kRoomScoreFieldNumber;
const int MsgQualifyingAllHistoryScore::kUseTimeFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingAllHistoryScore::MsgQualifyingAllHistoryScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingAllHistoryScore)
}

void MsgQualifyingAllHistoryScore::InitAsDefaultInstance() {
}

MsgQualifyingAllHistoryScore::MsgQualifyingAllHistoryScore(const MsgQualifyingAllHistoryScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingAllHistoryScore)
}

void MsgQualifyingAllHistoryScore::SharedCtor() {
  _cached_size_ = 0;
  use_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingAllHistoryScore::~MsgQualifyingAllHistoryScore() {
  // @@protoc_insertion_point(destructor:MsgQualifyingAllHistoryScore)
  SharedDtor();
}

void MsgQualifyingAllHistoryScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingAllHistoryScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingAllHistoryScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingAllHistoryScore_descriptor_;
}

const MsgQualifyingAllHistoryScore& MsgQualifyingAllHistoryScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingAllHistoryScore* MsgQualifyingAllHistoryScore::default_instance_ = NULL;

MsgQualifyingAllHistoryScore* MsgQualifyingAllHistoryScore::New() const {
  return new MsgQualifyingAllHistoryScore;
}

void MsgQualifyingAllHistoryScore::Clear() {
  use_time_ = 0u;
  room_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingAllHistoryScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingAllHistoryScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgQualifyingHistorySingleScore room_score = 1;
      case 1: {
        if (tag == 10) {
         parse_room_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_room_score;
        if (input->ExpectTag(16)) goto parse_use_time;
        break;
      }

      // optional uint32 use_time = 2;
      case 2: {
        if (tag == 16) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingAllHistoryScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingAllHistoryScore)
  return false;
#undef DO_
}

void MsgQualifyingAllHistoryScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingAllHistoryScore)
  // repeated .MsgQualifyingHistorySingleScore room_score = 1;
  for (int i = 0; i < this->room_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_score(i), output);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingAllHistoryScore)
}

::google::protobuf::uint8* MsgQualifyingAllHistoryScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingAllHistoryScore)
  // repeated .MsgQualifyingHistorySingleScore room_score = 1;
  for (int i = 0; i < this->room_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room_score(i), target);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingAllHistoryScore)
  return target;
}

int MsgQualifyingAllHistoryScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 use_time = 2;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_time());
    }

  }
  // repeated .MsgQualifyingHistorySingleScore room_score = 1;
  total_size += 1 * this->room_score_size();
  for (int i = 0; i < this->room_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_score(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingAllHistoryScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingAllHistoryScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingAllHistoryScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingAllHistoryScore::MergeFrom(const MsgQualifyingAllHistoryScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_score_.MergeFrom(from.room_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingAllHistoryScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingAllHistoryScore::CopyFrom(const MsgQualifyingAllHistoryScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingAllHistoryScore::IsInitialized() const {

  return true;
}

void MsgQualifyingAllHistoryScore::Swap(MsgQualifyingAllHistoryScore* other) {
  if (other != this) {
    room_score_.Swap(&other->room_score_);
    std::swap(use_time_, other->use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingAllHistoryScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingAllHistoryScore_descriptor_;
  metadata.reflection = MsgQualifyingAllHistoryScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingTrustCount::kTrustCountFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingTrustCount::MsgQualifyingTrustCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingTrustCount)
}

void MsgQualifyingTrustCount::InitAsDefaultInstance() {
}

MsgQualifyingTrustCount::MsgQualifyingTrustCount(const MsgQualifyingTrustCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingTrustCount)
}

void MsgQualifyingTrustCount::SharedCtor() {
  _cached_size_ = 0;
  trust_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingTrustCount::~MsgQualifyingTrustCount() {
  // @@protoc_insertion_point(destructor:MsgQualifyingTrustCount)
  SharedDtor();
}

void MsgQualifyingTrustCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingTrustCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingTrustCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingTrustCount_descriptor_;
}

const MsgQualifyingTrustCount& MsgQualifyingTrustCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingTrustCount* MsgQualifyingTrustCount::default_instance_ = NULL;

MsgQualifyingTrustCount* MsgQualifyingTrustCount::New() const {
  return new MsgQualifyingTrustCount;
}

void MsgQualifyingTrustCount::Clear() {
  trust_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingTrustCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingTrustCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trust_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trust_count_)));
          set_has_trust_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingTrustCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingTrustCount)
  return false;
#undef DO_
}

void MsgQualifyingTrustCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingTrustCount)
  // optional uint32 trust_count = 1;
  if (has_trust_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trust_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingTrustCount)
}

::google::protobuf::uint8* MsgQualifyingTrustCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingTrustCount)
  // optional uint32 trust_count = 1;
  if (has_trust_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trust_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingTrustCount)
  return target;
}

int MsgQualifyingTrustCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trust_count = 1;
    if (has_trust_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trust_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingTrustCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingTrustCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingTrustCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingTrustCount::MergeFrom(const MsgQualifyingTrustCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trust_count()) {
      set_trust_count(from.trust_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingTrustCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingTrustCount::CopyFrom(const MsgQualifyingTrustCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingTrustCount::IsInitialized() const {

  return true;
}

void MsgQualifyingTrustCount::Swap(MsgQualifyingTrustCount* other) {
  if (other != this) {
    std::swap(trust_count_, other->trust_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingTrustCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingTrustCount_descriptor_;
  metadata.reflection = MsgQualifyingTrustCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingConfigInfor::kConfigIdFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingConfigInfor::MsgQualifyingConfigInfor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingConfigInfor)
}

void MsgQualifyingConfigInfor::InitAsDefaultInstance() {
}

MsgQualifyingConfigInfor::MsgQualifyingConfigInfor(const MsgQualifyingConfigInfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingConfigInfor)
}

void MsgQualifyingConfigInfor::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingConfigInfor::~MsgQualifyingConfigInfor() {
  // @@protoc_insertion_point(destructor:MsgQualifyingConfigInfor)
  SharedDtor();
}

void MsgQualifyingConfigInfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingConfigInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingConfigInfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingConfigInfor_descriptor_;
}

const MsgQualifyingConfigInfor& MsgQualifyingConfigInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingConfigInfor* MsgQualifyingConfigInfor::default_instance_ = NULL;

MsgQualifyingConfigInfor* MsgQualifyingConfigInfor::New() const {
  return new MsgQualifyingConfigInfor;
}

void MsgQualifyingConfigInfor::Clear() {
  config_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingConfigInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingConfigInfor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingConfigInfor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingConfigInfor)
  return false;
#undef DO_
}

void MsgQualifyingConfigInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingConfigInfor)
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingConfigInfor)
}

::google::protobuf::uint8* MsgQualifyingConfigInfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingConfigInfor)
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingConfigInfor)
  return target;
}

int MsgQualifyingConfigInfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingConfigInfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingConfigInfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingConfigInfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingConfigInfor::MergeFrom(const MsgQualifyingConfigInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingConfigInfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingConfigInfor::CopyFrom(const MsgQualifyingConfigInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingConfigInfor::IsInitialized() const {

  return true;
}

void MsgQualifyingConfigInfor::Swap(MsgQualifyingConfigInfor* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingConfigInfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingConfigInfor_descriptor_;
  metadata.reflection = MsgQualifyingConfigInfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingShowDownInfor::kTotalScoreFieldNumber;
const int MsgQualifyingShowDownInfor::kRoomExtraFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingShowDownInfor::MsgQualifyingShowDownInfor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingShowDownInfor)
}

void MsgQualifyingShowDownInfor::InitAsDefaultInstance() {
}

MsgQualifyingShowDownInfor::MsgQualifyingShowDownInfor(const MsgQualifyingShowDownInfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingShowDownInfor)
}

void MsgQualifyingShowDownInfor::SharedCtor() {
  _cached_size_ = 0;
  total_score_ = GOOGLE_LONGLONG(0);
  room_extra_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingShowDownInfor::~MsgQualifyingShowDownInfor() {
  // @@protoc_insertion_point(destructor:MsgQualifyingShowDownInfor)
  SharedDtor();
}

void MsgQualifyingShowDownInfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingShowDownInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingShowDownInfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingShowDownInfor_descriptor_;
}

const MsgQualifyingShowDownInfor& MsgQualifyingShowDownInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingShowDownInfor* MsgQualifyingShowDownInfor::default_instance_ = NULL;

MsgQualifyingShowDownInfor* MsgQualifyingShowDownInfor::New() const {
  return new MsgQualifyingShowDownInfor;
}

void MsgQualifyingShowDownInfor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingShowDownInfor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(total_score_, room_extra_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingShowDownInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingShowDownInfor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 total_score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_extra;
        break;
      }

      // optional uint32 room_extra = 2;
      case 2: {
        if (tag == 16) {
         parse_room_extra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_extra_)));
          set_has_room_extra();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingShowDownInfor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingShowDownInfor)
  return false;
#undef DO_
}

void MsgQualifyingShowDownInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingShowDownInfor)
  // optional int64 total_score = 1;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->total_score(), output);
  }

  // optional uint32 room_extra = 2;
  if (has_room_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingShowDownInfor)
}

::google::protobuf::uint8* MsgQualifyingShowDownInfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingShowDownInfor)
  // optional int64 total_score = 1;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->total_score(), target);
  }

  // optional uint32 room_extra = 2;
  if (has_room_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingShowDownInfor)
  return target;
}

int MsgQualifyingShowDownInfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 total_score = 1;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_score());
    }

    // optional uint32 room_extra = 2;
    if (has_room_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingShowDownInfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingShowDownInfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingShowDownInfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingShowDownInfor::MergeFrom(const MsgQualifyingShowDownInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_room_extra()) {
      set_room_extra(from.room_extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingShowDownInfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingShowDownInfor::CopyFrom(const MsgQualifyingShowDownInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingShowDownInfor::IsInitialized() const {

  return true;
}

void MsgQualifyingShowDownInfor::Swap(MsgQualifyingShowDownInfor* other) {
  if (other != this) {
    std::swap(total_score_, other->total_score_);
    std::swap(room_extra_, other->room_extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingShowDownInfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingShowDownInfor_descriptor_;
  metadata.reflection = MsgQualifyingShowDownInfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingRefreshRoomInfor::kRoomExtraFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingRefreshRoomInfor::MsgQualifyingRefreshRoomInfor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingRefreshRoomInfor)
}

void MsgQualifyingRefreshRoomInfor::InitAsDefaultInstance() {
}

MsgQualifyingRefreshRoomInfor::MsgQualifyingRefreshRoomInfor(const MsgQualifyingRefreshRoomInfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingRefreshRoomInfor)
}

void MsgQualifyingRefreshRoomInfor::SharedCtor() {
  _cached_size_ = 0;
  room_extra_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingRefreshRoomInfor::~MsgQualifyingRefreshRoomInfor() {
  // @@protoc_insertion_point(destructor:MsgQualifyingRefreshRoomInfor)
  SharedDtor();
}

void MsgQualifyingRefreshRoomInfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingRefreshRoomInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingRefreshRoomInfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingRefreshRoomInfor_descriptor_;
}

const MsgQualifyingRefreshRoomInfor& MsgQualifyingRefreshRoomInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingRefreshRoomInfor* MsgQualifyingRefreshRoomInfor::default_instance_ = NULL;

MsgQualifyingRefreshRoomInfor* MsgQualifyingRefreshRoomInfor::New() const {
  return new MsgQualifyingRefreshRoomInfor;
}

void MsgQualifyingRefreshRoomInfor::Clear() {
  room_extra_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingRefreshRoomInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingRefreshRoomInfor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_extra = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_extra_)));
          set_has_room_extra();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingRefreshRoomInfor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingRefreshRoomInfor)
  return false;
#undef DO_
}

void MsgQualifyingRefreshRoomInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingRefreshRoomInfor)
  // optional uint32 room_extra = 1;
  if (has_room_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingRefreshRoomInfor)
}

::google::protobuf::uint8* MsgQualifyingRefreshRoomInfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingRefreshRoomInfor)
  // optional uint32 room_extra = 1;
  if (has_room_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingRefreshRoomInfor)
  return target;
}

int MsgQualifyingRefreshRoomInfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_extra = 1;
    if (has_room_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingRefreshRoomInfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingRefreshRoomInfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingRefreshRoomInfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingRefreshRoomInfor::MergeFrom(const MsgQualifyingRefreshRoomInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_extra()) {
      set_room_extra(from.room_extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingRefreshRoomInfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingRefreshRoomInfor::CopyFrom(const MsgQualifyingRefreshRoomInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingRefreshRoomInfor::IsInitialized() const {

  return true;
}

void MsgQualifyingRefreshRoomInfor::Swap(MsgQualifyingRefreshRoomInfor* other) {
  if (other != this) {
    std::swap(room_extra_, other->room_extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingRefreshRoomInfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingRefreshRoomInfor_descriptor_;
  metadata.reflection = MsgQualifyingRefreshRoomInfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingLoginInfor::kInviteCodeFieldNumber;
const int MsgQualifyingLoginInfor::kConfigIdFieldNumber;
const int MsgQualifyingLoginInfor::kQualifyingTimeFieldNumber;
const int MsgQualifyingLoginInfor::kPlayerStateFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingLoginInfor::MsgQualifyingLoginInfor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingLoginInfor)
}

void MsgQualifyingLoginInfor::InitAsDefaultInstance() {
}

MsgQualifyingLoginInfor::MsgQualifyingLoginInfor(const MsgQualifyingLoginInfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingLoginInfor)
}

void MsgQualifyingLoginInfor::SharedCtor() {
  _cached_size_ = 0;
  invite_code_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0u;
  qualifying_time_ = 0u;
  player_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingLoginInfor::~MsgQualifyingLoginInfor() {
  // @@protoc_insertion_point(destructor:MsgQualifyingLoginInfor)
  SharedDtor();
}

void MsgQualifyingLoginInfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingLoginInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingLoginInfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingLoginInfor_descriptor_;
}

const MsgQualifyingLoginInfor& MsgQualifyingLoginInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingLoginInfor* MsgQualifyingLoginInfor::default_instance_ = NULL;

MsgQualifyingLoginInfor* MsgQualifyingLoginInfor::New() const {
  return new MsgQualifyingLoginInfor;
}

void MsgQualifyingLoginInfor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingLoginInfor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invite_code_, player_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingLoginInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingLoginInfor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // optional uint32 config_id = 2;
      case 2: {
        if (tag == 16) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qualifying_time;
        break;
      }

      // optional uint32 qualifying_time = 3;
      case 3: {
        if (tag == 24) {
         parse_qualifying_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_time_)));
          set_has_qualifying_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_state;
        break;
      }

      // optional uint32 player_state = 4;
      case 4: {
        if (tag == 32) {
         parse_player_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_state_)));
          set_has_player_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingLoginInfor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingLoginInfor)
  return false;
#undef DO_
}

void MsgQualifyingLoginInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingLoginInfor)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_code(), output);
  }

  // optional uint32 config_id = 2;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_id(), output);
  }

  // optional uint32 qualifying_time = 3;
  if (has_qualifying_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qualifying_time(), output);
  }

  // optional uint32 player_state = 4;
  if (has_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingLoginInfor)
}

::google::protobuf::uint8* MsgQualifyingLoginInfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingLoginInfor)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_code(), target);
  }

  // optional uint32 config_id = 2;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_id(), target);
  }

  // optional uint32 qualifying_time = 3;
  if (has_qualifying_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qualifying_time(), target);
  }

  // optional uint32 player_state = 4;
  if (has_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingLoginInfor)
  return target;
}

int MsgQualifyingLoginInfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional uint32 config_id = 2;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional uint32 qualifying_time = 3;
    if (has_qualifying_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_time());
    }

    // optional uint32 player_state = 4;
    if (has_player_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingLoginInfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingLoginInfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingLoginInfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingLoginInfor::MergeFrom(const MsgQualifyingLoginInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_qualifying_time()) {
      set_qualifying_time(from.qualifying_time());
    }
    if (from.has_player_state()) {
      set_player_state(from.player_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingLoginInfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingLoginInfor::CopyFrom(const MsgQualifyingLoginInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingLoginInfor::IsInitialized() const {

  return true;
}

void MsgQualifyingLoginInfor::Swap(MsgQualifyingLoginInfor* other) {
  if (other != this) {
    std::swap(invite_code_, other->invite_code_);
    std::swap(config_id_, other->config_id_);
    std::swap(qualifying_time_, other->qualifying_time_);
    std::swap(player_state_, other->player_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingLoginInfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingLoginInfor_descriptor_;
  metadata.reflection = MsgQualifyingLoginInfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingRoomInfor::kQualifyingConfigFieldNumber;
const int MsgQualifyingRoomInfor::kUseTimeFieldNumber;
const int MsgQualifyingRoomInfor::kLastRankFieldNumber;
const int MsgQualifyingRoomInfor::kMatchStageFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingRoomInfor::MsgQualifyingRoomInfor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingRoomInfor)
}

void MsgQualifyingRoomInfor::InitAsDefaultInstance() {
}

MsgQualifyingRoomInfor::MsgQualifyingRoomInfor(const MsgQualifyingRoomInfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingRoomInfor)
}

void MsgQualifyingRoomInfor::SharedCtor() {
  _cached_size_ = 0;
  qualifying_config_ = 0u;
  use_time_ = 0u;
  last_rank_ = 0u;
  match_stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingRoomInfor::~MsgQualifyingRoomInfor() {
  // @@protoc_insertion_point(destructor:MsgQualifyingRoomInfor)
  SharedDtor();
}

void MsgQualifyingRoomInfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingRoomInfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingRoomInfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingRoomInfor_descriptor_;
}

const MsgQualifyingRoomInfor& MsgQualifyingRoomInfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingRoomInfor* MsgQualifyingRoomInfor::default_instance_ = NULL;

MsgQualifyingRoomInfor* MsgQualifyingRoomInfor::New() const {
  return new MsgQualifyingRoomInfor;
}

void MsgQualifyingRoomInfor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingRoomInfor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(qualifying_config_, match_stage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingRoomInfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingRoomInfor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 qualifying_config = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_config_)));
          set_has_qualifying_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_time;
        break;
      }

      // optional uint32 use_time = 2;
      case 2: {
        if (tag == 16) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_rank;
        break;
      }

      // optional uint32 last_rank = 3;
      case 3: {
        if (tag == 24) {
         parse_last_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_rank_)));
          set_has_last_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_match_stage;
        break;
      }

      // optional uint32 match_stage = 4;
      case 4: {
        if (tag == 32) {
         parse_match_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_stage_)));
          set_has_match_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingRoomInfor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingRoomInfor)
  return false;
#undef DO_
}

void MsgQualifyingRoomInfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingRoomInfor)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qualifying_config(), output);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_time(), output);
  }

  // optional uint32 last_rank = 3;
  if (has_last_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_rank(), output);
  }

  // optional uint32 match_stage = 4;
  if (has_match_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->match_stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingRoomInfor)
}

::google::protobuf::uint8* MsgQualifyingRoomInfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingRoomInfor)
  // optional uint32 qualifying_config = 1;
  if (has_qualifying_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qualifying_config(), target);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_time(), target);
  }

  // optional uint32 last_rank = 3;
  if (has_last_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_rank(), target);
  }

  // optional uint32 match_stage = 4;
  if (has_match_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->match_stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingRoomInfor)
  return target;
}

int MsgQualifyingRoomInfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 qualifying_config = 1;
    if (has_qualifying_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_config());
    }

    // optional uint32 use_time = 2;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_time());
    }

    // optional uint32 last_rank = 3;
    if (has_last_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_rank());
    }

    // optional uint32 match_stage = 4;
    if (has_match_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingRoomInfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingRoomInfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingRoomInfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingRoomInfor::MergeFrom(const MsgQualifyingRoomInfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qualifying_config()) {
      set_qualifying_config(from.qualifying_config());
    }
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
    if (from.has_last_rank()) {
      set_last_rank(from.last_rank());
    }
    if (from.has_match_stage()) {
      set_match_stage(from.match_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingRoomInfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingRoomInfor::CopyFrom(const MsgQualifyingRoomInfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingRoomInfor::IsInitialized() const {

  return true;
}

void MsgQualifyingRoomInfor::Swap(MsgQualifyingRoomInfor* other) {
  if (other != this) {
    std::swap(qualifying_config_, other->qualifying_config_);
    std::swap(use_time_, other->use_time_);
    std::swap(last_rank_, other->last_rank_);
    std::swap(match_stage_, other->match_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingRoomInfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingRoomInfor_descriptor_;
  metadata.reflection = MsgQualifyingRoomInfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingRequest::kQualifyingTypeFieldNumber;
const int MsgQualifyingRequest::kAppNameFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingRequest::MsgQualifyingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingRequest)
}

void MsgQualifyingRequest::InitAsDefaultInstance() {
}

MsgQualifyingRequest::MsgQualifyingRequest(const MsgQualifyingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingRequest)
}

void MsgQualifyingRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  qualifying_type_ = 0u;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingRequest::~MsgQualifyingRequest() {
  // @@protoc_insertion_point(destructor:MsgQualifyingRequest)
  SharedDtor();
}

void MsgQualifyingRequest::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgQualifyingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingRequest_descriptor_;
}

const MsgQualifyingRequest& MsgQualifyingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingRequest* MsgQualifyingRequest::default_instance_ = NULL;

MsgQualifyingRequest* MsgQualifyingRequest::New() const {
  return new MsgQualifyingRequest;
}

void MsgQualifyingRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    qualifying_type_ = 0u;
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 qualifying_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualifying_type_)));
          set_has_qualifying_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_name;
        break;
      }

      // optional string app_name = 2;
      case 2: {
        if (tag == 18) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingRequest)
  return false;
#undef DO_
}

void MsgQualifyingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingRequest)
  // optional uint32 qualifying_type = 1;
  if (has_qualifying_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->qualifying_type(), output);
  }

  // optional string app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingRequest)
}

::google::protobuf::uint8* MsgQualifyingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingRequest)
  // optional uint32 qualifying_type = 1;
  if (has_qualifying_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->qualifying_type(), target);
  }

  // optional string app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingRequest)
  return target;
}

int MsgQualifyingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 qualifying_type = 1;
    if (has_qualifying_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualifying_type());
    }

    // optional string app_name = 2;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingRequest::MergeFrom(const MsgQualifyingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qualifying_type()) {
      set_qualifying_type(from.qualifying_type());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingRequest::CopyFrom(const MsgQualifyingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingRequest::IsInitialized() const {

  return true;
}

void MsgQualifyingRequest::Swap(MsgQualifyingRequest* other) {
  if (other != this) {
    std::swap(qualifying_type_, other->qualifying_type_);
    std::swap(app_name_, other->app_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingRequest_descriptor_;
  metadata.reflection = MsgQualifyingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingFXInfo::kGameCountFieldNumber;
const int MsgQualifyingFXInfo::kGameScoreFieldNumber;
const int MsgQualifyingFXInfo::kCurrentRankFieldNumber;
const int MsgQualifyingFXInfo::kTatalRankFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingFXInfo::MsgQualifyingFXInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingFXInfo)
}

void MsgQualifyingFXInfo::InitAsDefaultInstance() {
}

MsgQualifyingFXInfo::MsgQualifyingFXInfo(const MsgQualifyingFXInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingFXInfo)
}

void MsgQualifyingFXInfo::SharedCtor() {
  _cached_size_ = 0;
  game_count_ = 0u;
  game_score_ = GOOGLE_LONGLONG(0);
  current_rank_ = 0u;
  tatal_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingFXInfo::~MsgQualifyingFXInfo() {
  // @@protoc_insertion_point(destructor:MsgQualifyingFXInfo)
  SharedDtor();
}

void MsgQualifyingFXInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingFXInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingFXInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingFXInfo_descriptor_;
}

const MsgQualifyingFXInfo& MsgQualifyingFXInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingFXInfo* MsgQualifyingFXInfo::default_instance_ = NULL;

MsgQualifyingFXInfo* MsgQualifyingFXInfo::New() const {
  return new MsgQualifyingFXInfo;
}

void MsgQualifyingFXInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingFXInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(game_score_, tatal_rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingFXInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingFXInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_score;
        break;
      }

      // optional int64 game_score = 2;
      case 2: {
        if (tag == 16) {
         parse_game_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &game_score_)));
          set_has_game_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_rank;
        break;
      }

      // optional uint32 current_rank = 3;
      case 3: {
        if (tag == 24) {
         parse_current_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_rank_)));
          set_has_current_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tatal_rank;
        break;
      }

      // optional uint32 tatal_rank = 4;
      case 4: {
        if (tag == 32) {
         parse_tatal_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tatal_rank_)));
          set_has_tatal_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingFXInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingFXInfo)
  return false;
#undef DO_
}

void MsgQualifyingFXInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingFXInfo)
  // optional uint32 game_count = 1;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_count(), output);
  }

  // optional int64 game_score = 2;
  if (has_game_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->game_score(), output);
  }

  // optional uint32 current_rank = 3;
  if (has_current_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_rank(), output);
  }

  // optional uint32 tatal_rank = 4;
  if (has_tatal_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tatal_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingFXInfo)
}

::google::protobuf::uint8* MsgQualifyingFXInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingFXInfo)
  // optional uint32 game_count = 1;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_count(), target);
  }

  // optional int64 game_score = 2;
  if (has_game_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->game_score(), target);
  }

  // optional uint32 current_rank = 3;
  if (has_current_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_rank(), target);
  }

  // optional uint32 tatal_rank = 4;
  if (has_tatal_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tatal_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingFXInfo)
  return target;
}

int MsgQualifyingFXInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_count = 1;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional int64 game_score = 2;
    if (has_game_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->game_score());
    }

    // optional uint32 current_rank = 3;
    if (has_current_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_rank());
    }

    // optional uint32 tatal_rank = 4;
    if (has_tatal_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tatal_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingFXInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingFXInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingFXInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingFXInfo::MergeFrom(const MsgQualifyingFXInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_game_score()) {
      set_game_score(from.game_score());
    }
    if (from.has_current_rank()) {
      set_current_rank(from.current_rank());
    }
    if (from.has_tatal_rank()) {
      set_tatal_rank(from.tatal_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingFXInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingFXInfo::CopyFrom(const MsgQualifyingFXInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingFXInfo::IsInitialized() const {

  return true;
}

void MsgQualifyingFXInfo::Swap(MsgQualifyingFXInfo* other) {
  if (other != this) {
    std::swap(game_count_, other->game_count_);
    std::swap(game_score_, other->game_score_);
    std::swap(current_rank_, other->current_rank_);
    std::swap(tatal_rank_, other->tatal_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingFXInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingFXInfo_descriptor_;
  metadata.reflection = MsgQualifyingFXInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingFXRefreshSD::kCoutListFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingFXRefreshSD::MsgQualifyingFXRefreshSD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingFXRefreshSD)
}

void MsgQualifyingFXRefreshSD::InitAsDefaultInstance() {
}

MsgQualifyingFXRefreshSD::MsgQualifyingFXRefreshSD(const MsgQualifyingFXRefreshSD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingFXRefreshSD)
}

void MsgQualifyingFXRefreshSD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingFXRefreshSD::~MsgQualifyingFXRefreshSD() {
  // @@protoc_insertion_point(destructor:MsgQualifyingFXRefreshSD)
  SharedDtor();
}

void MsgQualifyingFXRefreshSD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingFXRefreshSD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingFXRefreshSD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingFXRefreshSD_descriptor_;
}

const MsgQualifyingFXRefreshSD& MsgQualifyingFXRefreshSD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingFXRefreshSD* MsgQualifyingFXRefreshSD::default_instance_ = NULL;

MsgQualifyingFXRefreshSD* MsgQualifyingFXRefreshSD::New() const {
  return new MsgQualifyingFXRefreshSD;
}

void MsgQualifyingFXRefreshSD::Clear() {
  cout_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingFXRefreshSD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingFXRefreshSD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgQualifyingFXInfo cout_list = 1;
      case 1: {
        if (tag == 10) {
         parse_cout_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cout_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cout_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingFXRefreshSD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingFXRefreshSD)
  return false;
#undef DO_
}

void MsgQualifyingFXRefreshSD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingFXRefreshSD)
  // repeated .MsgQualifyingFXInfo cout_list = 1;
  for (int i = 0; i < this->cout_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cout_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingFXRefreshSD)
}

::google::protobuf::uint8* MsgQualifyingFXRefreshSD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingFXRefreshSD)
  // repeated .MsgQualifyingFXInfo cout_list = 1;
  for (int i = 0; i < this->cout_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cout_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingFXRefreshSD)
  return target;
}

int MsgQualifyingFXRefreshSD::ByteSize() const {
  int total_size = 0;

  // repeated .MsgQualifyingFXInfo cout_list = 1;
  total_size += 1 * this->cout_list_size();
  for (int i = 0; i < this->cout_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cout_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingFXRefreshSD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingFXRefreshSD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingFXRefreshSD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingFXRefreshSD::MergeFrom(const MsgQualifyingFXRefreshSD& from) {
  GOOGLE_CHECK_NE(&from, this);
  cout_list_.MergeFrom(from.cout_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingFXRefreshSD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingFXRefreshSD::CopyFrom(const MsgQualifyingFXRefreshSD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingFXRefreshSD::IsInitialized() const {

  return true;
}

void MsgQualifyingFXRefreshSD::Swap(MsgQualifyingFXRefreshSD* other) {
  if (other != this) {
    cout_list_.Swap(&other->cout_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingFXRefreshSD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingFXRefreshSD_descriptor_;
  metadata.reflection = MsgQualifyingFXRefreshSD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingQYRqKey::kInviteCodeFieldNumber;
const int MsgQualifyingQYRqKey::kConfigIdFieldNumber;
const int MsgQualifyingQYRqKey::kServiceIdFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingQYRqKey::MsgQualifyingQYRqKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingQYRqKey)
}

void MsgQualifyingQYRqKey::InitAsDefaultInstance() {
}

MsgQualifyingQYRqKey::MsgQualifyingQYRqKey(const MsgQualifyingQYRqKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingQYRqKey)
}

void MsgQualifyingQYRqKey::SharedCtor() {
  _cached_size_ = 0;
  invite_code_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0u;
  service_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingQYRqKey::~MsgQualifyingQYRqKey() {
  // @@protoc_insertion_point(destructor:MsgQualifyingQYRqKey)
  SharedDtor();
}

void MsgQualifyingQYRqKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingQYRqKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingQYRqKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingQYRqKey_descriptor_;
}

const MsgQualifyingQYRqKey& MsgQualifyingQYRqKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingQYRqKey* MsgQualifyingQYRqKey::default_instance_ = NULL;

MsgQualifyingQYRqKey* MsgQualifyingQYRqKey::New() const {
  return new MsgQualifyingQYRqKey;
}

void MsgQualifyingQYRqKey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingQYRqKey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invite_code_, service_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingQYRqKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingQYRqKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // optional uint32 config_id = 2;
      case 2: {
        if (tag == 16) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (tag == 24) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingQYRqKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingQYRqKey)
  return false;
#undef DO_
}

void MsgQualifyingQYRqKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingQYRqKey)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_code(), output);
  }

  // optional uint32 config_id = 2;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_id(), output);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingQYRqKey)
}

::google::protobuf::uint8* MsgQualifyingQYRqKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingQYRqKey)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_code(), target);
  }

  // optional uint32 config_id = 2;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_id(), target);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingQYRqKey)
  return target;
}

int MsgQualifyingQYRqKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional uint32 config_id = 2;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingQYRqKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingQYRqKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingQYRqKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingQYRqKey::MergeFrom(const MsgQualifyingQYRqKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingQYRqKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingQYRqKey::CopyFrom(const MsgQualifyingQYRqKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingQYRqKey::IsInitialized() const {

  return true;
}

void MsgQualifyingQYRqKey::Swap(MsgQualifyingQYRqKey* other) {
  if (other != this) {
    std::swap(invite_code_, other->invite_code_);
    std::swap(config_id_, other->config_id_);
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingQYRqKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingQYRqKey_descriptor_;
  metadata.reflection = MsgQualifyingQYRqKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingQYDisKey::kInviteCodeFieldNumber;
const int MsgQualifyingQYDisKey::kOwnKeyFieldNumber;
const int MsgQualifyingQYDisKey::kUpKeyFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingQYDisKey::MsgQualifyingQYDisKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingQYDisKey)
}

void MsgQualifyingQYDisKey::InitAsDefaultInstance() {
}

MsgQualifyingQYDisKey::MsgQualifyingQYDisKey(const MsgQualifyingQYDisKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingQYDisKey)
}

void MsgQualifyingQYDisKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invite_code_ = GOOGLE_ULONGLONG(0);
  own_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  up_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingQYDisKey::~MsgQualifyingQYDisKey() {
  // @@protoc_insertion_point(destructor:MsgQualifyingQYDisKey)
  SharedDtor();
}

void MsgQualifyingQYDisKey::SharedDtor() {
  if (own_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete own_key_;
  }
  if (up_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete up_key_;
  }
  if (this != default_instance_) {
  }
}

void MsgQualifyingQYDisKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingQYDisKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingQYDisKey_descriptor_;
}

const MsgQualifyingQYDisKey& MsgQualifyingQYDisKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingQYDisKey* MsgQualifyingQYDisKey::default_instance_ = NULL;

MsgQualifyingQYDisKey* MsgQualifyingQYDisKey::New() const {
  return new MsgQualifyingQYDisKey;
}

void MsgQualifyingQYDisKey::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    invite_code_ = GOOGLE_ULONGLONG(0);
    if (has_own_key()) {
      if (own_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        own_key_->clear();
      }
    }
    if (has_up_key()) {
      if (up_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        up_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingQYDisKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingQYDisKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_own_key;
        break;
      }

      // optional string own_key = 2;
      case 2: {
        if (tag == 18) {
         parse_own_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_own_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->own_key().data(), this->own_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "own_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_up_key;
        break;
      }

      // optional string up_key = 3;
      case 3: {
        if (tag == 26) {
         parse_up_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_up_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->up_key().data(), this->up_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "up_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingQYDisKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingQYDisKey)
  return false;
#undef DO_
}

void MsgQualifyingQYDisKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingQYDisKey)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_code(), output);
  }

  // optional string own_key = 2;
  if (has_own_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->own_key().data(), this->own_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "own_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->own_key(), output);
  }

  // optional string up_key = 3;
  if (has_up_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->up_key().data(), this->up_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "up_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->up_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingQYDisKey)
}

::google::protobuf::uint8* MsgQualifyingQYDisKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingQYDisKey)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_code(), target);
  }

  // optional string own_key = 2;
  if (has_own_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->own_key().data(), this->own_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "own_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->own_key(), target);
  }

  // optional string up_key = 3;
  if (has_up_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->up_key().data(), this->up_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "up_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->up_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingQYDisKey)
  return target;
}

int MsgQualifyingQYDisKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional string own_key = 2;
    if (has_own_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->own_key());
    }

    // optional string up_key = 3;
    if (has_up_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->up_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingQYDisKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingQYDisKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingQYDisKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingQYDisKey::MergeFrom(const MsgQualifyingQYDisKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_own_key()) {
      set_own_key(from.own_key());
    }
    if (from.has_up_key()) {
      set_up_key(from.up_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingQYDisKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingQYDisKey::CopyFrom(const MsgQualifyingQYDisKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingQYDisKey::IsInitialized() const {

  return true;
}

void MsgQualifyingQYDisKey::Swap(MsgQualifyingQYDisKey* other) {
  if (other != this) {
    std::swap(invite_code_, other->invite_code_);
    std::swap(own_key_, other->own_key_);
    std::swap(up_key_, other->up_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingQYDisKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingQYDisKey_descriptor_;
  metadata.reflection = MsgQualifyingQYDisKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingJNBack::kInviteCodeFieldNumber;
const int MsgQualifyingJNBack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingJNBack::MsgQualifyingJNBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingJNBack)
}

void MsgQualifyingJNBack::InitAsDefaultInstance() {
}

MsgQualifyingJNBack::MsgQualifyingJNBack(const MsgQualifyingJNBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingJNBack)
}

void MsgQualifyingJNBack::SharedCtor() {
  _cached_size_ = 0;
  invite_code_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingJNBack::~MsgQualifyingJNBack() {
  // @@protoc_insertion_point(destructor:MsgQualifyingJNBack)
  SharedDtor();
}

void MsgQualifyingJNBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingJNBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingJNBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingJNBack_descriptor_;
}

const MsgQualifyingJNBack& MsgQualifyingJNBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frunfast_5fqualifying_2eproto();
  return *default_instance_;
}

MsgQualifyingJNBack* MsgQualifyingJNBack::default_instance_ = NULL;

MsgQualifyingJNBack* MsgQualifyingJNBack::New() const {
  return new MsgQualifyingJNBack;
}

void MsgQualifyingJNBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingJNBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(invite_code_, role_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingJNBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingJNBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_code_)));
          set_has_invite_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (tag == 16) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingJNBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingJNBack)
  return false;
#undef DO_
}

void MsgQualifyingJNBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingJNBack)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_code(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingJNBack)
}

::google::protobuf::uint8* MsgQualifyingJNBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingJNBack)
  // optional uint64 invite_code = 1;
  if (has_invite_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_code(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingJNBack)
  return target;
}

int MsgQualifyingJNBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_code = 1;
    if (has_invite_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_code());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingJNBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingJNBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingJNBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingJNBack::MergeFrom(const MsgQualifyingJNBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_code()) {
      set_invite_code(from.invite_code());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingJNBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingJNBack::CopyFrom(const MsgQualifyingJNBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingJNBack::IsInitialized() const {

  return true;
}

void MsgQualifyingJNBack::Swap(MsgQualifyingJNBack* other) {
  if (other != this) {
    std::swap(invite_code_, other->invite_code_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingJNBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingJNBack_descriptor_;
  metadata.reflection = MsgQualifyingJNBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
