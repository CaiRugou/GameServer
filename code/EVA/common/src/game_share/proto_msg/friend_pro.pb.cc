// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_pro.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend_pro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgFriendGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFriendGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFriendGiftResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFriendGiftResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFriendBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFriendBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFriendDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFriendDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInviteEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInviteEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecommend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecommend_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecommendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecommendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBlackListCont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBlackListCont_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBlackList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBlackList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBindDstInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBindDstInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBindFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBindFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTissueRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTissueRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTissueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTissueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTissueRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTissueRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHandlesTissue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHandlesTissue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTissueData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTissueData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTissueDataCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTissueDataCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TBindFriendStateKind_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_5fpro_2eproto() {
  protobuf_AddDesc_friend_5fpro_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend_pro.proto");
  GOOGLE_CHECK(file != NULL);
  MsgFriendGift_descriptor_ = file->message_type(0);
  static const int MsgFriendGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGift, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGift, money_),
  };
  MsgFriendGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFriendGift_descriptor_,
      MsgFriendGift::default_instance_,
      MsgFriendGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFriendGift));
  MsgFriendGiftResult_descriptor_ = file->message_type(1);
  static const int MsgFriendGiftResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGiftResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGiftResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGiftResult, money_),
  };
  MsgFriendGiftResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFriendGiftResult_descriptor_,
      MsgFriendGiftResult::default_instance_,
      MsgFriendGiftResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGiftResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendGiftResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFriendGiftResult));
  MsgFriendBase_descriptor_ = file->message_type(2);
  static const int MsgFriendBase_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, like_),
  };
  MsgFriendBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFriendBase_descriptor_,
      MsgFriendBase::default_instance_,
      MsgFriendBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFriendBase));
  MsgFriendList_descriptor_ = file->message_type(3);
  static const int MsgFriendList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendList, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendList, friend_list_),
  };
  MsgFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFriendList_descriptor_,
      MsgFriendList::default_instance_,
      MsgFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFriendList));
  MsgFriendDetail_descriptor_ = file->message_type(4);
  static const int MsgFriendDetail_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, username_),
  };
  MsgFriendDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFriendDetail_descriptor_,
      MsgFriendDetail::default_instance_,
      MsgFriendDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFriendDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFriendDetail));
  MsgInviteEnter_descriptor_ = file->message_type(5);
  static const int MsgInviteEnter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteEnter, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteEnter, roomtype_),
  };
  MsgInviteEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInviteEnter_descriptor_,
      MsgInviteEnter::default_instance_,
      MsgInviteEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInviteEnter));
  MsgRecommend_descriptor_ = file->message_type(6);
  static const int MsgRecommend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommend, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommend, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommend, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommend, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommend, name_),
  };
  MsgRecommend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecommend_descriptor_,
      MsgRecommend::default_instance_,
      MsgRecommend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecommend));
  MsgRecommendList_descriptor_ = file->message_type(7);
  static const int MsgRecommendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommendList, list_),
  };
  MsgRecommendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecommendList_descriptor_,
      MsgRecommendList::default_instance_,
      MsgRecommendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecommendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecommendList));
  MsgBlackListCont_descriptor_ = file->message_type(8);
  static const int MsgBlackListCont_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackListCont, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackListCont, black_list_),
  };
  MsgBlackListCont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBlackListCont_descriptor_,
      MsgBlackListCont::default_instance_,
      MsgBlackListCont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackListCont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackListCont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBlackListCont));
  MsgBlackList_descriptor_ = file->message_type(9);
  static const int MsgBlackList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackList, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackList, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackList, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackList, state_),
  };
  MsgBlackList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBlackList_descriptor_,
      MsgBlackList::default_instance_,
      MsgBlackList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBlackList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBlackList));
  MsgBindDstInfo_descriptor_ = file->message_type(10);
  static const int MsgBindDstInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindDstInfo, dst_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindDstInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindDstInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindDstInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindDstInfo, count_),
  };
  MsgBindDstInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBindDstInfo_descriptor_,
      MsgBindDstInfo::default_instance_,
      MsgBindDstInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindDstInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindDstInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBindDstInfo));
  MsgBindFriendInfo_descriptor_ = file->message_type(11);
  static const int MsgBindFriendInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendInfo, dst_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendInfo, src_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendInfo, self_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendInfo, self_count_),
  };
  MsgBindFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBindFriendInfo_descriptor_,
      MsgBindFriendInfo::default_instance_,
      MsgBindFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBindFriendInfo));
  MsgTissueRole_descriptor_ = file->message_type(12);
  static const int MsgTissueRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRole, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRole, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRole, jointime_),
  };
  MsgTissueRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTissueRole_descriptor_,
      MsgTissueRole::default_instance_,
      MsgTissueRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTissueRole));
  MsgTissueGame_descriptor_ = file->message_type(13);
  static const int MsgTissueGame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueGame, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueGame, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueGame, special_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueGame, pay_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueGame, palyer_count_),
  };
  MsgTissueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTissueGame_descriptor_,
      MsgTissueGame::default_instance_,
      MsgTissueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTissueGame));
  MsgTissueRoom_descriptor_ = file->message_type(14);
  static const int MsgTissueRoom_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, room_info_),
  };
  MsgTissueRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTissueRoom_descriptor_,
      MsgTissueRoom::default_instance_,
      MsgTissueRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTissueRoom));
  MsgHandlesTissue_descriptor_ = file->message_type(15);
  static const int MsgHandlesTissue_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, tissue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, tissue_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, tissue_notity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, game_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, applylist_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, handle_role_id_),
  };
  MsgHandlesTissue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHandlesTissue_descriptor_,
      MsgHandlesTissue::default_instance_,
      MsgHandlesTissue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHandlesTissue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHandlesTissue));
  MsgTissueData_descriptor_ = file->message_type(16);
  static const int MsgTissueData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, tissue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, tissue_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, tissue_notity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, room_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, apply_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, tissue_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, cost_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, surpls_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, role_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, game_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, room_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, apply_list_),
  };
  MsgTissueData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTissueData_descriptor_,
      MsgTissueData::default_instance_,
      MsgTissueData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTissueData));
  MsgTissueDataCount_descriptor_ = file->message_type(17);
  static const int MsgTissueDataCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueDataCount, tissue_list_),
  };
  MsgTissueDataCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTissueDataCount_descriptor_,
      MsgTissueDataCount::default_instance_,
      MsgTissueDataCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueDataCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTissueDataCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTissueDataCount));
  TBindFriendStateKind_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_5fpro_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFriendGift_descriptor_, &MsgFriendGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFriendGiftResult_descriptor_, &MsgFriendGiftResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFriendBase_descriptor_, &MsgFriendBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFriendList_descriptor_, &MsgFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFriendDetail_descriptor_, &MsgFriendDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInviteEnter_descriptor_, &MsgInviteEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecommend_descriptor_, &MsgRecommend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecommendList_descriptor_, &MsgRecommendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBlackListCont_descriptor_, &MsgBlackListCont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBlackList_descriptor_, &MsgBlackList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBindDstInfo_descriptor_, &MsgBindDstInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBindFriendInfo_descriptor_, &MsgBindFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTissueRole_descriptor_, &MsgTissueRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTissueGame_descriptor_, &MsgTissueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTissueRoom_descriptor_, &MsgTissueRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHandlesTissue_descriptor_, &MsgHandlesTissue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTissueData_descriptor_, &MsgTissueData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTissueDataCount_descriptor_, &MsgTissueDataCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_5fpro_2eproto() {
  delete MsgFriendGift::default_instance_;
  delete MsgFriendGift_reflection_;
  delete MsgFriendGiftResult::default_instance_;
  delete MsgFriendGiftResult_reflection_;
  delete MsgFriendBase::default_instance_;
  delete MsgFriendBase_reflection_;
  delete MsgFriendList::default_instance_;
  delete MsgFriendList_reflection_;
  delete MsgFriendDetail::default_instance_;
  delete MsgFriendDetail_reflection_;
  delete MsgInviteEnter::default_instance_;
  delete MsgInviteEnter_reflection_;
  delete MsgRecommend::default_instance_;
  delete MsgRecommend_reflection_;
  delete MsgRecommendList::default_instance_;
  delete MsgRecommendList_reflection_;
  delete MsgBlackListCont::default_instance_;
  delete MsgBlackListCont_reflection_;
  delete MsgBlackList::default_instance_;
  delete MsgBlackList_reflection_;
  delete MsgBindDstInfo::default_instance_;
  delete MsgBindDstInfo_reflection_;
  delete MsgBindFriendInfo::default_instance_;
  delete MsgBindFriendInfo_reflection_;
  delete MsgTissueRole::default_instance_;
  delete MsgTissueRole_reflection_;
  delete MsgTissueGame::default_instance_;
  delete MsgTissueGame_reflection_;
  delete MsgTissueRoom::default_instance_;
  delete MsgTissueRoom_reflection_;
  delete MsgHandlesTissue::default_instance_;
  delete MsgHandlesTissue_reflection_;
  delete MsgTissueData::default_instance_;
  delete MsgTissueData_reflection_;
  delete MsgTissueDataCount::default_instance_;
  delete MsgTissueDataCount_reflection_;
}

void protobuf_AddDesc_friend_5fpro_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020friend_pro.proto\032\020public_pro.proto\".\n\r"
    "MsgFriendGift\022\016\n\006roleid\030\001 \001(\004\022\r\n\005money\030\002"
    " \001(\004\">\n\023MsgFriendGiftResult\022\n\n\002id\030\001 \001(\004\022"
    "\014\n\004name\030\002 \001(\t\022\r\n\005money\030\003 \001(\004\"\265\001\n\rMsgFrie"
    "ndBase\022\016\n\006roleid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\020\n\010"
    "portrait\030\003 \001(\t\022\r\n\005state\030\004 \001(\010\022\022\n\nchannel"
    "_id\030\005 \001(\r\022\020\n\010username\030\006 \001(\t\022\025\n\rhead_port"
    "rait\030\007 \001(\r\022\r\n\005money\030\010 \001(\004\022\013\n\003sex\030\t \001(\r\022\014"
    "\n\004like\030\n \001(\r\"C\n\rMsgFriendList\022\r\n\005check\030\001"
    " \001(\r\022#\n\013friend_list\030\002 \003(\0132\016.MsgFriendBas"
    "e\"\305\001\n\017MsgFriendDetail\022\016\n\006roleid\030\001 \001(\004\022\023\n"
    "\013nationality\030\002 \001(\r\022\013\n\003sex\030\003 \001(\r\022\r\n\005money"
    "\030\004 \001(\004\022\020\n\010gametype\030\005 \001(\t\022\033\n\005count\030\006 \001(\0132"
    "\014.MsgKPICount\022\034\n\004info\030\007 \001(\0132\016.MsgFriendB"
    "ase\022\022\n\nchannel_id\030\010 \001(\r\022\020\n\010username\030\t \001("
    "\t\"1\n\016MsgInviteEnter\022\r\n\005tarID\030\001 \001(\004\022\020\n\010ro"
    "omType\030\002 \001(\t\"h\n\014MsgRecommend\022\r\n\005tarID\030\001 "
    "\001(\004\022\025\n\rhead_portrait\030\002 \001(\r\022\022\n\nchannel_id"
    "\030\003 \001(\r\022\020\n\010username\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\"/"
    "\n\020MsgRecommendList\022\033\n\004list\030\001 \003(\0132\r.MsgRe"
    "commend\"D\n\020MsgBlackListCont\022\r\n\005check\030\001 \001"
    "(\r\022!\n\nblack_list\030\002 \003(\0132\r.MsgBlackList\"\\\n"
    "\014MsgBlackList\022\013\n\003pid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t"
    "\022\025\n\rhead_portrait\030\003 \001(\r\022\013\n\003sex\030\004 \001(\r\022\r\n\005"
    "state\030\005 \001(\r\"_\n\016MsgBindDstInfo\022\017\n\007dst_pid"
    "\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\r"
    "\n\005state\030\004 \001(\r\022\r\n\005count\030\005 \001(\r\"o\n\021MsgBindF"
    "riendInfo\022!\n\010dst_list\030\001 \003(\0132\017.MsgBindDst"
    "Info\022\017\n\007src_pid\030\002 \001(\004\022\022\n\nself_state\030\003 \001("
    "\r\022\022\n\nself_count\030\004 \001(\r\"C\n\rMsgTissueRole\022\016"
    "\n\006roleid\030\001 \001(\004\022\020\n\010username\030\002 \001(\t\022\020\n\010join"
    "time\030\003 \001(\r\"t\n\rMsgTissueGame\022\021\n\troom_type"
    "\030\001 \001(\t\022\022\n\nconsume_id\030\002 \001(\r\022\024\n\014special_ki"
    "nd\030\003 \001(\r\022\020\n\010pay_mode\030\004 \001(\r\022\024\n\014palyer_cou"
    "nt\030\005 \001(\r\"\220\001\n\rMsgTissueRoom\022\016\n\006roleid\030\001 \001"
    "(\004\022\020\n\010username\030\002 \001(\t\022\017\n\007room_id\030\003 \001(\004\022\014\n"
    "\004time\030\004 \001(\r\022\024\n\014member_count\030\005 \001(\r\022(\n\troo"
    "m_info\030\006 \001(\0132\025.MsgCreatePrivateRoom\"\351\001\n\020"
    "MsgHandlesTissue\022\021\n\ttissue_id\030\001 \001(\004\022\017\n\007r"
    "ole_id\030\002 \001(\t\022\023\n\013tissue_name\030\003 \001(\t\022\025\n\rtis"
    "sue_notity\030\004 \001(\t\022\017\n\007area_id\030\005 \001(\r\022\r\n\005sta"
    "te\030\006 \001(\r\022!\n\tgame_list\030\007 \003(\0132\016.MsgTissueG"
    "ame\022\017\n\007version\030\010 \001(\004\022\031\n\021applylist_versio"
    "n\030\t \001(\004\022\026\n\016handle_role_id\030\n \001(\004\"\221\003\n\rMsgT"
    "issueData\022\021\n\ttissue_id\030\001 \001(\004\022\023\n\013tissue_n"
    "ame\030\002 \001(\t\022\025\n\rtissue_notity\030\003 \001(\t\022\022\n\nroom"
    "_count\030\004 \001(\r\022\024\n\014member_count\030\005 \001(\r\022\023\n\013ap"
    "ply_count\030\006 \001(\r\022\024\n\014tissue_state\030\007 \001(\r\022\017\n"
    "\007version\030\010 \001(\004\022\017\n\007area_id\030\t \001(\r\022\023\n\013total"
    "_money\030\n \001(\r\022\022\n\ncost_limit\030\013 \001(\r\022\024\n\014surp"
    "ls_money\030\014 \001(\r\022!\n\trole_list\030\r \003(\0132\016.MsgT"
    "issueRole\022!\n\tgame_list\030\016 \003(\0132\016.MsgTissue"
    "Game\022!\n\troom_list\030\017 \003(\0132\016.MsgTissueRoom\022"
    "\"\n\napply_list\030\020 \003(\0132\016.MsgTissueRole\"9\n\022M"
    "sgTissueDataCount\022#\n\013tissue_list\030\001 \003(\0132\016"
    ".MsgTissueData*S\n\024TBindFriendStateKind\022\013"
    "\n\007BF_NULL\020\000\022\026\n\022BF_GET_BIND_REWARD\020\001\022\026\n\022B"
    "F_GET_PLAY_REWARD\020\002", 2299);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend_pro.proto", &protobuf_RegisterTypes);
  MsgFriendGift::default_instance_ = new MsgFriendGift();
  MsgFriendGiftResult::default_instance_ = new MsgFriendGiftResult();
  MsgFriendBase::default_instance_ = new MsgFriendBase();
  MsgFriendList::default_instance_ = new MsgFriendList();
  MsgFriendDetail::default_instance_ = new MsgFriendDetail();
  MsgInviteEnter::default_instance_ = new MsgInviteEnter();
  MsgRecommend::default_instance_ = new MsgRecommend();
  MsgRecommendList::default_instance_ = new MsgRecommendList();
  MsgBlackListCont::default_instance_ = new MsgBlackListCont();
  MsgBlackList::default_instance_ = new MsgBlackList();
  MsgBindDstInfo::default_instance_ = new MsgBindDstInfo();
  MsgBindFriendInfo::default_instance_ = new MsgBindFriendInfo();
  MsgTissueRole::default_instance_ = new MsgTissueRole();
  MsgTissueGame::default_instance_ = new MsgTissueGame();
  MsgTissueRoom::default_instance_ = new MsgTissueRoom();
  MsgHandlesTissue::default_instance_ = new MsgHandlesTissue();
  MsgTissueData::default_instance_ = new MsgTissueData();
  MsgTissueDataCount::default_instance_ = new MsgTissueDataCount();
  MsgFriendGift::default_instance_->InitAsDefaultInstance();
  MsgFriendGiftResult::default_instance_->InitAsDefaultInstance();
  MsgFriendBase::default_instance_->InitAsDefaultInstance();
  MsgFriendList::default_instance_->InitAsDefaultInstance();
  MsgFriendDetail::default_instance_->InitAsDefaultInstance();
  MsgInviteEnter::default_instance_->InitAsDefaultInstance();
  MsgRecommend::default_instance_->InitAsDefaultInstance();
  MsgRecommendList::default_instance_->InitAsDefaultInstance();
  MsgBlackListCont::default_instance_->InitAsDefaultInstance();
  MsgBlackList::default_instance_->InitAsDefaultInstance();
  MsgBindDstInfo::default_instance_->InitAsDefaultInstance();
  MsgBindFriendInfo::default_instance_->InitAsDefaultInstance();
  MsgTissueRole::default_instance_->InitAsDefaultInstance();
  MsgTissueGame::default_instance_->InitAsDefaultInstance();
  MsgTissueRoom::default_instance_->InitAsDefaultInstance();
  MsgHandlesTissue::default_instance_->InitAsDefaultInstance();
  MsgTissueData::default_instance_->InitAsDefaultInstance();
  MsgTissueDataCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_5fpro_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_5fpro_2eproto {
  StaticDescriptorInitializer_friend_5fpro_2eproto() {
    protobuf_AddDesc_friend_5fpro_2eproto();
  }
} static_descriptor_initializer_friend_5fpro_2eproto_;
const ::google::protobuf::EnumDescriptor* TBindFriendStateKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBindFriendStateKind_descriptor_;
}
bool TBindFriendStateKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFriendGift::kRoleidFieldNumber;
const int MsgFriendGift::kMoneyFieldNumber;
#endif  // !_MSC_VER

MsgFriendGift::MsgFriendGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFriendGift)
}

void MsgFriendGift::InitAsDefaultInstance() {
}

MsgFriendGift::MsgFriendGift(const MsgFriendGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFriendGift)
}

void MsgFriendGift::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFriendGift::~MsgFriendGift() {
  // @@protoc_insertion_point(destructor:MsgFriendGift)
  SharedDtor();
}

void MsgFriendGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFriendGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFriendGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFriendGift_descriptor_;
}

const MsgFriendGift& MsgFriendGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgFriendGift* MsgFriendGift::default_instance_ = NULL;

MsgFriendGift* MsgFriendGift::New() const {
  return new MsgFriendGift;
}

void MsgFriendGift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgFriendGift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFriendGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFriendGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint64 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFriendGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFriendGift)
  return false;
#undef DO_
}

void MsgFriendGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFriendGift)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFriendGift)
}

::google::protobuf::uint8* MsgFriendGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFriendGift)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFriendGift)
  return target;
}

int MsgFriendGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFriendGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFriendGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFriendGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFriendGift::MergeFrom(const MsgFriendGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFriendGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFriendGift::CopyFrom(const MsgFriendGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFriendGift::IsInitialized() const {

  return true;
}

void MsgFriendGift::Swap(MsgFriendGift* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFriendGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFriendGift_descriptor_;
  metadata.reflection = MsgFriendGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFriendGiftResult::kIdFieldNumber;
const int MsgFriendGiftResult::kNameFieldNumber;
const int MsgFriendGiftResult::kMoneyFieldNumber;
#endif  // !_MSC_VER

MsgFriendGiftResult::MsgFriendGiftResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFriendGiftResult)
}

void MsgFriendGiftResult::InitAsDefaultInstance() {
}

MsgFriendGiftResult::MsgFriendGiftResult(const MsgFriendGiftResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFriendGiftResult)
}

void MsgFriendGiftResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFriendGiftResult::~MsgFriendGiftResult() {
  // @@protoc_insertion_point(destructor:MsgFriendGiftResult)
  SharedDtor();
}

void MsgFriendGiftResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgFriendGiftResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFriendGiftResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFriendGiftResult_descriptor_;
}

const MsgFriendGiftResult& MsgFriendGiftResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgFriendGiftResult* MsgFriendGiftResult::default_instance_ = NULL;

MsgFriendGiftResult* MsgFriendGiftResult::New() const {
  return new MsgFriendGiftResult;
}

void MsgFriendGiftResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    money_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFriendGiftResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFriendGiftResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional uint64 money = 3;
      case 3: {
        if (tag == 24) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFriendGiftResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFriendGiftResult)
  return false;
#undef DO_
}

void MsgFriendGiftResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFriendGiftResult)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFriendGiftResult)
}

::google::protobuf::uint8* MsgFriendGiftResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFriendGiftResult)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFriendGiftResult)
  return target;
}

int MsgFriendGiftResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFriendGiftResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFriendGiftResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFriendGiftResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFriendGiftResult::MergeFrom(const MsgFriendGiftResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFriendGiftResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFriendGiftResult::CopyFrom(const MsgFriendGiftResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFriendGiftResult::IsInitialized() const {

  return true;
}

void MsgFriendGiftResult::Swap(MsgFriendGiftResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFriendGiftResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFriendGiftResult_descriptor_;
  metadata.reflection = MsgFriendGiftResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFriendBase::kRoleidFieldNumber;
const int MsgFriendBase::kNameFieldNumber;
const int MsgFriendBase::kPortraitFieldNumber;
const int MsgFriendBase::kStateFieldNumber;
const int MsgFriendBase::kChannelIdFieldNumber;
const int MsgFriendBase::kUsernameFieldNumber;
const int MsgFriendBase::kHeadPortraitFieldNumber;
const int MsgFriendBase::kMoneyFieldNumber;
const int MsgFriendBase::kSexFieldNumber;
const int MsgFriendBase::kLikeFieldNumber;
#endif  // !_MSC_VER

MsgFriendBase::MsgFriendBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFriendBase)
}

void MsgFriendBase::InitAsDefaultInstance() {
}

MsgFriendBase::MsgFriendBase(const MsgFriendBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFriendBase)
}

void MsgFriendBase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = false;
  channel_id_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_portrait_ = 0u;
  money_ = GOOGLE_ULONGLONG(0);
  sex_ = 0u;
  like_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFriendBase::~MsgFriendBase() {
  // @@protoc_insertion_point(destructor:MsgFriendBase)
  SharedDtor();
}

void MsgFriendBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void MsgFriendBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFriendBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFriendBase_descriptor_;
}

const MsgFriendBase& MsgFriendBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgFriendBase* MsgFriendBase::default_instance_ = NULL;

MsgFriendBase* MsgFriendBase::New() const {
  return new MsgFriendBase;
}

void MsgFriendBase::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgFriendBase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, channel_id_);
    ZR_(money_, head_portrait_);
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        portrait_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  ZR_(sex_, like_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFriendBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFriendBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_portrait;
        break;
      }

      // optional string portrait = 3;
      case 3: {
        if (tag == 26) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "portrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional bool state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 5;
      case 5: {
        if (tag == 40) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_username;
        break;
      }

      // optional string username = 6;
      case 6: {
        if (tag == 50) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 7;
      case 7: {
        if (tag == 56) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_money;
        break;
      }

      // optional uint64 money = 8;
      case 8: {
        if (tag == 64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 9;
      case 9: {
        if (tag == 72) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_like;
        break;
      }

      // optional uint32 like = 10;
      case 10: {
        if (tag == 80) {
         parse_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_)));
          set_has_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFriendBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFriendBase)
  return false;
#undef DO_
}

void MsgFriendBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFriendBase)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string portrait = 3;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->portrait(), output);
  }

  // optional bool state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->state(), output);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  // optional uint32 head_portrait = 7;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->head_portrait(), output);
  }

  // optional uint64 money = 8;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->money(), output);
  }

  // optional uint32 sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sex(), output);
  }

  // optional uint32 like = 10;
  if (has_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->like(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFriendBase)
}

::google::protobuf::uint8* MsgFriendBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFriendBase)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string portrait = 3;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->portrait(), target);
  }

  // optional bool state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->state(), target);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  // optional uint32 head_portrait = 7;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->head_portrait(), target);
  }

  // optional uint64 money = 8;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->money(), target);
  }

  // optional uint32 sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sex(), target);
  }

  // optional uint32 like = 10;
  if (has_like()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->like(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFriendBase)
  return target;
}

int MsgFriendBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string portrait = 3;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

    // optional bool state = 4;
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string username = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 head_portrait = 7;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

    // optional uint64 money = 8;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 like = 10;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFriendBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFriendBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFriendBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFriendBase::MergeFrom(const MsgFriendBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFriendBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFriendBase::CopyFrom(const MsgFriendBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFriendBase::IsInitialized() const {

  return true;
}

void MsgFriendBase::Swap(MsgFriendBase* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(portrait_, other->portrait_);
    std::swap(state_, other->state_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(username_, other->username_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(money_, other->money_);
    std::swap(sex_, other->sex_);
    std::swap(like_, other->like_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFriendBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFriendBase_descriptor_;
  metadata.reflection = MsgFriendBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFriendList::kCheckFieldNumber;
const int MsgFriendList::kFriendListFieldNumber;
#endif  // !_MSC_VER

MsgFriendList::MsgFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFriendList)
}

void MsgFriendList::InitAsDefaultInstance() {
}

MsgFriendList::MsgFriendList(const MsgFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFriendList)
}

void MsgFriendList::SharedCtor() {
  _cached_size_ = 0;
  check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFriendList::~MsgFriendList() {
  // @@protoc_insertion_point(destructor:MsgFriendList)
  SharedDtor();
}

void MsgFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFriendList_descriptor_;
}

const MsgFriendList& MsgFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgFriendList* MsgFriendList::default_instance_ = NULL;

MsgFriendList* MsgFriendList::New() const {
  return new MsgFriendList;
}

void MsgFriendList::Clear() {
  check_ = 0u;
  friend_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFriendList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 check = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friend_list;
        break;
      }

      // repeated .MsgFriendBase friend_list = 2;
      case 2: {
        if (tag == 18) {
         parse_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friend_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFriendList)
  return false;
#undef DO_
}

void MsgFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFriendList)
  // optional uint32 check = 1;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->check(), output);
  }

  // repeated .MsgFriendBase friend_list = 2;
  for (int i = 0; i < this->friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFriendList)
}

::google::protobuf::uint8* MsgFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFriendList)
  // optional uint32 check = 1;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->check(), target);
  }

  // repeated .MsgFriendBase friend_list = 2;
  for (int i = 0; i < this->friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFriendList)
  return target;
}

int MsgFriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 check = 1;
    if (has_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check());
    }

  }
  // repeated .MsgFriendBase friend_list = 2;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFriendList::MergeFrom(const MsgFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_list_.MergeFrom(from.friend_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFriendList::CopyFrom(const MsgFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFriendList::IsInitialized() const {

  return true;
}

void MsgFriendList::Swap(MsgFriendList* other) {
  if (other != this) {
    std::swap(check_, other->check_);
    friend_list_.Swap(&other->friend_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFriendList_descriptor_;
  metadata.reflection = MsgFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFriendDetail::kRoleidFieldNumber;
const int MsgFriendDetail::kNationalityFieldNumber;
const int MsgFriendDetail::kSexFieldNumber;
const int MsgFriendDetail::kMoneyFieldNumber;
const int MsgFriendDetail::kGametypeFieldNumber;
const int MsgFriendDetail::kCountFieldNumber;
const int MsgFriendDetail::kInfoFieldNumber;
const int MsgFriendDetail::kChannelIdFieldNumber;
const int MsgFriendDetail::kUsernameFieldNumber;
#endif  // !_MSC_VER

MsgFriendDetail::MsgFriendDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFriendDetail)
}

void MsgFriendDetail::InitAsDefaultInstance() {
  count_ = const_cast< ::MsgKPICount*>(&::MsgKPICount::default_instance());
  info_ = const_cast< ::MsgFriendBase*>(&::MsgFriendBase::default_instance());
}

MsgFriendDetail::MsgFriendDetail(const MsgFriendDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFriendDetail)
}

void MsgFriendDetail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  nationality_ = 0u;
  sex_ = 0u;
  money_ = GOOGLE_ULONGLONG(0);
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = NULL;
  info_ = NULL;
  channel_id_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFriendDetail::~MsgFriendDetail() {
  // @@protoc_insertion_point(destructor:MsgFriendDetail)
  SharedDtor();
}

void MsgFriendDetail::SharedDtor() {
  if (gametype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gametype_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
    delete count_;
    delete info_;
  }
}

void MsgFriendDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFriendDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFriendDetail_descriptor_;
}

const MsgFriendDetail& MsgFriendDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgFriendDetail* MsgFriendDetail::default_instance_ = NULL;

MsgFriendDetail* MsgFriendDetail::New() const {
  return new MsgFriendDetail;
}

void MsgFriendDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgFriendDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, money_);
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gametype_->clear();
      }
    }
    if (has_count()) {
      if (count_ != NULL) count_->::MsgKPICount::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::MsgFriendBase::Clear();
    }
    channel_id_ = 0u;
  }
  if (has_username()) {
    if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      username_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFriendDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFriendDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nationality;
        break;
      }

      // optional uint32 nationality = 2;
      case 2: {
        if (tag == 16) {
         parse_nationality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nationality_)));
          set_has_nationality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional uint64 money = 4;
      case 4: {
        if (tag == 32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gametype;
        break;
      }

      // optional string gametype = 5;
      case 5: {
        if (tag == 42) {
         parse_gametype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gametype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_count;
        break;
      }

      // optional .MsgKPICount count = 6;
      case 6: {
        if (tag == 50) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // optional .MsgFriendBase info = 7;
      case 7: {
        if (tag == 58) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 8;
      case 8: {
        if (tag == 64) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_username;
        break;
      }

      // optional string username = 9;
      case 9: {
        if (tag == 74) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFriendDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFriendDetail)
  return false;
#undef DO_
}

void MsgFriendDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFriendDetail)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 nationality = 2;
  if (has_nationality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nationality(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional uint64 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->money(), output);
  }

  // optional string gametype = 5;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gametype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gametype(), output);
  }

  // optional .MsgKPICount count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->count(), output);
  }

  // optional .MsgFriendBase info = 7;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info(), output);
  }

  // optional uint32 channel_id = 8;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->channel_id(), output);
  }

  // optional string username = 9;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFriendDetail)
}

::google::protobuf::uint8* MsgFriendDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFriendDetail)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 nationality = 2;
  if (has_nationality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nationality(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional uint64 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->money(), target);
  }

  // optional string gametype = 5;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gametype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gametype(), target);
  }

  // optional .MsgKPICount count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->count(), target);
  }

  // optional .MsgFriendBase info = 7;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->info(), target);
  }

  // optional uint32 channel_id = 8;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->channel_id(), target);
  }

  // optional string username = 9;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFriendDetail)
  return target;
}

int MsgFriendDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 nationality = 2;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nationality());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint64 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // optional string gametype = 5;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }

    // optional .MsgKPICount count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

    // optional .MsgFriendBase info = 7;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 channel_id = 8;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string username = 9;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFriendDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFriendDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFriendDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFriendDetail::MergeFrom(const MsgFriendDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_nationality()) {
      set_nationality(from.nationality());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_count()) {
      mutable_count()->::MsgKPICount::MergeFrom(from.count());
    }
    if (from.has_info()) {
      mutable_info()->::MsgFriendBase::MergeFrom(from.info());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFriendDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFriendDetail::CopyFrom(const MsgFriendDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFriendDetail::IsInitialized() const {

  return true;
}

void MsgFriendDetail::Swap(MsgFriendDetail* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(nationality_, other->nationality_);
    std::swap(sex_, other->sex_);
    std::swap(money_, other->money_);
    std::swap(gametype_, other->gametype_);
    std::swap(count_, other->count_);
    std::swap(info_, other->info_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFriendDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFriendDetail_descriptor_;
  metadata.reflection = MsgFriendDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInviteEnter::kTarIDFieldNumber;
const int MsgInviteEnter::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

MsgInviteEnter::MsgInviteEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgInviteEnter)
}

void MsgInviteEnter::InitAsDefaultInstance() {
}

MsgInviteEnter::MsgInviteEnter(const MsgInviteEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgInviteEnter)
}

void MsgInviteEnter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tarid_ = GOOGLE_ULONGLONG(0);
  roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInviteEnter::~MsgInviteEnter() {
  // @@protoc_insertion_point(destructor:MsgInviteEnter)
  SharedDtor();
}

void MsgInviteEnter::SharedDtor() {
  if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomtype_;
  }
  if (this != default_instance_) {
  }
}

void MsgInviteEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInviteEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInviteEnter_descriptor_;
}

const MsgInviteEnter& MsgInviteEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgInviteEnter* MsgInviteEnter::default_instance_ = NULL;

MsgInviteEnter* MsgInviteEnter::New() const {
  return new MsgInviteEnter;
}

void MsgInviteEnter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tarid_ = GOOGLE_ULONGLONG(0);
    if (has_roomtype()) {
      if (roomtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomtype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInviteEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgInviteEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tarID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomType;
        break;
      }

      // optional string roomType = 2;
      case 2: {
        if (tag == 18) {
         parse_roomType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomtype().data(), this->roomtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgInviteEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgInviteEnter)
  return false;
#undef DO_
}

void MsgInviteEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgInviteEnter)
  // optional uint64 tarID = 1;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tarid(), output);
  }

  // optional string roomType = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgInviteEnter)
}

::google::protobuf::uint8* MsgInviteEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgInviteEnter)
  // optional uint64 tarID = 1;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tarid(), target);
  }

  // optional string roomType = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgInviteEnter)
  return target;
}

int MsgInviteEnter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tarID = 1;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tarid());
    }

    // optional string roomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInviteEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInviteEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInviteEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInviteEnter::MergeFrom(const MsgInviteEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInviteEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInviteEnter::CopyFrom(const MsgInviteEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInviteEnter::IsInitialized() const {

  return true;
}

void MsgInviteEnter::Swap(MsgInviteEnter* other) {
  if (other != this) {
    std::swap(tarid_, other->tarid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInviteEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInviteEnter_descriptor_;
  metadata.reflection = MsgInviteEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecommend::kTarIDFieldNumber;
const int MsgRecommend::kHeadPortraitFieldNumber;
const int MsgRecommend::kChannelIdFieldNumber;
const int MsgRecommend::kUsernameFieldNumber;
const int MsgRecommend::kNameFieldNumber;
#endif  // !_MSC_VER

MsgRecommend::MsgRecommend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecommend)
}

void MsgRecommend::InitAsDefaultInstance() {
}

MsgRecommend::MsgRecommend(const MsgRecommend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecommend)
}

void MsgRecommend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tarid_ = GOOGLE_ULONGLONG(0);
  head_portrait_ = 0u;
  channel_id_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecommend::~MsgRecommend() {
  // @@protoc_insertion_point(destructor:MsgRecommend)
  SharedDtor();
}

void MsgRecommend::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgRecommend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecommend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecommend_descriptor_;
}

const MsgRecommend& MsgRecommend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgRecommend* MsgRecommend::default_instance_ = NULL;

MsgRecommend* MsgRecommend::New() const {
  return new MsgRecommend;
}

void MsgRecommend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecommend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(tarid_, channel_id_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecommend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecommend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tarID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 2;
      case 2: {
        if (tag == 16) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // optional string username = 4;
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecommend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecommend)
  return false;
#undef DO_
}

void MsgRecommend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecommend)
  // optional uint64 tarID = 1;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tarid(), output);
  }

  // optional uint32 head_portrait = 2;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_portrait(), output);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecommend)
}

::google::protobuf::uint8* MsgRecommend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecommend)
  // optional uint64 tarID = 1;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tarid(), target);
  }

  // optional uint32 head_portrait = 2;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_portrait(), target);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecommend)
  return target;
}

int MsgRecommend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tarID = 1;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tarid());
    }

    // optional uint32 head_portrait = 2;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecommend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecommend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecommend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecommend::MergeFrom(const MsgRecommend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecommend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecommend::CopyFrom(const MsgRecommend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecommend::IsInitialized() const {

  return true;
}

void MsgRecommend::Swap(MsgRecommend* other) {
  if (other != this) {
    std::swap(tarid_, other->tarid_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(username_, other->username_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecommend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecommend_descriptor_;
  metadata.reflection = MsgRecommend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecommendList::kListFieldNumber;
#endif  // !_MSC_VER

MsgRecommendList::MsgRecommendList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecommendList)
}

void MsgRecommendList::InitAsDefaultInstance() {
}

MsgRecommendList::MsgRecommendList(const MsgRecommendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecommendList)
}

void MsgRecommendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecommendList::~MsgRecommendList() {
  // @@protoc_insertion_point(destructor:MsgRecommendList)
  SharedDtor();
}

void MsgRecommendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecommendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecommendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecommendList_descriptor_;
}

const MsgRecommendList& MsgRecommendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgRecommendList* MsgRecommendList::default_instance_ = NULL;

MsgRecommendList* MsgRecommendList::New() const {
  return new MsgRecommendList;
}

void MsgRecommendList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecommendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecommendList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgRecommend list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecommendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecommendList)
  return false;
#undef DO_
}

void MsgRecommendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecommendList)
  // repeated .MsgRecommend list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecommendList)
}

::google::protobuf::uint8* MsgRecommendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecommendList)
  // repeated .MsgRecommend list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecommendList)
  return target;
}

int MsgRecommendList::ByteSize() const {
  int total_size = 0;

  // repeated .MsgRecommend list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecommendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecommendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecommendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecommendList::MergeFrom(const MsgRecommendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecommendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecommendList::CopyFrom(const MsgRecommendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecommendList::IsInitialized() const {

  return true;
}

void MsgRecommendList::Swap(MsgRecommendList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecommendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecommendList_descriptor_;
  metadata.reflection = MsgRecommendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBlackListCont::kCheckFieldNumber;
const int MsgBlackListCont::kBlackListFieldNumber;
#endif  // !_MSC_VER

MsgBlackListCont::MsgBlackListCont()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBlackListCont)
}

void MsgBlackListCont::InitAsDefaultInstance() {
}

MsgBlackListCont::MsgBlackListCont(const MsgBlackListCont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBlackListCont)
}

void MsgBlackListCont::SharedCtor() {
  _cached_size_ = 0;
  check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBlackListCont::~MsgBlackListCont() {
  // @@protoc_insertion_point(destructor:MsgBlackListCont)
  SharedDtor();
}

void MsgBlackListCont::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBlackListCont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBlackListCont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBlackListCont_descriptor_;
}

const MsgBlackListCont& MsgBlackListCont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgBlackListCont* MsgBlackListCont::default_instance_ = NULL;

MsgBlackListCont* MsgBlackListCont::New() const {
  return new MsgBlackListCont;
}

void MsgBlackListCont::Clear() {
  check_ = 0u;
  black_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBlackListCont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBlackListCont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 check = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_black_list;
        break;
      }

      // repeated .MsgBlackList black_list = 2;
      case 2: {
        if (tag == 18) {
         parse_black_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_black_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_black_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBlackListCont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBlackListCont)
  return false;
#undef DO_
}

void MsgBlackListCont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBlackListCont)
  // optional uint32 check = 1;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->check(), output);
  }

  // repeated .MsgBlackList black_list = 2;
  for (int i = 0; i < this->black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->black_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBlackListCont)
}

::google::protobuf::uint8* MsgBlackListCont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBlackListCont)
  // optional uint32 check = 1;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->check(), target);
  }

  // repeated .MsgBlackList black_list = 2;
  for (int i = 0; i < this->black_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->black_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBlackListCont)
  return target;
}

int MsgBlackListCont::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 check = 1;
    if (has_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check());
    }

  }
  // repeated .MsgBlackList black_list = 2;
  total_size += 1 * this->black_list_size();
  for (int i = 0; i < this->black_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->black_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBlackListCont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBlackListCont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBlackListCont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBlackListCont::MergeFrom(const MsgBlackListCont& from) {
  GOOGLE_CHECK_NE(&from, this);
  black_list_.MergeFrom(from.black_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBlackListCont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlackListCont::CopyFrom(const MsgBlackListCont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlackListCont::IsInitialized() const {

  return true;
}

void MsgBlackListCont::Swap(MsgBlackListCont* other) {
  if (other != this) {
    std::swap(check_, other->check_);
    black_list_.Swap(&other->black_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBlackListCont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBlackListCont_descriptor_;
  metadata.reflection = MsgBlackListCont_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBlackList::kPidFieldNumber;
const int MsgBlackList::kNameFieldNumber;
const int MsgBlackList::kHeadPortraitFieldNumber;
const int MsgBlackList::kSexFieldNumber;
const int MsgBlackList::kStateFieldNumber;
#endif  // !_MSC_VER

MsgBlackList::MsgBlackList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBlackList)
}

void MsgBlackList::InitAsDefaultInstance() {
}

MsgBlackList::MsgBlackList(const MsgBlackList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBlackList)
}

void MsgBlackList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_portrait_ = 0u;
  sex_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBlackList::~MsgBlackList() {
  // @@protoc_insertion_point(destructor:MsgBlackList)
  SharedDtor();
}

void MsgBlackList::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgBlackList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBlackList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBlackList_descriptor_;
}

const MsgBlackList& MsgBlackList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgBlackList* MsgBlackList::default_instance_ = NULL;

MsgBlackList* MsgBlackList::New() const {
  return new MsgBlackList;
}

void MsgBlackList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBlackList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(head_portrait_, state_);
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBlackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBlackList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 3;
      case 3: {
        if (tag == 24) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBlackList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBlackList)
  return false;
#undef DO_
}

void MsgBlackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBlackList)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 head_portrait = 3;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_portrait(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBlackList)
}

::google::protobuf::uint8* MsgBlackList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBlackList)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 head_portrait = 3;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_portrait(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBlackList)
  return target;
}

int MsgBlackList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_portrait = 3;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBlackList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBlackList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBlackList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBlackList::MergeFrom(const MsgBlackList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBlackList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBlackList::CopyFrom(const MsgBlackList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBlackList::IsInitialized() const {

  return true;
}

void MsgBlackList::Swap(MsgBlackList* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(sex_, other->sex_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBlackList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBlackList_descriptor_;
  metadata.reflection = MsgBlackList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBindDstInfo::kDstPidFieldNumber;
const int MsgBindDstInfo::kNameFieldNumber;
const int MsgBindDstInfo::kUsernameFieldNumber;
const int MsgBindDstInfo::kStateFieldNumber;
const int MsgBindDstInfo::kCountFieldNumber;
#endif  // !_MSC_VER

MsgBindDstInfo::MsgBindDstInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBindDstInfo)
}

void MsgBindDstInfo::InitAsDefaultInstance() {
}

MsgBindDstInfo::MsgBindDstInfo(const MsgBindDstInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBindDstInfo)
}

void MsgBindDstInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dst_pid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBindDstInfo::~MsgBindDstInfo() {
  // @@protoc_insertion_point(destructor:MsgBindDstInfo)
  SharedDtor();
}

void MsgBindDstInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void MsgBindDstInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBindDstInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBindDstInfo_descriptor_;
}

const MsgBindDstInfo& MsgBindDstInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgBindDstInfo* MsgBindDstInfo::default_instance_ = NULL;

MsgBindDstInfo* MsgBindDstInfo::New() const {
  return new MsgBindDstInfo;
}

void MsgBindDstInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBindDstInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(state_, count_);
    dst_pid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBindDstInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBindDstInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dst_pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_pid_)));
          set_has_dst_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional uint32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBindDstInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBindDstInfo)
  return false;
#undef DO_
}

void MsgBindDstInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBindDstInfo)
  // optional uint64 dst_pid = 1;
  if (has_dst_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst_pid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBindDstInfo)
}

::google::protobuf::uint8* MsgBindDstInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBindDstInfo)
  // optional uint64 dst_pid = 1;
  if (has_dst_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst_pid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBindDstInfo)
  return target;
}

int MsgBindDstInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dst_pid = 1;
    if (has_dst_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_pid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBindDstInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBindDstInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBindDstInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBindDstInfo::MergeFrom(const MsgBindDstInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_pid()) {
      set_dst_pid(from.dst_pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBindDstInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindDstInfo::CopyFrom(const MsgBindDstInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindDstInfo::IsInitialized() const {

  return true;
}

void MsgBindDstInfo::Swap(MsgBindDstInfo* other) {
  if (other != this) {
    std::swap(dst_pid_, other->dst_pid_);
    std::swap(name_, other->name_);
    std::swap(username_, other->username_);
    std::swap(state_, other->state_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBindDstInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBindDstInfo_descriptor_;
  metadata.reflection = MsgBindDstInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBindFriendInfo::kDstListFieldNumber;
const int MsgBindFriendInfo::kSrcPidFieldNumber;
const int MsgBindFriendInfo::kSelfStateFieldNumber;
const int MsgBindFriendInfo::kSelfCountFieldNumber;
#endif  // !_MSC_VER

MsgBindFriendInfo::MsgBindFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBindFriendInfo)
}

void MsgBindFriendInfo::InitAsDefaultInstance() {
}

MsgBindFriendInfo::MsgBindFriendInfo(const MsgBindFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBindFriendInfo)
}

void MsgBindFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  src_pid_ = GOOGLE_ULONGLONG(0);
  self_state_ = 0u;
  self_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBindFriendInfo::~MsgBindFriendInfo() {
  // @@protoc_insertion_point(destructor:MsgBindFriendInfo)
  SharedDtor();
}

void MsgBindFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBindFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBindFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBindFriendInfo_descriptor_;
}

const MsgBindFriendInfo& MsgBindFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgBindFriendInfo* MsgBindFriendInfo::default_instance_ = NULL;

MsgBindFriendInfo* MsgBindFriendInfo::New() const {
  return new MsgBindFriendInfo;
}

void MsgBindFriendInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBindFriendInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(src_pid_, self_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  dst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBindFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBindFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgBindDstInfo dst_list = 1;
      case 1: {
        if (tag == 10) {
         parse_dst_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dst_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dst_list;
        if (input->ExpectTag(16)) goto parse_src_pid;
        break;
      }

      // optional uint64 src_pid = 2;
      case 2: {
        if (tag == 16) {
         parse_src_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_pid_)));
          set_has_src_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_self_state;
        break;
      }

      // optional uint32 self_state = 3;
      case 3: {
        if (tag == 24) {
         parse_self_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_state_)));
          set_has_self_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_self_count;
        break;
      }

      // optional uint32 self_count = 4;
      case 4: {
        if (tag == 32) {
         parse_self_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_count_)));
          set_has_self_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBindFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBindFriendInfo)
  return false;
#undef DO_
}

void MsgBindFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBindFriendInfo)
  // repeated .MsgBindDstInfo dst_list = 1;
  for (int i = 0; i < this->dst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dst_list(i), output);
  }

  // optional uint64 src_pid = 2;
  if (has_src_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->src_pid(), output);
  }

  // optional uint32 self_state = 3;
  if (has_self_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->self_state(), output);
  }

  // optional uint32 self_count = 4;
  if (has_self_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->self_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBindFriendInfo)
}

::google::protobuf::uint8* MsgBindFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBindFriendInfo)
  // repeated .MsgBindDstInfo dst_list = 1;
  for (int i = 0; i < this->dst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dst_list(i), target);
  }

  // optional uint64 src_pid = 2;
  if (has_src_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->src_pid(), target);
  }

  // optional uint32 self_state = 3;
  if (has_self_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->self_state(), target);
  }

  // optional uint32 self_count = 4;
  if (has_self_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->self_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBindFriendInfo)
  return target;
}

int MsgBindFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 src_pid = 2;
    if (has_src_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_pid());
    }

    // optional uint32 self_state = 3;
    if (has_self_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_state());
    }

    // optional uint32 self_count = 4;
    if (has_self_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_count());
    }

  }
  // repeated .MsgBindDstInfo dst_list = 1;
  total_size += 1 * this->dst_list_size();
  for (int i = 0; i < this->dst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBindFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBindFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBindFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBindFriendInfo::MergeFrom(const MsgBindFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dst_list_.MergeFrom(from.dst_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_src_pid()) {
      set_src_pid(from.src_pid());
    }
    if (from.has_self_state()) {
      set_self_state(from.self_state());
    }
    if (from.has_self_count()) {
      set_self_count(from.self_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBindFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindFriendInfo::CopyFrom(const MsgBindFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindFriendInfo::IsInitialized() const {

  return true;
}

void MsgBindFriendInfo::Swap(MsgBindFriendInfo* other) {
  if (other != this) {
    dst_list_.Swap(&other->dst_list_);
    std::swap(src_pid_, other->src_pid_);
    std::swap(self_state_, other->self_state_);
    std::swap(self_count_, other->self_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBindFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBindFriendInfo_descriptor_;
  metadata.reflection = MsgBindFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTissueRole::kRoleidFieldNumber;
const int MsgTissueRole::kUsernameFieldNumber;
const int MsgTissueRole::kJointimeFieldNumber;
#endif  // !_MSC_VER

MsgTissueRole::MsgTissueRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgTissueRole)
}

void MsgTissueRole::InitAsDefaultInstance() {
}

MsgTissueRole::MsgTissueRole(const MsgTissueRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgTissueRole)
}

void MsgTissueRole::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jointime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTissueRole::~MsgTissueRole() {
  // @@protoc_insertion_point(destructor:MsgTissueRole)
  SharedDtor();
}

void MsgTissueRole::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void MsgTissueRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTissueRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTissueRole_descriptor_;
}

const MsgTissueRole& MsgTissueRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgTissueRole* MsgTissueRole::default_instance_ = NULL;

MsgTissueRole* MsgTissueRole::New() const {
  return new MsgTissueRole;
}

void MsgTissueRole::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    jointime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTissueRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgTissueRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_jointime;
        break;
      }

      // optional uint32 jointime = 3;
      case 3: {
        if (tag == 24) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgTissueRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgTissueRole)
  return false;
#undef DO_
}

void MsgTissueRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgTissueRole)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional uint32 jointime = 3;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->jointime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgTissueRole)
}

::google::protobuf::uint8* MsgTissueRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTissueRole)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional uint32 jointime = 3;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->jointime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTissueRole)
  return target;
}

int MsgTissueRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 jointime = 3;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTissueRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTissueRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTissueRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTissueRole::MergeFrom(const MsgTissueRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTissueRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTissueRole::CopyFrom(const MsgTissueRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTissueRole::IsInitialized() const {

  return true;
}

void MsgTissueRole::Swap(MsgTissueRole* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(username_, other->username_);
    std::swap(jointime_, other->jointime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTissueRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTissueRole_descriptor_;
  metadata.reflection = MsgTissueRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTissueGame::kRoomTypeFieldNumber;
const int MsgTissueGame::kConsumeIdFieldNumber;
const int MsgTissueGame::kSpecialKindFieldNumber;
const int MsgTissueGame::kPayModeFieldNumber;
const int MsgTissueGame::kPalyerCountFieldNumber;
#endif  // !_MSC_VER

MsgTissueGame::MsgTissueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgTissueGame)
}

void MsgTissueGame::InitAsDefaultInstance() {
}

MsgTissueGame::MsgTissueGame(const MsgTissueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgTissueGame)
}

void MsgTissueGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consume_id_ = 0u;
  special_kind_ = 0u;
  pay_mode_ = 0u;
  palyer_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTissueGame::~MsgTissueGame() {
  // @@protoc_insertion_point(destructor:MsgTissueGame)
  SharedDtor();
}

void MsgTissueGame::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgTissueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTissueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTissueGame_descriptor_;
}

const MsgTissueGame& MsgTissueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgTissueGame* MsgTissueGame::default_instance_ = NULL;

MsgTissueGame* MsgTissueGame::New() const {
  return new MsgTissueGame;
}

void MsgTissueGame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTissueGame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(consume_id_, palyer_count_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTissueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgTissueGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_consume_id;
        break;
      }

      // optional uint32 consume_id = 2;
      case 2: {
        if (tag == 16) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_special_kind;
        break;
      }

      // optional uint32 special_kind = 3;
      case 3: {
        if (tag == 24) {
         parse_special_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_kind_)));
          set_has_special_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pay_mode;
        break;
      }

      // optional uint32 pay_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_pay_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_mode_)));
          set_has_pay_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_palyer_count;
        break;
      }

      // optional uint32 palyer_count = 5;
      case 5: {
        if (tag == 40) {
         parse_palyer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &palyer_count_)));
          set_has_palyer_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgTissueGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgTissueGame)
  return false;
#undef DO_
}

void MsgTissueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgTissueGame)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // optional uint32 consume_id = 2;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume_id(), output);
  }

  // optional uint32 special_kind = 3;
  if (has_special_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->special_kind(), output);
  }

  // optional uint32 pay_mode = 4;
  if (has_pay_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pay_mode(), output);
  }

  // optional uint32 palyer_count = 5;
  if (has_palyer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->palyer_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgTissueGame)
}

::google::protobuf::uint8* MsgTissueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTissueGame)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // optional uint32 consume_id = 2;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume_id(), target);
  }

  // optional uint32 special_kind = 3;
  if (has_special_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->special_kind(), target);
  }

  // optional uint32 pay_mode = 4;
  if (has_pay_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pay_mode(), target);
  }

  // optional uint32 palyer_count = 5;
  if (has_palyer_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->palyer_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTissueGame)
  return target;
}

int MsgTissueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 consume_id = 2;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // optional uint32 special_kind = 3;
    if (has_special_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_kind());
    }

    // optional uint32 pay_mode = 4;
    if (has_pay_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_mode());
    }

    // optional uint32 palyer_count = 5;
    if (has_palyer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->palyer_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTissueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTissueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTissueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTissueGame::MergeFrom(const MsgTissueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_special_kind()) {
      set_special_kind(from.special_kind());
    }
    if (from.has_pay_mode()) {
      set_pay_mode(from.pay_mode());
    }
    if (from.has_palyer_count()) {
      set_palyer_count(from.palyer_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTissueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTissueGame::CopyFrom(const MsgTissueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTissueGame::IsInitialized() const {

  return true;
}

void MsgTissueGame::Swap(MsgTissueGame* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(consume_id_, other->consume_id_);
    std::swap(special_kind_, other->special_kind_);
    std::swap(pay_mode_, other->pay_mode_);
    std::swap(palyer_count_, other->palyer_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTissueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTissueGame_descriptor_;
  metadata.reflection = MsgTissueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTissueRoom::kRoleidFieldNumber;
const int MsgTissueRoom::kUsernameFieldNumber;
const int MsgTissueRoom::kRoomIdFieldNumber;
const int MsgTissueRoom::kTimeFieldNumber;
const int MsgTissueRoom::kMemberCountFieldNumber;
const int MsgTissueRoom::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

MsgTissueRoom::MsgTissueRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgTissueRoom)
}

void MsgTissueRoom::InitAsDefaultInstance() {
  room_info_ = const_cast< ::MsgCreatePrivateRoom*>(&::MsgCreatePrivateRoom::default_instance());
}

MsgTissueRoom::MsgTissueRoom(const MsgTissueRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgTissueRoom)
}

void MsgTissueRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  member_count_ = 0u;
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTissueRoom::~MsgTissueRoom() {
  // @@protoc_insertion_point(destructor:MsgTissueRoom)
  SharedDtor();
}

void MsgTissueRoom::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
    delete room_info_;
  }
}

void MsgTissueRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTissueRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTissueRoom_descriptor_;
}

const MsgTissueRoom& MsgTissueRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgTissueRoom* MsgTissueRoom::default_instance_ = NULL;

MsgTissueRoom* MsgTissueRoom::New() const {
  return new MsgTissueRoom;
}

void MsgTissueRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTissueRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(room_id_, member_count_);
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::MsgCreatePrivateRoom::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTissueRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgTissueRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 3;
      case 3: {
        if (tag == 24) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 5;
      case 5: {
        if (tag == 40) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_room_info;
        break;
      }

      // optional .MsgCreatePrivateRoom room_info = 6;
      case 6: {
        if (tag == 50) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgTissueRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgTissueRoom)
  return false;
#undef DO_
}

void MsgTissueRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgTissueRoom)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional uint64 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional uint32 member_count = 5;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->member_count(), output);
  }

  // optional .MsgCreatePrivateRoom room_info = 6;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->room_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgTissueRoom)
}

::google::protobuf::uint8* MsgTissueRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTissueRoom)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional uint64 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional uint32 member_count = 5;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->member_count(), target);
  }

  // optional .MsgCreatePrivateRoom room_info = 6;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->room_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTissueRoom)
  return target;
}

int MsgTissueRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint64 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 member_count = 5;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

    // optional .MsgCreatePrivateRoom room_info = 6;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTissueRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTissueRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTissueRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTissueRoom::MergeFrom(const MsgTissueRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::MsgCreatePrivateRoom::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTissueRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTissueRoom::CopyFrom(const MsgTissueRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTissueRoom::IsInitialized() const {

  return true;
}

void MsgTissueRoom::Swap(MsgTissueRoom* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(username_, other->username_);
    std::swap(room_id_, other->room_id_);
    std::swap(time_, other->time_);
    std::swap(member_count_, other->member_count_);
    std::swap(room_info_, other->room_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTissueRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTissueRoom_descriptor_;
  metadata.reflection = MsgTissueRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHandlesTissue::kTissueIdFieldNumber;
const int MsgHandlesTissue::kRoleIdFieldNumber;
const int MsgHandlesTissue::kTissueNameFieldNumber;
const int MsgHandlesTissue::kTissueNotityFieldNumber;
const int MsgHandlesTissue::kAreaIdFieldNumber;
const int MsgHandlesTissue::kStateFieldNumber;
const int MsgHandlesTissue::kGameListFieldNumber;
const int MsgHandlesTissue::kVersionFieldNumber;
const int MsgHandlesTissue::kApplylistVersionFieldNumber;
const int MsgHandlesTissue::kHandleRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgHandlesTissue::MsgHandlesTissue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHandlesTissue)
}

void MsgHandlesTissue::InitAsDefaultInstance() {
}

MsgHandlesTissue::MsgHandlesTissue(const MsgHandlesTissue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHandlesTissue)
}

void MsgHandlesTissue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tissue_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tissue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tissue_notity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_id_ = 0u;
  state_ = 0u;
  version_ = GOOGLE_ULONGLONG(0);
  applylist_version_ = GOOGLE_ULONGLONG(0);
  handle_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHandlesTissue::~MsgHandlesTissue() {
  // @@protoc_insertion_point(destructor:MsgHandlesTissue)
  SharedDtor();
}

void MsgHandlesTissue::SharedDtor() {
  if (role_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_id_;
  }
  if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_name_;
  }
  if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_notity_;
  }
  if (this != default_instance_) {
  }
}

void MsgHandlesTissue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHandlesTissue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHandlesTissue_descriptor_;
}

const MsgHandlesTissue& MsgHandlesTissue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgHandlesTissue* MsgHandlesTissue::default_instance_ = NULL;

MsgHandlesTissue* MsgHandlesTissue::New() const {
  return new MsgHandlesTissue;
}

void MsgHandlesTissue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgHandlesTissue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(area_id_, state_);
    tissue_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_id()) {
      if (role_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        role_id_->clear();
      }
    }
    if (has_tissue_name()) {
      if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tissue_name_->clear();
      }
    }
    if (has_tissue_notity()) {
      if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tissue_notity_->clear();
      }
    }
    version_ = GOOGLE_ULONGLONG(0);
  }
  ZR_(applylist_version_, handle_role_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHandlesTissue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHandlesTissue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tissue_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tissue_id_)));
          set_has_tissue_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role_id;
        break;
      }

      // optional string role_id = 2;
      case 2: {
        if (tag == 18) {
         parse_role_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role_id().data(), this->role_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tissue_name;
        break;
      }

      // optional string tissue_name = 3;
      case 3: {
        if (tag == 26) {
         parse_tissue_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tissue_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tissue_name().data(), this->tissue_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tissue_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tissue_notity;
        break;
      }

      // optional string tissue_notity = 4;
      case 4: {
        if (tag == 34) {
         parse_tissue_notity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tissue_notity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tissue_notity().data(), this->tissue_notity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tissue_notity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 5;
      case 5: {
        if (tag == 40) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional uint32 state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_game_list;
        break;
      }

      // repeated .MsgTissueGame game_list = 7;
      case 7: {
        if (tag == 58) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_game_list;
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional uint64 version = 8;
      case 8: {
        if (tag == 64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_applylist_version;
        break;
      }

      // optional uint64 applylist_version = 9;
      case 9: {
        if (tag == 72) {
         parse_applylist_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applylist_version_)));
          set_has_applylist_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_handle_role_id;
        break;
      }

      // optional uint64 handle_role_id = 10;
      case 10: {
        if (tag == 80) {
         parse_handle_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_role_id_)));
          set_has_handle_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHandlesTissue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHandlesTissue)
  return false;
#undef DO_
}

void MsgHandlesTissue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHandlesTissue)
  // optional uint64 tissue_id = 1;
  if (has_tissue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tissue_id(), output);
  }

  // optional string role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_id(), output);
  }

  // optional string tissue_name = 3;
  if (has_tissue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_name().data(), this->tissue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tissue_name(), output);
  }

  // optional string tissue_notity = 4;
  if (has_tissue_notity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_notity().data(), this->tissue_notity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_notity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tissue_notity(), output);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->area_id(), output);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // repeated .MsgTissueGame game_list = 7;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->game_list(i), output);
  }

  // optional uint64 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->version(), output);
  }

  // optional uint64 applylist_version = 9;
  if (has_applylist_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->applylist_version(), output);
  }

  // optional uint64 handle_role_id = 10;
  if (has_handle_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->handle_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHandlesTissue)
}

::google::protobuf::uint8* MsgHandlesTissue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHandlesTissue)
  // optional uint64 tissue_id = 1;
  if (has_tissue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tissue_id(), target);
  }

  // optional string role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_id(), target);
  }

  // optional string tissue_name = 3;
  if (has_tissue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_name().data(), this->tissue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tissue_name(), target);
  }

  // optional string tissue_notity = 4;
  if (has_tissue_notity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_notity().data(), this->tissue_notity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_notity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tissue_notity(), target);
  }

  // optional uint32 area_id = 5;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->area_id(), target);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }

  // repeated .MsgTissueGame game_list = 7;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->game_list(i), target);
  }

  // optional uint64 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->version(), target);
  }

  // optional uint64 applylist_version = 9;
  if (has_applylist_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->applylist_version(), target);
  }

  // optional uint64 handle_role_id = 10;
  if (has_handle_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->handle_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHandlesTissue)
  return target;
}

int MsgHandlesTissue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tissue_id = 1;
    if (has_tissue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tissue_id());
    }

    // optional string role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_id());
    }

    // optional string tissue_name = 3;
    if (has_tissue_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tissue_name());
    }

    // optional string tissue_notity = 4;
    if (has_tissue_notity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tissue_notity());
    }

    // optional uint32 area_id = 5;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 applylist_version = 9;
    if (has_applylist_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applylist_version());
    }

    // optional uint64 handle_role_id = 10;
    if (has_handle_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle_role_id());
    }

  }
  // repeated .MsgTissueGame game_list = 7;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHandlesTissue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHandlesTissue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHandlesTissue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHandlesTissue::MergeFrom(const MsgHandlesTissue& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_list_.MergeFrom(from.game_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tissue_id()) {
      set_tissue_id(from.tissue_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_tissue_name()) {
      set_tissue_name(from.tissue_name());
    }
    if (from.has_tissue_notity()) {
      set_tissue_notity(from.tissue_notity());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_applylist_version()) {
      set_applylist_version(from.applylist_version());
    }
    if (from.has_handle_role_id()) {
      set_handle_role_id(from.handle_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHandlesTissue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHandlesTissue::CopyFrom(const MsgHandlesTissue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHandlesTissue::IsInitialized() const {

  return true;
}

void MsgHandlesTissue::Swap(MsgHandlesTissue* other) {
  if (other != this) {
    std::swap(tissue_id_, other->tissue_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(tissue_name_, other->tissue_name_);
    std::swap(tissue_notity_, other->tissue_notity_);
    std::swap(area_id_, other->area_id_);
    std::swap(state_, other->state_);
    game_list_.Swap(&other->game_list_);
    std::swap(version_, other->version_);
    std::swap(applylist_version_, other->applylist_version_);
    std::swap(handle_role_id_, other->handle_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHandlesTissue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHandlesTissue_descriptor_;
  metadata.reflection = MsgHandlesTissue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTissueData::kTissueIdFieldNumber;
const int MsgTissueData::kTissueNameFieldNumber;
const int MsgTissueData::kTissueNotityFieldNumber;
const int MsgTissueData::kRoomCountFieldNumber;
const int MsgTissueData::kMemberCountFieldNumber;
const int MsgTissueData::kApplyCountFieldNumber;
const int MsgTissueData::kTissueStateFieldNumber;
const int MsgTissueData::kVersionFieldNumber;
const int MsgTissueData::kAreaIdFieldNumber;
const int MsgTissueData::kTotalMoneyFieldNumber;
const int MsgTissueData::kCostLimitFieldNumber;
const int MsgTissueData::kSurplsMoneyFieldNumber;
const int MsgTissueData::kRoleListFieldNumber;
const int MsgTissueData::kGameListFieldNumber;
const int MsgTissueData::kRoomListFieldNumber;
const int MsgTissueData::kApplyListFieldNumber;
#endif  // !_MSC_VER

MsgTissueData::MsgTissueData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgTissueData)
}

void MsgTissueData::InitAsDefaultInstance() {
}

MsgTissueData::MsgTissueData(const MsgTissueData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgTissueData)
}

void MsgTissueData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tissue_id_ = GOOGLE_ULONGLONG(0);
  tissue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tissue_notity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_count_ = 0u;
  member_count_ = 0u;
  apply_count_ = 0u;
  tissue_state_ = 0u;
  version_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  total_money_ = 0u;
  cost_limit_ = 0u;
  surpls_money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTissueData::~MsgTissueData() {
  // @@protoc_insertion_point(destructor:MsgTissueData)
  SharedDtor();
}

void MsgTissueData::SharedDtor() {
  if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_name_;
  }
  if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tissue_notity_;
  }
  if (this != default_instance_) {
  }
}

void MsgTissueData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTissueData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTissueData_descriptor_;
}

const MsgTissueData& MsgTissueData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgTissueData* MsgTissueData::default_instance_ = NULL;

MsgTissueData* MsgTissueData::New() const {
  return new MsgTissueData;
}

void MsgTissueData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTissueData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(room_count_, version_);
    tissue_id_ = GOOGLE_ULONGLONG(0);
    if (has_tissue_name()) {
      if (tissue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tissue_name_->clear();
      }
    }
    if (has_tissue_notity()) {
      if (tissue_notity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tissue_notity_->clear();
      }
    }
  }
  ZR_(area_id_, surpls_money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  role_list_.Clear();
  game_list_.Clear();
  room_list_.Clear();
  apply_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTissueData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgTissueData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tissue_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tissue_id_)));
          set_has_tissue_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tissue_name;
        break;
      }

      // optional string tissue_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tissue_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tissue_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tissue_name().data(), this->tissue_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tissue_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tissue_notity;
        break;
      }

      // optional string tissue_notity = 3;
      case 3: {
        if (tag == 26) {
         parse_tissue_notity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tissue_notity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tissue_notity().data(), this->tissue_notity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tissue_notity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_room_count;
        break;
      }

      // optional uint32 room_count = 4;
      case 4: {
        if (tag == 32) {
         parse_room_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_count_)));
          set_has_room_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 5;
      case 5: {
        if (tag == 40) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_apply_count;
        break;
      }

      // optional uint32 apply_count = 6;
      case 6: {
        if (tag == 48) {
         parse_apply_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_count_)));
          set_has_apply_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tissue_state;
        break;
      }

      // optional uint32 tissue_state = 7;
      case 7: {
        if (tag == 56) {
         parse_tissue_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tissue_state_)));
          set_has_tissue_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional uint64 version = 8;
      case 8: {
        if (tag == 64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 9;
      case 9: {
        if (tag == 72) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_total_money;
        break;
      }

      // optional uint32 total_money = 10;
      case 10: {
        if (tag == 80) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cost_limit;
        break;
      }

      // optional uint32 cost_limit = 11;
      case 11: {
        if (tag == 88) {
         parse_cost_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_limit_)));
          set_has_cost_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_surpls_money;
        break;
      }

      // optional uint32 surpls_money = 12;
      case 12: {
        if (tag == 96) {
         parse_surpls_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surpls_money_)));
          set_has_surpls_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_role_list;
        break;
      }

      // repeated .MsgTissueRole role_list = 13;
      case 13: {
        if (tag == 106) {
         parse_role_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_role_list;
        if (input->ExpectTag(114)) goto parse_game_list;
        break;
      }

      // repeated .MsgTissueGame game_list = 14;
      case 14: {
        if (tag == 114) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_game_list;
        if (input->ExpectTag(122)) goto parse_room_list;
        break;
      }

      // repeated .MsgTissueRoom room_list = 15;
      case 15: {
        if (tag == 122) {
         parse_room_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_room_list;
        if (input->ExpectTag(130)) goto parse_apply_list;
        break;
      }

      // repeated .MsgTissueRole apply_list = 16;
      case 16: {
        if (tag == 130) {
         parse_apply_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_apply_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgTissueData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgTissueData)
  return false;
#undef DO_
}

void MsgTissueData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgTissueData)
  // optional uint64 tissue_id = 1;
  if (has_tissue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tissue_id(), output);
  }

  // optional string tissue_name = 2;
  if (has_tissue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_name().data(), this->tissue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tissue_name(), output);
  }

  // optional string tissue_notity = 3;
  if (has_tissue_notity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_notity().data(), this->tissue_notity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_notity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tissue_notity(), output);
  }

  // optional uint32 room_count = 4;
  if (has_room_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_count(), output);
  }

  // optional uint32 member_count = 5;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->member_count(), output);
  }

  // optional uint32 apply_count = 6;
  if (has_apply_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->apply_count(), output);
  }

  // optional uint32 tissue_state = 7;
  if (has_tissue_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tissue_state(), output);
  }

  // optional uint64 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->version(), output);
  }

  // optional uint32 area_id = 9;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->area_id(), output);
  }

  // optional uint32 total_money = 10;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->total_money(), output);
  }

  // optional uint32 cost_limit = 11;
  if (has_cost_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cost_limit(), output);
  }

  // optional uint32 surpls_money = 12;
  if (has_surpls_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->surpls_money(), output);
  }

  // repeated .MsgTissueRole role_list = 13;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->role_list(i), output);
  }

  // repeated .MsgTissueGame game_list = 14;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->game_list(i), output);
  }

  // repeated .MsgTissueRoom room_list = 15;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->room_list(i), output);
  }

  // repeated .MsgTissueRole apply_list = 16;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->apply_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgTissueData)
}

::google::protobuf::uint8* MsgTissueData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTissueData)
  // optional uint64 tissue_id = 1;
  if (has_tissue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tissue_id(), target);
  }

  // optional string tissue_name = 2;
  if (has_tissue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_name().data(), this->tissue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tissue_name(), target);
  }

  // optional string tissue_notity = 3;
  if (has_tissue_notity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tissue_notity().data(), this->tissue_notity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tissue_notity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tissue_notity(), target);
  }

  // optional uint32 room_count = 4;
  if (has_room_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_count(), target);
  }

  // optional uint32 member_count = 5;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->member_count(), target);
  }

  // optional uint32 apply_count = 6;
  if (has_apply_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->apply_count(), target);
  }

  // optional uint32 tissue_state = 7;
  if (has_tissue_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tissue_state(), target);
  }

  // optional uint64 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->version(), target);
  }

  // optional uint32 area_id = 9;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->area_id(), target);
  }

  // optional uint32 total_money = 10;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->total_money(), target);
  }

  // optional uint32 cost_limit = 11;
  if (has_cost_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cost_limit(), target);
  }

  // optional uint32 surpls_money = 12;
  if (has_surpls_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->surpls_money(), target);
  }

  // repeated .MsgTissueRole role_list = 13;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->role_list(i), target);
  }

  // repeated .MsgTissueGame game_list = 14;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->game_list(i), target);
  }

  // repeated .MsgTissueRoom room_list = 15;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->room_list(i), target);
  }

  // repeated .MsgTissueRole apply_list = 16;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->apply_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTissueData)
  return target;
}

int MsgTissueData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tissue_id = 1;
    if (has_tissue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tissue_id());
    }

    // optional string tissue_name = 2;
    if (has_tissue_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tissue_name());
    }

    // optional string tissue_notity = 3;
    if (has_tissue_notity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tissue_notity());
    }

    // optional uint32 room_count = 4;
    if (has_room_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_count());
    }

    // optional uint32 member_count = 5;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

    // optional uint32 apply_count = 6;
    if (has_apply_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_count());
    }

    // optional uint32 tissue_state = 7;
    if (has_tissue_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tissue_state());
    }

    // optional uint64 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 area_id = 9;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 total_money = 10;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_money());
    }

    // optional uint32 cost_limit = 11;
    if (has_cost_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_limit());
    }

    // optional uint32 surpls_money = 12;
    if (has_surpls_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surpls_money());
    }

  }
  // repeated .MsgTissueRole role_list = 13;
  total_size += 1 * this->role_list_size();
  for (int i = 0; i < this->role_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_list(i));
  }

  // repeated .MsgTissueGame game_list = 14;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  // repeated .MsgTissueRoom room_list = 15;
  total_size += 1 * this->room_list_size();
  for (int i = 0; i < this->room_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_list(i));
  }

  // repeated .MsgTissueRole apply_list = 16;
  total_size += 2 * this->apply_list_size();
  for (int i = 0; i < this->apply_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTissueData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTissueData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTissueData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTissueData::MergeFrom(const MsgTissueData& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_list_.MergeFrom(from.role_list_);
  game_list_.MergeFrom(from.game_list_);
  room_list_.MergeFrom(from.room_list_);
  apply_list_.MergeFrom(from.apply_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tissue_id()) {
      set_tissue_id(from.tissue_id());
    }
    if (from.has_tissue_name()) {
      set_tissue_name(from.tissue_name());
    }
    if (from.has_tissue_notity()) {
      set_tissue_notity(from.tissue_notity());
    }
    if (from.has_room_count()) {
      set_room_count(from.room_count());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
    if (from.has_apply_count()) {
      set_apply_count(from.apply_count());
    }
    if (from.has_tissue_state()) {
      set_tissue_state(from.tissue_state());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_cost_limit()) {
      set_cost_limit(from.cost_limit());
    }
    if (from.has_surpls_money()) {
      set_surpls_money(from.surpls_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTissueData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTissueData::CopyFrom(const MsgTissueData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTissueData::IsInitialized() const {

  return true;
}

void MsgTissueData::Swap(MsgTissueData* other) {
  if (other != this) {
    std::swap(tissue_id_, other->tissue_id_);
    std::swap(tissue_name_, other->tissue_name_);
    std::swap(tissue_notity_, other->tissue_notity_);
    std::swap(room_count_, other->room_count_);
    std::swap(member_count_, other->member_count_);
    std::swap(apply_count_, other->apply_count_);
    std::swap(tissue_state_, other->tissue_state_);
    std::swap(version_, other->version_);
    std::swap(area_id_, other->area_id_);
    std::swap(total_money_, other->total_money_);
    std::swap(cost_limit_, other->cost_limit_);
    std::swap(surpls_money_, other->surpls_money_);
    role_list_.Swap(&other->role_list_);
    game_list_.Swap(&other->game_list_);
    room_list_.Swap(&other->room_list_);
    apply_list_.Swap(&other->apply_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTissueData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTissueData_descriptor_;
  metadata.reflection = MsgTissueData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTissueDataCount::kTissueListFieldNumber;
#endif  // !_MSC_VER

MsgTissueDataCount::MsgTissueDataCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgTissueDataCount)
}

void MsgTissueDataCount::InitAsDefaultInstance() {
}

MsgTissueDataCount::MsgTissueDataCount(const MsgTissueDataCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgTissueDataCount)
}

void MsgTissueDataCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTissueDataCount::~MsgTissueDataCount() {
  // @@protoc_insertion_point(destructor:MsgTissueDataCount)
  SharedDtor();
}

void MsgTissueDataCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTissueDataCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTissueDataCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTissueDataCount_descriptor_;
}

const MsgTissueDataCount& MsgTissueDataCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_5fpro_2eproto();
  return *default_instance_;
}

MsgTissueDataCount* MsgTissueDataCount::default_instance_ = NULL;

MsgTissueDataCount* MsgTissueDataCount::New() const {
  return new MsgTissueDataCount;
}

void MsgTissueDataCount::Clear() {
  tissue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTissueDataCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgTissueDataCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgTissueData tissue_list = 1;
      case 1: {
        if (tag == 10) {
         parse_tissue_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tissue_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tissue_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgTissueDataCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgTissueDataCount)
  return false;
#undef DO_
}

void MsgTissueDataCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgTissueDataCount)
  // repeated .MsgTissueData tissue_list = 1;
  for (int i = 0; i < this->tissue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tissue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgTissueDataCount)
}

::google::protobuf::uint8* MsgTissueDataCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTissueDataCount)
  // repeated .MsgTissueData tissue_list = 1;
  for (int i = 0; i < this->tissue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tissue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTissueDataCount)
  return target;
}

int MsgTissueDataCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgTissueData tissue_list = 1;
  total_size += 1 * this->tissue_list_size();
  for (int i = 0; i < this->tissue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tissue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTissueDataCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTissueDataCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTissueDataCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTissueDataCount::MergeFrom(const MsgTissueDataCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  tissue_list_.MergeFrom(from.tissue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTissueDataCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTissueDataCount::CopyFrom(const MsgTissueDataCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTissueDataCount::IsInitialized() const {

  return true;
}

void MsgTissueDataCount::Swap(MsgTissueDataCount* other) {
  if (other != this) {
    tissue_list_.Swap(&other->tissue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTissueDataCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTissueDataCount_descriptor_;
  metadata.reflection = MsgTissueDataCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
