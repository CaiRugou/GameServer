// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_penghu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_penghu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgPengHuFanPai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuFanPai_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuUserAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuUserAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuUserPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuUserPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuUserOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuUserOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuRoleScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuRoleScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuShowDownEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuShowDownEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuShowDownCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuShowDownCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuWeaveCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuWeaveCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuRoleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuRoleState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuRoleStateCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuRoleStateCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuRoleHost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuRoleHost_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPengHuRoleHostCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPengHuRoleHostCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TPengHuRoleState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPengHuWIKState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPengHuDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPengHuState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPengPuASK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPengHuShowDownEvent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fpenghu_2eproto() {
  protobuf_AddDesc_msg_5fpenghu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_penghu.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPengHuFanPai_descriptor_ = file->message_type(0);
  static const int MsgPengHuFanPai_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuFanPai, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuFanPai, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuFanPai, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuFanPai, surplus_hand_num_),
  };
  MsgPengHuFanPai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuFanPai_descriptor_,
      MsgPengHuFanPai::default_instance_,
      MsgPengHuFanPai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuFanPai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuFanPai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuFanPai));
  MsgPengHuUserAction_descriptor_ = file->message_type(1);
  static const int MsgPengHuUserAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserAction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserAction, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserAction, surplus_hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserAction, role_score_),
  };
  MsgPengHuUserAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuUserAction_descriptor_,
      MsgPengHuUserAction::default_instance_,
      MsgPengHuUserAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuUserAction));
  MsgPengHuUserPower_descriptor_ = file->message_type(2);
  static const int MsgPengHuUserPower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserPower, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserPower, wik_),
  };
  MsgPengHuUserPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuUserPower_descriptor_,
      MsgPengHuUserPower::default_instance_,
      MsgPengHuUserPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuUserPower));
  MsgPengHuUserOperate_descriptor_ = file->message_type(3);
  static const int MsgPengHuUserOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserOperate, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserOperate, card_),
  };
  MsgPengHuUserOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuUserOperate_descriptor_,
      MsgPengHuUserOperate::default_instance_,
      MsgPengHuUserOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuUserOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuUserOperate));
  MsgPengHuOutCard_descriptor_ = file->message_type(4);
  static const int MsgPengHuOutCard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, river_num_),
  };
  MsgPengHuOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuOutCard_descriptor_,
      MsgPengHuOutCard::default_instance_,
      MsgPengHuOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuOutCard));
  MsgPengHuRoleScore_descriptor_ = file->message_type(5);
  static const int MsgPengHuRoleScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleScore, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleScore, score_),
  };
  MsgPengHuRoleScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuRoleScore_descriptor_,
      MsgPengHuRoleScore::default_instance_,
      MsgPengHuRoleScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuRoleScore));
  MsgPengHuCardData_descriptor_ = file->message_type(6);
  static const int MsgPengHuCardData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, barkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, show_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, sub_money_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, role_score_),
  };
  MsgPengHuCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuCardData_descriptor_,
      MsgPengHuCardData::default_instance_,
      MsgPengHuCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuCardData));
  MsgPengHuPlayer_descriptor_ = file->message_type(7);
  static const int MsgPengHuPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, river_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, weave_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, td_),
  };
  MsgPengHuPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuPlayer_descriptor_,
      MsgPengHuPlayer::default_instance_,
      MsgPengHuPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuPlayer));
  MsgPengHuRoom_descriptor_ = file->message_type(8);
  static const int MsgPengHuRoom_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, surplus_hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, send_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, state_run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, private_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, game_circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, param_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, gang_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, tou_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, eat_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, show_down_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, role_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, wik_),
  };
  MsgPengHuRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuRoom_descriptor_,
      MsgPengHuRoom::default_instance_,
      MsgPengHuRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuRoom));
  MsgPengHuShowDown_descriptor_ = file->message_type(9);
  static const int MsgPengHuShowDown_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, hukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, hard_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, mild_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, baota_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, hu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, pack_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, total_pack_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, event_count_),
  };
  MsgPengHuShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuShowDown_descriptor_,
      MsgPengHuShowDown::default_instance_,
      MsgPengHuShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuShowDown));
  MsgPengHuShowDownEvent_descriptor_ = file->message_type(10);
  static const int MsgPengHuShowDownEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownEvent, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownEvent, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownEvent, score_count_),
  };
  MsgPengHuShowDownEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuShowDownEvent_descriptor_,
      MsgPengHuShowDownEvent::default_instance_,
      MsgPengHuShowDownEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuShowDownEvent));
  MsgPengHuShowDownCount_descriptor_ = file->message_type(11);
  static const int MsgPengHuShowDownCount_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, showdown_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, game_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, other_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, other_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, hu_state_),
  };
  MsgPengHuShowDownCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuShowDownCount_descriptor_,
      MsgPengHuShowDownCount::default_instance_,
      MsgPengHuShowDownCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuShowDownCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuShowDownCount));
  MsgPengHuWeaveCard_descriptor_ = file->message_type(12);
  static const int MsgPengHuWeaveCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuWeaveCard, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuWeaveCard, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuWeaveCard, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuWeaveCard, role_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuWeaveCard, player_list_),
  };
  MsgPengHuWeaveCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuWeaveCard_descriptor_,
      MsgPengHuWeaveCard::default_instance_,
      MsgPengHuWeaveCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuWeaveCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuWeaveCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuWeaveCard));
  MsgPengHuRoleState_descriptor_ = file->message_type(13);
  static const int MsgPengHuRoleState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleState, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleState, state_),
  };
  MsgPengHuRoleState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuRoleState_descriptor_,
      MsgPengHuRoleState::default_instance_,
      MsgPengHuRoleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuRoleState));
  MsgPengHuRoleStateCount_descriptor_ = file->message_type(14);
  static const int MsgPengHuRoleStateCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleStateCount, role_state_),
  };
  MsgPengHuRoleStateCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuRoleStateCount_descriptor_,
      MsgPengHuRoleStateCount::default_instance_,
      MsgPengHuRoleStateCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleStateCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleStateCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuRoleStateCount));
  MsgPengHuRoleHost_descriptor_ = file->message_type(15);
  static const int MsgPengHuRoleHost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHost, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHost, host_id_),
  };
  MsgPengHuRoleHost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuRoleHost_descriptor_,
      MsgPengHuRoleHost::default_instance_,
      MsgPengHuRoleHost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuRoleHost));
  MsgPengHuRoleHostCount_descriptor_ = file->message_type(16);
  static const int MsgPengHuRoleHostCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHostCount, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHostCount, host_list_),
  };
  MsgPengHuRoleHostCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPengHuRoleHostCount_descriptor_,
      MsgPengHuRoleHostCount::default_instance_,
      MsgPengHuRoleHostCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHostCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPengHuRoleHostCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPengHuRoleHostCount));
  TPengHuRoleState_descriptor_ = file->enum_type(0);
  TPengHuWIKState_descriptor_ = file->enum_type(1);
  TPengHuDirection_descriptor_ = file->enum_type(2);
  TPengHuState_descriptor_ = file->enum_type(3);
  TPengPuASK_descriptor_ = file->enum_type(4);
  TPengHuShowDownEvent_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fpenghu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuFanPai_descriptor_, &MsgPengHuFanPai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuUserAction_descriptor_, &MsgPengHuUserAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuUserPower_descriptor_, &MsgPengHuUserPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuUserOperate_descriptor_, &MsgPengHuUserOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuOutCard_descriptor_, &MsgPengHuOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuRoleScore_descriptor_, &MsgPengHuRoleScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuCardData_descriptor_, &MsgPengHuCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuPlayer_descriptor_, &MsgPengHuPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuRoom_descriptor_, &MsgPengHuRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuShowDown_descriptor_, &MsgPengHuShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuShowDownEvent_descriptor_, &MsgPengHuShowDownEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuShowDownCount_descriptor_, &MsgPengHuShowDownCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuWeaveCard_descriptor_, &MsgPengHuWeaveCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuRoleState_descriptor_, &MsgPengHuRoleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuRoleStateCount_descriptor_, &MsgPengHuRoleStateCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuRoleHost_descriptor_, &MsgPengHuRoleHost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPengHuRoleHostCount_descriptor_, &MsgPengHuRoleHostCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fpenghu_2eproto() {
  delete MsgPengHuFanPai::default_instance_;
  delete MsgPengHuFanPai_reflection_;
  delete MsgPengHuUserAction::default_instance_;
  delete MsgPengHuUserAction_reflection_;
  delete MsgPengHuUserPower::default_instance_;
  delete MsgPengHuUserPower_reflection_;
  delete MsgPengHuUserOperate::default_instance_;
  delete MsgPengHuUserOperate_reflection_;
  delete MsgPengHuOutCard::default_instance_;
  delete MsgPengHuOutCard_reflection_;
  delete MsgPengHuRoleScore::default_instance_;
  delete MsgPengHuRoleScore_reflection_;
  delete MsgPengHuCardData::default_instance_;
  delete MsgPengHuCardData_reflection_;
  delete MsgPengHuPlayer::default_instance_;
  delete MsgPengHuPlayer_reflection_;
  delete MsgPengHuRoom::default_instance_;
  delete MsgPengHuRoom_reflection_;
  delete MsgPengHuShowDown::default_instance_;
  delete MsgPengHuShowDown_reflection_;
  delete MsgPengHuShowDownEvent::default_instance_;
  delete MsgPengHuShowDownEvent_reflection_;
  delete MsgPengHuShowDownCount::default_instance_;
  delete MsgPengHuShowDownCount_reflection_;
  delete MsgPengHuWeaveCard::default_instance_;
  delete MsgPengHuWeaveCard_reflection_;
  delete MsgPengHuRoleState::default_instance_;
  delete MsgPengHuRoleState_reflection_;
  delete MsgPengHuRoleStateCount::default_instance_;
  delete MsgPengHuRoleStateCount_reflection_;
  delete MsgPengHuRoleHost::default_instance_;
  delete MsgPengHuRoleHost_reflection_;
  delete MsgPengHuRoleHostCount::default_instance_;
  delete MsgPengHuRoleHostCount_reflection_;
}

void protobuf_AddDesc_msg_5fpenghu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020msg_penghu.proto\032\020public_pro.proto\"R\n\017"
    "MsgPengHuFanPai\022\n\n\002id\030\001 \001(\004\022\014\n\004card\030\002 \001("
    "\r\022\013\n\003wik\030\003 \001(\r\022\030\n\020surplus_hand_num\030\004 \001(\r"
    "\"q\n\023MsgPengHuUserAction\022\n\n\002id\030\001 \001(\004\022\013\n\003w"
    "ik\030\002 \001(\r\022\030\n\020surplus_hand_num\030\003 \001(\r\022\'\n\nro"
    "le_score\030\004 \003(\0132\023.MsgPengHuRoleScore\"-\n\022M"
    "sgPengHuUserPower\022\n\n\002id\030\001 \001(\004\022\013\n\003wik\030\002 \001"
    "(\r\"1\n\024MsgPengHuUserOperate\022\013\n\003wik\030\001 \001(\r\022"
    "\014\n\004card\030\002 \001(\r\"\207\001\n\020MsgPengHuOutCard\022\n\n\002id"
    "\030\001 \001(\004\022\014\n\004card\030\002 \001(\r\022\r\n\005index\030\003 \001(\005\022\020\n\010h"
    "and_num\030\004 \001(\r\022\021\n\thand_card\030\005 \003(\r\022\022\n\nrole"
    "_state\030\006 \001(\r\022\021\n\triver_num\030\007 \001(\r\"/\n\022MsgPe"
    "ngHuRoleScore\022\n\n\002id\030\001 \001(\004\022\r\n\005score\030\002 \001(\003"
    "\"\260\001\n\021MsgPengHuCardData\022\014\n\004card\030\001 \001(\r\022\013\n\003"
    "wik\030\002 \001(\r\022\r\n\005tarid\030\003 \001(\004\022\r\n\005srcid\030\004 \001(\004\022"
    "\017\n\007barkind\030\005 \001(\r\022\022\n\nshow_money\030\006 \001(\010\022\024\n\014"
    "sub_money_id\030\007 \001(\004\022\'\n\nrole_score\030\010 \003(\0132\023"
    ".MsgPengHuRoleScore\"\277\001\n\017MsgPengHuPlayer\022"
    "#\n\013player_info\030\001 \001(\0132\016.MsgPlayerInfo\022\r\n\005"
    "state\030\002 \001(\r\022\020\n\010hand_num\030\003 \001(\r\022\022\n\nriver_c"
    "ard\030\004 \003(\r\022&\n\nweave_card\030\005 \003(\0132\022.MsgPengH"
    "uCardData\022\013\n\003wik\030\006 \001(\r\022\035\n\002td\030\007 \001(\0162\021.TPe"
    "ngHuDirection\"\326\004\n\rMsgPengHuRoom\022!\n\nroom_"
    "state\030\001 \001(\0162\r.TPengHuState\022%\n\013player_lis"
    "t\030\002 \003(\0132\020.MsgPengHuPlayer\022\021\n\tbanker_id\030\003"
    " \001(\004\022\021\n\taction_id\030\004 \001(\004\022\021\n\thand_card\030\005 \003"
    "(\r\022\030\n\020surplus_hand_num\030\006 \001(\r\022\021\n\tsend_car"
    "d\030\007 \001(\r\022\017\n\007room_id\030\010 \001(\004\022\021\n\troom_type\030\t "
    "\001(\t\022\022\n\ngame_count\030\n \001(\r\022\026\n\016state_run_tim"
    "e\030\013 \001(\r\022+\n\014private_room\030\014 \001(\0132\025.MsgCreat"
    "ePrivateRoom\022\023\n\013game_circle\030\r \001(\r\022\020\n\010out"
    "_card\030\016 \001(\r\022\016\n\006param1\030\017 \001(\r\022\022\n\nparam_lis"
    "t\030\020 \003(\r\022\021\n\tgang_card\030\021 \003(\r\022\020\n\010tou_card\030\022"
    " \003(\r\022\020\n\010eat_card\030\023 \003(\r\022/\n\016show_down_info"
    "\030\024 \001(\0132\027.MsgPengHuShowDownCount\022*\n\trole_"
    "host\030\025 \001(\0132\027.MsgPengHuRoleHostCount\022,\n\nr"
    "ole_state\030\026 \001(\0132\030.MsgPengHuRoleStateCoun"
    "t\022\013\n\003wik\030\027 \001(\r\"\227\002\n\021MsgPengHuShowDown\022\016\n\006"
    "roleid\030\001 \001(\004\022\r\n\005money\030\002 \001(\003\022\016\n\006hukind\030\003 "
    "\001(\r\022\021\n\thand_card\030\004 \003(\r\022\023\n\013hard_flower\030\005 "
    "\001(\r\022\023\n\013mild_flower\030\006 \001(\r\022\024\n\014baota_flower"
    "\030\007 \001(\r\022\017\n\007hu_card\030\010 \001(\r\022\023\n\013total_money\030\t"
    " \001(\003\022\022\n\npack_score\030\n \001(\003\022\030\n\020total_pack_s"
    "core\030\013 \001(\003\022,\n\013event_count\030\014 \003(\0132\027.MsgPen"
    "gHuShowDownEvent\"]\n\026MsgPengHuShowDownEve"
    "nt\022\020\n\010event_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\r\n\005s"
    "core\030\003 \003(\005\022\023\n\013score_count\030\004 \003(\r\"\346\001\n\026MsgP"
    "engHuShowDownCount\022)\n\rshowdown_list\030\001 \003("
    "\0132\022.MsgPengHuShowDown\022!\n\nroom_state\030\002 \001("
    "\0162\r.TPengHuState\022\022\n\ngame_count\030\003 \001(\r\022\021\n\t"
    "game_over\030\004 \001(\010\022\022\n\nother_card\030\005 \003(\r\022\023\n\013o"
    "ther_count\030\006 \001(\r\022\014\n\004time\030\007 \001(\r\022\016\n\006param1"
    "\030\010 \001(\r\022\020\n\010hu_state\030\t \001(\r\"\257\001\n\022MsgPengHuWe"
    "aveCard\022$\n\010carddata\030\001 \003(\0132\022.MsgPengHuCar"
    "dData\022\020\n\010hand_num\030\002 \001(\r\022\021\n\thand_card\030\003 \003"
    "(\r\022\'\n\nrole_score\030\004 \003(\0132\023.MsgPengHuRoleSc"
    "ore\022%\n\013player_list\030\005 \003(\0132\020.MsgPengHuPlay"
    "er\"4\n\022MsgPengHuRoleState\022\017\n\007role_id\030\001 \001("
    "\004\022\r\n\005state\030\002 \001(\r\"B\n\027MsgPengHuRoleStateCo"
    "unt\022\'\n\nrole_state\030\001 \003(\0132\023.MsgPengHuRoleS"
    "tate\"5\n\021MsgPengHuRoleHost\022\017\n\007role_id\030\001 \001"
    "(\004\022\017\n\007host_id\030\002 \001(\r\"S\n\026MsgPengHuRoleHost"
    "Count\022\022\n\nrole_state\030\001 \001(\r\022%\n\thost_list\030\002"
    " \003(\0132\022.MsgPengHuRoleHost*\236\002\n\020TPengHuRole"
    "State\022\022\n\016STATE_PH_READY\020\001\022\023\n\017STATE_PH_LI"
    "STEN\020\002\022\022\n\016STATE_PH_TRUST\020\004\022\024\n\020STATE_PH_N"
    "EWROLE\020\010\022\027\n\023STATE_PH_ROOM_OWNER\020\020\022\022\n\016STA"
    "TE_PH_LEAVE\020 \022\024\n\020STATE_PH_RELIEVE\020@\022\023\n\016S"
    "TATE_PH_LIMIT\020\200\001\022\025\n\020STATE_PH_OFFLINE\020\200\002\022"
    "\026\n\021STATE_PH_MING_LOU\020\200\004\022\024\n\017STATE_PH_KOUP"
    "AI\020\200\010\022\032\n\025STATE_PH_CONTIUE_GAME\020\200\020*\252\001\n\017TP"
    "engHuWIKState\022\021\n\rSTATE_PH_NULL\020\000\022\020\n\014STAT"
    "E_PH_PAO\020\001\022\023\n\017STATE_PH_TILONG\020\002\022\020\n\014STATE"
    "_PH_SHE\020\003\022\020\n\014STATE_PH_KAN\020\004\022\020\n\014STATE_PH_"
    "WEI\020\005\022\021\n\rSTATE_PH_PENG\020\006\022\024\n\020STATE_PH_FAN"
    "PENG\020\007*^\n\020TPengHuDirection\022\016\n\nDT_PH_NULL"
    "\020\000\022\016\n\nDT_PH_DONG\020\001\022\r\n\tDT_PH_NAN\020\002\022\014\n\010DT_"
    "PH_XI\020\003\022\r\n\tDT_PH_BEI\020\004*\233\005\n\014TPengHuState\022"
    "\024\n\020TPengHuStateWait\020\000\022\036\n\032TPengHuStateChe"
    "ckStartGame\020\001\022\031\n\025TPengHuStateStartGame\020\002"
    "\022\032\n\026TPengHuStateMakeBanKer\020\003\022\036\n\032TPengHuS"
    "tateSendFirstBrand\020\004\022\026\n\022TPengHuStateTouP"
    "ai\020\007\022\034\n\030TPengHuStateTouPaiFinish\020\010\022\026\n\022TP"
    "engHuStateAction\020\t\022\030\n\024TPengHuStateShowdo"
    "wn\020\n\022\027\n\023TPengHuStateOutCard\020\013\022\032\n\026TPengHu"
    "StateUserChoice\020\014\022\032\n\026TPengHuStateSelfCho"
    "ice\020\r\022\031\n\025TPengHuStateTouchCard\020\016\022\027\n\023TPen"
    "gHuStateBarCard\020\017\022\027\n\023TPengHuStateEatCard"
    "\020\020\022\037\n\033TPengHuStateTouchCardFinish\020\021\022\035\n\031T"
    "PengHuStateBarCardFinish\020\022\022\035\n\031TPengHuSta"
    "teEatCardFinish\020\035\022\031\n\025TPengHuStateDianPao"
    "Hu\020\024\022\026\n\022TPengHuStateZiMoHu\020\025\022\027\n\023TPengHuS"
    "tateLiuJuHu\020\026\022\026\n\022TPengHuStateFanPai\020\027\022\034\n"
    "\030TPengHuStateFanPaiFinish\020\030\022\027\n\023TPengHuSt"
    "ateRelieve\020\031*\241\002\n\nTPengPuASK\022\017\n\013ASK_PH_NU"
    "LL\020\000\022\017\n\013ASK_PH_LEFT\020\001\022\021\n\rASK_PH_CENTER\020\002"
    "\022\020\n\014ASK_PH_RGIHT\020\004\022\023\n\017ASK_PH_SAMLLEAT\020\010\022"
    "\024\n\020ASK_PH_CENTEREAT\020\020\022\021\n\rASK_PH_BIGEAT\020 "
    "\022\027\n\023ASK_PH_SAMLL2710EAT\020@\022\026\n\021ASK_PH_BIG2"
    "710EAT\020\200\001\022\022\n\rASK_PH_ALLEAT\020\200\002\022\020\n\013ASK_PH_"
    "PENG\020\200\004\022\020\n\013ASK_PH_GANG\020\200\010\022\022\n\rASK_PH_LIST"
    "EN\020\200\020\022\021\n\014ASK_PH_CHIHU\020\200 *\231\001\n\024TPengHuShow"
    "DownEvent\022\023\n\017EVENT_PH_XIAOHU\020\001\022\026\n\022EVENT_"
    "PH_LIANZHONG\020\002\022\022\n\016EVENT_PH_QIDUI\020\003\022\026\n\022EV"
    "ENT_PH_SHUANGSHE\020\004\022\023\n\017EVENT_PH_TIANHU\020\005\022"
    "\023\n\017EVENT_PH_ZHUANG\020\006", 4220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_penghu.proto", &protobuf_RegisterTypes);
  MsgPengHuFanPai::default_instance_ = new MsgPengHuFanPai();
  MsgPengHuUserAction::default_instance_ = new MsgPengHuUserAction();
  MsgPengHuUserPower::default_instance_ = new MsgPengHuUserPower();
  MsgPengHuUserOperate::default_instance_ = new MsgPengHuUserOperate();
  MsgPengHuOutCard::default_instance_ = new MsgPengHuOutCard();
  MsgPengHuRoleScore::default_instance_ = new MsgPengHuRoleScore();
  MsgPengHuCardData::default_instance_ = new MsgPengHuCardData();
  MsgPengHuPlayer::default_instance_ = new MsgPengHuPlayer();
  MsgPengHuRoom::default_instance_ = new MsgPengHuRoom();
  MsgPengHuShowDown::default_instance_ = new MsgPengHuShowDown();
  MsgPengHuShowDownEvent::default_instance_ = new MsgPengHuShowDownEvent();
  MsgPengHuShowDownCount::default_instance_ = new MsgPengHuShowDownCount();
  MsgPengHuWeaveCard::default_instance_ = new MsgPengHuWeaveCard();
  MsgPengHuRoleState::default_instance_ = new MsgPengHuRoleState();
  MsgPengHuRoleStateCount::default_instance_ = new MsgPengHuRoleStateCount();
  MsgPengHuRoleHost::default_instance_ = new MsgPengHuRoleHost();
  MsgPengHuRoleHostCount::default_instance_ = new MsgPengHuRoleHostCount();
  MsgPengHuFanPai::default_instance_->InitAsDefaultInstance();
  MsgPengHuUserAction::default_instance_->InitAsDefaultInstance();
  MsgPengHuUserPower::default_instance_->InitAsDefaultInstance();
  MsgPengHuUserOperate::default_instance_->InitAsDefaultInstance();
  MsgPengHuOutCard::default_instance_->InitAsDefaultInstance();
  MsgPengHuRoleScore::default_instance_->InitAsDefaultInstance();
  MsgPengHuCardData::default_instance_->InitAsDefaultInstance();
  MsgPengHuPlayer::default_instance_->InitAsDefaultInstance();
  MsgPengHuRoom::default_instance_->InitAsDefaultInstance();
  MsgPengHuShowDown::default_instance_->InitAsDefaultInstance();
  MsgPengHuShowDownEvent::default_instance_->InitAsDefaultInstance();
  MsgPengHuShowDownCount::default_instance_->InitAsDefaultInstance();
  MsgPengHuWeaveCard::default_instance_->InitAsDefaultInstance();
  MsgPengHuRoleState::default_instance_->InitAsDefaultInstance();
  MsgPengHuRoleStateCount::default_instance_->InitAsDefaultInstance();
  MsgPengHuRoleHost::default_instance_->InitAsDefaultInstance();
  MsgPengHuRoleHostCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fpenghu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fpenghu_2eproto {
  StaticDescriptorInitializer_msg_5fpenghu_2eproto() {
    protobuf_AddDesc_msg_5fpenghu_2eproto();
  }
} static_descriptor_initializer_msg_5fpenghu_2eproto_;
const ::google::protobuf::EnumDescriptor* TPengHuRoleState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPengHuRoleState_descriptor_;
}
bool TPengHuRoleState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPengHuWIKState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPengHuWIKState_descriptor_;
}
bool TPengHuWIKState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPengHuDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPengHuDirection_descriptor_;
}
bool TPengHuDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPengHuState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPengHuState_descriptor_;
}
bool TPengHuState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPengPuASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPengPuASK_descriptor_;
}
bool TPengPuASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPengHuShowDownEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPengHuShowDownEvent_descriptor_;
}
bool TPengHuShowDownEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuFanPai::kIdFieldNumber;
const int MsgPengHuFanPai::kCardFieldNumber;
const int MsgPengHuFanPai::kWikFieldNumber;
const int MsgPengHuFanPai::kSurplusHandNumFieldNumber;
#endif  // !_MSC_VER

MsgPengHuFanPai::MsgPengHuFanPai()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuFanPai)
}

void MsgPengHuFanPai::InitAsDefaultInstance() {
}

MsgPengHuFanPai::MsgPengHuFanPai(const MsgPengHuFanPai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuFanPai)
}

void MsgPengHuFanPai::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  card_ = 0u;
  wik_ = 0u;
  surplus_hand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuFanPai::~MsgPengHuFanPai() {
  // @@protoc_insertion_point(destructor:MsgPengHuFanPai)
  SharedDtor();
}

void MsgPengHuFanPai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuFanPai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuFanPai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuFanPai_descriptor_;
}

const MsgPengHuFanPai& MsgPengHuFanPai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuFanPai* MsgPengHuFanPai::default_instance_ = NULL;

MsgPengHuFanPai* MsgPengHuFanPai::New() const {
  return new MsgPengHuFanPai;
}

void MsgPengHuFanPai::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuFanPai*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, surplus_hand_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuFanPai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuFanPai)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 3;
      case 3: {
        if (tag == 24) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_surplus_hand_num;
        break;
      }

      // optional uint32 surplus_hand_num = 4;
      case 4: {
        if (tag == 32) {
         parse_surplus_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_hand_num_)));
          set_has_surplus_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuFanPai)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuFanPai)
  return false;
#undef DO_
}

void MsgPengHuFanPai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuFanPai)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  // optional uint32 wik = 3;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wik(), output);
  }

  // optional uint32 surplus_hand_num = 4;
  if (has_surplus_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->surplus_hand_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuFanPai)
}

::google::protobuf::uint8* MsgPengHuFanPai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuFanPai)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  // optional uint32 wik = 3;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wik(), target);
  }

  // optional uint32 surplus_hand_num = 4;
  if (has_surplus_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->surplus_hand_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuFanPai)
  return target;
}

int MsgPengHuFanPai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 wik = 3;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 surplus_hand_num = 4;
    if (has_surplus_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_hand_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuFanPai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuFanPai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuFanPai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuFanPai::MergeFrom(const MsgPengHuFanPai& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_surplus_hand_num()) {
      set_surplus_hand_num(from.surplus_hand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuFanPai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuFanPai::CopyFrom(const MsgPengHuFanPai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuFanPai::IsInitialized() const {

  return true;
}

void MsgPengHuFanPai::Swap(MsgPengHuFanPai* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(card_, other->card_);
    std::swap(wik_, other->wik_);
    std::swap(surplus_hand_num_, other->surplus_hand_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuFanPai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuFanPai_descriptor_;
  metadata.reflection = MsgPengHuFanPai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuUserAction::kIdFieldNumber;
const int MsgPengHuUserAction::kWikFieldNumber;
const int MsgPengHuUserAction::kSurplusHandNumFieldNumber;
const int MsgPengHuUserAction::kRoleScoreFieldNumber;
#endif  // !_MSC_VER

MsgPengHuUserAction::MsgPengHuUserAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuUserAction)
}

void MsgPengHuUserAction::InitAsDefaultInstance() {
}

MsgPengHuUserAction::MsgPengHuUserAction(const MsgPengHuUserAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuUserAction)
}

void MsgPengHuUserAction::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  wik_ = 0u;
  surplus_hand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuUserAction::~MsgPengHuUserAction() {
  // @@protoc_insertion_point(destructor:MsgPengHuUserAction)
  SharedDtor();
}

void MsgPengHuUserAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuUserAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuUserAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuUserAction_descriptor_;
}

const MsgPengHuUserAction& MsgPengHuUserAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuUserAction* MsgPengHuUserAction::default_instance_ = NULL;

MsgPengHuUserAction* MsgPengHuUserAction::New() const {
  return new MsgPengHuUserAction;
}

void MsgPengHuUserAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuUserAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, surplus_hand_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  role_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuUserAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuUserAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 2;
      case 2: {
        if (tag == 16) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_surplus_hand_num;
        break;
      }

      // optional uint32 surplus_hand_num = 3;
      case 3: {
        if (tag == 24) {
         parse_surplus_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_hand_num_)));
          set_has_surplus_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_score;
        break;
      }

      // repeated .MsgPengHuRoleScore role_score = 4;
      case 4: {
        if (tag == 34) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuUserAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuUserAction)
  return false;
#undef DO_
}

void MsgPengHuUserAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuUserAction)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wik(), output);
  }

  // optional uint32 surplus_hand_num = 3;
  if (has_surplus_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->surplus_hand_num(), output);
  }

  // repeated .MsgPengHuRoleScore role_score = 4;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuUserAction)
}

::google::protobuf::uint8* MsgPengHuUserAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuUserAction)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wik(), target);
  }

  // optional uint32 surplus_hand_num = 3;
  if (has_surplus_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->surplus_hand_num(), target);
  }

  // repeated .MsgPengHuRoleScore role_score = 4;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuUserAction)
  return target;
}

int MsgPengHuUserAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 wik = 2;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 surplus_hand_num = 3;
    if (has_surplus_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_hand_num());
    }

  }
  // repeated .MsgPengHuRoleScore role_score = 4;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuUserAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuUserAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuUserAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuUserAction::MergeFrom(const MsgPengHuUserAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_score_.MergeFrom(from.role_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_surplus_hand_num()) {
      set_surplus_hand_num(from.surplus_hand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuUserAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuUserAction::CopyFrom(const MsgPengHuUserAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuUserAction::IsInitialized() const {

  return true;
}

void MsgPengHuUserAction::Swap(MsgPengHuUserAction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wik_, other->wik_);
    std::swap(surplus_hand_num_, other->surplus_hand_num_);
    role_score_.Swap(&other->role_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuUserAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuUserAction_descriptor_;
  metadata.reflection = MsgPengHuUserAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuUserPower::kIdFieldNumber;
const int MsgPengHuUserPower::kWikFieldNumber;
#endif  // !_MSC_VER

MsgPengHuUserPower::MsgPengHuUserPower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuUserPower)
}

void MsgPengHuUserPower::InitAsDefaultInstance() {
}

MsgPengHuUserPower::MsgPengHuUserPower(const MsgPengHuUserPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuUserPower)
}

void MsgPengHuUserPower::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  wik_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuUserPower::~MsgPengHuUserPower() {
  // @@protoc_insertion_point(destructor:MsgPengHuUserPower)
  SharedDtor();
}

void MsgPengHuUserPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuUserPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuUserPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuUserPower_descriptor_;
}

const MsgPengHuUserPower& MsgPengHuUserPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuUserPower* MsgPengHuUserPower::default_instance_ = NULL;

MsgPengHuUserPower* MsgPengHuUserPower::New() const {
  return new MsgPengHuUserPower;
}

void MsgPengHuUserPower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuUserPower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, wik_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuUserPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuUserPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 2;
      case 2: {
        if (tag == 16) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuUserPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuUserPower)
  return false;
#undef DO_
}

void MsgPengHuUserPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuUserPower)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wik(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuUserPower)
}

::google::protobuf::uint8* MsgPengHuUserPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuUserPower)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wik(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuUserPower)
  return target;
}

int MsgPengHuUserPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 wik = 2;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuUserPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuUserPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuUserPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuUserPower::MergeFrom(const MsgPengHuUserPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuUserPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuUserPower::CopyFrom(const MsgPengHuUserPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuUserPower::IsInitialized() const {

  return true;
}

void MsgPengHuUserPower::Swap(MsgPengHuUserPower* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wik_, other->wik_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuUserPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuUserPower_descriptor_;
  metadata.reflection = MsgPengHuUserPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuUserOperate::kWikFieldNumber;
const int MsgPengHuUserOperate::kCardFieldNumber;
#endif  // !_MSC_VER

MsgPengHuUserOperate::MsgPengHuUserOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuUserOperate)
}

void MsgPengHuUserOperate::InitAsDefaultInstance() {
}

MsgPengHuUserOperate::MsgPengHuUserOperate(const MsgPengHuUserOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuUserOperate)
}

void MsgPengHuUserOperate::SharedCtor() {
  _cached_size_ = 0;
  wik_ = 0u;
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuUserOperate::~MsgPengHuUserOperate() {
  // @@protoc_insertion_point(destructor:MsgPengHuUserOperate)
  SharedDtor();
}

void MsgPengHuUserOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuUserOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuUserOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuUserOperate_descriptor_;
}

const MsgPengHuUserOperate& MsgPengHuUserOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuUserOperate* MsgPengHuUserOperate::default_instance_ = NULL;

MsgPengHuUserOperate* MsgPengHuUserOperate::New() const {
  return new MsgPengHuUserOperate;
}

void MsgPengHuUserOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuUserOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(wik_, card_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuUserOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuUserOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wik = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuUserOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuUserOperate)
  return false;
#undef DO_
}

void MsgPengHuUserOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuUserOperate)
  // optional uint32 wik = 1;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wik(), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuUserOperate)
}

::google::protobuf::uint8* MsgPengHuUserOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuUserOperate)
  // optional uint32 wik = 1;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wik(), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuUserOperate)
  return target;
}

int MsgPengHuUserOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wik = 1;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuUserOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuUserOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuUserOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuUserOperate::MergeFrom(const MsgPengHuUserOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuUserOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuUserOperate::CopyFrom(const MsgPengHuUserOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuUserOperate::IsInitialized() const {

  return true;
}

void MsgPengHuUserOperate::Swap(MsgPengHuUserOperate* other) {
  if (other != this) {
    std::swap(wik_, other->wik_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuUserOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuUserOperate_descriptor_;
  metadata.reflection = MsgPengHuUserOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuOutCard::kIdFieldNumber;
const int MsgPengHuOutCard::kCardFieldNumber;
const int MsgPengHuOutCard::kIndexFieldNumber;
const int MsgPengHuOutCard::kHandNumFieldNumber;
const int MsgPengHuOutCard::kHandCardFieldNumber;
const int MsgPengHuOutCard::kRoleStateFieldNumber;
const int MsgPengHuOutCard::kRiverNumFieldNumber;
#endif  // !_MSC_VER

MsgPengHuOutCard::MsgPengHuOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuOutCard)
}

void MsgPengHuOutCard::InitAsDefaultInstance() {
}

MsgPengHuOutCard::MsgPengHuOutCard(const MsgPengHuOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuOutCard)
}

void MsgPengHuOutCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  card_ = 0u;
  index_ = 0;
  hand_num_ = 0u;
  role_state_ = 0u;
  river_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuOutCard::~MsgPengHuOutCard() {
  // @@protoc_insertion_point(destructor:MsgPengHuOutCard)
  SharedDtor();
}

void MsgPengHuOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuOutCard_descriptor_;
}

const MsgPengHuOutCard& MsgPengHuOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuOutCard* MsgPengHuOutCard::default_instance_ = NULL;

MsgPengHuOutCard* MsgPengHuOutCard::New() const {
  return new MsgPengHuOutCard;
}

void MsgPengHuOutCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuOutCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(id_, index_);
    ZR_(hand_num_, river_num_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hand_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 5;
      case 5: {
        if (tag == 40) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hand_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        if (input->ExpectTag(48)) goto parse_role_state;
        break;
      }

      // optional uint32 role_state = 6;
      case 6: {
        if (tag == 48) {
         parse_role_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_state_)));
          set_has_role_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_river_num;
        break;
      }

      // optional uint32 river_num = 7;
      case 7: {
        if (tag == 56) {
         parse_river_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &river_num_)));
          set_has_river_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuOutCard)
  return false;
#undef DO_
}

void MsgPengHuOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuOutCard)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional uint32 hand_num = 4;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_num(), output);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hand_card(i), output);
  }

  // optional uint32 role_state = 6;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_state(), output);
  }

  // optional uint32 river_num = 7;
  if (has_river_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->river_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuOutCard)
}

::google::protobuf::uint8* MsgPengHuOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuOutCard)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional uint32 hand_num = 4;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_num(), target);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hand_card(i), target);
  }

  // optional uint32 role_state = 6;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_state(), target);
  }

  // optional uint32 river_num = 7;
  if (has_river_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->river_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuOutCard)
  return target;
}

int MsgPengHuOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional uint32 hand_num = 4;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

    // optional uint32 role_state = 6;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_state());
    }

    // optional uint32 river_num = 7;
    if (has_river_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->river_num());
    }

  }
  // repeated uint32 hand_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuOutCard::MergeFrom(const MsgPengHuOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_card_.MergeFrom(from.hand_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
    if (from.has_role_state()) {
      set_role_state(from.role_state());
    }
    if (from.has_river_num()) {
      set_river_num(from.river_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuOutCard::CopyFrom(const MsgPengHuOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuOutCard::IsInitialized() const {

  return true;
}

void MsgPengHuOutCard::Swap(MsgPengHuOutCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(card_, other->card_);
    std::swap(index_, other->index_);
    std::swap(hand_num_, other->hand_num_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(role_state_, other->role_state_);
    std::swap(river_num_, other->river_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuOutCard_descriptor_;
  metadata.reflection = MsgPengHuOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuRoleScore::kIdFieldNumber;
const int MsgPengHuRoleScore::kScoreFieldNumber;
#endif  // !_MSC_VER

MsgPengHuRoleScore::MsgPengHuRoleScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuRoleScore)
}

void MsgPengHuRoleScore::InitAsDefaultInstance() {
}

MsgPengHuRoleScore::MsgPengHuRoleScore(const MsgPengHuRoleScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuRoleScore)
}

void MsgPengHuRoleScore::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuRoleScore::~MsgPengHuRoleScore() {
  // @@protoc_insertion_point(destructor:MsgPengHuRoleScore)
  SharedDtor();
}

void MsgPengHuRoleScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuRoleScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuRoleScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuRoleScore_descriptor_;
}

const MsgPengHuRoleScore& MsgPengHuRoleScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuRoleScore* MsgPengHuRoleScore::default_instance_ = NULL;

MsgPengHuRoleScore* MsgPengHuRoleScore::New() const {
  return new MsgPengHuRoleScore;
}

void MsgPengHuRoleScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuRoleScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuRoleScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuRoleScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuRoleScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuRoleScore)
  return false;
#undef DO_
}

void MsgPengHuRoleScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuRoleScore)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuRoleScore)
}

::google::protobuf::uint8* MsgPengHuRoleScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuRoleScore)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuRoleScore)
  return target;
}

int MsgPengHuRoleScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuRoleScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuRoleScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuRoleScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuRoleScore::MergeFrom(const MsgPengHuRoleScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuRoleScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuRoleScore::CopyFrom(const MsgPengHuRoleScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuRoleScore::IsInitialized() const {

  return true;
}

void MsgPengHuRoleScore::Swap(MsgPengHuRoleScore* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuRoleScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuRoleScore_descriptor_;
  metadata.reflection = MsgPengHuRoleScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuCardData::kCardFieldNumber;
const int MsgPengHuCardData::kWikFieldNumber;
const int MsgPengHuCardData::kTaridFieldNumber;
const int MsgPengHuCardData::kSrcidFieldNumber;
const int MsgPengHuCardData::kBarkindFieldNumber;
const int MsgPengHuCardData::kShowMoneyFieldNumber;
const int MsgPengHuCardData::kSubMoneyIdFieldNumber;
const int MsgPengHuCardData::kRoleScoreFieldNumber;
#endif  // !_MSC_VER

MsgPengHuCardData::MsgPengHuCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuCardData)
}

void MsgPengHuCardData::InitAsDefaultInstance() {
}

MsgPengHuCardData::MsgPengHuCardData(const MsgPengHuCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuCardData)
}

void MsgPengHuCardData::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0u;
  wik_ = 0u;
  tarid_ = GOOGLE_ULONGLONG(0);
  srcid_ = GOOGLE_ULONGLONG(0);
  barkind_ = 0u;
  show_money_ = false;
  sub_money_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuCardData::~MsgPengHuCardData() {
  // @@protoc_insertion_point(destructor:MsgPengHuCardData)
  SharedDtor();
}

void MsgPengHuCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuCardData_descriptor_;
}

const MsgPengHuCardData& MsgPengHuCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuCardData* MsgPengHuCardData::default_instance_ = NULL;

MsgPengHuCardData* MsgPengHuCardData::New() const {
  return new MsgPengHuCardData;
}

void MsgPengHuCardData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuCardData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(card_, sub_money_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  role_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuCardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 2;
      case 2: {
        if (tag == 16) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tarid;
        break;
      }

      // optional uint64 tarid = 3;
      case 3: {
        if (tag == 24) {
         parse_tarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcid;
        break;
      }

      // optional uint64 srcid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_barkind;
        break;
      }

      // optional uint32 barkind = 5;
      case 5: {
        if (tag == 40) {
         parse_barkind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barkind_)));
          set_has_barkind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_show_money;
        break;
      }

      // optional bool show_money = 6;
      case 6: {
        if (tag == 48) {
         parse_show_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_money_)));
          set_has_show_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sub_money_id;
        break;
      }

      // optional uint64 sub_money_id = 7;
      case 7: {
        if (tag == 56) {
         parse_sub_money_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sub_money_id_)));
          set_has_sub_money_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_score;
        break;
      }

      // repeated .MsgPengHuRoleScore role_score = 8;
      case 8: {
        if (tag == 66) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuCardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuCardData)
  return false;
#undef DO_
}

void MsgPengHuCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuCardData)
  // optional uint32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card(), output);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wik(), output);
  }

  // optional uint64 tarid = 3;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tarid(), output);
  }

  // optional uint64 srcid = 4;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->srcid(), output);
  }

  // optional uint32 barkind = 5;
  if (has_barkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->barkind(), output);
  }

  // optional bool show_money = 6;
  if (has_show_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_money(), output);
  }

  // optional uint64 sub_money_id = 7;
  if (has_sub_money_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sub_money_id(), output);
  }

  // repeated .MsgPengHuRoleScore role_score = 8;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuCardData)
}

::google::protobuf::uint8* MsgPengHuCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuCardData)
  // optional uint32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card(), target);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wik(), target);
  }

  // optional uint64 tarid = 3;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tarid(), target);
  }

  // optional uint64 srcid = 4;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->srcid(), target);
  }

  // optional uint32 barkind = 5;
  if (has_barkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->barkind(), target);
  }

  // optional bool show_money = 6;
  if (has_show_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show_money(), target);
  }

  // optional uint64 sub_money_id = 7;
  if (has_sub_money_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sub_money_id(), target);
  }

  // repeated .MsgPengHuRoleScore role_score = 8;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuCardData)
  return target;
}

int MsgPengHuCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 wik = 2;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint64 tarid = 3;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tarid());
    }

    // optional uint64 srcid = 4;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint32 barkind = 5;
    if (has_barkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barkind());
    }

    // optional bool show_money = 6;
    if (has_show_money()) {
      total_size += 1 + 1;
    }

    // optional uint64 sub_money_id = 7;
    if (has_sub_money_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sub_money_id());
    }

  }
  // repeated .MsgPengHuRoleScore role_score = 8;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuCardData::MergeFrom(const MsgPengHuCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_score_.MergeFrom(from.role_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_barkind()) {
      set_barkind(from.barkind());
    }
    if (from.has_show_money()) {
      set_show_money(from.show_money());
    }
    if (from.has_sub_money_id()) {
      set_sub_money_id(from.sub_money_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuCardData::CopyFrom(const MsgPengHuCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuCardData::IsInitialized() const {

  return true;
}

void MsgPengHuCardData::Swap(MsgPengHuCardData* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(wik_, other->wik_);
    std::swap(tarid_, other->tarid_);
    std::swap(srcid_, other->srcid_);
    std::swap(barkind_, other->barkind_);
    std::swap(show_money_, other->show_money_);
    std::swap(sub_money_id_, other->sub_money_id_);
    role_score_.Swap(&other->role_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuCardData_descriptor_;
  metadata.reflection = MsgPengHuCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuPlayer::kPlayerInfoFieldNumber;
const int MsgPengHuPlayer::kStateFieldNumber;
const int MsgPengHuPlayer::kHandNumFieldNumber;
const int MsgPengHuPlayer::kRiverCardFieldNumber;
const int MsgPengHuPlayer::kWeaveCardFieldNumber;
const int MsgPengHuPlayer::kWikFieldNumber;
const int MsgPengHuPlayer::kTdFieldNumber;
#endif  // !_MSC_VER

MsgPengHuPlayer::MsgPengHuPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuPlayer)
}

void MsgPengHuPlayer::InitAsDefaultInstance() {
  player_info_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgPengHuPlayer::MsgPengHuPlayer(const MsgPengHuPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuPlayer)
}

void MsgPengHuPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  state_ = 0u;
  hand_num_ = 0u;
  wik_ = 0u;
  td_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuPlayer::~MsgPengHuPlayer() {
  // @@protoc_insertion_point(destructor:MsgPengHuPlayer)
  SharedDtor();
}

void MsgPengHuPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void MsgPengHuPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuPlayer_descriptor_;
}

const MsgPengHuPlayer& MsgPengHuPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuPlayer* MsgPengHuPlayer::default_instance_ = NULL;

MsgPengHuPlayer* MsgPengHuPlayer::New() const {
  return new MsgPengHuPlayer;
}

void MsgPengHuPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(state_, hand_num_);
    ZR_(wik_, td_);
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::MsgPlayerInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  river_card_.Clear();
  weave_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_river_card;
        break;
      }

      // repeated uint32 river_card = 4;
      case 4: {
        if (tag == 32) {
         parse_river_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_river_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_river_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_river_card;
        if (input->ExpectTag(42)) goto parse_weave_card;
        break;
      }

      // repeated .MsgPengHuCardData weave_card = 5;
      case 5: {
        if (tag == 42) {
         parse_weave_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weave_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weave_card;
        if (input->ExpectTag(48)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 6;
      case 6: {
        if (tag == 48) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_td;
        break;
      }

      // optional .TPengHuDirection td = 7;
      case 7: {
        if (tag == 56) {
         parse_td:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TPengHuDirection_IsValid(value)) {
            set_td(static_cast< ::TPengHuDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuPlayer)
  return false;
#undef DO_
}

void MsgPengHuPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuPlayer)
  // optional .MsgPlayerInfo player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 hand_num = 3;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_num(), output);
  }

  // repeated uint32 river_card = 4;
  for (int i = 0; i < this->river_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->river_card(i), output);
  }

  // repeated .MsgPengHuCardData weave_card = 5;
  for (int i = 0; i < this->weave_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weave_card(i), output);
  }

  // optional uint32 wik = 6;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wik(), output);
  }

  // optional .TPengHuDirection td = 7;
  if (has_td()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->td(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuPlayer)
}

::google::protobuf::uint8* MsgPengHuPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuPlayer)
  // optional .MsgPlayerInfo player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 hand_num = 3;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_num(), target);
  }

  // repeated uint32 river_card = 4;
  for (int i = 0; i < this->river_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->river_card(i), target);
  }

  // repeated .MsgPengHuCardData weave_card = 5;
  for (int i = 0; i < this->weave_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->weave_card(i), target);
  }

  // optional uint32 wik = 6;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wik(), target);
  }

  // optional .TPengHuDirection td = 7;
  if (has_td()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->td(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuPlayer)
  return target;
}

int MsgPengHuPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 hand_num = 3;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

    // optional uint32 wik = 6;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional .TPengHuDirection td = 7;
    if (has_td()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->td());
    }

  }
  // repeated uint32 river_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->river_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->river_card(i));
    }
    total_size += 1 * this->river_card_size() + data_size;
  }

  // repeated .MsgPengHuCardData weave_card = 5;
  total_size += 1 * this->weave_card_size();
  for (int i = 0; i < this->weave_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weave_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuPlayer::MergeFrom(const MsgPengHuPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  river_card_.MergeFrom(from.river_card_);
  weave_card_.MergeFrom(from.weave_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::MsgPlayerInfo::MergeFrom(from.player_info());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_td()) {
      set_td(from.td());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuPlayer::CopyFrom(const MsgPengHuPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuPlayer::IsInitialized() const {

  return true;
}

void MsgPengHuPlayer::Swap(MsgPengHuPlayer* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    std::swap(state_, other->state_);
    std::swap(hand_num_, other->hand_num_);
    river_card_.Swap(&other->river_card_);
    weave_card_.Swap(&other->weave_card_);
    std::swap(wik_, other->wik_);
    std::swap(td_, other->td_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuPlayer_descriptor_;
  metadata.reflection = MsgPengHuPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuRoom::kRoomStateFieldNumber;
const int MsgPengHuRoom::kPlayerListFieldNumber;
const int MsgPengHuRoom::kBankerIdFieldNumber;
const int MsgPengHuRoom::kActionIdFieldNumber;
const int MsgPengHuRoom::kHandCardFieldNumber;
const int MsgPengHuRoom::kSurplusHandNumFieldNumber;
const int MsgPengHuRoom::kSendCardFieldNumber;
const int MsgPengHuRoom::kRoomIdFieldNumber;
const int MsgPengHuRoom::kRoomTypeFieldNumber;
const int MsgPengHuRoom::kGameCountFieldNumber;
const int MsgPengHuRoom::kStateRunTimeFieldNumber;
const int MsgPengHuRoom::kPrivateRoomFieldNumber;
const int MsgPengHuRoom::kGameCircleFieldNumber;
const int MsgPengHuRoom::kOutCardFieldNumber;
const int MsgPengHuRoom::kParam1FieldNumber;
const int MsgPengHuRoom::kParamListFieldNumber;
const int MsgPengHuRoom::kGangCardFieldNumber;
const int MsgPengHuRoom::kTouCardFieldNumber;
const int MsgPengHuRoom::kEatCardFieldNumber;
const int MsgPengHuRoom::kShowDownInfoFieldNumber;
const int MsgPengHuRoom::kRoleHostFieldNumber;
const int MsgPengHuRoom::kRoleStateFieldNumber;
const int MsgPengHuRoom::kWikFieldNumber;
#endif  // !_MSC_VER

MsgPengHuRoom::MsgPengHuRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuRoom)
}

void MsgPengHuRoom::InitAsDefaultInstance() {
  private_room_ = const_cast< ::MsgCreatePrivateRoom*>(&::MsgCreatePrivateRoom::default_instance());
  show_down_info_ = const_cast< ::MsgPengHuShowDownCount*>(&::MsgPengHuShowDownCount::default_instance());
  role_host_ = const_cast< ::MsgPengHuRoleHostCount*>(&::MsgPengHuRoleHostCount::default_instance());
  role_state_ = const_cast< ::MsgPengHuRoleStateCount*>(&::MsgPengHuRoleStateCount::default_instance());
}

MsgPengHuRoom::MsgPengHuRoom(const MsgPengHuRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuRoom)
}

void MsgPengHuRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_state_ = 0;
  banker_id_ = GOOGLE_ULONGLONG(0);
  action_id_ = GOOGLE_ULONGLONG(0);
  surplus_hand_num_ = 0u;
  send_card_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_count_ = 0u;
  state_run_time_ = 0u;
  private_room_ = NULL;
  game_circle_ = 0u;
  out_card_ = 0u;
  param1_ = 0u;
  show_down_info_ = NULL;
  role_host_ = NULL;
  role_state_ = NULL;
  wik_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuRoom::~MsgPengHuRoom() {
  // @@protoc_insertion_point(destructor:MsgPengHuRoom)
  SharedDtor();
}

void MsgPengHuRoom::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
    delete private_room_;
    delete show_down_info_;
    delete role_host_;
    delete role_state_;
  }
}

void MsgPengHuRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuRoom_descriptor_;
}

const MsgPengHuRoom& MsgPengHuRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuRoom* MsgPengHuRoom::default_instance_ = NULL;

MsgPengHuRoom* MsgPengHuRoom::New() const {
  return new MsgPengHuRoom;
}

void MsgPengHuRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 237) {
    ZR_(banker_id_, action_id_);
    ZR_(room_id_, send_card_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(state_run_time_, param1_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
    game_count_ = 0u;
    if (has_private_room()) {
      if (private_room_ != NULL) private_room_->::MsgCreatePrivateRoom::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 7864320) {
    if (has_show_down_info()) {
      if (show_down_info_ != NULL) show_down_info_->::MsgPengHuShowDownCount::Clear();
    }
    if (has_role_host()) {
      if (role_host_ != NULL) role_host_->::MsgPengHuRoleHostCount::Clear();
    }
    if (has_role_state()) {
      if (role_state_ != NULL) role_state_->::MsgPengHuRoleStateCount::Clear();
    }
    wik_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  hand_card_.Clear();
  param_list_.Clear();
  gang_card_.Clear();
  tou_card_.Clear();
  eat_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TPengHuState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TPengHuState_IsValid(value)) {
            set_room_state(static_cast< ::TPengHuState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }

      // repeated .MsgPengHuPlayer player_list = 2;
      case 2: {
        if (tag == 18) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectTag(24)) goto parse_banker_id;
        break;
      }

      // optional uint64 banker_id = 3;
      case 3: {
        if (tag == 24) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint64 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 5;
      case 5: {
        if (tag == 40) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hand_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        if (input->ExpectTag(48)) goto parse_surplus_hand_num;
        break;
      }

      // optional uint32 surplus_hand_num = 6;
      case 6: {
        if (tag == 48) {
         parse_surplus_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_hand_num_)));
          set_has_surplus_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_send_card;
        break;
      }

      // optional uint32 send_card = 7;
      case 7: {
        if (tag == 56) {
         parse_send_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_card_)));
          set_has_send_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 8;
      case 8: {
        if (tag == 64) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_room_type;
        break;
      }

      // optional string room_type = 9;
      case 9: {
        if (tag == 74) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 10;
      case 10: {
        if (tag == 80) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_state_run_time;
        break;
      }

      // optional uint32 state_run_time = 11;
      case 11: {
        if (tag == 88) {
         parse_state_run_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_run_time_)));
          set_has_state_run_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_private_room;
        break;
      }

      // optional .MsgCreatePrivateRoom private_room = 12;
      case 12: {
        if (tag == 98) {
         parse_private_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_game_circle;
        break;
      }

      // optional uint32 game_circle = 13;
      case 13: {
        if (tag == 104) {
         parse_game_circle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_circle_)));
          set_has_game_circle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_out_card;
        break;
      }

      // optional uint32 out_card = 14;
      case 14: {
        if (tag == 112) {
         parse_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_card_)));
          set_has_out_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 15;
      case 15: {
        if (tag == 120) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_param_list;
        break;
      }

      // repeated uint32 param_list = 16;
      case 16: {
        if (tag == 128) {
         parse_param_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_param_list())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_param_list;
        if (input->ExpectTag(136)) goto parse_gang_card;
        break;
      }

      // repeated uint32 gang_card = 17;
      case 17: {
        if (tag == 136) {
         parse_gang_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_gang_card())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gang_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_gang_card;
        if (input->ExpectTag(144)) goto parse_tou_card;
        break;
      }

      // repeated uint32 tou_card = 18;
      case 18: {
        if (tag == 144) {
         parse_tou_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_tou_card())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tou_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_tou_card;
        if (input->ExpectTag(152)) goto parse_eat_card;
        break;
      }

      // repeated uint32 eat_card = 19;
      case 19: {
        if (tag == 152) {
         parse_eat_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_eat_card())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eat_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_eat_card;
        if (input->ExpectTag(162)) goto parse_show_down_info;
        break;
      }

      // optional .MsgPengHuShowDownCount show_down_info = 20;
      case 20: {
        if (tag == 162) {
         parse_show_down_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_down_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_role_host;
        break;
      }

      // optional .MsgPengHuRoleHostCount role_host = 21;
      case 21: {
        if (tag == 170) {
         parse_role_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_role_state;
        break;
      }

      // optional .MsgPengHuRoleStateCount role_state = 22;
      case 22: {
        if (tag == 178) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 23;
      case 23: {
        if (tag == 184) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuRoom)
  return false;
#undef DO_
}

void MsgPengHuRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuRoom)
  // optional .TPengHuState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // repeated .MsgPengHuPlayer player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }

  // optional uint64 banker_id = 3;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->banker_id(), output);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->action_id(), output);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hand_card(i), output);
  }

  // optional uint32 surplus_hand_num = 6;
  if (has_surplus_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->surplus_hand_num(), output);
  }

  // optional uint32 send_card = 7;
  if (has_send_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->send_card(), output);
  }

  // optional uint64 room_id = 8;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->room_id(), output);
  }

  // optional string room_type = 9;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->room_type(), output);
  }

  // optional uint32 game_count = 10;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->game_count(), output);
  }

  // optional uint32 state_run_time = 11;
  if (has_state_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->state_run_time(), output);
  }

  // optional .MsgCreatePrivateRoom private_room = 12;
  if (has_private_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->private_room(), output);
  }

  // optional uint32 game_circle = 13;
  if (has_game_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->game_circle(), output);
  }

  // optional uint32 out_card = 14;
  if (has_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->out_card(), output);
  }

  // optional uint32 param1 = 15;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->param1(), output);
  }

  // repeated uint32 param_list = 16;
  for (int i = 0; i < this->param_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->param_list(i), output);
  }

  // repeated uint32 gang_card = 17;
  for (int i = 0; i < this->gang_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->gang_card(i), output);
  }

  // repeated uint32 tou_card = 18;
  for (int i = 0; i < this->tou_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->tou_card(i), output);
  }

  // repeated uint32 eat_card = 19;
  for (int i = 0; i < this->eat_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->eat_card(i), output);
  }

  // optional .MsgPengHuShowDownCount show_down_info = 20;
  if (has_show_down_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->show_down_info(), output);
  }

  // optional .MsgPengHuRoleHostCount role_host = 21;
  if (has_role_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->role_host(), output);
  }

  // optional .MsgPengHuRoleStateCount role_state = 22;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->role_state(), output);
  }

  // optional uint32 wik = 23;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->wik(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuRoom)
}

::google::protobuf::uint8* MsgPengHuRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuRoom)
  // optional .TPengHuState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // repeated .MsgPengHuPlayer player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }

  // optional uint64 banker_id = 3;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->banker_id(), target);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->action_id(), target);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hand_card(i), target);
  }

  // optional uint32 surplus_hand_num = 6;
  if (has_surplus_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->surplus_hand_num(), target);
  }

  // optional uint32 send_card = 7;
  if (has_send_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->send_card(), target);
  }

  // optional uint64 room_id = 8;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->room_id(), target);
  }

  // optional string room_type = 9;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->room_type(), target);
  }

  // optional uint32 game_count = 10;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->game_count(), target);
  }

  // optional uint32 state_run_time = 11;
  if (has_state_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->state_run_time(), target);
  }

  // optional .MsgCreatePrivateRoom private_room = 12;
  if (has_private_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->private_room(), target);
  }

  // optional uint32 game_circle = 13;
  if (has_game_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->game_circle(), target);
  }

  // optional uint32 out_card = 14;
  if (has_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->out_card(), target);
  }

  // optional uint32 param1 = 15;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->param1(), target);
  }

  // repeated uint32 param_list = 16;
  for (int i = 0; i < this->param_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->param_list(i), target);
  }

  // repeated uint32 gang_card = 17;
  for (int i = 0; i < this->gang_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->gang_card(i), target);
  }

  // repeated uint32 tou_card = 18;
  for (int i = 0; i < this->tou_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->tou_card(i), target);
  }

  // repeated uint32 eat_card = 19;
  for (int i = 0; i < this->eat_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->eat_card(i), target);
  }

  // optional .MsgPengHuShowDownCount show_down_info = 20;
  if (has_show_down_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->show_down_info(), target);
  }

  // optional .MsgPengHuRoleHostCount role_host = 21;
  if (has_role_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->role_host(), target);
  }

  // optional .MsgPengHuRoleStateCount role_state = 22;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->role_state(), target);
  }

  // optional uint32 wik = 23;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->wik(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuRoom)
  return target;
}

int MsgPengHuRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TPengHuState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint64 banker_id = 3;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banker_id());
    }

    // optional uint64 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional uint32 surplus_hand_num = 6;
    if (has_surplus_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_hand_num());
    }

    // optional uint32 send_card = 7;
    if (has_send_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_card());
    }

    // optional uint64 room_id = 8;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string room_type = 9;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 game_count = 10;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 state_run_time = 11;
    if (has_state_run_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_run_time());
    }

    // optional .MsgCreatePrivateRoom private_room = 12;
    if (has_private_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_room());
    }

    // optional uint32 game_circle = 13;
    if (has_game_circle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_circle());
    }

    // optional uint32 out_card = 14;
    if (has_out_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_card());
    }

    // optional uint32 param1 = 15;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

  }
  if (_has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    // optional .MsgPengHuShowDownCount show_down_info = 20;
    if (has_show_down_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_down_info());
    }

    // optional .MsgPengHuRoleHostCount role_host = 21;
    if (has_role_host()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_host());
    }

    // optional .MsgPengHuRoleStateCount role_state = 22;
    if (has_role_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_state());
    }

    // optional uint32 wik = 23;
    if (has_wik()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

  }
  // repeated .MsgPengHuPlayer player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated uint32 hand_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated uint32 param_list = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param_list(i));
    }
    total_size += 2 * this->param_list_size() + data_size;
  }

  // repeated uint32 gang_card = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gang_card(i));
    }
    total_size += 2 * this->gang_card_size() + data_size;
  }

  // repeated uint32 tou_card = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->tou_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tou_card(i));
    }
    total_size += 2 * this->tou_card_size() + data_size;
  }

  // repeated uint32 eat_card = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->eat_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eat_card(i));
    }
    total_size += 2 * this->eat_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuRoom::MergeFrom(const MsgPengHuRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  hand_card_.MergeFrom(from.hand_card_);
  param_list_.MergeFrom(from.param_list_);
  gang_card_.MergeFrom(from.gang_card_);
  tou_card_.MergeFrom(from.tou_card_);
  eat_card_.MergeFrom(from.eat_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_surplus_hand_num()) {
      set_surplus_hand_num(from.surplus_hand_num());
    }
    if (from.has_send_card()) {
      set_send_card(from.send_card());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_state_run_time()) {
      set_state_run_time(from.state_run_time());
    }
    if (from.has_private_room()) {
      mutable_private_room()->::MsgCreatePrivateRoom::MergeFrom(from.private_room());
    }
    if (from.has_game_circle()) {
      set_game_circle(from.game_circle());
    }
    if (from.has_out_card()) {
      set_out_card(from.out_card());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    if (from.has_show_down_info()) {
      mutable_show_down_info()->::MsgPengHuShowDownCount::MergeFrom(from.show_down_info());
    }
    if (from.has_role_host()) {
      mutable_role_host()->::MsgPengHuRoleHostCount::MergeFrom(from.role_host());
    }
    if (from.has_role_state()) {
      mutable_role_state()->::MsgPengHuRoleStateCount::MergeFrom(from.role_state());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuRoom::CopyFrom(const MsgPengHuRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuRoom::IsInitialized() const {

  return true;
}

void MsgPengHuRoom::Swap(MsgPengHuRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    player_list_.Swap(&other->player_list_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(action_id_, other->action_id_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(surplus_hand_num_, other->surplus_hand_num_);
    std::swap(send_card_, other->send_card_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(game_count_, other->game_count_);
    std::swap(state_run_time_, other->state_run_time_);
    std::swap(private_room_, other->private_room_);
    std::swap(game_circle_, other->game_circle_);
    std::swap(out_card_, other->out_card_);
    std::swap(param1_, other->param1_);
    param_list_.Swap(&other->param_list_);
    gang_card_.Swap(&other->gang_card_);
    tou_card_.Swap(&other->tou_card_);
    eat_card_.Swap(&other->eat_card_);
    std::swap(show_down_info_, other->show_down_info_);
    std::swap(role_host_, other->role_host_);
    std::swap(role_state_, other->role_state_);
    std::swap(wik_, other->wik_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuRoom_descriptor_;
  metadata.reflection = MsgPengHuRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuShowDown::kRoleidFieldNumber;
const int MsgPengHuShowDown::kMoneyFieldNumber;
const int MsgPengHuShowDown::kHukindFieldNumber;
const int MsgPengHuShowDown::kHandCardFieldNumber;
const int MsgPengHuShowDown::kHardFlowerFieldNumber;
const int MsgPengHuShowDown::kMildFlowerFieldNumber;
const int MsgPengHuShowDown::kBaotaFlowerFieldNumber;
const int MsgPengHuShowDown::kHuCardFieldNumber;
const int MsgPengHuShowDown::kTotalMoneyFieldNumber;
const int MsgPengHuShowDown::kPackScoreFieldNumber;
const int MsgPengHuShowDown::kTotalPackScoreFieldNumber;
const int MsgPengHuShowDown::kEventCountFieldNumber;
#endif  // !_MSC_VER

MsgPengHuShowDown::MsgPengHuShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuShowDown)
}

void MsgPengHuShowDown::InitAsDefaultInstance() {
}

MsgPengHuShowDown::MsgPengHuShowDown(const MsgPengHuShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuShowDown)
}

void MsgPengHuShowDown::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  hukind_ = 0u;
  hard_flower_ = 0u;
  mild_flower_ = 0u;
  baota_flower_ = 0u;
  hu_card_ = 0u;
  total_money_ = GOOGLE_LONGLONG(0);
  pack_score_ = GOOGLE_LONGLONG(0);
  total_pack_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuShowDown::~MsgPengHuShowDown() {
  // @@protoc_insertion_point(destructor:MsgPengHuShowDown)
  SharedDtor();
}

void MsgPengHuShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuShowDown_descriptor_;
}

const MsgPengHuShowDown& MsgPengHuShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuShowDown* MsgPengHuShowDown::default_instance_ = NULL;

MsgPengHuShowDown* MsgPengHuShowDown::New() const {
  return new MsgPengHuShowDown;
}

void MsgPengHuShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(roleid_, money_);
    ZR_(hukind_, baota_flower_);
    hu_card_ = 0u;
  }
  ZR_(total_money_, total_pack_score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hand_card_.Clear();
  event_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hukind;
        break;
      }

      // optional uint32 hukind = 3;
      case 3: {
        if (tag == 24) {
         parse_hukind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hukind_)));
          set_has_hukind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_hand_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_card;
        if (input->ExpectTag(40)) goto parse_hard_flower;
        break;
      }

      // optional uint32 hard_flower = 5;
      case 5: {
        if (tag == 40) {
         parse_hard_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hard_flower_)));
          set_has_hard_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mild_flower;
        break;
      }

      // optional uint32 mild_flower = 6;
      case 6: {
        if (tag == 48) {
         parse_mild_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mild_flower_)));
          set_has_mild_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_baota_flower;
        break;
      }

      // optional uint32 baota_flower = 7;
      case 7: {
        if (tag == 56) {
         parse_baota_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baota_flower_)));
          set_has_baota_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hu_card;
        break;
      }

      // optional uint32 hu_card = 8;
      case 8: {
        if (tag == 64) {
         parse_hu_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_card_)));
          set_has_hu_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_total_money;
        break;
      }

      // optional int64 total_money = 9;
      case 9: {
        if (tag == 72) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pack_score;
        break;
      }

      // optional int64 pack_score = 10;
      case 10: {
        if (tag == 80) {
         parse_pack_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pack_score_)));
          set_has_pack_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_pack_score;
        break;
      }

      // optional int64 total_pack_score = 11;
      case 11: {
        if (tag == 88) {
         parse_total_pack_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_pack_score_)));
          set_has_total_pack_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_event_count;
        break;
      }

      // repeated .MsgPengHuShowDownEvent event_count = 12;
      case 12: {
        if (tag == 98) {
         parse_event_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_event_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuShowDown)
  return false;
#undef DO_
}

void MsgPengHuShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuShowDown)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // optional uint32 hukind = 3;
  if (has_hukind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hukind(), output);
  }

  // repeated uint32 hand_card = 4;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->hand_card(i), output);
  }

  // optional uint32 hard_flower = 5;
  if (has_hard_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hard_flower(), output);
  }

  // optional uint32 mild_flower = 6;
  if (has_mild_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mild_flower(), output);
  }

  // optional uint32 baota_flower = 7;
  if (has_baota_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->baota_flower(), output);
  }

  // optional uint32 hu_card = 8;
  if (has_hu_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hu_card(), output);
  }

  // optional int64 total_money = 9;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->total_money(), output);
  }

  // optional int64 pack_score = 10;
  if (has_pack_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->pack_score(), output);
  }

  // optional int64 total_pack_score = 11;
  if (has_total_pack_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->total_pack_score(), output);
  }

  // repeated .MsgPengHuShowDownEvent event_count = 12;
  for (int i = 0; i < this->event_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->event_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuShowDown)
}

::google::protobuf::uint8* MsgPengHuShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuShowDown)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // optional uint32 hukind = 3;
  if (has_hukind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hukind(), target);
  }

  // repeated uint32 hand_card = 4;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->hand_card(i), target);
  }

  // optional uint32 hard_flower = 5;
  if (has_hard_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hard_flower(), target);
  }

  // optional uint32 mild_flower = 6;
  if (has_mild_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mild_flower(), target);
  }

  // optional uint32 baota_flower = 7;
  if (has_baota_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->baota_flower(), target);
  }

  // optional uint32 hu_card = 8;
  if (has_hu_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hu_card(), target);
  }

  // optional int64 total_money = 9;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->total_money(), target);
  }

  // optional int64 pack_score = 10;
  if (has_pack_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->pack_score(), target);
  }

  // optional int64 total_pack_score = 11;
  if (has_total_pack_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->total_pack_score(), target);
  }

  // repeated .MsgPengHuShowDownEvent event_count = 12;
  for (int i = 0; i < this->event_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->event_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuShowDown)
  return target;
}

int MsgPengHuShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional uint32 hukind = 3;
    if (has_hukind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hukind());
    }

    // optional uint32 hard_flower = 5;
    if (has_hard_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hard_flower());
    }

    // optional uint32 mild_flower = 6;
    if (has_mild_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mild_flower());
    }

    // optional uint32 baota_flower = 7;
    if (has_baota_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baota_flower());
    }

    // optional uint32 hu_card = 8;
    if (has_hu_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_card());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 total_money = 9;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_money());
    }

    // optional int64 pack_score = 10;
    if (has_pack_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pack_score());
    }

    // optional int64 total_pack_score = 11;
    if (has_total_pack_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_pack_score());
    }

  }
  // repeated uint32 hand_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated .MsgPengHuShowDownEvent event_count = 12;
  total_size += 1 * this->event_count_size();
  for (int i = 0; i < this->event_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuShowDown::MergeFrom(const MsgPengHuShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_card_.MergeFrom(from.hand_card_);
  event_count_.MergeFrom(from.event_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_hukind()) {
      set_hukind(from.hukind());
    }
    if (from.has_hard_flower()) {
      set_hard_flower(from.hard_flower());
    }
    if (from.has_mild_flower()) {
      set_mild_flower(from.mild_flower());
    }
    if (from.has_baota_flower()) {
      set_baota_flower(from.baota_flower());
    }
    if (from.has_hu_card()) {
      set_hu_card(from.hu_card());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_pack_score()) {
      set_pack_score(from.pack_score());
    }
    if (from.has_total_pack_score()) {
      set_total_pack_score(from.total_pack_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuShowDown::CopyFrom(const MsgPengHuShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuShowDown::IsInitialized() const {

  return true;
}

void MsgPengHuShowDown::Swap(MsgPengHuShowDown* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(money_, other->money_);
    std::swap(hukind_, other->hukind_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(hard_flower_, other->hard_flower_);
    std::swap(mild_flower_, other->mild_flower_);
    std::swap(baota_flower_, other->baota_flower_);
    std::swap(hu_card_, other->hu_card_);
    std::swap(total_money_, other->total_money_);
    std::swap(pack_score_, other->pack_score_);
    std::swap(total_pack_score_, other->total_pack_score_);
    event_count_.Swap(&other->event_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuShowDown_descriptor_;
  metadata.reflection = MsgPengHuShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuShowDownEvent::kEventIdFieldNumber;
const int MsgPengHuShowDownEvent::kCountFieldNumber;
const int MsgPengHuShowDownEvent::kScoreFieldNumber;
const int MsgPengHuShowDownEvent::kScoreCountFieldNumber;
#endif  // !_MSC_VER

MsgPengHuShowDownEvent::MsgPengHuShowDownEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuShowDownEvent)
}

void MsgPengHuShowDownEvent::InitAsDefaultInstance() {
}

MsgPengHuShowDownEvent::MsgPengHuShowDownEvent(const MsgPengHuShowDownEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuShowDownEvent)
}

void MsgPengHuShowDownEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuShowDownEvent::~MsgPengHuShowDownEvent() {
  // @@protoc_insertion_point(destructor:MsgPengHuShowDownEvent)
  SharedDtor();
}

void MsgPengHuShowDownEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuShowDownEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuShowDownEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuShowDownEvent_descriptor_;
}

const MsgPengHuShowDownEvent& MsgPengHuShowDownEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuShowDownEvent* MsgPengHuShowDownEvent::default_instance_ = NULL;

MsgPengHuShowDownEvent* MsgPengHuShowDownEvent::New() const {
  return new MsgPengHuShowDownEvent;
}

void MsgPengHuShowDownEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuShowDownEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  score_.Clear();
  score_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuShowDownEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuShowDownEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // repeated int32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_score())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        if (input->ExpectTag(32)) goto parse_score_count;
        break;
      }

      // repeated uint32 score_count = 4;
      case 4: {
        if (tag == 32) {
         parse_score_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_score_count())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuShowDownEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuShowDownEvent)
  return false;
#undef DO_
}

void MsgPengHuShowDownEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuShowDownEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated int32 score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->score(i), output);
  }

  // repeated uint32 score_count = 4;
  for (int i = 0; i < this->score_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->score_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuShowDownEvent)
}

::google::protobuf::uint8* MsgPengHuShowDownEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuShowDownEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated int32 score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->score(i), target);
  }

  // repeated uint32 score_count = 4;
  for (int i = 0; i < this->score_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->score_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuShowDownEvent)
  return target;
}

int MsgPengHuShowDownEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated int32 score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated uint32 score_count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->score_count(i));
    }
    total_size += 1 * this->score_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuShowDownEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuShowDownEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuShowDownEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuShowDownEvent::MergeFrom(const MsgPengHuShowDownEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  score_count_.MergeFrom(from.score_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuShowDownEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuShowDownEvent::CopyFrom(const MsgPengHuShowDownEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuShowDownEvent::IsInitialized() const {

  return true;
}

void MsgPengHuShowDownEvent::Swap(MsgPengHuShowDownEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(count_, other->count_);
    score_.Swap(&other->score_);
    score_count_.Swap(&other->score_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuShowDownEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuShowDownEvent_descriptor_;
  metadata.reflection = MsgPengHuShowDownEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuShowDownCount::kShowdownListFieldNumber;
const int MsgPengHuShowDownCount::kRoomStateFieldNumber;
const int MsgPengHuShowDownCount::kGameCountFieldNumber;
const int MsgPengHuShowDownCount::kGameOverFieldNumber;
const int MsgPengHuShowDownCount::kOtherCardFieldNumber;
const int MsgPengHuShowDownCount::kOtherCountFieldNumber;
const int MsgPengHuShowDownCount::kTimeFieldNumber;
const int MsgPengHuShowDownCount::kParam1FieldNumber;
const int MsgPengHuShowDownCount::kHuStateFieldNumber;
#endif  // !_MSC_VER

MsgPengHuShowDownCount::MsgPengHuShowDownCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuShowDownCount)
}

void MsgPengHuShowDownCount::InitAsDefaultInstance() {
}

MsgPengHuShowDownCount::MsgPengHuShowDownCount(const MsgPengHuShowDownCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuShowDownCount)
}

void MsgPengHuShowDownCount::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  game_count_ = 0u;
  game_over_ = false;
  other_count_ = 0u;
  time_ = 0u;
  param1_ = 0u;
  hu_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuShowDownCount::~MsgPengHuShowDownCount() {
  // @@protoc_insertion_point(destructor:MsgPengHuShowDownCount)
  SharedDtor();
}

void MsgPengHuShowDownCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuShowDownCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuShowDownCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuShowDownCount_descriptor_;
}

const MsgPengHuShowDownCount& MsgPengHuShowDownCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuShowDownCount* MsgPengHuShowDownCount::default_instance_ = NULL;

MsgPengHuShowDownCount* MsgPengHuShowDownCount::New() const {
  return new MsgPengHuShowDownCount;
}

void MsgPengHuShowDownCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuShowDownCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 238) {
    ZR_(room_state_, game_count_);
    ZR_(game_over_, param1_);
  }
  hu_state_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  showdown_list_.Clear();
  other_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuShowDownCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuShowDownCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPengHuShowDown showdown_list = 1;
      case 1: {
        if (tag == 10) {
         parse_showdown_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showdown_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_showdown_list;
        if (input->ExpectTag(16)) goto parse_room_state;
        break;
      }

      // optional .TPengHuState room_state = 2;
      case 2: {
        if (tag == 16) {
         parse_room_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TPengHuState_IsValid(value)) {
            set_room_state(static_cast< ::TPengHuState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 3;
      case 3: {
        if (tag == 24) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_over;
        break;
      }

      // optional bool game_over = 4;
      case 4: {
        if (tag == 32) {
         parse_game_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_over_)));
          set_has_game_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_other_card;
        break;
      }

      // repeated uint32 other_card = 5;
      case 5: {
        if (tag == 40) {
         parse_other_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_other_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_other_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_other_card;
        if (input->ExpectTag(48)) goto parse_other_count;
        break;
      }

      // optional uint32 other_count = 6;
      case 6: {
        if (tag == 48) {
         parse_other_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_count_)));
          set_has_other_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 8;
      case 8: {
        if (tag == 64) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hu_state;
        break;
      }

      // optional uint32 hu_state = 9;
      case 9: {
        if (tag == 72) {
         parse_hu_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_state_)));
          set_has_hu_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuShowDownCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuShowDownCount)
  return false;
#undef DO_
}

void MsgPengHuShowDownCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuShowDownCount)
  // repeated .MsgPengHuShowDown showdown_list = 1;
  for (int i = 0; i < this->showdown_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showdown_list(i), output);
  }

  // optional .TPengHuState room_state = 2;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_state(), output);
  }

  // optional uint32 game_count = 3;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_count(), output);
  }

  // optional bool game_over = 4;
  if (has_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->game_over(), output);
  }

  // repeated uint32 other_card = 5;
  for (int i = 0; i < this->other_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->other_card(i), output);
  }

  // optional uint32 other_count = 6;
  if (has_other_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->other_count(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint32 param1 = 8;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->param1(), output);
  }

  // optional uint32 hu_state = 9;
  if (has_hu_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hu_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuShowDownCount)
}

::google::protobuf::uint8* MsgPengHuShowDownCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuShowDownCount)
  // repeated .MsgPengHuShowDown showdown_list = 1;
  for (int i = 0; i < this->showdown_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showdown_list(i), target);
  }

  // optional .TPengHuState room_state = 2;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_state(), target);
  }

  // optional uint32 game_count = 3;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_count(), target);
  }

  // optional bool game_over = 4;
  if (has_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->game_over(), target);
  }

  // repeated uint32 other_card = 5;
  for (int i = 0; i < this->other_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->other_card(i), target);
  }

  // optional uint32 other_count = 6;
  if (has_other_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->other_count(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint32 param1 = 8;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->param1(), target);
  }

  // optional uint32 hu_state = 9;
  if (has_hu_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hu_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuShowDownCount)
  return target;
}

int MsgPengHuShowDownCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TPengHuState room_state = 2;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 game_count = 3;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional bool game_over = 4;
    if (has_game_over()) {
      total_size += 1 + 1;
    }

    // optional uint32 other_count = 6;
    if (has_other_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_count());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 param1 = 8;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hu_state = 9;
    if (has_hu_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_state());
    }

  }
  // repeated .MsgPengHuShowDown showdown_list = 1;
  total_size += 1 * this->showdown_list_size();
  for (int i = 0; i < this->showdown_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showdown_list(i));
  }

  // repeated uint32 other_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->other_card(i));
    }
    total_size += 1 * this->other_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuShowDownCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuShowDownCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuShowDownCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuShowDownCount::MergeFrom(const MsgPengHuShowDownCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  showdown_list_.MergeFrom(from.showdown_list_);
  other_card_.MergeFrom(from.other_card_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_game_over()) {
      set_game_over(from.game_over());
    }
    if (from.has_other_count()) {
      set_other_count(from.other_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hu_state()) {
      set_hu_state(from.hu_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuShowDownCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuShowDownCount::CopyFrom(const MsgPengHuShowDownCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuShowDownCount::IsInitialized() const {

  return true;
}

void MsgPengHuShowDownCount::Swap(MsgPengHuShowDownCount* other) {
  if (other != this) {
    showdown_list_.Swap(&other->showdown_list_);
    std::swap(room_state_, other->room_state_);
    std::swap(game_count_, other->game_count_);
    std::swap(game_over_, other->game_over_);
    other_card_.Swap(&other->other_card_);
    std::swap(other_count_, other->other_count_);
    std::swap(time_, other->time_);
    std::swap(param1_, other->param1_);
    std::swap(hu_state_, other->hu_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuShowDownCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuShowDownCount_descriptor_;
  metadata.reflection = MsgPengHuShowDownCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuWeaveCard::kCarddataFieldNumber;
const int MsgPengHuWeaveCard::kHandNumFieldNumber;
const int MsgPengHuWeaveCard::kHandCardFieldNumber;
const int MsgPengHuWeaveCard::kRoleScoreFieldNumber;
const int MsgPengHuWeaveCard::kPlayerListFieldNumber;
#endif  // !_MSC_VER

MsgPengHuWeaveCard::MsgPengHuWeaveCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuWeaveCard)
}

void MsgPengHuWeaveCard::InitAsDefaultInstance() {
}

MsgPengHuWeaveCard::MsgPengHuWeaveCard(const MsgPengHuWeaveCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuWeaveCard)
}

void MsgPengHuWeaveCard::SharedCtor() {
  _cached_size_ = 0;
  hand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuWeaveCard::~MsgPengHuWeaveCard() {
  // @@protoc_insertion_point(destructor:MsgPengHuWeaveCard)
  SharedDtor();
}

void MsgPengHuWeaveCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuWeaveCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuWeaveCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuWeaveCard_descriptor_;
}

const MsgPengHuWeaveCard& MsgPengHuWeaveCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuWeaveCard* MsgPengHuWeaveCard::default_instance_ = NULL;

MsgPengHuWeaveCard* MsgPengHuWeaveCard::New() const {
  return new MsgPengHuWeaveCard;
}

void MsgPengHuWeaveCard::Clear() {
  hand_num_ = 0u;
  carddata_.Clear();
  hand_card_.Clear();
  role_score_.Clear();
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuWeaveCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuWeaveCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPengHuCardData carddata = 1;
      case 1: {
        if (tag == 10) {
         parse_carddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_carddata;
        if (input->ExpectTag(16)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 2;
      case 2: {
        if (tag == 16) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hand_card())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_card;
        if (input->ExpectTag(34)) goto parse_role_score;
        break;
      }

      // repeated .MsgPengHuRoleScore role_score = 4;
      case 4: {
        if (tag == 34) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_score;
        if (input->ExpectTag(42)) goto parse_player_list;
        break;
      }

      // repeated .MsgPengHuPlayer player_list = 5;
      case 5: {
        if (tag == 42) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuWeaveCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuWeaveCard)
  return false;
#undef DO_
}

void MsgPengHuWeaveCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuWeaveCard)
  // repeated .MsgPengHuCardData carddata = 1;
  for (int i = 0; i < this->carddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->carddata(i), output);
  }

  // optional uint32 hand_num = 2;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hand_num(), output);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hand_card(i), output);
  }

  // repeated .MsgPengHuRoleScore role_score = 4;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_score(i), output);
  }

  // repeated .MsgPengHuPlayer player_list = 5;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuWeaveCard)
}

::google::protobuf::uint8* MsgPengHuWeaveCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuWeaveCard)
  // repeated .MsgPengHuCardData carddata = 1;
  for (int i = 0; i < this->carddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->carddata(i), target);
  }

  // optional uint32 hand_num = 2;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hand_num(), target);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hand_card(i), target);
  }

  // repeated .MsgPengHuRoleScore role_score = 4;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_score(i), target);
  }

  // repeated .MsgPengHuPlayer player_list = 5;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuWeaveCard)
  return target;
}

int MsgPengHuWeaveCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 hand_num = 2;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

  }
  // repeated .MsgPengHuCardData carddata = 1;
  total_size += 1 * this->carddata_size();
  for (int i = 0; i < this->carddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carddata(i));
  }

  // repeated uint32 hand_card = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated .MsgPengHuRoleScore role_score = 4;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  // repeated .MsgPengHuPlayer player_list = 5;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuWeaveCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuWeaveCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuWeaveCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuWeaveCard::MergeFrom(const MsgPengHuWeaveCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  carddata_.MergeFrom(from.carddata_);
  hand_card_.MergeFrom(from.hand_card_);
  role_score_.MergeFrom(from.role_score_);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuWeaveCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuWeaveCard::CopyFrom(const MsgPengHuWeaveCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuWeaveCard::IsInitialized() const {

  return true;
}

void MsgPengHuWeaveCard::Swap(MsgPengHuWeaveCard* other) {
  if (other != this) {
    carddata_.Swap(&other->carddata_);
    std::swap(hand_num_, other->hand_num_);
    hand_card_.Swap(&other->hand_card_);
    role_score_.Swap(&other->role_score_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuWeaveCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuWeaveCard_descriptor_;
  metadata.reflection = MsgPengHuWeaveCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuRoleState::kRoleIdFieldNumber;
const int MsgPengHuRoleState::kStateFieldNumber;
#endif  // !_MSC_VER

MsgPengHuRoleState::MsgPengHuRoleState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuRoleState)
}

void MsgPengHuRoleState::InitAsDefaultInstance() {
}

MsgPengHuRoleState::MsgPengHuRoleState(const MsgPengHuRoleState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuRoleState)
}

void MsgPengHuRoleState::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuRoleState::~MsgPengHuRoleState() {
  // @@protoc_insertion_point(destructor:MsgPengHuRoleState)
  SharedDtor();
}

void MsgPengHuRoleState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuRoleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuRoleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuRoleState_descriptor_;
}

const MsgPengHuRoleState& MsgPengHuRoleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuRoleState* MsgPengHuRoleState::default_instance_ = NULL;

MsgPengHuRoleState* MsgPengHuRoleState::New() const {
  return new MsgPengHuRoleState;
}

void MsgPengHuRoleState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuRoleState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuRoleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuRoleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuRoleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuRoleState)
  return false;
#undef DO_
}

void MsgPengHuRoleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuRoleState)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuRoleState)
}

::google::protobuf::uint8* MsgPengHuRoleState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuRoleState)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuRoleState)
  return target;
}

int MsgPengHuRoleState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuRoleState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuRoleState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuRoleState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuRoleState::MergeFrom(const MsgPengHuRoleState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuRoleState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuRoleState::CopyFrom(const MsgPengHuRoleState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuRoleState::IsInitialized() const {

  return true;
}

void MsgPengHuRoleState::Swap(MsgPengHuRoleState* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuRoleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuRoleState_descriptor_;
  metadata.reflection = MsgPengHuRoleState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuRoleStateCount::kRoleStateFieldNumber;
#endif  // !_MSC_VER

MsgPengHuRoleStateCount::MsgPengHuRoleStateCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuRoleStateCount)
}

void MsgPengHuRoleStateCount::InitAsDefaultInstance() {
}

MsgPengHuRoleStateCount::MsgPengHuRoleStateCount(const MsgPengHuRoleStateCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuRoleStateCount)
}

void MsgPengHuRoleStateCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuRoleStateCount::~MsgPengHuRoleStateCount() {
  // @@protoc_insertion_point(destructor:MsgPengHuRoleStateCount)
  SharedDtor();
}

void MsgPengHuRoleStateCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuRoleStateCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuRoleStateCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuRoleStateCount_descriptor_;
}

const MsgPengHuRoleStateCount& MsgPengHuRoleStateCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuRoleStateCount* MsgPengHuRoleStateCount::default_instance_ = NULL;

MsgPengHuRoleStateCount* MsgPengHuRoleStateCount::New() const {
  return new MsgPengHuRoleStateCount;
}

void MsgPengHuRoleStateCount::Clear() {
  role_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuRoleStateCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuRoleStateCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPengHuRoleState role_state = 1;
      case 1: {
        if (tag == 10) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_role_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuRoleStateCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuRoleStateCount)
  return false;
#undef DO_
}

void MsgPengHuRoleStateCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuRoleStateCount)
  // repeated .MsgPengHuRoleState role_state = 1;
  for (int i = 0; i < this->role_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuRoleStateCount)
}

::google::protobuf::uint8* MsgPengHuRoleStateCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuRoleStateCount)
  // repeated .MsgPengHuRoleState role_state = 1;
  for (int i = 0; i < this->role_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuRoleStateCount)
  return target;
}

int MsgPengHuRoleStateCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPengHuRoleState role_state = 1;
  total_size += 1 * this->role_state_size();
  for (int i = 0; i < this->role_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuRoleStateCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuRoleStateCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuRoleStateCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuRoleStateCount::MergeFrom(const MsgPengHuRoleStateCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_state_.MergeFrom(from.role_state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuRoleStateCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuRoleStateCount::CopyFrom(const MsgPengHuRoleStateCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuRoleStateCount::IsInitialized() const {

  return true;
}

void MsgPengHuRoleStateCount::Swap(MsgPengHuRoleStateCount* other) {
  if (other != this) {
    role_state_.Swap(&other->role_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuRoleStateCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuRoleStateCount_descriptor_;
  metadata.reflection = MsgPengHuRoleStateCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuRoleHost::kRoleIdFieldNumber;
const int MsgPengHuRoleHost::kHostIdFieldNumber;
#endif  // !_MSC_VER

MsgPengHuRoleHost::MsgPengHuRoleHost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuRoleHost)
}

void MsgPengHuRoleHost::InitAsDefaultInstance() {
}

MsgPengHuRoleHost::MsgPengHuRoleHost(const MsgPengHuRoleHost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuRoleHost)
}

void MsgPengHuRoleHost::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  host_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuRoleHost::~MsgPengHuRoleHost() {
  // @@protoc_insertion_point(destructor:MsgPengHuRoleHost)
  SharedDtor();
}

void MsgPengHuRoleHost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuRoleHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuRoleHost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuRoleHost_descriptor_;
}

const MsgPengHuRoleHost& MsgPengHuRoleHost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuRoleHost* MsgPengHuRoleHost::default_instance_ = NULL;

MsgPengHuRoleHost* MsgPengHuRoleHost::New() const {
  return new MsgPengHuRoleHost;
}

void MsgPengHuRoleHost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPengHuRoleHost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, host_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuRoleHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuRoleHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_host_id;
        break;
      }

      // optional uint32 host_id = 2;
      case 2: {
        if (tag == 16) {
         parse_host_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuRoleHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuRoleHost)
  return false;
#undef DO_
}

void MsgPengHuRoleHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuRoleHost)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 host_id = 2;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuRoleHost)
}

::google::protobuf::uint8* MsgPengHuRoleHost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuRoleHost)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 host_id = 2;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuRoleHost)
  return target;
}

int MsgPengHuRoleHost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 host_id = 2;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuRoleHost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuRoleHost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuRoleHost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuRoleHost::MergeFrom(const MsgPengHuRoleHost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuRoleHost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuRoleHost::CopyFrom(const MsgPengHuRoleHost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuRoleHost::IsInitialized() const {

  return true;
}

void MsgPengHuRoleHost::Swap(MsgPengHuRoleHost* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(host_id_, other->host_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuRoleHost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuRoleHost_descriptor_;
  metadata.reflection = MsgPengHuRoleHost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPengHuRoleHostCount::kRoleStateFieldNumber;
const int MsgPengHuRoleHostCount::kHostListFieldNumber;
#endif  // !_MSC_VER

MsgPengHuRoleHostCount::MsgPengHuRoleHostCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPengHuRoleHostCount)
}

void MsgPengHuRoleHostCount::InitAsDefaultInstance() {
}

MsgPengHuRoleHostCount::MsgPengHuRoleHostCount(const MsgPengHuRoleHostCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPengHuRoleHostCount)
}

void MsgPengHuRoleHostCount::SharedCtor() {
  _cached_size_ = 0;
  role_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPengHuRoleHostCount::~MsgPengHuRoleHostCount() {
  // @@protoc_insertion_point(destructor:MsgPengHuRoleHostCount)
  SharedDtor();
}

void MsgPengHuRoleHostCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPengHuRoleHostCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPengHuRoleHostCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPengHuRoleHostCount_descriptor_;
}

const MsgPengHuRoleHostCount& MsgPengHuRoleHostCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpenghu_2eproto();
  return *default_instance_;
}

MsgPengHuRoleHostCount* MsgPengHuRoleHostCount::default_instance_ = NULL;

MsgPengHuRoleHostCount* MsgPengHuRoleHostCount::New() const {
  return new MsgPengHuRoleHostCount;
}

void MsgPengHuRoleHostCount::Clear() {
  role_state_ = 0u;
  host_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPengHuRoleHostCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPengHuRoleHostCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_state_)));
          set_has_role_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_list;
        break;
      }

      // repeated .MsgPengHuRoleHost host_list = 2;
      case 2: {
        if (tag == 18) {
         parse_host_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPengHuRoleHostCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPengHuRoleHostCount)
  return false;
#undef DO_
}

void MsgPengHuRoleHostCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPengHuRoleHostCount)
  // optional uint32 role_state = 1;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_state(), output);
  }

  // repeated .MsgPengHuRoleHost host_list = 2;
  for (int i = 0; i < this->host_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->host_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPengHuRoleHostCount)
}

::google::protobuf::uint8* MsgPengHuRoleHostCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPengHuRoleHostCount)
  // optional uint32 role_state = 1;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_state(), target);
  }

  // repeated .MsgPengHuRoleHost host_list = 2;
  for (int i = 0; i < this->host_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->host_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPengHuRoleHostCount)
  return target;
}

int MsgPengHuRoleHostCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_state = 1;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_state());
    }

  }
  // repeated .MsgPengHuRoleHost host_list = 2;
  total_size += 1 * this->host_list_size();
  for (int i = 0; i < this->host_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->host_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPengHuRoleHostCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPengHuRoleHostCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPengHuRoleHostCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPengHuRoleHostCount::MergeFrom(const MsgPengHuRoleHostCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  host_list_.MergeFrom(from.host_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_state()) {
      set_role_state(from.role_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPengHuRoleHostCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPengHuRoleHostCount::CopyFrom(const MsgPengHuRoleHostCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPengHuRoleHostCount::IsInitialized() const {

  return true;
}

void MsgPengHuRoleHostCount::Swap(MsgPengHuRoleHostCount* other) {
  if (other != this) {
    std::swap(role_state_, other->role_state_);
    host_list_.Swap(&other->host_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPengHuRoleHostCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPengHuRoleHostCount_descriptor_;
  metadata.reflection = MsgPengHuRoleHostCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
