// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_niuniu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_niuniu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgPlayerAddPour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerAddPour_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerSelectHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerSelectHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNiuNiuPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNiuNiuPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNiuNiuShowHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNiuNiuShowHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNiuNiuHandCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNiuNiuHandCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNiuNiuRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNiuNiuRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNNGameOverInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNNGameOverInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNiuNiuShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNiuNiuShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNNIntegralCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNNIntegralCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TNiuNiuState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TNiuNiuPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TNiuNiuDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TNiuNiuCT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fniuniu_2eproto() {
  protobuf_AddDesc_msg_5fniuniu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_niuniu.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlayerAddPour_descriptor_ = file->message_type(0);
  static const int MsgPlayerAddPour_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAddPour, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAddPour, value_),
  };
  MsgPlayerAddPour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerAddPour_descriptor_,
      MsgPlayerAddPour::default_instance_,
      MsgPlayerAddPour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAddPour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerAddPour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerAddPour));
  MsgPlayerSelectHandCard_descriptor_ = file->message_type(1);
  static const int MsgPlayerSelectHandCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSelectHandCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSelectHandCard, value_),
  };
  MsgPlayerSelectHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerSelectHandCard_descriptor_,
      MsgPlayerSelectHandCard::default_instance_,
      MsgPlayerSelectHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSelectHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerSelectHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerSelectHandCard));
  MsgNiuNiuPlayer_descriptor_ = file->message_type(2);
  static const int MsgNiuNiuPlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, hand_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, overinfo_),
  };
  MsgNiuNiuPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNiuNiuPlayer_descriptor_,
      MsgNiuNiuPlayer::default_instance_,
      MsgNiuNiuPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNiuNiuPlayer));
  MsgNiuNiuShowHandCard_descriptor_ = file->message_type(3);
  static const int MsgNiuNiuShowHandCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowHandCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowHandCard, hand_info_),
  };
  MsgNiuNiuShowHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNiuNiuShowHandCard_descriptor_,
      MsgNiuNiuShowHandCard::default_instance_,
      MsgNiuNiuShowHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNiuNiuShowHandCard));
  MsgNiuNiuHandCardInfo_descriptor_ = file->message_type(4);
  static const int MsgNiuNiuHandCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuHandCardInfo, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuHandCardInfo, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuHandCardInfo, showndown_score_),
  };
  MsgNiuNiuHandCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNiuNiuHandCardInfo_descriptor_,
      MsgNiuNiuHandCardInfo::default_instance_,
      MsgNiuNiuHandCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuHandCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuHandCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNiuNiuHandCardInfo));
  MsgNiuNiuRoom_descriptor_ = file->message_type(5);
  static const int MsgNiuNiuRoom_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, bank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, private_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, role_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, relieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, room_pay_type_),
  };
  MsgNiuNiuRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNiuNiuRoom_descriptor_,
      MsgNiuNiuRoom::default_instance_,
      MsgNiuNiuRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNiuNiuRoom));
  MsgNNGameOverInfo_descriptor_ = file->message_type(6);
  static const int MsgNNGameOverInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, lose_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, haveniu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, nullniu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, specialniu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, bank_count_),
  };
  MsgNNGameOverInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNNGameOverInfo_descriptor_,
      MsgNNGameOverInfo::default_instance_,
      MsgNNGameOverInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNGameOverInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNNGameOverInfo));
  MsgNiuNiuShowDown_descriptor_ = file->message_type(7);
  static const int MsgNiuNiuShowDown_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, game_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, integral_list_),
  };
  MsgNiuNiuShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNiuNiuShowDown_descriptor_,
      MsgNiuNiuShowDown::default_instance_,
      MsgNiuNiuShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNiuNiuShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNiuNiuShowDown));
  MsgNNIntegralCount_descriptor_ = file->message_type(8);
  static const int MsgNNIntegralCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNIntegralCount, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNIntegralCount, count_),
  };
  MsgNNIntegralCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNNIntegralCount_descriptor_,
      MsgNNIntegralCount::default_instance_,
      MsgNNIntegralCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNIntegralCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNNIntegralCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNNIntegralCount));
  TNiuNiuState_descriptor_ = file->enum_type(0);
  TNiuNiuPlayerState_descriptor_ = file->enum_type(1);
  TNiuNiuDirection_descriptor_ = file->enum_type(2);
  TNiuNiuCT_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fniuniu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerAddPour_descriptor_, &MsgPlayerAddPour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerSelectHandCard_descriptor_, &MsgPlayerSelectHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNiuNiuPlayer_descriptor_, &MsgNiuNiuPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNiuNiuShowHandCard_descriptor_, &MsgNiuNiuShowHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNiuNiuHandCardInfo_descriptor_, &MsgNiuNiuHandCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNiuNiuRoom_descriptor_, &MsgNiuNiuRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNNGameOverInfo_descriptor_, &MsgNNGameOverInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNiuNiuShowDown_descriptor_, &MsgNiuNiuShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNNIntegralCount_descriptor_, &MsgNNIntegralCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fniuniu_2eproto() {
  delete MsgPlayerAddPour::default_instance_;
  delete MsgPlayerAddPour_reflection_;
  delete MsgPlayerSelectHandCard::default_instance_;
  delete MsgPlayerSelectHandCard_reflection_;
  delete MsgNiuNiuPlayer::default_instance_;
  delete MsgNiuNiuPlayer_reflection_;
  delete MsgNiuNiuShowHandCard::default_instance_;
  delete MsgNiuNiuShowHandCard_reflection_;
  delete MsgNiuNiuHandCardInfo::default_instance_;
  delete MsgNiuNiuHandCardInfo_reflection_;
  delete MsgNiuNiuRoom::default_instance_;
  delete MsgNiuNiuRoom_reflection_;
  delete MsgNNGameOverInfo::default_instance_;
  delete MsgNNGameOverInfo_reflection_;
  delete MsgNiuNiuShowDown::default_instance_;
  delete MsgNiuNiuShowDown_reflection_;
  delete MsgNNIntegralCount::default_instance_;
  delete MsgNNIntegralCount_reflection_;
}

void protobuf_AddDesc_msg_5fniuniu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020msg_niuniu.proto\032\020public_pro.proto\"-\n\020"
    "MsgPlayerAddPour\022\n\n\002id\030\001 \001(\004\022\r\n\005value\030\002 "
    "\001(\r\"4\n\027MsgPlayerSelectHandCard\022\n\n\002id\030\001 \001"
    "(\004\022\r\n\005value\030\002 \001(\r\"\332\001\n\017MsgNiuNiuPlayer\022#\n"
    "\013player_base\030\001 \001(\0132\016.MsgPlayerInfo\022\r\n\005st"
    "ate\030\002 \001(\r\022\022\n\nhand_count\030\003 \001(\r\022)\n\thand_in"
    "fo\030\004 \003(\0132\026.MsgNiuNiuHandCardInfo\022\r\n\005seat"
    "s\030\005 \001(\r\022\r\n\005score\030\006 \001(\003\022\020\n\010multiple\030\007 \001(\r"
    "\022$\n\010OverInfo\030\010 \001(\0132\022.MsgNNGameOverInfo\"N"
    "\n\025MsgNiuNiuShowHandCard\022\n\n\002id\030\001 \001(\004\022)\n\th"
    "and_info\030\002 \003(\0132\026.MsgNiuNiuHandCardInfo\"V"
    "\n\025MsgNiuNiuHandCardInfo\022\021\n\tcard_list\030\001 \003"
    "(\r\022\021\n\tcard_type\030\002 \001(\r\022\027\n\017showndown_score"
    "\030\003 \001(\003\"\306\002\n\rMsgNiuNiuRoom\022!\n\nroom_state\030\001"
    " \001(\0162\r.TNiuNiuState\022\022\n\nstate_time\030\002 \001(\r\022"
    "%\n\013player_list\030\003 \003(\0132\020.MsgNiuNiuPlayer\022\017"
    "\n\007bank_id\030\004 \001(\004\022\017\n\007room_id\030\005 \001(\004\022\022\n\ngame"
    "_count\030\006 \001(\r\022+\n\014private_room\030\007 \001(\0132\025.Msg"
    "CreatePrivateRoom\022$\n\trole_host\030\010 \001(\0132\021.M"
    "sgRoleHostCount\022&\n\nrole_state\030\t \001(\0132\022.Ms"
    "gRoleStateCount\022\017\n\007relieve\030\n \001(\010\022\025\n\rroom"
    "_pay_type\030\013 \001(\r\"\226\001\n\021MsgNNGameOverInfo\022\021\n"
    "\twin_count\030\001 \001(\r\022\022\n\nlose_count\030\002 \001(\r\022\025\n\r"
    "haveniu_count\030\003 \001(\r\022\025\n\rnullniu_count\030\004 \001"
    "(\r\022\030\n\020specialniu_count\030\005 \001(\r\022\022\n\nbank_cou"
    "nt\030\006 \001(\r\"\343\001\n\021MsgNiuNiuShowDown\022!\n\nroom_s"
    "tate\030\001 \001(\0162\r.TNiuNiuState\022\022\n\nstate_time\030"
    "\002 \001(\r\022%\n\013player_list\030\003 \003(\0132\020.MsgNiuNiuPl"
    "ayer\022\017\n\007room_id\030\004 \001(\004\022\022\n\ngame_count\030\005 \001("
    "\r\022\014\n\004time\030\006 \001(\r\022\021\n\tgame_over\030\007 \001(\010\022*\n\rin"
    "tegral_list\030\010 \003(\0132\023.MsgNNIntegralCount\"3"
    "\n\022MsgNNIntegralCount\022\016\n\006roleid\030\001 \001(\004\022\r\n\005"
    "count\030\002 \001(\r*\373\001\n\014TNiuNiuState\022\024\n\020TNiuNiuS"
    "tateWait\020\000\022\031\n\025TNiuNiuCheckStartGame\020\001\022\024\n"
    "\020TNiuNiuStartGame\020\002\022\036\n\032TNiuNiuPlayerSele"
    "ctAddPour\020\003\022\037\n\033TNiuNiuPlayerSelectHandCa"
    "rd\020\004\022\027\n\023TNiuNiuSendHandCard\020\005\022\023\n\017TNiuNiu"
    "ShowCard\020\006\022\030\n\024TNiuNiuStateShowDown\020\007\022\033\n\027"
    "TNiuNiuStateRelieveRoom\020\010*\306\002\n\022TNiuNiuPla"
    "yerState\022\022\n\016STATE_NN_READY\020\001\022\024\n\020STATE_NN"
    "_NEWROLE\020\002\022\027\n\023STATE_NN_ROOM_OWNER\020\004\022\024\n\020S"
    "TATE_NN_RELIEVE\020\010\022\022\n\016STATE_NN_LEAVE\020\020\022\022\n"
    "\016STATE_NN_LIMIT\020 \022\024\n\020STATE_NN_OFFLINE\020@\022"
    "\022\n\rSTATE_NN_BANK\020\200\001\022\025\n\020STATE_NN_TUOGUAN\020"
    "\200\002\022\034\n\027STATE_NN_ALREADR_TANPAI\020\200\004\022\025\n\020STAT"
    "E_NN_ADDPOUR\020\200\010\022\034\n\027STATE_NN_SELECTHANDCA"
    "RD\020\200\020\022\033\n\026STATE_NN_CONTINUE_GAME\020\200 *\233\001\n\020T"
    "NiuNiuDirection\022\025\n\021NIUNIU_DIREC_NULL\020\000\022\024"
    "\n\020NIUNIU_DIREC_ONE\020\001\022\024\n\020NIUNIU_DIREC_TWO"
    "\020\002\022\026\n\022NIUNIU_DIREC_THREE\020\003\022\025\n\021NIUNIU_DIR"
    "EC_FOUR\020\004\022\025\n\021NIUNIU_DIREC_FIVE\020\005*\267\002\n\tTNi"
    "uNiuCT\022\016\n\nCT_NN_NULL\020\000\022\r\n\tCT_NN_ONE\020\001\022\r\n"
    "\tCT_NN_TWO\020\002\022\017\n\013CT_NN_THREE\020\003\022\016\n\nCT_NN_F"
    "OUR\020\004\022\016\n\nCT_NN_FIVE\020\005\022\r\n\tCT_NN_SIX\020\006\022\017\n\013"
    "CT_NN_SEVEN\020\007\022\017\n\013CT_NN_EIGHT\020\010\022\016\n\nCT_NN_"
    "NINE\020\t\022\020\n\014CT_NN_NIUNIU\020\n\022\020\n\014CT_NN_YINNIU"
    "\020\013\022\020\n\014CT_NN_JINNIU\020\014\022\023\n\017CT_NN_WUXIAONIU\020"
    "\r\022\023\n\017CT_NN_ZHADANNIU\020\016\022\024\n\020CT_NN_YITIAOLO"
    "NG\020\017\022\024\n\020CT_NN_MAXINVALID\020\020", 2346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_niuniu.proto", &protobuf_RegisterTypes);
  MsgPlayerAddPour::default_instance_ = new MsgPlayerAddPour();
  MsgPlayerSelectHandCard::default_instance_ = new MsgPlayerSelectHandCard();
  MsgNiuNiuPlayer::default_instance_ = new MsgNiuNiuPlayer();
  MsgNiuNiuShowHandCard::default_instance_ = new MsgNiuNiuShowHandCard();
  MsgNiuNiuHandCardInfo::default_instance_ = new MsgNiuNiuHandCardInfo();
  MsgNiuNiuRoom::default_instance_ = new MsgNiuNiuRoom();
  MsgNNGameOverInfo::default_instance_ = new MsgNNGameOverInfo();
  MsgNiuNiuShowDown::default_instance_ = new MsgNiuNiuShowDown();
  MsgNNIntegralCount::default_instance_ = new MsgNNIntegralCount();
  MsgPlayerAddPour::default_instance_->InitAsDefaultInstance();
  MsgPlayerSelectHandCard::default_instance_->InitAsDefaultInstance();
  MsgNiuNiuPlayer::default_instance_->InitAsDefaultInstance();
  MsgNiuNiuShowHandCard::default_instance_->InitAsDefaultInstance();
  MsgNiuNiuHandCardInfo::default_instance_->InitAsDefaultInstance();
  MsgNiuNiuRoom::default_instance_->InitAsDefaultInstance();
  MsgNNGameOverInfo::default_instance_->InitAsDefaultInstance();
  MsgNiuNiuShowDown::default_instance_->InitAsDefaultInstance();
  MsgNNIntegralCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fniuniu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fniuniu_2eproto {
  StaticDescriptorInitializer_msg_5fniuniu_2eproto() {
    protobuf_AddDesc_msg_5fniuniu_2eproto();
  }
} static_descriptor_initializer_msg_5fniuniu_2eproto_;
const ::google::protobuf::EnumDescriptor* TNiuNiuState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNiuNiuState_descriptor_;
}
bool TNiuNiuState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TNiuNiuPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNiuNiuPlayerState_descriptor_;
}
bool TNiuNiuPlayerState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TNiuNiuDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNiuNiuDirection_descriptor_;
}
bool TNiuNiuDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TNiuNiuCT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNiuNiuCT_descriptor_;
}
bool TNiuNiuCT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerAddPour::kIdFieldNumber;
const int MsgPlayerAddPour::kValueFieldNumber;
#endif  // !_MSC_VER

MsgPlayerAddPour::MsgPlayerAddPour()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPlayerAddPour)
}

void MsgPlayerAddPour::InitAsDefaultInstance() {
}

MsgPlayerAddPour::MsgPlayerAddPour(const MsgPlayerAddPour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPlayerAddPour)
}

void MsgPlayerAddPour::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerAddPour::~MsgPlayerAddPour() {
  // @@protoc_insertion_point(destructor:MsgPlayerAddPour)
  SharedDtor();
}

void MsgPlayerAddPour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerAddPour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerAddPour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerAddPour_descriptor_;
}

const MsgPlayerAddPour& MsgPlayerAddPour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgPlayerAddPour* MsgPlayerAddPour::default_instance_ = NULL;

MsgPlayerAddPour* MsgPlayerAddPour::New() const {
  return new MsgPlayerAddPour;
}

void MsgPlayerAddPour::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerAddPour*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerAddPour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPlayerAddPour)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPlayerAddPour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPlayerAddPour)
  return false;
#undef DO_
}

void MsgPlayerAddPour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPlayerAddPour)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPlayerAddPour)
}

::google::protobuf::uint8* MsgPlayerAddPour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerAddPour)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerAddPour)
  return target;
}

int MsgPlayerAddPour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerAddPour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerAddPour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerAddPour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerAddPour::MergeFrom(const MsgPlayerAddPour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerAddPour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerAddPour::CopyFrom(const MsgPlayerAddPour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerAddPour::IsInitialized() const {

  return true;
}

void MsgPlayerAddPour::Swap(MsgPlayerAddPour* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerAddPour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerAddPour_descriptor_;
  metadata.reflection = MsgPlayerAddPour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerSelectHandCard::kIdFieldNumber;
const int MsgPlayerSelectHandCard::kValueFieldNumber;
#endif  // !_MSC_VER

MsgPlayerSelectHandCard::MsgPlayerSelectHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPlayerSelectHandCard)
}

void MsgPlayerSelectHandCard::InitAsDefaultInstance() {
}

MsgPlayerSelectHandCard::MsgPlayerSelectHandCard(const MsgPlayerSelectHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPlayerSelectHandCard)
}

void MsgPlayerSelectHandCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerSelectHandCard::~MsgPlayerSelectHandCard() {
  // @@protoc_insertion_point(destructor:MsgPlayerSelectHandCard)
  SharedDtor();
}

void MsgPlayerSelectHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerSelectHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerSelectHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerSelectHandCard_descriptor_;
}

const MsgPlayerSelectHandCard& MsgPlayerSelectHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgPlayerSelectHandCard* MsgPlayerSelectHandCard::default_instance_ = NULL;

MsgPlayerSelectHandCard* MsgPlayerSelectHandCard::New() const {
  return new MsgPlayerSelectHandCard;
}

void MsgPlayerSelectHandCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerSelectHandCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerSelectHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPlayerSelectHandCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPlayerSelectHandCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPlayerSelectHandCard)
  return false;
#undef DO_
}

void MsgPlayerSelectHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPlayerSelectHandCard)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPlayerSelectHandCard)
}

::google::protobuf::uint8* MsgPlayerSelectHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerSelectHandCard)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerSelectHandCard)
  return target;
}

int MsgPlayerSelectHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerSelectHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerSelectHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerSelectHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerSelectHandCard::MergeFrom(const MsgPlayerSelectHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerSelectHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerSelectHandCard::CopyFrom(const MsgPlayerSelectHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerSelectHandCard::IsInitialized() const {

  return true;
}

void MsgPlayerSelectHandCard::Swap(MsgPlayerSelectHandCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerSelectHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerSelectHandCard_descriptor_;
  metadata.reflection = MsgPlayerSelectHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNiuNiuPlayer::kPlayerBaseFieldNumber;
const int MsgNiuNiuPlayer::kStateFieldNumber;
const int MsgNiuNiuPlayer::kHandCountFieldNumber;
const int MsgNiuNiuPlayer::kHandInfoFieldNumber;
const int MsgNiuNiuPlayer::kSeatsFieldNumber;
const int MsgNiuNiuPlayer::kScoreFieldNumber;
const int MsgNiuNiuPlayer::kMultipleFieldNumber;
const int MsgNiuNiuPlayer::kOverInfoFieldNumber;
#endif  // !_MSC_VER

MsgNiuNiuPlayer::MsgNiuNiuPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgNiuNiuPlayer)
}

void MsgNiuNiuPlayer::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
  overinfo_ = const_cast< ::MsgNNGameOverInfo*>(&::MsgNNGameOverInfo::default_instance());
}

MsgNiuNiuPlayer::MsgNiuNiuPlayer(const MsgNiuNiuPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgNiuNiuPlayer)
}

void MsgNiuNiuPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  state_ = 0u;
  hand_count_ = 0u;
  seats_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  multiple_ = 0u;
  overinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNiuNiuPlayer::~MsgNiuNiuPlayer() {
  // @@protoc_insertion_point(destructor:MsgNiuNiuPlayer)
  SharedDtor();
}

void MsgNiuNiuPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
    delete overinfo_;
  }
}

void MsgNiuNiuPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNiuNiuPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNiuNiuPlayer_descriptor_;
}

const MsgNiuNiuPlayer& MsgNiuNiuPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgNiuNiuPlayer* MsgNiuNiuPlayer::default_instance_ = NULL;

MsgNiuNiuPlayer* MsgNiuNiuPlayer::New() const {
  return new MsgNiuNiuPlayer;
}

void MsgNiuNiuPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNiuNiuPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(state_, hand_count_);
    ZR_(score_, multiple_);
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
    if (has_overinfo()) {
      if (overinfo_ != NULL) overinfo_->::MsgNNGameOverInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hand_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNiuNiuPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgNiuNiuPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hand_info;
        break;
      }

      // repeated .MsgNiuNiuHandCardInfo hand_info = 4;
      case 4: {
        if (tag == 34) {
         parse_hand_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hand_info;
        if (input->ExpectTag(40)) goto parse_seats;
        break;
      }

      // optional uint32 seats = 5;
      case 5: {
        if (tag == 40) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
          set_has_seats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int64 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multiple;
        break;
      }

      // optional uint32 multiple = 7;
      case 7: {
        if (tag == 56) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OverInfo;
        break;
      }

      // optional .MsgNNGameOverInfo OverInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_OverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgNiuNiuPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgNiuNiuPlayer)
  return false;
#undef DO_
}

void MsgNiuNiuPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgNiuNiuPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_count(), output);
  }

  // repeated .MsgNiuNiuHandCardInfo hand_info = 4;
  for (int i = 0; i < this->hand_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hand_info(i), output);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seats(), output);
  }

  // optional int64 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->score(), output);
  }

  // optional uint32 multiple = 7;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->multiple(), output);
  }

  // optional .MsgNNGameOverInfo OverInfo = 8;
  if (has_overinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->overinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgNiuNiuPlayer)
}

::google::protobuf::uint8* MsgNiuNiuPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgNiuNiuPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_count(), target);
  }

  // repeated .MsgNiuNiuHandCardInfo hand_info = 4;
  for (int i = 0; i < this->hand_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hand_info(i), target);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seats(), target);
  }

  // optional int64 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->score(), target);
  }

  // optional uint32 multiple = 7;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->multiple(), target);
  }

  // optional .MsgNNGameOverInfo OverInfo = 8;
  if (has_overinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->overinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgNiuNiuPlayer)
  return target;
}

int MsgNiuNiuPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 hand_count = 3;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional uint32 seats = 5;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional int64 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional uint32 multiple = 7;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // optional .MsgNNGameOverInfo OverInfo = 8;
    if (has_overinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overinfo());
    }

  }
  // repeated .MsgNiuNiuHandCardInfo hand_info = 4;
  total_size += 1 * this->hand_info_size();
  for (int i = 0; i < this->hand_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNiuNiuPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNiuNiuPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNiuNiuPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNiuNiuPlayer::MergeFrom(const MsgNiuNiuPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_info_.MergeFrom(from.hand_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_seats()) {
      set_seats(from.seats());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_overinfo()) {
      mutable_overinfo()->::MsgNNGameOverInfo::MergeFrom(from.overinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNiuNiuPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNiuNiuPlayer::CopyFrom(const MsgNiuNiuPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNiuNiuPlayer::IsInitialized() const {

  return true;
}

void MsgNiuNiuPlayer::Swap(MsgNiuNiuPlayer* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(state_, other->state_);
    std::swap(hand_count_, other->hand_count_);
    hand_info_.Swap(&other->hand_info_);
    std::swap(seats_, other->seats_);
    std::swap(score_, other->score_);
    std::swap(multiple_, other->multiple_);
    std::swap(overinfo_, other->overinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNiuNiuPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNiuNiuPlayer_descriptor_;
  metadata.reflection = MsgNiuNiuPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNiuNiuShowHandCard::kIdFieldNumber;
const int MsgNiuNiuShowHandCard::kHandInfoFieldNumber;
#endif  // !_MSC_VER

MsgNiuNiuShowHandCard::MsgNiuNiuShowHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgNiuNiuShowHandCard)
}

void MsgNiuNiuShowHandCard::InitAsDefaultInstance() {
}

MsgNiuNiuShowHandCard::MsgNiuNiuShowHandCard(const MsgNiuNiuShowHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgNiuNiuShowHandCard)
}

void MsgNiuNiuShowHandCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNiuNiuShowHandCard::~MsgNiuNiuShowHandCard() {
  // @@protoc_insertion_point(destructor:MsgNiuNiuShowHandCard)
  SharedDtor();
}

void MsgNiuNiuShowHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNiuNiuShowHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNiuNiuShowHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNiuNiuShowHandCard_descriptor_;
}

const MsgNiuNiuShowHandCard& MsgNiuNiuShowHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgNiuNiuShowHandCard* MsgNiuNiuShowHandCard::default_instance_ = NULL;

MsgNiuNiuShowHandCard* MsgNiuNiuShowHandCard::New() const {
  return new MsgNiuNiuShowHandCard;
}

void MsgNiuNiuShowHandCard::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  hand_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNiuNiuShowHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgNiuNiuShowHandCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hand_info;
        break;
      }

      // repeated .MsgNiuNiuHandCardInfo hand_info = 2;
      case 2: {
        if (tag == 18) {
         parse_hand_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hand_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgNiuNiuShowHandCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgNiuNiuShowHandCard)
  return false;
#undef DO_
}

void MsgNiuNiuShowHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgNiuNiuShowHandCard)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .MsgNiuNiuHandCardInfo hand_info = 2;
  for (int i = 0; i < this->hand_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hand_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgNiuNiuShowHandCard)
}

::google::protobuf::uint8* MsgNiuNiuShowHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgNiuNiuShowHandCard)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .MsgNiuNiuHandCardInfo hand_info = 2;
  for (int i = 0; i < this->hand_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hand_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgNiuNiuShowHandCard)
  return target;
}

int MsgNiuNiuShowHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .MsgNiuNiuHandCardInfo hand_info = 2;
  total_size += 1 * this->hand_info_size();
  for (int i = 0; i < this->hand_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNiuNiuShowHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNiuNiuShowHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNiuNiuShowHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNiuNiuShowHandCard::MergeFrom(const MsgNiuNiuShowHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_info_.MergeFrom(from.hand_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNiuNiuShowHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNiuNiuShowHandCard::CopyFrom(const MsgNiuNiuShowHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNiuNiuShowHandCard::IsInitialized() const {

  return true;
}

void MsgNiuNiuShowHandCard::Swap(MsgNiuNiuShowHandCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    hand_info_.Swap(&other->hand_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNiuNiuShowHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNiuNiuShowHandCard_descriptor_;
  metadata.reflection = MsgNiuNiuShowHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNiuNiuHandCardInfo::kCardListFieldNumber;
const int MsgNiuNiuHandCardInfo::kCardTypeFieldNumber;
const int MsgNiuNiuHandCardInfo::kShowndownScoreFieldNumber;
#endif  // !_MSC_VER

MsgNiuNiuHandCardInfo::MsgNiuNiuHandCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgNiuNiuHandCardInfo)
}

void MsgNiuNiuHandCardInfo::InitAsDefaultInstance() {
}

MsgNiuNiuHandCardInfo::MsgNiuNiuHandCardInfo(const MsgNiuNiuHandCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgNiuNiuHandCardInfo)
}

void MsgNiuNiuHandCardInfo::SharedCtor() {
  _cached_size_ = 0;
  card_type_ = 0u;
  showndown_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNiuNiuHandCardInfo::~MsgNiuNiuHandCardInfo() {
  // @@protoc_insertion_point(destructor:MsgNiuNiuHandCardInfo)
  SharedDtor();
}

void MsgNiuNiuHandCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNiuNiuHandCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNiuNiuHandCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNiuNiuHandCardInfo_descriptor_;
}

const MsgNiuNiuHandCardInfo& MsgNiuNiuHandCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgNiuNiuHandCardInfo* MsgNiuNiuHandCardInfo::default_instance_ = NULL;

MsgNiuNiuHandCardInfo* MsgNiuNiuHandCardInfo::New() const {
  return new MsgNiuNiuHandCardInfo;
}

void MsgNiuNiuHandCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNiuNiuHandCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(showndown_score_, card_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNiuNiuHandCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgNiuNiuHandCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_list = 1;
      case 1: {
        if (tag == 8) {
         parse_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_card_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_card_list;
        if (input->ExpectTag(16)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 2;
      case 2: {
        if (tag == 16) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_showndown_score;
        break;
      }

      // optional int64 showndown_score = 3;
      case 3: {
        if (tag == 24) {
         parse_showndown_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &showndown_score_)));
          set_has_showndown_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgNiuNiuHandCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgNiuNiuHandCardInfo)
  return false;
#undef DO_
}

void MsgNiuNiuHandCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgNiuNiuHandCardInfo)
  // repeated uint32 card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->card_list(i), output);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_type(), output);
  }

  // optional int64 showndown_score = 3;
  if (has_showndown_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->showndown_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgNiuNiuHandCardInfo)
}

::google::protobuf::uint8* MsgNiuNiuHandCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgNiuNiuHandCardInfo)
  // repeated uint32 card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->card_list(i), target);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_type(), target);
  }

  // optional int64 showndown_score = 3;
  if (has_showndown_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->showndown_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgNiuNiuHandCardInfo)
  return target;
}

int MsgNiuNiuHandCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 card_type = 2;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

    // optional int64 showndown_score = 3;
    if (has_showndown_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->showndown_score());
    }

  }
  // repeated uint32 card_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_list(i));
    }
    total_size += 1 * this->card_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNiuNiuHandCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNiuNiuHandCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNiuNiuHandCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNiuNiuHandCardInfo::MergeFrom(const MsgNiuNiuHandCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_showndown_score()) {
      set_showndown_score(from.showndown_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNiuNiuHandCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNiuNiuHandCardInfo::CopyFrom(const MsgNiuNiuHandCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNiuNiuHandCardInfo::IsInitialized() const {

  return true;
}

void MsgNiuNiuHandCardInfo::Swap(MsgNiuNiuHandCardInfo* other) {
  if (other != this) {
    card_list_.Swap(&other->card_list_);
    std::swap(card_type_, other->card_type_);
    std::swap(showndown_score_, other->showndown_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNiuNiuHandCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNiuNiuHandCardInfo_descriptor_;
  metadata.reflection = MsgNiuNiuHandCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNiuNiuRoom::kRoomStateFieldNumber;
const int MsgNiuNiuRoom::kStateTimeFieldNumber;
const int MsgNiuNiuRoom::kPlayerListFieldNumber;
const int MsgNiuNiuRoom::kBankIdFieldNumber;
const int MsgNiuNiuRoom::kRoomIdFieldNumber;
const int MsgNiuNiuRoom::kGameCountFieldNumber;
const int MsgNiuNiuRoom::kPrivateRoomFieldNumber;
const int MsgNiuNiuRoom::kRoleHostFieldNumber;
const int MsgNiuNiuRoom::kRoleStateFieldNumber;
const int MsgNiuNiuRoom::kRelieveFieldNumber;
const int MsgNiuNiuRoom::kRoomPayTypeFieldNumber;
#endif  // !_MSC_VER

MsgNiuNiuRoom::MsgNiuNiuRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgNiuNiuRoom)
}

void MsgNiuNiuRoom::InitAsDefaultInstance() {
  private_room_ = const_cast< ::MsgCreatePrivateRoom*>(&::MsgCreatePrivateRoom::default_instance());
  role_host_ = const_cast< ::MsgRoleHostCount*>(&::MsgRoleHostCount::default_instance());
  role_state_ = const_cast< ::MsgRoleStateCount*>(&::MsgRoleStateCount::default_instance());
}

MsgNiuNiuRoom::MsgNiuNiuRoom(const MsgNiuNiuRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgNiuNiuRoom)
}

void MsgNiuNiuRoom::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  bank_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  private_room_ = NULL;
  role_host_ = NULL;
  role_state_ = NULL;
  relieve_ = false;
  room_pay_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNiuNiuRoom::~MsgNiuNiuRoom() {
  // @@protoc_insertion_point(destructor:MsgNiuNiuRoom)
  SharedDtor();
}

void MsgNiuNiuRoom::SharedDtor() {
  if (this != default_instance_) {
    delete private_room_;
    delete role_host_;
    delete role_state_;
  }
}

void MsgNiuNiuRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNiuNiuRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNiuNiuRoom_descriptor_;
}

const MsgNiuNiuRoom& MsgNiuNiuRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgNiuNiuRoom* MsgNiuNiuRoom::default_instance_ = NULL;

MsgNiuNiuRoom* MsgNiuNiuRoom::New() const {
  return new MsgNiuNiuRoom;
}

void MsgNiuNiuRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNiuNiuRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(room_state_, state_time_);
    ZR_(bank_id_, room_id_);
    game_count_ = 0u;
    if (has_private_room()) {
      if (private_room_ != NULL) private_room_->::MsgCreatePrivateRoom::Clear();
    }
    if (has_role_host()) {
      if (role_host_ != NULL) role_host_->::MsgRoleHostCount::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_role_state()) {
      if (role_state_ != NULL) role_state_->::MsgRoleStateCount::Clear();
    }
    relieve_ = false;
    room_pay_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNiuNiuRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgNiuNiuRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TNiuNiuState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TNiuNiuState_IsValid(value)) {
            set_room_state(static_cast< ::TNiuNiuState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgNiuNiuPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_bank_id;
        break;
      }

      // optional uint64 bank_id = 4;
      case 4: {
        if (tag == 32) {
         parse_bank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_id_)));
          set_has_bank_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 5;
      case 5: {
        if (tag == 40) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 6;
      case 6: {
        if (tag == 48) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_private_room;
        break;
      }

      // optional .MsgCreatePrivateRoom private_room = 7;
      case 7: {
        if (tag == 58) {
         parse_private_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_host;
        break;
      }

      // optional .MsgRoleHostCount role_host = 8;
      case 8: {
        if (tag == 66) {
         parse_role_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_role_state;
        break;
      }

      // optional .MsgRoleStateCount role_state = 9;
      case 9: {
        if (tag == 74) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_relieve;
        break;
      }

      // optional bool relieve = 10;
      case 10: {
        if (tag == 80) {
         parse_relieve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relieve_)));
          set_has_relieve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_room_pay_type;
        break;
      }

      // optional uint32 room_pay_type = 11;
      case 11: {
        if (tag == 88) {
         parse_room_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_pay_type_)));
          set_has_room_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgNiuNiuRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgNiuNiuRoom)
  return false;
#undef DO_
}

void MsgNiuNiuRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgNiuNiuRoom)
  // optional .TNiuNiuState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgNiuNiuPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 bank_id = 4;
  if (has_bank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bank_id(), output);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_id(), output);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_count(), output);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->private_room(), output);
  }

  // optional .MsgRoleHostCount role_host = 8;
  if (has_role_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_host(), output);
  }

  // optional .MsgRoleStateCount role_state = 9;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_state(), output);
  }

  // optional bool relieve = 10;
  if (has_relieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->relieve(), output);
  }

  // optional uint32 room_pay_type = 11;
  if (has_room_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->room_pay_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgNiuNiuRoom)
}

::google::protobuf::uint8* MsgNiuNiuRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgNiuNiuRoom)
  // optional .TNiuNiuState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgNiuNiuPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 bank_id = 4;
  if (has_bank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bank_id(), target);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_id(), target);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_count(), target);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->private_room(), target);
  }

  // optional .MsgRoleHostCount role_host = 8;
  if (has_role_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_host(), target);
  }

  // optional .MsgRoleStateCount role_state = 9;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_state(), target);
  }

  // optional bool relieve = 10;
  if (has_relieve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->relieve(), target);
  }

  // optional uint32 room_pay_type = 11;
  if (has_room_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->room_pay_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgNiuNiuRoom)
  return target;
}

int MsgNiuNiuRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TNiuNiuState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 bank_id = 4;
    if (has_bank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_id());
    }

    // optional uint64 room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 6;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional .MsgCreatePrivateRoom private_room = 7;
    if (has_private_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_room());
    }

    // optional .MsgRoleHostCount role_host = 8;
    if (has_role_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_host());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgRoleStateCount role_state = 9;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_state());
    }

    // optional bool relieve = 10;
    if (has_relieve()) {
      total_size += 1 + 1;
    }

    // optional uint32 room_pay_type = 11;
    if (has_room_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_pay_type());
    }

  }
  // repeated .MsgNiuNiuPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNiuNiuRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNiuNiuRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNiuNiuRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNiuNiuRoom::MergeFrom(const MsgNiuNiuRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_bank_id()) {
      set_bank_id(from.bank_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_private_room()) {
      mutable_private_room()->::MsgCreatePrivateRoom::MergeFrom(from.private_room());
    }
    if (from.has_role_host()) {
      mutable_role_host()->::MsgRoleHostCount::MergeFrom(from.role_host());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_state()) {
      mutable_role_state()->::MsgRoleStateCount::MergeFrom(from.role_state());
    }
    if (from.has_relieve()) {
      set_relieve(from.relieve());
    }
    if (from.has_room_pay_type()) {
      set_room_pay_type(from.room_pay_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNiuNiuRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNiuNiuRoom::CopyFrom(const MsgNiuNiuRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNiuNiuRoom::IsInitialized() const {

  return true;
}

void MsgNiuNiuRoom::Swap(MsgNiuNiuRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(bank_id_, other->bank_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(private_room_, other->private_room_);
    std::swap(role_host_, other->role_host_);
    std::swap(role_state_, other->role_state_);
    std::swap(relieve_, other->relieve_);
    std::swap(room_pay_type_, other->room_pay_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNiuNiuRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNiuNiuRoom_descriptor_;
  metadata.reflection = MsgNiuNiuRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNNGameOverInfo::kWinCountFieldNumber;
const int MsgNNGameOverInfo::kLoseCountFieldNumber;
const int MsgNNGameOverInfo::kHaveniuCountFieldNumber;
const int MsgNNGameOverInfo::kNullniuCountFieldNumber;
const int MsgNNGameOverInfo::kSpecialniuCountFieldNumber;
const int MsgNNGameOverInfo::kBankCountFieldNumber;
#endif  // !_MSC_VER

MsgNNGameOverInfo::MsgNNGameOverInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgNNGameOverInfo)
}

void MsgNNGameOverInfo::InitAsDefaultInstance() {
}

MsgNNGameOverInfo::MsgNNGameOverInfo(const MsgNNGameOverInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgNNGameOverInfo)
}

void MsgNNGameOverInfo::SharedCtor() {
  _cached_size_ = 0;
  win_count_ = 0u;
  lose_count_ = 0u;
  haveniu_count_ = 0u;
  nullniu_count_ = 0u;
  specialniu_count_ = 0u;
  bank_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNNGameOverInfo::~MsgNNGameOverInfo() {
  // @@protoc_insertion_point(destructor:MsgNNGameOverInfo)
  SharedDtor();
}

void MsgNNGameOverInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNNGameOverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNNGameOverInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNNGameOverInfo_descriptor_;
}

const MsgNNGameOverInfo& MsgNNGameOverInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgNNGameOverInfo* MsgNNGameOverInfo::default_instance_ = NULL;

MsgNNGameOverInfo* MsgNNGameOverInfo::New() const {
  return new MsgNNGameOverInfo;
}

void MsgNNGameOverInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNNGameOverInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(win_count_, bank_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNNGameOverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgNNGameOverInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 win_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lose_count;
        break;
      }

      // optional uint32 lose_count = 2;
      case 2: {
        if (tag == 16) {
         parse_lose_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_count_)));
          set_has_lose_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_haveniu_count;
        break;
      }

      // optional uint32 haveniu_count = 3;
      case 3: {
        if (tag == 24) {
         parse_haveniu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haveniu_count_)));
          set_has_haveniu_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nullniu_count;
        break;
      }

      // optional uint32 nullniu_count = 4;
      case 4: {
        if (tag == 32) {
         parse_nullniu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nullniu_count_)));
          set_has_nullniu_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_specialniu_count;
        break;
      }

      // optional uint32 specialniu_count = 5;
      case 5: {
        if (tag == 40) {
         parse_specialniu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specialniu_count_)));
          set_has_specialniu_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bank_count;
        break;
      }

      // optional uint32 bank_count = 6;
      case 6: {
        if (tag == 48) {
         parse_bank_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bank_count_)));
          set_has_bank_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgNNGameOverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgNNGameOverInfo)
  return false;
#undef DO_
}

void MsgNNGameOverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgNNGameOverInfo)
  // optional uint32 win_count = 1;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->win_count(), output);
  }

  // optional uint32 lose_count = 2;
  if (has_lose_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lose_count(), output);
  }

  // optional uint32 haveniu_count = 3;
  if (has_haveniu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->haveniu_count(), output);
  }

  // optional uint32 nullniu_count = 4;
  if (has_nullniu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nullniu_count(), output);
  }

  // optional uint32 specialniu_count = 5;
  if (has_specialniu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->specialniu_count(), output);
  }

  // optional uint32 bank_count = 6;
  if (has_bank_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bank_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgNNGameOverInfo)
}

::google::protobuf::uint8* MsgNNGameOverInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgNNGameOverInfo)
  // optional uint32 win_count = 1;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->win_count(), target);
  }

  // optional uint32 lose_count = 2;
  if (has_lose_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lose_count(), target);
  }

  // optional uint32 haveniu_count = 3;
  if (has_haveniu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->haveniu_count(), target);
  }

  // optional uint32 nullniu_count = 4;
  if (has_nullniu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nullniu_count(), target);
  }

  // optional uint32 specialniu_count = 5;
  if (has_specialniu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->specialniu_count(), target);
  }

  // optional uint32 bank_count = 6;
  if (has_bank_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bank_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgNNGameOverInfo)
  return target;
}

int MsgNNGameOverInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 win_count = 1;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional uint32 lose_count = 2;
    if (has_lose_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_count());
    }

    // optional uint32 haveniu_count = 3;
    if (has_haveniu_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haveniu_count());
    }

    // optional uint32 nullniu_count = 4;
    if (has_nullniu_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nullniu_count());
    }

    // optional uint32 specialniu_count = 5;
    if (has_specialniu_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specialniu_count());
    }

    // optional uint32 bank_count = 6;
    if (has_bank_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bank_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNNGameOverInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNNGameOverInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNNGameOverInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNNGameOverInfo::MergeFrom(const MsgNNGameOverInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_lose_count()) {
      set_lose_count(from.lose_count());
    }
    if (from.has_haveniu_count()) {
      set_haveniu_count(from.haveniu_count());
    }
    if (from.has_nullniu_count()) {
      set_nullniu_count(from.nullniu_count());
    }
    if (from.has_specialniu_count()) {
      set_specialniu_count(from.specialniu_count());
    }
    if (from.has_bank_count()) {
      set_bank_count(from.bank_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNNGameOverInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNNGameOverInfo::CopyFrom(const MsgNNGameOverInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNNGameOverInfo::IsInitialized() const {

  return true;
}

void MsgNNGameOverInfo::Swap(MsgNNGameOverInfo* other) {
  if (other != this) {
    std::swap(win_count_, other->win_count_);
    std::swap(lose_count_, other->lose_count_);
    std::swap(haveniu_count_, other->haveniu_count_);
    std::swap(nullniu_count_, other->nullniu_count_);
    std::swap(specialniu_count_, other->specialniu_count_);
    std::swap(bank_count_, other->bank_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNNGameOverInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNNGameOverInfo_descriptor_;
  metadata.reflection = MsgNNGameOverInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNiuNiuShowDown::kRoomStateFieldNumber;
const int MsgNiuNiuShowDown::kStateTimeFieldNumber;
const int MsgNiuNiuShowDown::kPlayerListFieldNumber;
const int MsgNiuNiuShowDown::kRoomIdFieldNumber;
const int MsgNiuNiuShowDown::kGameCountFieldNumber;
const int MsgNiuNiuShowDown::kTimeFieldNumber;
const int MsgNiuNiuShowDown::kGameOverFieldNumber;
const int MsgNiuNiuShowDown::kIntegralListFieldNumber;
#endif  // !_MSC_VER

MsgNiuNiuShowDown::MsgNiuNiuShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgNiuNiuShowDown)
}

void MsgNiuNiuShowDown::InitAsDefaultInstance() {
}

MsgNiuNiuShowDown::MsgNiuNiuShowDown(const MsgNiuNiuShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgNiuNiuShowDown)
}

void MsgNiuNiuShowDown::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  time_ = 0u;
  game_over_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNiuNiuShowDown::~MsgNiuNiuShowDown() {
  // @@protoc_insertion_point(destructor:MsgNiuNiuShowDown)
  SharedDtor();
}

void MsgNiuNiuShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNiuNiuShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNiuNiuShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNiuNiuShowDown_descriptor_;
}

const MsgNiuNiuShowDown& MsgNiuNiuShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgNiuNiuShowDown* MsgNiuNiuShowDown::default_instance_ = NULL;

MsgNiuNiuShowDown* MsgNiuNiuShowDown::New() const {
  return new MsgNiuNiuShowDown;
}

void MsgNiuNiuShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNiuNiuShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(room_state_, state_time_);
    ZR_(room_id_, time_);
    game_over_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  integral_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNiuNiuShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgNiuNiuShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TNiuNiuState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TNiuNiuState_IsValid(value)) {
            set_room_state(static_cast< ::TNiuNiuState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgNiuNiuPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 5;
      case 5: {
        if (tag == 40) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_game_over;
        break;
      }

      // optional bool game_over = 7;
      case 7: {
        if (tag == 56) {
         parse_game_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_over_)));
          set_has_game_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_integral_list;
        break;
      }

      // repeated .MsgNNIntegralCount integral_list = 8;
      case 8: {
        if (tag == 66) {
         parse_integral_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_integral_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgNiuNiuShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgNiuNiuShowDown)
  return false;
#undef DO_
}

void MsgNiuNiuShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgNiuNiuShowDown)
  // optional .TNiuNiuState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgNiuNiuPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->room_id(), output);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_count(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional bool game_over = 7;
  if (has_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->game_over(), output);
  }

  // repeated .MsgNNIntegralCount integral_list = 8;
  for (int i = 0; i < this->integral_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->integral_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgNiuNiuShowDown)
}

::google::protobuf::uint8* MsgNiuNiuShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgNiuNiuShowDown)
  // optional .TNiuNiuState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgNiuNiuPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_count(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional bool game_over = 7;
  if (has_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->game_over(), target);
  }

  // repeated .MsgNNIntegralCount integral_list = 8;
  for (int i = 0; i < this->integral_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->integral_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgNiuNiuShowDown)
  return target;
}

int MsgNiuNiuShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TNiuNiuState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 5;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool game_over = 7;
    if (has_game_over()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MsgNiuNiuPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgNNIntegralCount integral_list = 8;
  total_size += 1 * this->integral_list_size();
  for (int i = 0; i < this->integral_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNiuNiuShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNiuNiuShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNiuNiuShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNiuNiuShowDown::MergeFrom(const MsgNiuNiuShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  integral_list_.MergeFrom(from.integral_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_game_over()) {
      set_game_over(from.game_over());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNiuNiuShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNiuNiuShowDown::CopyFrom(const MsgNiuNiuShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNiuNiuShowDown::IsInitialized() const {

  return true;
}

void MsgNiuNiuShowDown::Swap(MsgNiuNiuShowDown* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(time_, other->time_);
    std::swap(game_over_, other->game_over_);
    integral_list_.Swap(&other->integral_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNiuNiuShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNiuNiuShowDown_descriptor_;
  metadata.reflection = MsgNiuNiuShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNNIntegralCount::kRoleidFieldNumber;
const int MsgNNIntegralCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgNNIntegralCount::MsgNNIntegralCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgNNIntegralCount)
}

void MsgNNIntegralCount::InitAsDefaultInstance() {
}

MsgNNIntegralCount::MsgNNIntegralCount(const MsgNNIntegralCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgNNIntegralCount)
}

void MsgNNIntegralCount::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNNIntegralCount::~MsgNNIntegralCount() {
  // @@protoc_insertion_point(destructor:MsgNNIntegralCount)
  SharedDtor();
}

void MsgNNIntegralCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgNNIntegralCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNNIntegralCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNNIntegralCount_descriptor_;
}

const MsgNNIntegralCount& MsgNNIntegralCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fniuniu_2eproto();
  return *default_instance_;
}

MsgNNIntegralCount* MsgNNIntegralCount::default_instance_ = NULL;

MsgNNIntegralCount* MsgNNIntegralCount::New() const {
  return new MsgNNIntegralCount;
}

void MsgNNIntegralCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgNNIntegralCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNNIntegralCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgNNIntegralCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgNNIntegralCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgNNIntegralCount)
  return false;
#undef DO_
}

void MsgNNIntegralCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgNNIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgNNIntegralCount)
}

::google::protobuf::uint8* MsgNNIntegralCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgNNIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgNNIntegralCount)
  return target;
}

int MsgNNIntegralCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNNIntegralCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNNIntegralCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNNIntegralCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNNIntegralCount::MergeFrom(const MsgNNIntegralCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNNIntegralCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNNIntegralCount::CopyFrom(const MsgNNIntegralCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNNIntegralCount::IsInitialized() const {

  return true;
}

void MsgNNIntegralCount::Swap(MsgNNIntegralCount* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNNIntegralCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNNIntegralCount_descriptor_;
  metadata.reflection = MsgNNIntegralCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
