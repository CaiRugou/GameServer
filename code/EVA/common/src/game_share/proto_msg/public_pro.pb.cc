// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_pro.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_pro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgViewPlayersList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgViewPlayersList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChampionship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChampionship_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChampionshipList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChampionshipList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGameinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGameinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgVLP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgVLP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoadPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoadPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgString_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpdateValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpdateValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSetSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSetSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRankingPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRankingPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRankingTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRankingTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPrizePool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPrizePool_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKPICount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKPICount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoulette_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoulette_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgViewerlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgViewerlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShopBonusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShopBonusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoomInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoomInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgApplyRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgApplyRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCBJRankInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCBJRankInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCBJRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCBJRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFreeMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFreeMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAchievementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAchievementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAchievementList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAchievementList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCompleteAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCompleteAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStatisticsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStatisticsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStatisticsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStatisticsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJackpots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJackpots_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAllJackpots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAllJackpots_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgResGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgResGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSearchPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSearchPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg7DaysReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg7DaysReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgItemParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgItemParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgItemCont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgItemCont_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLimitUse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLimitUse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLimitUseCont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLimitUseCont_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUseItemUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUseItemUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSellItemUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSellItemUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAddItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAddItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQualifyingCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQualifyingCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShareReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBindFriendReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBindFriendReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSaveAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSaveAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRequestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRequestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStoreBuyItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStoreBuyItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAchievementReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAchievementReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBaseRoomPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBaseRoomPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBaseRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBaseRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQuickUnlockIconInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQuickUnlockIconInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnlockIconInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnlockIconInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgActivateIconSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgActivateIconSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnlockIconSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnlockIconSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgIconSetProgressInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgIconSetProgressInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreatePrivateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreatePrivateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterPrivateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterPrivateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGetEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGetEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordWeaveCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordWeaveCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordNodeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordNodeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordNodeCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordNodeCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFightingRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFightingRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFightingRecordCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFightingRecordCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordScoreDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordScoreDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordScoreCountList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordScoreCountList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordScoreCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordScoreCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordNameCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordNameCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordName_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRecordScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRecordScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDistanceCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDistanceCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDistanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDistanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDShowDownRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDShowDownRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSignIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSignIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleStateCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleStateCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleHost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleHost_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleHostCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleHostCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TMsgChannel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_public_5fpro_2eproto() {
  protobuf_AddDesc_public_5fpro_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "public_pro.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlayerInfo_descriptor_ = file->message_type(0);
  static const int MsgPlayerInfo_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, flag_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, roulette_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, roulette_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, roulette_money_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, roulette_rate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, watch_ads_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, watch_ads_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, dynamic_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, last_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, vip_exp_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, last_get_bonus_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, view_player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, safe_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, get_bonus_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, checkin_7day_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, reward_7day_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, collect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, weapons_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, vip_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, vip_time_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, get_vip_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, picture_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, bind_channel_id_),
  };
  MsgPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerInfo_descriptor_,
      MsgPlayerInfo::default_instance_,
      MsgPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerInfo));
  MsgViewPlayersList_descriptor_ = file->message_type(1);
  static const int MsgViewPlayersList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewPlayersList, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewPlayersList, head_portrait_),
  };
  MsgViewPlayersList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgViewPlayersList_descriptor_,
      MsgViewPlayersList::default_instance_,
      MsgViewPlayersList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewPlayersList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewPlayersList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgViewPlayersList));
  MsgVector_descriptor_ = file->message_type(2);
  static const int MsgVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVector, y_),
  };
  MsgVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgVector_descriptor_,
      MsgVector::default_instance_,
      MsgVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgVector));
  MsgPlayerState_descriptor_ = file->message_type(3);
  static const int MsgPlayerState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerState, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerState, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerState, is_liked_),
  };
  MsgPlayerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerState_descriptor_,
      MsgPlayerState::default_instance_,
      MsgPlayerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerState));
  MsgChampionship_descriptor_ = file->message_type(4);
  static const int MsgChampionship_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionship, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionship, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionship, last_enter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionship, buy_back_count_),
  };
  MsgChampionship_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChampionship_descriptor_,
      MsgChampionship::default_instance_,
      MsgChampionship_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionship, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionship, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChampionship));
  MsgChampionshipList_descriptor_ = file->message_type(5);
  static const int MsgChampionshipList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionshipList, champ_list_),
  };
  MsgChampionshipList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChampionshipList_descriptor_,
      MsgChampionshipList::default_instance_,
      MsgChampionshipList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionshipList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChampionshipList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChampionshipList));
  MsgGameinfo_descriptor_ = file->message_type(6);
  static const int MsgGameinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, ext32_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, ext32_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, ext32_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, ext32_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, ext64_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, ext64_1_),
  };
  MsgGameinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGameinfo_descriptor_,
      MsgGameinfo::default_instance_,
      MsgGameinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGameinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGameinfo));
  MsgVLP_descriptor_ = file->message_type(7);
  static const int MsgVLP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, auth_type_),
  };
  MsgVLP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgVLP_descriptor_,
      MsgVLP::default_instance_,
      MsgVLP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgVLP));
  MsgLogin_descriptor_ = file->message_type(8);
  static const int MsgLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, version_),
  };
  MsgLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogin_descriptor_,
      MsgLogin::default_instance_,
      MsgLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogin));
  MsgCreatePlayer_descriptor_ = file->message_type(9);
  static const int MsgCreatePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePlayer, name_),
  };
  MsgCreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreatePlayer_descriptor_,
      MsgCreatePlayer::default_instance_,
      MsgCreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreatePlayer));
  MsgLoadPlayer_descriptor_ = file->message_type(10);
  static const int MsgLoadPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadPlayer, player_idx_),
  };
  MsgLoadPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoadPlayer_descriptor_,
      MsgLoadPlayer::default_instance_,
      MsgLoadPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoadPlayer));
  MsgInt_descriptor_ = file->message_type(11);
  static const int MsgInt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInt, value_),
  };
  MsgInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInt_descriptor_,
      MsgInt::default_instance_,
      MsgInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInt));
  MsgBool_descriptor_ = file->message_type(12);
  static const int MsgBool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBool, val_),
  };
  MsgBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBool_descriptor_,
      MsgBool::default_instance_,
      MsgBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBool));
  MsgString_descriptor_ = file->message_type(13);
  static const int MsgString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgString, str_),
  };
  MsgString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgString_descriptor_,
      MsgString::default_instance_,
      MsgString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgString));
  MsgSystem_descriptor_ = file->message_type(14);
  static const int MsgSystem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystem, value_),
  };
  MsgSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSystem_descriptor_,
      MsgSystem::default_instance_,
      MsgSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSystem));
  MsgUpdateValue_descriptor_ = file->message_type(15);
  static const int MsgUpdateValue_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext32_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext32_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext64_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext64_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, extdb_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, str_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, str_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, str_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, str_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, str_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, str_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, buf_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, extdb_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, key_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, str_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext64_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext64_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext32_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, ext32_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, extdb_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, extdb_3_),
  };
  MsgUpdateValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpdateValue_descriptor_,
      MsgUpdateValue::default_instance_,
      MsgUpdateValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpdateValue));
  MsgSetSession_descriptor_ = file->message_type(16);
  static const int MsgSetSession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetSession, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetSession, session_),
  };
  MsgSetSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSetSession_descriptor_,
      MsgSetSession::default_instance_,
      MsgSetSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSetSession));
  MsgEnterGame_descriptor_ = file->message_type(17);
  static const int MsgEnterGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterGame, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterGame, param_0_),
  };
  MsgEnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterGame_descriptor_,
      MsgEnterGame::default_instance_,
      MsgEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterGame));
  MsgReward_descriptor_ = file->message_type(18);
  static const int MsgReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReward, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReward, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReward, curr_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReward, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReward, coupon_),
  };
  MsgReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReward_descriptor_,
      MsgReward::default_instance_,
      MsgReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReward));
  MsgRankingPlayer_descriptor_ = file->message_type(19);
  static const int MsgRankingPlayer_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, last_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, vip_level_),
  };
  MsgRankingPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRankingPlayer_descriptor_,
      MsgRankingPlayer::default_instance_,
      MsgRankingPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRankingPlayer));
  MsgRankingTop_descriptor_ = file->message_type(20);
  static const int MsgRankingTop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, my_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, my_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, prize_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, player_near_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, room_type_),
  };
  MsgRankingTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRankingTop_descriptor_,
      MsgRankingTop::default_instance_,
      MsgRankingTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRankingTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRankingTop));
  MsgPrizePool_descriptor_ = file->message_type(21);
  static const int MsgPrizePool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrizePool, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrizePool, prize_pool_),
  };
  MsgPrizePool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPrizePool_descriptor_,
      MsgPrizePool::default_instance_,
      MsgPrizePool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrizePool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrizePool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPrizePool));
  MsgChat_descriptor_ = file->message_type(22);
  static const int MsgChat_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, name_),
  };
  MsgChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChat_descriptor_,
      MsgChat::default_instance_,
      MsgChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChat));
  MsgTip_descriptor_ = file->message_type(23);
  static const int MsgTip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTip, src_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTip, dec_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTip, tip_type_),
  };
  MsgTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTip_descriptor_,
      MsgTip::default_instance_,
      MsgTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTip));
  MsgKPI_descriptor_ = file->message_type(24);
  static const int MsgKPI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKPI, kpi_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKPI, kpi_value_),
  };
  MsgKPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKPI_descriptor_,
      MsgKPI::default_instance_,
      MsgKPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKPI));
  MsgKPICount_descriptor_ = file->message_type(25);
  static const int MsgKPICount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKPICount, kpi_count_),
  };
  MsgKPICount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKPICount_descriptor_,
      MsgKPICount::default_instance_,
      MsgKPICount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKPICount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKPICount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKPICount));
  MsgRoulette_descriptor_ = file->message_type(26);
  static const int MsgRoulette_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoulette, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoulette, add_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoulette, curr_money_),
  };
  MsgRoulette_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoulette_descriptor_,
      MsgRoulette::default_instance_,
      MsgRoulette_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoulette, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoulette, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoulette));
  MsgViewerlist_descriptor_ = file->message_type(27);
  static const int MsgViewerlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewerlist, player_list_),
  };
  MsgViewerlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgViewerlist_descriptor_,
      MsgViewerlist::default_instance_,
      MsgViewerlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewerlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewerlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgViewerlist));
  MsgShopBonusInfo_descriptor_ = file->message_type(28);
  static const int MsgShopBonusInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, base_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, rmb_bonus_),
  };
  MsgShopBonusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShopBonusInfo_descriptor_,
      MsgShopBonusInfo::default_instance_,
      MsgShopBonusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopBonusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShopBonusInfo));
  MsgShopInfo_descriptor_ = file->message_type(29);
  static const int MsgShopInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopInfo, shop_bonus_info_),
  };
  MsgShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShopInfo_descriptor_,
      MsgShopInfo::default_instance_,
      MsgShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShopInfo));
  MsgRoomInfoList_descriptor_ = file->message_type(30);
  static const int MsgRoomInfoList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfoList, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfoList, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfoList, room_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfoList, player_num_),
  };
  MsgRoomInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoomInfoList_descriptor_,
      MsgRoomInfoList::default_instance_,
      MsgRoomInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoomInfoList));
  MsgApplyRoomList_descriptor_ = file->message_type(31);
  static const int MsgApplyRoomList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyRoomList, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyRoomList, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyRoomList, state_),
  };
  MsgApplyRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgApplyRoomList_descriptor_,
      MsgApplyRoomList::default_instance_,
      MsgApplyRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgApplyRoomList));
  MsgRoomInfo_descriptor_ = file->message_type(32);
  static const int MsgRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfo, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfo, info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfo, apply_list_),
  };
  MsgRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoomInfo_descriptor_,
      MsgRoomInfo::default_instance_,
      MsgRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoomInfo));
  MsgCBJRankInfoList_descriptor_ = file->message_type(33);
  static const int MsgCBJRankInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCBJRankInfoList, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCBJRankInfoList, rank_),
  };
  MsgCBJRankInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCBJRankInfoList_descriptor_,
      MsgCBJRankInfoList::default_instance_,
      MsgCBJRankInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCBJRankInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCBJRankInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCBJRankInfoList));
  MsgCBJRankInfo_descriptor_ = file->message_type(34);
  static const int MsgCBJRankInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCBJRankInfo, info_list_),
  };
  MsgCBJRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCBJRankInfo_descriptor_,
      MsgCBJRankInfo::default_instance_,
      MsgCBJRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCBJRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCBJRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCBJRankInfo));
  MsgFreeMoney_descriptor_ = file->message_type(35);
  static const int MsgFreeMoney_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFreeMoney, free_money_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFreeMoney, add_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFreeMoney, curr_money_),
  };
  MsgFreeMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFreeMoney_descriptor_,
      MsgFreeMoney::default_instance_,
      MsgFreeMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFreeMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFreeMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFreeMoney));
  MsgAchievementInfo_descriptor_ = file->message_type(36);
  static const int MsgAchievementInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementInfo, achievement_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementInfo, target_),
  };
  MsgAchievementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAchievementInfo_descriptor_,
      MsgAchievementInfo::default_instance_,
      MsgAchievementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAchievementInfo));
  MsgAchievementList_descriptor_ = file->message_type(37);
  static const int MsgAchievementList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementList, achievement_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementList, check_),
  };
  MsgAchievementList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAchievementList_descriptor_,
      MsgAchievementList::default_instance_,
      MsgAchievementList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAchievementList));
  MsgCompleteAchievement_descriptor_ = file->message_type(38);
  static const int MsgCompleteAchievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteAchievement, achievements_),
  };
  MsgCompleteAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCompleteAchievement_descriptor_,
      MsgCompleteAchievement::default_instance_,
      MsgCompleteAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompleteAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCompleteAchievement));
  MsgStatisticsInfo_descriptor_ = file->message_type(39);
  static const int MsgStatisticsInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsInfo, statistics_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsInfo, count_),
  };
  MsgStatisticsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStatisticsInfo_descriptor_,
      MsgStatisticsInfo::default_instance_,
      MsgStatisticsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStatisticsInfo));
  MsgStatisticsList_descriptor_ = file->message_type(40);
  static const int MsgStatisticsList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsList, statistics_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsList, role_id_),
  };
  MsgStatisticsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStatisticsList_descriptor_,
      MsgStatisticsList::default_instance_,
      MsgStatisticsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStatisticsList));
  MsgJackpots_descriptor_ = file->message_type(41);
  static const int MsgJackpots_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJackpots, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJackpots, jackpots_),
  };
  MsgJackpots_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJackpots_descriptor_,
      MsgJackpots::default_instance_,
      MsgJackpots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJackpots, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJackpots, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJackpots));
  MsgAllJackpots_descriptor_ = file->message_type(42);
  static const int MsgAllJackpots_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAllJackpots, jackpots_),
  };
  MsgAllJackpots_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAllJackpots_descriptor_,
      MsgAllJackpots::default_instance_,
      MsgAllJackpots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAllJackpots, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAllJackpots, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAllJackpots));
  MsgGift_descriptor_ = file->message_type(43);
  static const int MsgGift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGift, src_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGift, dec_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGift, tip_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGift, src_curr_money_),
  };
  MsgGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGift_descriptor_,
      MsgGift::default_instance_,
      MsgGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGift));
  MsgResGift_descriptor_ = file->message_type(44);
  static const int MsgResGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResGift, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResGift, tip_money_),
  };
  MsgResGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgResGift_descriptor_,
      MsgResGift::default_instance_,
      MsgResGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgResGift));
  MsgSearchPlayerInfo_descriptor_ = file->message_type(45);
  static const int MsgSearchPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchPlayerInfo, head_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchPlayerInfo, sex_),
  };
  MsgSearchPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSearchPlayerInfo_descriptor_,
      MsgSearchPlayerInfo::default_instance_,
      MsgSearchPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSearchPlayerInfo));
  Msg7DaysReward_descriptor_ = file->message_type(46);
  static const int Msg7DaysReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg7DaysReward, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg7DaysReward, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg7DaysReward, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg7DaysReward, intergral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg7DaysReward, which_day_),
  };
  Msg7DaysReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg7DaysReward_descriptor_,
      Msg7DaysReward::default_instance_,
      Msg7DaysReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg7DaysReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg7DaysReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg7DaysReward));
  MsgItemParam_descriptor_ = file->message_type(47);
  static const int MsgItemParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemParam, value_),
  };
  MsgItemParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgItemParam_descriptor_,
      MsgItemParam::default_instance_,
      MsgItemParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgItemParam));
  MsgItem_descriptor_ = file->message_type(48);
  static const int MsgItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, con_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, itemparam_),
  };
  MsgItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgItem_descriptor_,
      MsgItem::default_instance_,
      MsgItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgItem));
  MsgItemCont_descriptor_ = file->message_type(49);
  static const int MsgItemCont_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCont, msg_item_),
  };
  MsgItemCont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgItemCont_descriptor_,
      MsgItemCont::default_instance_,
      MsgItemCont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgItemCont));
  MsgLimitUse_descriptor_ = file->message_type(50);
  static const int MsgLimitUse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimitUse, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimitUse, use_time_),
  };
  MsgLimitUse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLimitUse_descriptor_,
      MsgLimitUse::default_instance_,
      MsgLimitUse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimitUse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimitUse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLimitUse));
  MsgLimitUseCont_descriptor_ = file->message_type(51);
  static const int MsgLimitUseCont_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimitUseCont, msg_limituse_),
  };
  MsgLimitUseCont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLimitUseCont_descriptor_,
      MsgLimitUseCont::default_instance_,
      MsgLimitUseCont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimitUseCont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimitUseCont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLimitUseCont));
  MsgSellItem_descriptor_ = file->message_type(52);
  static const int MsgSellItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItem, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItem, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItem, sell_count_),
  };
  MsgSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSellItem_descriptor_,
      MsgSellItem::default_instance_,
      MsgSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSellItem));
  MsgUseItem_descriptor_ = file->message_type(53);
  static const int MsgUseItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItem, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItem, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItem, use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItem, use_target_),
  };
  MsgUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUseItem_descriptor_,
      MsgUseItem::default_instance_,
      MsgUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUseItem));
  MsgUseItemUpdate_descriptor_ = file->message_type(54);
  static const int MsgUseItemUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemUpdate, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemUpdate, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemUpdate, item_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemUpdate, use_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemUpdate, use_target_),
  };
  MsgUseItemUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUseItemUpdate_descriptor_,
      MsgUseItemUpdate::default_instance_,
      MsgUseItemUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUseItemUpdate));
  MsgSellItemUpdate_descriptor_ = file->message_type(55);
  static const int MsgSellItemUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItemUpdate, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItemUpdate, item_info_),
  };
  MsgSellItemUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSellItemUpdate_descriptor_,
      MsgSellItemUpdate::default_instance_,
      MsgSellItemUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItemUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSellItemUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSellItemUpdate));
  MsgAddItems_descriptor_ = file->message_type(56);
  static const int MsgAddItems_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddItems, add_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddItems, curr_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddItems, add_items_),
  };
  MsgAddItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAddItems_descriptor_,
      MsgAddItems::default_instance_,
      MsgAddItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAddItems));
  MsgQualifyingInfo_descriptor_ = file->message_type(57);
  static const int MsgQualifyingInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingInfo, match_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingInfo, match_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingInfo, match_creditscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingInfo, match_dan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingInfo, match_star_),
  };
  MsgQualifyingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingInfo_descriptor_,
      MsgQualifyingInfo::default_instance_,
      MsgQualifyingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingInfo));
  MsgQualifyingCount_descriptor_ = file->message_type(58);
  static const int MsgQualifyingCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingCount, qualifying_list_),
  };
  MsgQualifyingCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQualifyingCount_descriptor_,
      MsgQualifyingCount::default_instance_,
      MsgQualifyingCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQualifyingCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQualifyingCount));
  MsgShareReward_descriptor_ = file->message_type(59);
  static const int MsgShareReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShareReward, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShareReward, add_items_),
  };
  MsgShareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShareReward_descriptor_,
      MsgShareReward::default_instance_,
      MsgShareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShareReward));
  MsgBindFriendReward_descriptor_ = file->message_type(60);
  static const int MsgBindFriendReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendReward, dst_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendReward, dst_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendReward, dst_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendReward, add_items_),
  };
  MsgBindFriendReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBindFriendReward_descriptor_,
      MsgBindFriendReward::default_instance_,
      MsgBindFriendReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindFriendReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBindFriendReward));
  MsgSaveAccountInfo_descriptor_ = file->message_type(61);
  static const int MsgSaveAccountInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveAccountInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveAccountInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveAccountInfo, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveAccountInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveAccountInfo, sex_),
  };
  MsgSaveAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSaveAccountInfo_descriptor_,
      MsgSaveAccountInfo::default_instance_,
      MsgSaveAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSaveAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSaveAccountInfo));
  MsgMissionInfo_descriptor_ = file->message_type(62);
  static const int MsgMissionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionInfo, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionInfo, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionInfo, state_),
  };
  MsgMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionInfo_descriptor_,
      MsgMissionInfo::default_instance_,
      MsgMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionInfo));
  MsgMissionList_descriptor_ = file->message_type(63);
  static const int MsgMissionList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionList, mission_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionList, check_),
  };
  MsgMissionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionList_descriptor_,
      MsgMissionList::default_instance_,
      MsgMissionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionList));
  MsgMissionReward_descriptor_ = file->message_type(64);
  static const int MsgMissionReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionReward, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionReward, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionReward, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionReward, msg_item_),
  };
  MsgMissionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionReward_descriptor_,
      MsgMissionReward::default_instance_,
      MsgMissionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionReward));
  MsgRequestList_descriptor_ = file->message_type(65);
  static const int MsgRequestList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestList, check_),
  };
  MsgRequestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRequestList_descriptor_,
      MsgRequestList::default_instance_,
      MsgRequestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRequestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRequestList));
  MsgStoreBuyItem_descriptor_ = file->message_type(66);
  static const int MsgStoreBuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItem, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItem, count_),
  };
  MsgStoreBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreBuyItem_descriptor_,
      MsgStoreBuyItem::default_instance_,
      MsgStoreBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreBuyItem));
  MsgStoreBuyItemInfo_descriptor_ = file->message_type(67);
  static const int MsgStoreBuyItemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItemInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItemInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItemInfo, msg_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItemInfo, vip_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItemInfo, point_),
  };
  MsgStoreBuyItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStoreBuyItemInfo_descriptor_,
      MsgStoreBuyItemInfo::default_instance_,
      MsgStoreBuyItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStoreBuyItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStoreBuyItemInfo));
  MsgAchievementReward_descriptor_ = file->message_type(68);
  static const int MsgAchievementReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementReward, achievement_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementReward, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementReward, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementReward, msg_item_),
  };
  MsgAchievementReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAchievementReward_descriptor_,
      MsgAchievementReward::default_instance_,
      MsgAchievementReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAchievementReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAchievementReward));
  MsgBaseRoomPlayerInfo_descriptor_ = file->message_type(69);
  static const int MsgBaseRoomPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomPlayerInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomPlayerInfo, item_tip_tid_),
  };
  MsgBaseRoomPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBaseRoomPlayerInfo_descriptor_,
      MsgBaseRoomPlayerInfo::default_instance_,
      MsgBaseRoomPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBaseRoomPlayerInfo));
  MsgBaseRoomInfo_descriptor_ = file->message_type(70);
  static const int MsgBaseRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomInfo, base_player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomInfo, envelope_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomInfo, split_gift_ids_),
  };
  MsgBaseRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBaseRoomInfo_descriptor_,
      MsgBaseRoomInfo::default_instance_,
      MsgBaseRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBaseRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBaseRoomInfo));
  MsgQuickUnlockIconInfo_descriptor_ = file->message_type(71);
  static const int MsgQuickUnlockIconInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuickUnlockIconInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuickUnlockIconInfo, id_),
  };
  MsgQuickUnlockIconInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQuickUnlockIconInfo_descriptor_,
      MsgQuickUnlockIconInfo::default_instance_,
      MsgQuickUnlockIconInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuickUnlockIconInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuickUnlockIconInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQuickUnlockIconInfo));
  MsgUnlockIconInfo_descriptor_ = file->message_type(72);
  static const int MsgUnlockIconInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconInfo, curr_icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconInfo, start_time_),
  };
  MsgUnlockIconInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnlockIconInfo_descriptor_,
      MsgUnlockIconInfo::default_instance_,
      MsgUnlockIconInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnlockIconInfo));
  MsgActivateIconSet_descriptor_ = file->message_type(73);
  static const int MsgActivateIconSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActivateIconSet, activate_icon_set_),
  };
  MsgActivateIconSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgActivateIconSet_descriptor_,
      MsgActivateIconSet::default_instance_,
      MsgActivateIconSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActivateIconSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActivateIconSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgActivateIconSet));
  MsgUnlockIconSet_descriptor_ = file->message_type(74);
  static const int MsgUnlockIconSet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconSet, curr_icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconSet, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconSet, unlock_icon_set_),
  };
  MsgUnlockIconSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnlockIconSet_descriptor_,
      MsgUnlockIconSet::default_instance_,
      MsgUnlockIconSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnlockIconSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnlockIconSet));
  MsgIconSetProgressInfo_descriptor_ = file->message_type(75);
  static const int MsgIconSetProgressInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIconSetProgressInfo, icon_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIconSetProgressInfo, target_progress_),
  };
  MsgIconSetProgressInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgIconSetProgressInfo_descriptor_,
      MsgIconSetProgressInfo::default_instance_,
      MsgIconSetProgressInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIconSetProgressInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIconSetProgressInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgIconSetProgressInfo));
  MsgCreatePrivateRoom_descriptor_ = file->message_type(76);
  static const int MsgCreatePrivateRoom_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, consume_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, special_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, game_versione_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, pay_ment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, player_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, tissue_id_),
  };
  MsgCreatePrivateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreatePrivateRoom_descriptor_,
      MsgCreatePrivateRoom::default_instance_,
      MsgCreatePrivateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePrivateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreatePrivateRoom));
  MsgEnterPrivateRoom_descriptor_ = file->message_type(77);
  static const int MsgEnterPrivateRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPrivateRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPrivateRoom, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPrivateRoom, game_versione_),
  };
  MsgEnterPrivateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterPrivateRoom_descriptor_,
      MsgEnterPrivateRoom::default_instance_,
      MsgEnterPrivateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPrivateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterPrivateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterPrivateRoom));
  MsgCards_descriptor_ = file->message_type(78);
  static const int MsgCards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCards, suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCards, index_),
  };
  MsgCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCards_descriptor_,
      MsgCards::default_instance_,
      MsgCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCards));
  MsgGetEnvelope_descriptor_ = file->message_type(79);
  static const int MsgGetEnvelope_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, dec_ply_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, src_ply_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, left_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, dec_ply_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, dec_ply_coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, dec_ply_id_),
  };
  MsgGetEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGetEnvelope_descriptor_,
      MsgGetEnvelope::default_instance_,
      MsgGetEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGetEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGetEnvelope));
  MsgUseSkill_descriptor_ = file->message_type(80);
  static const int MsgUseSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseSkill, skill_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseSkill, item_info_),
  };
  MsgUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUseSkill_descriptor_,
      MsgUseSkill::default_instance_,
      MsgUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUseSkill));
  MsgRecordRoomInfo_descriptor_ = file->message_type(81);
  static const int MsgRecordRoomInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoomInfo, special_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoomInfo, banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoomInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoomInfo, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoomInfo, bottom_card_),
  };
  MsgRecordRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordRoomInfo_descriptor_,
      MsgRecordRoomInfo::default_instance_,
      MsgRecordRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordRoomInfo));
  MsgRecordRoleInfo_descriptor_ = file->message_type(82);
  static const int MsgRecordRoleInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, usename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, current_score_),
  };
  MsgRecordRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordRoleInfo_descriptor_,
      MsgRecordRoleInfo::default_instance_,
      MsgRecordRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordRoleInfo));
  MsgRecordEvent_descriptor_ = file->message_type(83);
  static const int MsgRecordEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordEvent, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordEvent, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordEvent, score_count_),
  };
  MsgRecordEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordEvent_descriptor_,
      MsgRecordEvent::default_instance_,
      MsgRecordEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordEvent));
  MsgRecordShowDown_descriptor_ = file->message_type(84);
  static const int MsgRecordShowDown_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, fixedscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, weave_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, hucard_list_),
  };
  MsgRecordShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordShowDown_descriptor_,
      MsgRecordShowDown::default_instance_,
      MsgRecordShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordShowDown));
  MsgRecordWeaveCard_descriptor_ = file->message_type(85);
  static const int MsgRecordWeaveCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordWeaveCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordWeaveCard, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordWeaveCard, barkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordWeaveCard, mix_card_),
  };
  MsgRecordWeaveCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordWeaveCard_descriptor_,
      MsgRecordWeaveCard::default_instance_,
      MsgRecordWeaveCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordWeaveCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordWeaveCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordWeaveCard));
  MsgRecordIdList_descriptor_ = file->message_type(86);
  static const int MsgRecordIdList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordIdList, record_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordIdList, fight_id_),
  };
  MsgRecordIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordIdList_descriptor_,
      MsgRecordIdList::default_instance_,
      MsgRecordIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordIdList));
  MsgRecordNodeList_descriptor_ = file->message_type(87);
  static const int MsgRecordNodeList_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, card_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, card_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, action_wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, node_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, role_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, room_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, showdown_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, next_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, win_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, lost_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, room_ranking_),
  };
  MsgRecordNodeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordNodeList_descriptor_,
      MsgRecordNodeList::default_instance_,
      MsgRecordNodeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordNodeList));
  MsgRecordNodeCount_descriptor_ = file->message_type(88);
  static const int MsgRecordNodeCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeCount, record_node_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeCount, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeCount, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeCount, room_type_),
  };
  MsgRecordNodeCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordNodeCount_descriptor_,
      MsgRecordNodeCount::default_instance_,
      MsgRecordNodeCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNodeCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordNodeCount));
  MsgFightingRecord_descriptor_ = file->message_type(89);
  static const int MsgFightingRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, record_id_),
  };
  MsgFightingRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFightingRecord_descriptor_,
      MsgFightingRecord::default_instance_,
      MsgFightingRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFightingRecord));
  MsgFightingRecordCount_descriptor_ = file->message_type(90);
  static const int MsgFightingRecordCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecordCount, recordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecordCount, count_),
  };
  MsgFightingRecordCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFightingRecordCount_descriptor_,
      MsgFightingRecordCount::default_instance_,
      MsgFightingRecordCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecordCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFightingRecordCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFightingRecordCount));
  MsgRecordScoreDataList_descriptor_ = file->message_type(91);
  static const int MsgRecordScoreDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreDataList, record_score_list_),
  };
  MsgRecordScoreDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordScoreDataList_descriptor_,
      MsgRecordScoreDataList::default_instance_,
      MsgRecordScoreDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordScoreDataList));
  MsgRecordScoreCountList_descriptor_ = file->message_type(92);
  static const int MsgRecordScoreCountList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCountList, score_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCountList, name_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCountList, record_id_),
  };
  MsgRecordScoreCountList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordScoreCountList_descriptor_,
      MsgRecordScoreCountList::default_instance_,
      MsgRecordScoreCountList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCountList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCountList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordScoreCountList));
  MsgRecordScoreCount_descriptor_ = file->message_type(93);
  static const int MsgRecordScoreCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCount, score_list_),
  };
  MsgRecordScoreCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordScoreCount_descriptor_,
      MsgRecordScoreCount::default_instance_,
      MsgRecordScoreCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScoreCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordScoreCount));
  MsgRecordNameCount_descriptor_ = file->message_type(94);
  static const int MsgRecordNameCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNameCount, name_list_),
  };
  MsgRecordNameCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordNameCount_descriptor_,
      MsgRecordNameCount::default_instance_,
      MsgRecordNameCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNameCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordNameCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordNameCount));
  MsgRecordName_descriptor_ = file->message_type(95);
  static const int MsgRecordName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordName, pid_),
  };
  MsgRecordName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordName_descriptor_,
      MsgRecordName::default_instance_,
      MsgRecordName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordName));
  MsgRecordScore_descriptor_ = file->message_type(96);
  static const int MsgRecordScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScore, pid_),
  };
  MsgRecordScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRecordScore_descriptor_,
      MsgRecordScore::default_instance_,
      MsgRecordScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRecordScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRecordScore));
  MsgDistanceCount_descriptor_ = file->message_type(97);
  static const int MsgDistanceCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceCount, distance_list_),
  };
  MsgDistanceCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDistanceCount_descriptor_,
      MsgDistanceCount::default_instance_,
      MsgDistanceCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDistanceCount));
  MsgDistanceInfo_descriptor_ = file->message_type(98);
  static const int MsgDistanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceInfo, distance_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceInfo, distance_y_),
  };
  MsgDistanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDistanceInfo_descriptor_,
      MsgDistanceInfo::default_instance_,
      MsgDistanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDistanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDistanceInfo));
  MsgGDShowDownRole_descriptor_ = file->message_type(99);
  static const int MsgGDShowDownRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDShowDownRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDShowDownRole, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDShowDownRole, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDShowDownRole, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDShowDownRole, current_score_),
  };
  MsgGDShowDownRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDShowDownRole_descriptor_,
      MsgGDShowDownRole::default_instance_,
      MsgGDShowDownRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDShowDownRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDShowDownRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDShowDownRole));
  MsgGDRankInfo_descriptor_ = file->message_type(100);
  static const int MsgGDRankInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDRankInfo, rank_list_),
  };
  MsgGDRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDRankInfo_descriptor_,
      MsgGDRankInfo::default_instance_,
      MsgGDRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDRankInfo));
  MsgSignIn_descriptor_ = file->message_type(101);
  static const int MsgSignIn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSignIn, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSignIn, signtag_),
  };
  MsgSignIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSignIn_descriptor_,
      MsgSignIn::default_instance_,
      MsgSignIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSignIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSignIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSignIn));
  MsgRoleState_descriptor_ = file->message_type(102);
  static const int MsgRoleState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleState, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleState, state_),
  };
  MsgRoleState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleState_descriptor_,
      MsgRoleState::default_instance_,
      MsgRoleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleState));
  MsgRoleStateCount_descriptor_ = file->message_type(103);
  static const int MsgRoleStateCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleStateCount, role_state_),
  };
  MsgRoleStateCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleStateCount_descriptor_,
      MsgRoleStateCount::default_instance_,
      MsgRoleStateCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleStateCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleStateCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleStateCount));
  MsgRoleHost_descriptor_ = file->message_type(104);
  static const int MsgRoleHost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHost, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHost, host_id_),
  };
  MsgRoleHost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleHost_descriptor_,
      MsgRoleHost::default_instance_,
      MsgRoleHost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleHost));
  MsgRoleHostCount_descriptor_ = file->message_type(105);
  static const int MsgRoleHostCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHostCount, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHostCount, host_list_),
  };
  MsgRoleHostCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleHostCount_descriptor_,
      MsgRoleHostCount::default_instance_,
      MsgRoleHostCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHostCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleHostCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleHostCount));
  TMsgChannel_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_public_5fpro_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerInfo_descriptor_, &MsgPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgViewPlayersList_descriptor_, &MsgViewPlayersList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgVector_descriptor_, &MsgVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerState_descriptor_, &MsgPlayerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChampionship_descriptor_, &MsgChampionship::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChampionshipList_descriptor_, &MsgChampionshipList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGameinfo_descriptor_, &MsgGameinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgVLP_descriptor_, &MsgVLP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogin_descriptor_, &MsgLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreatePlayer_descriptor_, &MsgCreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoadPlayer_descriptor_, &MsgLoadPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInt_descriptor_, &MsgInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBool_descriptor_, &MsgBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgString_descriptor_, &MsgString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSystem_descriptor_, &MsgSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpdateValue_descriptor_, &MsgUpdateValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSetSession_descriptor_, &MsgSetSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterGame_descriptor_, &MsgEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReward_descriptor_, &MsgReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRankingPlayer_descriptor_, &MsgRankingPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRankingTop_descriptor_, &MsgRankingTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPrizePool_descriptor_, &MsgPrizePool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChat_descriptor_, &MsgChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTip_descriptor_, &MsgTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKPI_descriptor_, &MsgKPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKPICount_descriptor_, &MsgKPICount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoulette_descriptor_, &MsgRoulette::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgViewerlist_descriptor_, &MsgViewerlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShopBonusInfo_descriptor_, &MsgShopBonusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShopInfo_descriptor_, &MsgShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoomInfoList_descriptor_, &MsgRoomInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgApplyRoomList_descriptor_, &MsgApplyRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoomInfo_descriptor_, &MsgRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCBJRankInfoList_descriptor_, &MsgCBJRankInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCBJRankInfo_descriptor_, &MsgCBJRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFreeMoney_descriptor_, &MsgFreeMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAchievementInfo_descriptor_, &MsgAchievementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAchievementList_descriptor_, &MsgAchievementList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCompleteAchievement_descriptor_, &MsgCompleteAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStatisticsInfo_descriptor_, &MsgStatisticsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStatisticsList_descriptor_, &MsgStatisticsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJackpots_descriptor_, &MsgJackpots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAllJackpots_descriptor_, &MsgAllJackpots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGift_descriptor_, &MsgGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgResGift_descriptor_, &MsgResGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSearchPlayerInfo_descriptor_, &MsgSearchPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg7DaysReward_descriptor_, &Msg7DaysReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgItemParam_descriptor_, &MsgItemParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgItem_descriptor_, &MsgItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgItemCont_descriptor_, &MsgItemCont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLimitUse_descriptor_, &MsgLimitUse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLimitUseCont_descriptor_, &MsgLimitUseCont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSellItem_descriptor_, &MsgSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUseItem_descriptor_, &MsgUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUseItemUpdate_descriptor_, &MsgUseItemUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSellItemUpdate_descriptor_, &MsgSellItemUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAddItems_descriptor_, &MsgAddItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingInfo_descriptor_, &MsgQualifyingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQualifyingCount_descriptor_, &MsgQualifyingCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShareReward_descriptor_, &MsgShareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBindFriendReward_descriptor_, &MsgBindFriendReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSaveAccountInfo_descriptor_, &MsgSaveAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionInfo_descriptor_, &MsgMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionList_descriptor_, &MsgMissionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionReward_descriptor_, &MsgMissionReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRequestList_descriptor_, &MsgRequestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreBuyItem_descriptor_, &MsgStoreBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStoreBuyItemInfo_descriptor_, &MsgStoreBuyItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAchievementReward_descriptor_, &MsgAchievementReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBaseRoomPlayerInfo_descriptor_, &MsgBaseRoomPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBaseRoomInfo_descriptor_, &MsgBaseRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQuickUnlockIconInfo_descriptor_, &MsgQuickUnlockIconInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnlockIconInfo_descriptor_, &MsgUnlockIconInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgActivateIconSet_descriptor_, &MsgActivateIconSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnlockIconSet_descriptor_, &MsgUnlockIconSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgIconSetProgressInfo_descriptor_, &MsgIconSetProgressInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreatePrivateRoom_descriptor_, &MsgCreatePrivateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterPrivateRoom_descriptor_, &MsgEnterPrivateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCards_descriptor_, &MsgCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGetEnvelope_descriptor_, &MsgGetEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUseSkill_descriptor_, &MsgUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordRoomInfo_descriptor_, &MsgRecordRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordRoleInfo_descriptor_, &MsgRecordRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordEvent_descriptor_, &MsgRecordEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordShowDown_descriptor_, &MsgRecordShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordWeaveCard_descriptor_, &MsgRecordWeaveCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordIdList_descriptor_, &MsgRecordIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordNodeList_descriptor_, &MsgRecordNodeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordNodeCount_descriptor_, &MsgRecordNodeCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFightingRecord_descriptor_, &MsgFightingRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFightingRecordCount_descriptor_, &MsgFightingRecordCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordScoreDataList_descriptor_, &MsgRecordScoreDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordScoreCountList_descriptor_, &MsgRecordScoreCountList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordScoreCount_descriptor_, &MsgRecordScoreCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordNameCount_descriptor_, &MsgRecordNameCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordName_descriptor_, &MsgRecordName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRecordScore_descriptor_, &MsgRecordScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDistanceCount_descriptor_, &MsgDistanceCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDistanceInfo_descriptor_, &MsgDistanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDShowDownRole_descriptor_, &MsgGDShowDownRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDRankInfo_descriptor_, &MsgGDRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSignIn_descriptor_, &MsgSignIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleState_descriptor_, &MsgRoleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleStateCount_descriptor_, &MsgRoleStateCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleHost_descriptor_, &MsgRoleHost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleHostCount_descriptor_, &MsgRoleHostCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_public_5fpro_2eproto() {
  delete MsgPlayerInfo::default_instance_;
  delete MsgPlayerInfo_reflection_;
  delete MsgViewPlayersList::default_instance_;
  delete MsgViewPlayersList_reflection_;
  delete MsgVector::default_instance_;
  delete MsgVector_reflection_;
  delete MsgPlayerState::default_instance_;
  delete MsgPlayerState_reflection_;
  delete MsgChampionship::default_instance_;
  delete MsgChampionship_reflection_;
  delete MsgChampionshipList::default_instance_;
  delete MsgChampionshipList_reflection_;
  delete MsgGameinfo::default_instance_;
  delete MsgGameinfo_reflection_;
  delete MsgVLP::default_instance_;
  delete MsgVLP_reflection_;
  delete MsgLogin::default_instance_;
  delete MsgLogin_reflection_;
  delete MsgCreatePlayer::default_instance_;
  delete MsgCreatePlayer_reflection_;
  delete MsgLoadPlayer::default_instance_;
  delete MsgLoadPlayer_reflection_;
  delete MsgInt::default_instance_;
  delete MsgInt_reflection_;
  delete MsgBool::default_instance_;
  delete MsgBool_reflection_;
  delete MsgString::default_instance_;
  delete MsgString_reflection_;
  delete MsgSystem::default_instance_;
  delete MsgSystem_reflection_;
  delete MsgUpdateValue::default_instance_;
  delete MsgUpdateValue_reflection_;
  delete MsgSetSession::default_instance_;
  delete MsgSetSession_reflection_;
  delete MsgEnterGame::default_instance_;
  delete MsgEnterGame_reflection_;
  delete MsgReward::default_instance_;
  delete MsgReward_reflection_;
  delete MsgRankingPlayer::default_instance_;
  delete MsgRankingPlayer_reflection_;
  delete MsgRankingTop::default_instance_;
  delete MsgRankingTop_reflection_;
  delete MsgPrizePool::default_instance_;
  delete MsgPrizePool_reflection_;
  delete MsgChat::default_instance_;
  delete MsgChat_reflection_;
  delete MsgTip::default_instance_;
  delete MsgTip_reflection_;
  delete MsgKPI::default_instance_;
  delete MsgKPI_reflection_;
  delete MsgKPICount::default_instance_;
  delete MsgKPICount_reflection_;
  delete MsgRoulette::default_instance_;
  delete MsgRoulette_reflection_;
  delete MsgViewerlist::default_instance_;
  delete MsgViewerlist_reflection_;
  delete MsgShopBonusInfo::default_instance_;
  delete MsgShopBonusInfo_reflection_;
  delete MsgShopInfo::default_instance_;
  delete MsgShopInfo_reflection_;
  delete MsgRoomInfoList::default_instance_;
  delete MsgRoomInfoList_reflection_;
  delete MsgApplyRoomList::default_instance_;
  delete MsgApplyRoomList_reflection_;
  delete MsgRoomInfo::default_instance_;
  delete MsgRoomInfo_reflection_;
  delete MsgCBJRankInfoList::default_instance_;
  delete MsgCBJRankInfoList_reflection_;
  delete MsgCBJRankInfo::default_instance_;
  delete MsgCBJRankInfo_reflection_;
  delete MsgFreeMoney::default_instance_;
  delete MsgFreeMoney_reflection_;
  delete MsgAchievementInfo::default_instance_;
  delete MsgAchievementInfo_reflection_;
  delete MsgAchievementList::default_instance_;
  delete MsgAchievementList_reflection_;
  delete MsgCompleteAchievement::default_instance_;
  delete MsgCompleteAchievement_reflection_;
  delete MsgStatisticsInfo::default_instance_;
  delete MsgStatisticsInfo_reflection_;
  delete MsgStatisticsList::default_instance_;
  delete MsgStatisticsList_reflection_;
  delete MsgJackpots::default_instance_;
  delete MsgJackpots_reflection_;
  delete MsgAllJackpots::default_instance_;
  delete MsgAllJackpots_reflection_;
  delete MsgGift::default_instance_;
  delete MsgGift_reflection_;
  delete MsgResGift::default_instance_;
  delete MsgResGift_reflection_;
  delete MsgSearchPlayerInfo::default_instance_;
  delete MsgSearchPlayerInfo_reflection_;
  delete Msg7DaysReward::default_instance_;
  delete Msg7DaysReward_reflection_;
  delete MsgItemParam::default_instance_;
  delete MsgItemParam_reflection_;
  delete MsgItem::default_instance_;
  delete MsgItem_reflection_;
  delete MsgItemCont::default_instance_;
  delete MsgItemCont_reflection_;
  delete MsgLimitUse::default_instance_;
  delete MsgLimitUse_reflection_;
  delete MsgLimitUseCont::default_instance_;
  delete MsgLimitUseCont_reflection_;
  delete MsgSellItem::default_instance_;
  delete MsgSellItem_reflection_;
  delete MsgUseItem::default_instance_;
  delete MsgUseItem_reflection_;
  delete MsgUseItemUpdate::default_instance_;
  delete MsgUseItemUpdate_reflection_;
  delete MsgSellItemUpdate::default_instance_;
  delete MsgSellItemUpdate_reflection_;
  delete MsgAddItems::default_instance_;
  delete MsgAddItems_reflection_;
  delete MsgQualifyingInfo::default_instance_;
  delete MsgQualifyingInfo_reflection_;
  delete MsgQualifyingCount::default_instance_;
  delete MsgQualifyingCount_reflection_;
  delete MsgShareReward::default_instance_;
  delete MsgShareReward_reflection_;
  delete MsgBindFriendReward::default_instance_;
  delete MsgBindFriendReward_reflection_;
  delete MsgSaveAccountInfo::default_instance_;
  delete MsgSaveAccountInfo_reflection_;
  delete MsgMissionInfo::default_instance_;
  delete MsgMissionInfo_reflection_;
  delete MsgMissionList::default_instance_;
  delete MsgMissionList_reflection_;
  delete MsgMissionReward::default_instance_;
  delete MsgMissionReward_reflection_;
  delete MsgRequestList::default_instance_;
  delete MsgRequestList_reflection_;
  delete MsgStoreBuyItem::default_instance_;
  delete MsgStoreBuyItem_reflection_;
  delete MsgStoreBuyItemInfo::default_instance_;
  delete MsgStoreBuyItemInfo_reflection_;
  delete MsgAchievementReward::default_instance_;
  delete MsgAchievementReward_reflection_;
  delete MsgBaseRoomPlayerInfo::default_instance_;
  delete MsgBaseRoomPlayerInfo_reflection_;
  delete MsgBaseRoomInfo::default_instance_;
  delete MsgBaseRoomInfo_reflection_;
  delete MsgQuickUnlockIconInfo::default_instance_;
  delete MsgQuickUnlockIconInfo_reflection_;
  delete MsgUnlockIconInfo::default_instance_;
  delete MsgUnlockIconInfo_reflection_;
  delete MsgActivateIconSet::default_instance_;
  delete MsgActivateIconSet_reflection_;
  delete MsgUnlockIconSet::default_instance_;
  delete MsgUnlockIconSet_reflection_;
  delete MsgIconSetProgressInfo::default_instance_;
  delete MsgIconSetProgressInfo_reflection_;
  delete MsgCreatePrivateRoom::default_instance_;
  delete MsgCreatePrivateRoom_reflection_;
  delete MsgEnterPrivateRoom::default_instance_;
  delete MsgEnterPrivateRoom_reflection_;
  delete MsgCards::default_instance_;
  delete MsgCards_reflection_;
  delete MsgGetEnvelope::default_instance_;
  delete MsgGetEnvelope_reflection_;
  delete MsgUseSkill::default_instance_;
  delete MsgUseSkill_reflection_;
  delete MsgRecordRoomInfo::default_instance_;
  delete MsgRecordRoomInfo_reflection_;
  delete MsgRecordRoleInfo::default_instance_;
  delete MsgRecordRoleInfo_reflection_;
  delete MsgRecordEvent::default_instance_;
  delete MsgRecordEvent_reflection_;
  delete MsgRecordShowDown::default_instance_;
  delete MsgRecordShowDown_reflection_;
  delete MsgRecordWeaveCard::default_instance_;
  delete MsgRecordWeaveCard_reflection_;
  delete MsgRecordIdList::default_instance_;
  delete MsgRecordIdList_reflection_;
  delete MsgRecordNodeList::default_instance_;
  delete MsgRecordNodeList_reflection_;
  delete MsgRecordNodeCount::default_instance_;
  delete MsgRecordNodeCount_reflection_;
  delete MsgFightingRecord::default_instance_;
  delete MsgFightingRecord_reflection_;
  delete MsgFightingRecordCount::default_instance_;
  delete MsgFightingRecordCount_reflection_;
  delete MsgRecordScoreDataList::default_instance_;
  delete MsgRecordScoreDataList_reflection_;
  delete MsgRecordScoreCountList::default_instance_;
  delete MsgRecordScoreCountList_reflection_;
  delete MsgRecordScoreCount::default_instance_;
  delete MsgRecordScoreCount_reflection_;
  delete MsgRecordNameCount::default_instance_;
  delete MsgRecordNameCount_reflection_;
  delete MsgRecordName::default_instance_;
  delete MsgRecordName_reflection_;
  delete MsgRecordScore::default_instance_;
  delete MsgRecordScore_reflection_;
  delete MsgDistanceCount::default_instance_;
  delete MsgDistanceCount_reflection_;
  delete MsgDistanceInfo::default_instance_;
  delete MsgDistanceInfo_reflection_;
  delete MsgGDShowDownRole::default_instance_;
  delete MsgGDShowDownRole_reflection_;
  delete MsgGDRankInfo::default_instance_;
  delete MsgGDRankInfo_reflection_;
  delete MsgSignIn::default_instance_;
  delete MsgSignIn_reflection_;
  delete MsgRoleState::default_instance_;
  delete MsgRoleState_reflection_;
  delete MsgRoleStateCount::default_instance_;
  delete MsgRoleStateCount_reflection_;
  delete MsgRoleHost::default_instance_;
  delete MsgRoleHost_reflection_;
  delete MsgRoleHostCount::default_instance_;
  delete MsgRoleHostCount_reflection_;
}

void protobuf_AddDesc_public_5fpro_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_define_5fpro_2eproto();
  ::ATTRIB_TYPE::protobuf_AddDesc_define_5fattrib_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020public_pro.proto\032\020define_pro.proto\032\023de"
    "fine_attrib.proto\"\372\006\n\rMsgPlayerInfo\022\013\n\003p"
    "id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\017\n"
    "\007vip_exp\030\004 \001(\001\022\r\n\005money\030\005 \001(\022\022\013\n\003sex\030\006 \001"
    "(\r\022\020\n\010flag_bit\030\007 \001(\004\022\020\n\010username\030\010 \001(\t\022\022"
    "\n\nchannel_id\030\t \001(\r\022\026\n\016roulette_money\030\n \001"
    "(\r\022\025\n\rroulette_rate\030\013 \001(\002\022\033\n\023roulette_mo"
    "ney_time\030\014 \001(\r\022\032\n\022roulette_rate_time\030\r \001"
    "(\r\022\013\n\003uid\030\016 \001(\r\022\030\n\020watch_ads_number\030\017 \001("
    "\r\022\026\n\016watch_ads_time\030\020 \001(\r\022\025\n\rhead_portra"
    "it\030\021 \001(\r\022\023\n\013dynamic_msg\030\022 \001(\t\022\023\n\013create_"
    "time\030\023 \001(\r\022\013\n\003rmb\030\024 \001(\004\022\014\n\004like\030\025 \001(\r\022\013\n"
    "\003exp\030\026 \001(\004\022\017\n\007last_ip\030\027 \001(\r\022\021\n\tvip_level"
    "\030\030 \001(\r\022\021\n\tvip_exp_0\030\031 \001(\r\022\033\n\023last_get_bo"
    "nus_time\030\032 \001(\r\022-\n\020view_player_list\030\033 \003(\013"
    "2\023.MsgViewPlayersList\022\020\n\010safe_box\030\034 \001(\004\022"
    "\027\n\017get_bonus_count\030\035 \001(\r\022\032\n\022checkin_7day"
    "_count\030\036 \001(\004\022\030\n\020reward_7day_time\030\037 \001(\r\022\024"
    "\n\014collect_time\030  \001(\r\022\025\n\rweapons_level\030! "
    "\001(\r\022\020\n\010vip_time\030\" \001(\r\022\021\n\troom_name\030# \001(\t"
    "\022\016\n\006coupon\030$ \001(\004\022\026\n\016vip_time_level\030% \001(\r"
    "\022\033\n\023get_vip_reward_time\030& \001(\r\022\025\n\rpicture"
    "_frame\030\' \001(\r\022\r\n\005point\030( \001(\r\022\020\n\010proxy_id\030"
    ") \001(\004\022\027\n\017bind_channel_id\030* \001(\r\"8\n\022MsgVie"
    "wPlayersList\022\013\n\003pid\030\001 \001(\004\022\025\n\rhead_portra"
    "it\030\002 \001(\r\"!\n\tMsgVector\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 "
    "\001(\r\"B\n\016MsgPlayerState\022\013\n\003pid\030\001 \001(\004\022\021\n\tro"
    "om_type\030\002 \001(\t\022\020\n\010is_liked\030\003 \001(\010\"^\n\017MsgCh"
    "ampionship\022\021\n\troom_type\030\001 \001(\t\022\014\n\004coin\030\002 "
    "\001(\r\022\022\n\nlast_enter\030\003 \001(\r\022\026\n\016buy_back_coun"
    "t\030\004 \001(\r\";\n\023MsgChampionshipList\022$\n\nchamp_"
    "list\030\001 \003(\0132\020.MsgChampionship\"\206\001\n\013MsgGame"
    "info\022\021\n\tgame_type\030\001 \001(\t\022\017\n\007ext32_0\030\002 \001(\r"
    "\022\017\n\007ext32_1\030\003 \001(\r\022\017\n\007ext32_2\030\004 \001(\r\022\017\n\007ex"
    "t32_3\030\005 \001(\r\022\017\n\007ext64_0\030\006 \001(\004\022\017\n\007ext64_1\030"
    "\007 \001(\004\"[\n\006MsgVLP\022\020\n\010username\030\001 \001(\t\022\020\n\010pas"
    "sword\030\002 \001(\t\022\017\n\007version\030\003 \001(\007\022\034\n\tauth_typ"
    "e\030\004 \001(\0162\t.TChannel\"*\n\010MsgLogin\022\r\n\005token\030"
    "\001 \001(\t\022\017\n\007version\030\002 \001(\007\"\037\n\017MsgCreatePlaye"
    "r\022\014\n\004name\030\001 \001(\t\"#\n\rMsgLoadPlayer\022\022\n\nplay"
    "er_idx\030\001 \001(\r\"\027\n\006MsgInt\022\r\n\005value\030\001 \001(\003\"\026\n"
    "\007MsgBool\022\013\n\003val\030\001 \001(\010\"\030\n\tMsgString\022\013\n\003st"
    "r\030\001 \001(\t\"(\n\tMsgSystem\022\033\n\005value\030\001 \001(\0162\014.TS"
    "ystemType\"\222\003\n\016MsgUpdateValue\022\n\n\002id\030\001 \001(\004"
    "\022\013\n\003val\030\002 \001(\003\022\017\n\007ext32_0\030\003 \001(\005\022\017\n\007ext32_"
    "1\030\004 \001(\005\022\017\n\007ext64_0\030\005 \001(\003\022\017\n\007ext64_1\030\006 \001("
    "\003\022\017\n\007extdb_0\030\007 \001(\001\022\r\n\005str_0\030\010 \001(\t\022\r\n\005str"
    "_1\030\t \001(\t\022\r\n\005str_2\030\n \001(\t\022\r\n\005str_3\030\013 \001(\t\022\r"
    "\n\005str_4\030\r \001(\t\022\r\n\005str_5\030\016 \001(\t\022\r\n\005buf_0\030\017 "
    "\001(\014\022\017\n\007extdb_1\030\020 \001(\001\022#\n\nkey_values\030\014 \003(\013"
    "2\017.MsgUpdateValue\022\r\n\005str_6\030\021 \001(\t\022\017\n\007ext6"
    "4_2\030\022 \001(\003\022\017\n\007ext64_3\030\023 \001(\003\022\017\n\007ext32_2\030\024 "
    "\001(\005\022\017\n\007ext32_3\030\025 \001(\005\022\017\n\007extdb_2\030\026 \001(\001\022\017\n"
    "\007extdb_3\030\027 \001(\001\".\n\rMsgSetSession\022\014\n\004seed\030"
    "\001 \001(\007\022\017\n\007session\030\002 \001(\006\"2\n\014MsgEnterGame\022\021"
    "\n\troom_type\030\001 \001(\t\022\017\n\007param_0\030\002 \001(\r\"Z\n\tMs"
    "gReward\022\r\n\005money\030\001 \001(\004\022\014\n\004time\030\002 \001(\r\022\022\n\n"
    "curr_money\030\003 \001(\004\022\014\n\004rate\030\004 \001(\002\022\016\n\006coupon"
    "\030\005 \001(\004\"\341\001\n\020MsgRankingPlayer\022\014\n\004name\030\001 \001("
    "\t\022\r\n\005score\030\002 \001(\004\022\016\n\006reward\030\003 \001(\004\022\020\n\010user"
    "name\030\004 \001(\t\022\022\n\nchannel_id\030\005 \001(\r\022\016\n\006roleid"
    "\030\006 \001(\004\022\025\n\rhead_portrait\030\007 \001(\r\022\017\n\007ranking"
    "\030\010 \001(\r\022\r\n\005level\030\t \001(\r\022\017\n\007vip_exp\030\n \001(\r\022\017"
    "\n\007last_ip\030\013 \001(\r\022\021\n\tvip_level\030\014 \001(\r\"\252\001\n\rM"
    "sgRankingTop\022&\n\013player_list\030\001 \003(\0132\021.MsgR"
    "ankingPlayer\022\017\n\007my_rank\030\002 \001(\r\022\021\n\tmy_rewa"
    "rd\030\003 \001(\004\022\022\n\nprize_pool\030\004 \001(\004\022&\n\013player_n"
    "ear\030\005 \003(\0132\021.MsgRankingPlayer\022\021\n\troom_typ"
    "e\030\006 \001(\t\"5\n\014MsgPrizePool\022\021\n\troom_type\030\001 \001"
    "(\t\022\022\n\nprize_pool\030\002 \001(\004\"\253\001\n\007MsgChat\022\013\n\003pi"
    "d\030\001 \001(\004\022\014\n\004text\030\002 \001(\t\022\r\n\005voice\030\003 \001(\014\022\035\n\007"
    "channel\030\004 \001(\0162\014.TMsgChannel\022\022\n\nchannel_i"
    "d\030\005 \001(\r\022\020\n\010username\030\006 \001(\t\022\025\n\rhead_portra"
    "it\030\007 \001(\r\022\014\n\004face\030\010 \001(\r\022\014\n\004name\030\t \001(\t\"<\n\006"
    "MsgTip\022\017\n\007src_pid\030\001 \001(\004\022\017\n\007dec_pid\030\002 \001(\004"
    "\022\020\n\010tip_type\030\003 \001(\r\"8\n\006MsgKPI\022\033\n\010kpi_type"
    "\030\001 \001(\0162\t.TKPIType\022\021\n\tkpi_value\030\002 \001(\014\")\n\013"
    "MsgKPICount\022\032\n\tkpi_count\030\001 \003(\0132\007.MsgKPI\""
    "C\n\013MsgRoulette\022\r\n\005angle\030\001 \001(\r\022\021\n\tadd_mon"
    "ey\030\002 \001(\004\022\022\n\ncurr_money\030\003 \001(\004\"4\n\rMsgViewe"
    "rlist\022#\n\013player_list\030\001 \003(\0132\016.MsgPlayerIn"
    "fo\"u\n\020MsgShopBonusInfo\022\017\n\007item_id\030\001 \001(\r\022"
    "\016\n\006weight\030\002 \001(\r\022\r\n\005bonus\030\003 \001(\002\022\014\n\004time\030\004"
    " \001(\r\022\020\n\010base_rmb\030\005 \001(\004\022\021\n\trmb_bonus\030\006 \001("
    "\001\"9\n\013MsgShopInfo\022*\n\017shop_bonus_info\030\001 \003("
    "\0132\021.MsgShopBonusInfo\"Z\n\017MsgRoomInfoList\022"
    "\021\n\troom_type\030\001 \001(\t\022\016\n\006timeID\030\002 \001(\r\022\020\n\010ro"
    "om_num\030\003 \001(\r\022\022\n\nplayer_num\030\004 \001(\r\"D\n\020MsgA"
    "pplyRoomList\022\021\n\troom_type\030\001 \001(\t\022\016\n\006timeI"
    "D\030\002 \001(\r\022\r\n\005state\030\003 \001(\r\"l\n\013MsgRoomInfo\022\021\n"
    "\tgame_type\030\001 \001(\t\022#\n\tinfo_list\030\002 \003(\0132\020.Ms"
    "gRoomInfoList\022%\n\napply_list\030\003 \003(\0132\021.MsgA"
    "pplyRoomList\"/\n\022MsgCBJRankInfoList\022\013\n\003pi"
    "d\030\001 \001(\004\022\014\n\004rank\030\002 \001(\r\"8\n\016MsgCBJRankInfo\022"
    "&\n\tinfo_list\030\001 \003(\0132\023.MsgCBJRankInfoList\""
    "M\n\014MsgFreeMoney\022\026\n\016free_money_num\030\001 \001(\r\022"
    "\021\n\tadd_money\030\002 \001(\004\022\022\n\ncurr_money\030\003 \001(\004\"_"
    "\n\022MsgAchievementInfo\022\026\n\016achievement_id\030\001"
    " \001(\r\022!\n\005state\030\002 \001(\0162\022.TAchievementState\022"
    "\016\n\006target\030\003 \001(\004\"R\n\022MsgAchievementList\022-\n"
    "\020achievement_list\030\001 \003(\0132\023.MsgAchievement"
    "Info\022\r\n\005check\030\002 \001(\r\".\n\026MsgCompleteAchiev"
    "ement\022\024\n\014achievements\030\001 \001(\014\"9\n\021MsgStatis"
    "ticsInfo\022\025\n\rstatistics_id\030\001 \001(\r\022\r\n\005count"
    "\030\002 \001(\022\"Q\n\021MsgStatisticsList\022+\n\017statistic"
    "s_list\030\001 \003(\0132\022.MsgStatisticsInfo\022\017\n\007role"
    "_id\030\002 \001(\004\"2\n\013MsgJackpots\022\021\n\tgame_type\030\001 "
    "\001(\t\022\020\n\010jackpots\030\002 \001(\001\"0\n\016MsgAllJackpots\022"
    "\036\n\010jackpots\030\001 \003(\0132\014.MsgJackpots\"V\n\007MsgGi"
    "ft\022\017\n\007src_pid\030\001 \001(\004\022\017\n\007dec_pid\030\002 \001(\004\022\021\n\t"
    "tip_money\030\003 \001(\r\022\026\n\016src_curr_money\030\004 \001(\004\""
    "-\n\nMsgResGift\022\014\n\004name\030\001 \001(\t\022\021\n\ttip_money"
    "\030\002 \001(\r\"G\n\023MsgSearchPlayerInfo\022\014\n\004name\030\001 "
    "\001(\t\022\025\n\rhead_portrait\030\002 \001(\r\022\013\n\003sex\030\003 \001(\r\""
    "o\n\016Msg7DaysReward\022\r\n\005money\030\001 \001(\004\022\013\n\003rmb\030"
    "\002 \001(\004\022\033\n\titem_list\030\003 \003(\0132\010.MsgItem\022\021\n\tin"
    "tergral\030\004 \001(\004\022\021\n\twhich_day\030\005 \001(\r\"E\n\014MsgI"
    "temParam\022&\n\004type\030\001 \002(\0162\030.ATTRIB_TYPE.TAt"
    "tribType\022\r\n\005value\030\002 \001(\022\"p\n\007MsgItem\022\017\n\007it"
    "em_id\030\001 \001(\006\022\023\n\013template_id\030\002 \001(\r\022\013\n\003num\030"
    "\003 \001(\r\022\020\n\010con_type\030\004 \001(\r\022 \n\tItemParam\030\005 \003"
    "(\0132\r.MsgItemParam\")\n\013MsgItemCont\022\032\n\010msg_"
    "item\030\001 \003(\0132\010.MsgItem\"4\n\013MsgLimitUse\022\023\n\013t"
    "emplate_id\030\001 \001(\r\022\020\n\010use_time\030\002 \001(\r\"5\n\017Ms"
    "gLimitUseCont\022\"\n\014msg_limituse\030\001 \003(\0132\014.Ms"
    "gLimitUse\"J\n\013MsgSellItem\022\023\n\013template_id\030"
    "\001 \001(\r\022\022\n\nitem_count\030\002 \001(\r\022\022\n\nsell_count\030"
    "\003 \001(\r\"\\\n\nMsgUseItem\022\023\n\013template_id\030\001 \001(\r"
    "\022\022\n\nitem_count\030\002 \001(\r\022\021\n\tuse_count\030\003 \001(\r\022"
    "\022\n\nuse_target\030\004 \003(\004\"\177\n\020MsgUseItemUpdate\022"
    "\r\n\005money\030\001 \001(\004\022\033\n\titem_info\030\002 \003(\0132\010.MsgI"
    "tem\022\032\n\010item_add\030\003 \003(\0132\010.MsgItem\022\017\n\007use_p"
    "id\030\004 \001(\004\022\022\n\nuse_target\030\005 \003(\004\"\?\n\021MsgSellI"
    "temUpdate\022\r\n\005money\030\001 \001(\004\022\033\n\titem_info\030\002 "
    "\003(\0132\010.MsgItem\"Q\n\013MsgAddItems\022\021\n\tadd_mone"
    "y\030\001 \001(\004\022\022\n\ncurr_money\030\002 \001(\004\022\033\n\tadd_items"
    "\030\003 \003(\0132\010.MsgItem\"~\n\021MsgQualifyingInfo\022\022\n"
    "\nmatch_name\030\001 \001(\t\022\023\n\013match_score\030\002 \001(\r\022\031"
    "\n\021match_creditscore\030\003 \001(\r\022\021\n\tmatch_dan\030\004"
    " \001(\r\022\022\n\nmatch_star\030\005 \001(\r\"A\n\022MsgQualifyin"
    "gCount\022+\n\017qualifying_list\030\001 \003(\0132\022.MsgQua"
    "lifyingInfo\"R\n\016MsgShareReward\022#\n\013player_"
    "info\030\001 \001(\0132\016.MsgPlayerInfo\022\033\n\tadd_items\030"
    "\002 \003(\0132\010.MsgItem\"i\n\023MsgBindFriendReward\022\017"
    "\n\007dst_pid\030\001 \001(\004\022\021\n\tdst_state\030\002 \001(\r\022\021\n\tds"
    "t_count\030\003 \001(\r\022\033\n\tadd_items\030\004 \003(\0132\010.MsgIt"
    "em\"c\n\022MsgSaveAccountInfo\022\013\n\003pid\030\001 \001(\004\022\r\n"
    "\005email\030\002 \001(\t\022\016\n\006mobile\030\003 \001(\t\022\r\n\005phone\030\004 "
    "\001(\t\022\022\n\003sex\030\005 \001(\0162\005.TSex\"S\n\016MsgMissionInf"
    "o\022\022\n\nmission_id\030\001 \001(\r\022\016\n\006target\030\002 \001(\004\022\035\n"
    "\005state\030\003 \001(\0162\016.TMissionState\"F\n\016MsgMissi"
    "onList\022%\n\014mission_list\030\001 \003(\0132\017.MsgMissio"
    "nInfo\022\r\n\005check\030\002 \001(\r\"^\n\020MsgMissionReward"
    "\022\022\n\nmission_id\030\001 \001(\r\022\r\n\005money\030\002 \001(\004\022\013\n\003r"
    "mb\030\003 \001(\004\022\032\n\010msg_item\030\004 \003(\0132\010.MsgItem\"\037\n\016"
    "MsgRequestList\022\r\n\005check\030\001 \001(\r\"5\n\017MsgStor"
    "eBuyItem\022\023\n\013template_id\030\001 \001(\r\022\r\n\005count\030\002"
    " \001(\r\"n\n\023MsgStoreBuyItemInfo\022\r\n\005money\030\001 \001"
    "(\003\022\013\n\003rmb\030\002 \001(\003\022\032\n\010msg_item\030\003 \003(\0132\010.MsgI"
    "tem\022\020\n\010vip_time\030\004 \001(\r\022\r\n\005point\030\005 \001(\r\"f\n\024"
    "MsgAchievementReward\022\026\n\016achievement_id\030\001"
    " \001(\r\022\r\n\005money\030\002 \001(\003\022\013\n\003rmb\030\003 \001(\003\022\032\n\010msg_"
    "item\030\004 \003(\0132\010.MsgItem\":\n\025MsgBaseRoomPlaye"
    "rInfo\022\013\n\003pid\030\001 \001(\004\022\024\n\014item_tip_tid\030\002 \003(\r"
    "\"q\n\017MsgBaseRoomInfo\0220\n\020base_player_info\030"
    "\001 \003(\0132\026.MsgBaseRoomPlayerInfo\022\024\n\014envelop"
    "e_ids\030\002 \003(\004\022\026\n\016split_gift_ids\030\003 \003(\004\"1\n\026M"
    "sgQuickUnlockIconInfo\022\013\n\003rmb\030\001 \001(\004\022\n\n\002id"
    "\030\002 \001(\r\"=\n\021MsgUnlockIconInfo\022\024\n\014curr_icon"
    "_id\030\001 \001(\r\022\022\n\nstart_time\030\002 \001(\r\"/\n\022MsgActi"
    "vateIconSet\022\031\n\021activate_icon_set\030\001 \001(\014\"U"
    "\n\020MsgUnlockIconSet\022\024\n\014curr_icon_id\030\001 \001(\r"
    "\022\022\n\nstart_time\030\002 \001(\r\022\027\n\017unlock_icon_set\030"
    "\003 \001(\014\"H\n\026MsgIconSetProgressInfo\022\025\n\ricon_"
    "progress\030\001 \001(\r\022\027\n\017target_progress\030\002 \001(\r\""
    "\361\001\n\024MsgCreatePrivateRoom\022\022\n\nconsume_id\030\001"
    " \001(\r\022&\n\014consume_kind\030\002 \001(\0162\020.TGameConsum"
    "ePay\022\021\n\troom_type\030\003 \001(\t\022\024\n\014special_kind\030"
    "\004 \001(\r\022\r\n\005score\030\005 \001(\r\022\025\n\rgame_versione\030\006 "
    "\001(\r\022$\n\010pay_ment\030\007 \001(\0162\022.TPaymentMechanis"
    "m\022\025\n\rplayer_number\030\010 \001(\r\022\021\n\ttissue_id\030\t "
    "\001(\004\"O\n\023MsgEnterPrivateRoom\022\017\n\007room_id\030\001 "
    "\001(\004\022\020\n\010app_name\030\002 \001(\t\022\025\n\rgame_versione\030\003"
    " \001(\r\"4\n\010MsgCards\022\031\n\004suit\030\001 \001(\0162\013.TCardsT"
    "ype\022\r\n\005index\030\002 \001(\r\"\305\001\n\016MsgGetEnvelope\022\021\n"
    "\tunique_id\030\001 \001(\004\022\024\n\014dec_ply_name\030\002 \001(\t\022\024"
    "\n\014src_ply_name\030\003 \001(\t\022\r\n\005money\030\004 \001(\004\022\016\n\006c"
    "oupon\030\005 \001(\004\022\022\n\nleft_count\030\006 \001(\r\022\025\n\rdec_p"
    "ly_money\030\007 \001(\004\022\026\n\016dec_ply_coupon\030\010 \001(\004\022\022"
    "\n\ndec_ply_id\030\t \001(\004\"=\n\013MsgUseSkill\022\021\n\tski"
    "ll_tid\030\001 \001(\r\022\033\n\titem_info\030\002 \003(\0132\010.MsgIte"
    "m\"q\n\021MsgRecordRoomInfo\022\024\n\014special_kind\030\001"
    " \001(\r\022\016\n\006banker\030\002 \001(\004\022\r\n\005score\030\003 \001(\r\022\022\n\ng"
    "ame_count\030\004 \001(\r\022\023\n\013bottom_card\030\005 \003(\r\"\255\001\n"
    "\021MsgRecordRoleInfo\022\n\n\002id\030\001 \001(\004\022\014\n\004seat\030\002"
    " \001(\r\022\017\n\007usename\030\003 \001(\t\022\r\n\005score\030\004 \001(\003\022\021\n\t"
    "hand_card\030\005 \003(\r\022\021\n\tnick_name\030\006 \001(\t\022\021\n\tTe"
    "am_type\030\007 \001(\r\022\016\n\006series\030\010 \001(\r\022\025\n\rcurrent"
    "_score\030\t \001(\003\"U\n\016MsgRecordEvent\022\020\n\010event_"
    "id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\r\n\005score\030\003 \003(\005\022\023"
    "\n\013score_count\030\004 \003(\r\"\263\002\n\021MsgRecordShowDow"
    "n\022\n\n\002id\030\001 \001(\004\022\r\n\005score\030\002 \001(\003\022\022\n\nfixedsco"
    "re\030\003 \001(\003\022\016\n\006param1\030\004 \001(\003\022\016\n\006param2\030\005 \001(\003"
    "\022\016\n\006hucard\030\006 \001(\r\022\036\n\005event\030\007 \003(\0132\017.MsgRec"
    "ordEvent\022\r\n\005money\030\010 \001(\003\022\016\n\006param3\030\t \001(\003\022"
    "\016\n\006param4\030\n \001(\003\022\016\n\006param5\030\013 \001(\003\022\017\n\007play_"
    "id\030\014 \001(\003\022\021\n\thand_card\030\r \003(\r\022\'\n\nweave_car"
    "d\030\016 \003(\0132\023.MsgRecordWeaveCard\022\023\n\013hucard_l"
    "ist\030\017 \003(\r\"R\n\022MsgRecordWeaveCard\022\014\n\004card\030"
    "\001 \001(\r\022\013\n\003wik\030\002 \001(\r\022\017\n\007barkind\030\003 \001(\r\022\020\n\010m"
    "ix_card\030\004 \003(\r\";\n\017MsgRecordIdList\022\026\n\016reco"
    "rd_id_list\030\001 \003(\004\022\020\n\010fight_id\030\002 \001(\004\"\253\003\n\021M"
    "sgRecordNodeList\022\016\n\006cmd_id\030\001 \001(\r\022\022\n\ncard"
    "_value\030\002 \003(\r\022\022\n\ncard_index\030\003 \001(\r\022\021\n\tacti"
    "on_id\030\004 \001(\004\022\022\n\naction_wik\030\005 \001(\r\022\021\n\ttarge"
    "t_id\030\006 \001(\004\022\021\n\tnode_size\030\007 \001(\r\022%\n\trole_da"
    "ta\030\010 \003(\0132\022.MsgRecordRoleInfo\022%\n\troom_dat"
    "a\030\t \001(\0132\022.MsgRecordRoomInfo\022)\n\rshowdown_"
    "list\030\n \003(\0132\022.MsgRecordShowDown\022%\n\tnext_n"
    "ode\030\013 \003(\0132\022.MsgRecordNodeList\022$\n\010win_rol"
    "e\030\014 \003(\0132\022.MsgGDShowDownRole\022%\n\tlost_role"
    "\030\r \003(\0132\022.MsgGDShowDownRole\022$\n\014room_ranki"
    "ng\030\016 \001(\0132\016.MsgGDRankInfo\"|\n\022MsgRecordNod"
    "eCount\022,\n\020record_node_list\030\001 \001(\0132\022.MsgRe"
    "cordNodeList\022\022\n\ngame_count\030\002 \001(\r\022\021\n\treco"
    "rd_id\030\003 \001(\004\022\021\n\troom_type\030\004 \001(\t\"}\n\021MsgFig"
    "htingRecord\022\021\n\troom_type\030\001 \001(\t\022\017\n\007room_i"
    "d\030\002 \001(\004\022\014\n\004time\030\003 \001(\r\022\017\n\007content\030\004 \001(\t\022\022"
    "\n\nconsume_id\030\005 \001(\r\022\021\n\trecord_id\030\006 \001(\004\"O\n"
    "\026MsgFightingRecordCount\022&\n\nrecordlist\030\001 "
    "\003(\0132\022.MsgFightingRecord\022\r\n\005count\030\002 \001(\r\"M"
    "\n\026MsgRecordScoreDataList\0223\n\021record_score"
    "_list\030\001 \003(\0132\030.MsgRecordScoreCountList\"\200\001"
    "\n\027MsgRecordScoreCountList\022)\n\013score_count"
    "\030\001 \003(\0132\024.MsgRecordScoreCount\022\'\n\nname_cou"
    "nt\030\002 \003(\0132\023.MsgRecordNameCount\022\021\n\trecord_"
    "id\030\003 \001(\004\":\n\023MsgRecordScoreCount\022#\n\nscore"
    "_list\030\001 \003(\0132\017.MsgRecordScore\"7\n\022MsgRecor"
    "dNameCount\022!\n\tname_list\030\001 \003(\0132\016.MsgRecor"
    "dName\"*\n\rMsgRecordName\022\014\n\004name\030\001 \001(\t\022\013\n\003"
    "pid\030\002 \001(\004\",\n\016MsgRecordScore\022\r\n\005score\030\001 \001"
    "(\022\022\013\n\003pid\030\002 \001(\r\";\n\020MsgDistanceCount\022\'\n\rd"
    "istance_list\030\001 \003(\0132\020.MsgDistanceInfo\"F\n\017"
    "MsgDistanceInfo\022\013\n\003pid\030\001 \001(\004\022\022\n\ndistance"
    "_x\030\002 \001(\001\022\022\n\ndistance_y\030\003 \001(\001\"n\n\021MsgGDSho"
    "wDownRole\022\017\n\007role_id\030\001 \001(\004\022\022\n\ngame_count"
    "\030\002 \001(\r\022\016\n\006series\030\003 \001(\r\022\r\n\005score\030\004 \001(\005\022\025\n"
    "\rcurrent_score\030\005 \001(\005\"\"\n\rMsgGDRankInfo\022\021\n"
    "\trank_list\030\001 \003(\004\")\n\tMsgSignIn\022\013\n\003day\030\001 \001"
    "(\r\022\017\n\007SignTag\030\002 \001(\010\".\n\014MsgRoleState\022\017\n\007r"
    "ole_id\030\001 \001(\004\022\r\n\005state\030\002 \001(\r\"6\n\021MsgRoleSt"
    "ateCount\022!\n\nrole_state\030\001 \003(\0132\r.MsgRoleSt"
    "ate\"/\n\013MsgRoleHost\022\017\n\007role_id\030\001 \001(\004\022\017\n\007h"
    "ost_id\030\002 \001(\r\"G\n\020MsgRoleHostCount\022\022\n\nrole"
    "_state\030\001 \001(\r\022\037\n\thost_list\030\002 \003(\0132\014.MsgRol"
    "eHost*]\n\013TMsgChannel\022\016\n\nMSG_SYSTEM\020\000\022\014\n\010"
    "MSG_CHAT\020\001\022\014\n\010MSG_PUSH\020\003\022\021\n\rMSG_PAOMADEN"
    "G\020\004\022\017\n\013MSG_PRIVATE\020\005", 10300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_pro.proto", &protobuf_RegisterTypes);
  MsgPlayerInfo::default_instance_ = new MsgPlayerInfo();
  MsgViewPlayersList::default_instance_ = new MsgViewPlayersList();
  MsgVector::default_instance_ = new MsgVector();
  MsgPlayerState::default_instance_ = new MsgPlayerState();
  MsgChampionship::default_instance_ = new MsgChampionship();
  MsgChampionshipList::default_instance_ = new MsgChampionshipList();
  MsgGameinfo::default_instance_ = new MsgGameinfo();
  MsgVLP::default_instance_ = new MsgVLP();
  MsgLogin::default_instance_ = new MsgLogin();
  MsgCreatePlayer::default_instance_ = new MsgCreatePlayer();
  MsgLoadPlayer::default_instance_ = new MsgLoadPlayer();
  MsgInt::default_instance_ = new MsgInt();
  MsgBool::default_instance_ = new MsgBool();
  MsgString::default_instance_ = new MsgString();
  MsgSystem::default_instance_ = new MsgSystem();
  MsgUpdateValue::default_instance_ = new MsgUpdateValue();
  MsgSetSession::default_instance_ = new MsgSetSession();
  MsgEnterGame::default_instance_ = new MsgEnterGame();
  MsgReward::default_instance_ = new MsgReward();
  MsgRankingPlayer::default_instance_ = new MsgRankingPlayer();
  MsgRankingTop::default_instance_ = new MsgRankingTop();
  MsgPrizePool::default_instance_ = new MsgPrizePool();
  MsgChat::default_instance_ = new MsgChat();
  MsgTip::default_instance_ = new MsgTip();
  MsgKPI::default_instance_ = new MsgKPI();
  MsgKPICount::default_instance_ = new MsgKPICount();
  MsgRoulette::default_instance_ = new MsgRoulette();
  MsgViewerlist::default_instance_ = new MsgViewerlist();
  MsgShopBonusInfo::default_instance_ = new MsgShopBonusInfo();
  MsgShopInfo::default_instance_ = new MsgShopInfo();
  MsgRoomInfoList::default_instance_ = new MsgRoomInfoList();
  MsgApplyRoomList::default_instance_ = new MsgApplyRoomList();
  MsgRoomInfo::default_instance_ = new MsgRoomInfo();
  MsgCBJRankInfoList::default_instance_ = new MsgCBJRankInfoList();
  MsgCBJRankInfo::default_instance_ = new MsgCBJRankInfo();
  MsgFreeMoney::default_instance_ = new MsgFreeMoney();
  MsgAchievementInfo::default_instance_ = new MsgAchievementInfo();
  MsgAchievementList::default_instance_ = new MsgAchievementList();
  MsgCompleteAchievement::default_instance_ = new MsgCompleteAchievement();
  MsgStatisticsInfo::default_instance_ = new MsgStatisticsInfo();
  MsgStatisticsList::default_instance_ = new MsgStatisticsList();
  MsgJackpots::default_instance_ = new MsgJackpots();
  MsgAllJackpots::default_instance_ = new MsgAllJackpots();
  MsgGift::default_instance_ = new MsgGift();
  MsgResGift::default_instance_ = new MsgResGift();
  MsgSearchPlayerInfo::default_instance_ = new MsgSearchPlayerInfo();
  Msg7DaysReward::default_instance_ = new Msg7DaysReward();
  MsgItemParam::default_instance_ = new MsgItemParam();
  MsgItem::default_instance_ = new MsgItem();
  MsgItemCont::default_instance_ = new MsgItemCont();
  MsgLimitUse::default_instance_ = new MsgLimitUse();
  MsgLimitUseCont::default_instance_ = new MsgLimitUseCont();
  MsgSellItem::default_instance_ = new MsgSellItem();
  MsgUseItem::default_instance_ = new MsgUseItem();
  MsgUseItemUpdate::default_instance_ = new MsgUseItemUpdate();
  MsgSellItemUpdate::default_instance_ = new MsgSellItemUpdate();
  MsgAddItems::default_instance_ = new MsgAddItems();
  MsgQualifyingInfo::default_instance_ = new MsgQualifyingInfo();
  MsgQualifyingCount::default_instance_ = new MsgQualifyingCount();
  MsgShareReward::default_instance_ = new MsgShareReward();
  MsgBindFriendReward::default_instance_ = new MsgBindFriendReward();
  MsgSaveAccountInfo::default_instance_ = new MsgSaveAccountInfo();
  MsgMissionInfo::default_instance_ = new MsgMissionInfo();
  MsgMissionList::default_instance_ = new MsgMissionList();
  MsgMissionReward::default_instance_ = new MsgMissionReward();
  MsgRequestList::default_instance_ = new MsgRequestList();
  MsgStoreBuyItem::default_instance_ = new MsgStoreBuyItem();
  MsgStoreBuyItemInfo::default_instance_ = new MsgStoreBuyItemInfo();
  MsgAchievementReward::default_instance_ = new MsgAchievementReward();
  MsgBaseRoomPlayerInfo::default_instance_ = new MsgBaseRoomPlayerInfo();
  MsgBaseRoomInfo::default_instance_ = new MsgBaseRoomInfo();
  MsgQuickUnlockIconInfo::default_instance_ = new MsgQuickUnlockIconInfo();
  MsgUnlockIconInfo::default_instance_ = new MsgUnlockIconInfo();
  MsgActivateIconSet::default_instance_ = new MsgActivateIconSet();
  MsgUnlockIconSet::default_instance_ = new MsgUnlockIconSet();
  MsgIconSetProgressInfo::default_instance_ = new MsgIconSetProgressInfo();
  MsgCreatePrivateRoom::default_instance_ = new MsgCreatePrivateRoom();
  MsgEnterPrivateRoom::default_instance_ = new MsgEnterPrivateRoom();
  MsgCards::default_instance_ = new MsgCards();
  MsgGetEnvelope::default_instance_ = new MsgGetEnvelope();
  MsgUseSkill::default_instance_ = new MsgUseSkill();
  MsgRecordRoomInfo::default_instance_ = new MsgRecordRoomInfo();
  MsgRecordRoleInfo::default_instance_ = new MsgRecordRoleInfo();
  MsgRecordEvent::default_instance_ = new MsgRecordEvent();
  MsgRecordShowDown::default_instance_ = new MsgRecordShowDown();
  MsgRecordWeaveCard::default_instance_ = new MsgRecordWeaveCard();
  MsgRecordIdList::default_instance_ = new MsgRecordIdList();
  MsgRecordNodeList::default_instance_ = new MsgRecordNodeList();
  MsgRecordNodeCount::default_instance_ = new MsgRecordNodeCount();
  MsgFightingRecord::default_instance_ = new MsgFightingRecord();
  MsgFightingRecordCount::default_instance_ = new MsgFightingRecordCount();
  MsgRecordScoreDataList::default_instance_ = new MsgRecordScoreDataList();
  MsgRecordScoreCountList::default_instance_ = new MsgRecordScoreCountList();
  MsgRecordScoreCount::default_instance_ = new MsgRecordScoreCount();
  MsgRecordNameCount::default_instance_ = new MsgRecordNameCount();
  MsgRecordName::default_instance_ = new MsgRecordName();
  MsgRecordScore::default_instance_ = new MsgRecordScore();
  MsgDistanceCount::default_instance_ = new MsgDistanceCount();
  MsgDistanceInfo::default_instance_ = new MsgDistanceInfo();
  MsgGDShowDownRole::default_instance_ = new MsgGDShowDownRole();
  MsgGDRankInfo::default_instance_ = new MsgGDRankInfo();
  MsgSignIn::default_instance_ = new MsgSignIn();
  MsgRoleState::default_instance_ = new MsgRoleState();
  MsgRoleStateCount::default_instance_ = new MsgRoleStateCount();
  MsgRoleHost::default_instance_ = new MsgRoleHost();
  MsgRoleHostCount::default_instance_ = new MsgRoleHostCount();
  MsgPlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgViewPlayersList::default_instance_->InitAsDefaultInstance();
  MsgVector::default_instance_->InitAsDefaultInstance();
  MsgPlayerState::default_instance_->InitAsDefaultInstance();
  MsgChampionship::default_instance_->InitAsDefaultInstance();
  MsgChampionshipList::default_instance_->InitAsDefaultInstance();
  MsgGameinfo::default_instance_->InitAsDefaultInstance();
  MsgVLP::default_instance_->InitAsDefaultInstance();
  MsgLogin::default_instance_->InitAsDefaultInstance();
  MsgCreatePlayer::default_instance_->InitAsDefaultInstance();
  MsgLoadPlayer::default_instance_->InitAsDefaultInstance();
  MsgInt::default_instance_->InitAsDefaultInstance();
  MsgBool::default_instance_->InitAsDefaultInstance();
  MsgString::default_instance_->InitAsDefaultInstance();
  MsgSystem::default_instance_->InitAsDefaultInstance();
  MsgUpdateValue::default_instance_->InitAsDefaultInstance();
  MsgSetSession::default_instance_->InitAsDefaultInstance();
  MsgEnterGame::default_instance_->InitAsDefaultInstance();
  MsgReward::default_instance_->InitAsDefaultInstance();
  MsgRankingPlayer::default_instance_->InitAsDefaultInstance();
  MsgRankingTop::default_instance_->InitAsDefaultInstance();
  MsgPrizePool::default_instance_->InitAsDefaultInstance();
  MsgChat::default_instance_->InitAsDefaultInstance();
  MsgTip::default_instance_->InitAsDefaultInstance();
  MsgKPI::default_instance_->InitAsDefaultInstance();
  MsgKPICount::default_instance_->InitAsDefaultInstance();
  MsgRoulette::default_instance_->InitAsDefaultInstance();
  MsgViewerlist::default_instance_->InitAsDefaultInstance();
  MsgShopBonusInfo::default_instance_->InitAsDefaultInstance();
  MsgShopInfo::default_instance_->InitAsDefaultInstance();
  MsgRoomInfoList::default_instance_->InitAsDefaultInstance();
  MsgApplyRoomList::default_instance_->InitAsDefaultInstance();
  MsgRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgCBJRankInfoList::default_instance_->InitAsDefaultInstance();
  MsgCBJRankInfo::default_instance_->InitAsDefaultInstance();
  MsgFreeMoney::default_instance_->InitAsDefaultInstance();
  MsgAchievementInfo::default_instance_->InitAsDefaultInstance();
  MsgAchievementList::default_instance_->InitAsDefaultInstance();
  MsgCompleteAchievement::default_instance_->InitAsDefaultInstance();
  MsgStatisticsInfo::default_instance_->InitAsDefaultInstance();
  MsgStatisticsList::default_instance_->InitAsDefaultInstance();
  MsgJackpots::default_instance_->InitAsDefaultInstance();
  MsgAllJackpots::default_instance_->InitAsDefaultInstance();
  MsgGift::default_instance_->InitAsDefaultInstance();
  MsgResGift::default_instance_->InitAsDefaultInstance();
  MsgSearchPlayerInfo::default_instance_->InitAsDefaultInstance();
  Msg7DaysReward::default_instance_->InitAsDefaultInstance();
  MsgItemParam::default_instance_->InitAsDefaultInstance();
  MsgItem::default_instance_->InitAsDefaultInstance();
  MsgItemCont::default_instance_->InitAsDefaultInstance();
  MsgLimitUse::default_instance_->InitAsDefaultInstance();
  MsgLimitUseCont::default_instance_->InitAsDefaultInstance();
  MsgSellItem::default_instance_->InitAsDefaultInstance();
  MsgUseItem::default_instance_->InitAsDefaultInstance();
  MsgUseItemUpdate::default_instance_->InitAsDefaultInstance();
  MsgSellItemUpdate::default_instance_->InitAsDefaultInstance();
  MsgAddItems::default_instance_->InitAsDefaultInstance();
  MsgQualifyingInfo::default_instance_->InitAsDefaultInstance();
  MsgQualifyingCount::default_instance_->InitAsDefaultInstance();
  MsgShareReward::default_instance_->InitAsDefaultInstance();
  MsgBindFriendReward::default_instance_->InitAsDefaultInstance();
  MsgSaveAccountInfo::default_instance_->InitAsDefaultInstance();
  MsgMissionInfo::default_instance_->InitAsDefaultInstance();
  MsgMissionList::default_instance_->InitAsDefaultInstance();
  MsgMissionReward::default_instance_->InitAsDefaultInstance();
  MsgRequestList::default_instance_->InitAsDefaultInstance();
  MsgStoreBuyItem::default_instance_->InitAsDefaultInstance();
  MsgStoreBuyItemInfo::default_instance_->InitAsDefaultInstance();
  MsgAchievementReward::default_instance_->InitAsDefaultInstance();
  MsgBaseRoomPlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgBaseRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgQuickUnlockIconInfo::default_instance_->InitAsDefaultInstance();
  MsgUnlockIconInfo::default_instance_->InitAsDefaultInstance();
  MsgActivateIconSet::default_instance_->InitAsDefaultInstance();
  MsgUnlockIconSet::default_instance_->InitAsDefaultInstance();
  MsgIconSetProgressInfo::default_instance_->InitAsDefaultInstance();
  MsgCreatePrivateRoom::default_instance_->InitAsDefaultInstance();
  MsgEnterPrivateRoom::default_instance_->InitAsDefaultInstance();
  MsgCards::default_instance_->InitAsDefaultInstance();
  MsgGetEnvelope::default_instance_->InitAsDefaultInstance();
  MsgUseSkill::default_instance_->InitAsDefaultInstance();
  MsgRecordRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgRecordRoleInfo::default_instance_->InitAsDefaultInstance();
  MsgRecordEvent::default_instance_->InitAsDefaultInstance();
  MsgRecordShowDown::default_instance_->InitAsDefaultInstance();
  MsgRecordWeaveCard::default_instance_->InitAsDefaultInstance();
  MsgRecordIdList::default_instance_->InitAsDefaultInstance();
  MsgRecordNodeList::default_instance_->InitAsDefaultInstance();
  MsgRecordNodeCount::default_instance_->InitAsDefaultInstance();
  MsgFightingRecord::default_instance_->InitAsDefaultInstance();
  MsgFightingRecordCount::default_instance_->InitAsDefaultInstance();
  MsgRecordScoreDataList::default_instance_->InitAsDefaultInstance();
  MsgRecordScoreCountList::default_instance_->InitAsDefaultInstance();
  MsgRecordScoreCount::default_instance_->InitAsDefaultInstance();
  MsgRecordNameCount::default_instance_->InitAsDefaultInstance();
  MsgRecordName::default_instance_->InitAsDefaultInstance();
  MsgRecordScore::default_instance_->InitAsDefaultInstance();
  MsgDistanceCount::default_instance_->InitAsDefaultInstance();
  MsgDistanceInfo::default_instance_->InitAsDefaultInstance();
  MsgGDShowDownRole::default_instance_->InitAsDefaultInstance();
  MsgGDRankInfo::default_instance_->InitAsDefaultInstance();
  MsgSignIn::default_instance_->InitAsDefaultInstance();
  MsgRoleState::default_instance_->InitAsDefaultInstance();
  MsgRoleStateCount::default_instance_->InitAsDefaultInstance();
  MsgRoleHost::default_instance_->InitAsDefaultInstance();
  MsgRoleHostCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_public_5fpro_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_public_5fpro_2eproto {
  StaticDescriptorInitializer_public_5fpro_2eproto() {
    protobuf_AddDesc_public_5fpro_2eproto();
  }
} static_descriptor_initializer_public_5fpro_2eproto_;
const ::google::protobuf::EnumDescriptor* TMsgChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMsgChannel_descriptor_;
}
bool TMsgChannel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerInfo::kPidFieldNumber;
const int MsgPlayerInfo::kNameFieldNumber;
const int MsgPlayerInfo::kLevelFieldNumber;
const int MsgPlayerInfo::kVipExpFieldNumber;
const int MsgPlayerInfo::kMoneyFieldNumber;
const int MsgPlayerInfo::kSexFieldNumber;
const int MsgPlayerInfo::kFlagBitFieldNumber;
const int MsgPlayerInfo::kUsernameFieldNumber;
const int MsgPlayerInfo::kChannelIdFieldNumber;
const int MsgPlayerInfo::kRouletteMoneyFieldNumber;
const int MsgPlayerInfo::kRouletteRateFieldNumber;
const int MsgPlayerInfo::kRouletteMoneyTimeFieldNumber;
const int MsgPlayerInfo::kRouletteRateTimeFieldNumber;
const int MsgPlayerInfo::kUidFieldNumber;
const int MsgPlayerInfo::kWatchAdsNumberFieldNumber;
const int MsgPlayerInfo::kWatchAdsTimeFieldNumber;
const int MsgPlayerInfo::kHeadPortraitFieldNumber;
const int MsgPlayerInfo::kDynamicMsgFieldNumber;
const int MsgPlayerInfo::kCreateTimeFieldNumber;
const int MsgPlayerInfo::kRmbFieldNumber;
const int MsgPlayerInfo::kLikeFieldNumber;
const int MsgPlayerInfo::kExpFieldNumber;
const int MsgPlayerInfo::kLastIpFieldNumber;
const int MsgPlayerInfo::kVipLevelFieldNumber;
const int MsgPlayerInfo::kVipExp0FieldNumber;
const int MsgPlayerInfo::kLastGetBonusTimeFieldNumber;
const int MsgPlayerInfo::kViewPlayerListFieldNumber;
const int MsgPlayerInfo::kSafeBoxFieldNumber;
const int MsgPlayerInfo::kGetBonusCountFieldNumber;
const int MsgPlayerInfo::kCheckin7DayCountFieldNumber;
const int MsgPlayerInfo::kReward7DayTimeFieldNumber;
const int MsgPlayerInfo::kCollectTimeFieldNumber;
const int MsgPlayerInfo::kWeaponsLevelFieldNumber;
const int MsgPlayerInfo::kVipTimeFieldNumber;
const int MsgPlayerInfo::kRoomNameFieldNumber;
const int MsgPlayerInfo::kCouponFieldNumber;
const int MsgPlayerInfo::kVipTimeLevelFieldNumber;
const int MsgPlayerInfo::kGetVipRewardTimeFieldNumber;
const int MsgPlayerInfo::kPictureFrameFieldNumber;
const int MsgPlayerInfo::kPointFieldNumber;
const int MsgPlayerInfo::kProxyIdFieldNumber;
const int MsgPlayerInfo::kBindChannelIdFieldNumber;
#endif  // !_MSC_VER

MsgPlayerInfo::MsgPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPlayerInfo)
}

void MsgPlayerInfo::InitAsDefaultInstance() {
}

MsgPlayerInfo::MsgPlayerInfo(const MsgPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPlayerInfo)
}

void MsgPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  vip_exp_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  sex_ = 0u;
  flag_bit_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
  roulette_money_ = 0u;
  roulette_rate_ = 0;
  roulette_money_time_ = 0u;
  roulette_rate_time_ = 0u;
  uid_ = 0u;
  watch_ads_number_ = 0u;
  watch_ads_time_ = 0u;
  head_portrait_ = 0u;
  dynamic_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = 0u;
  rmb_ = GOOGLE_ULONGLONG(0);
  like_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  last_ip_ = 0u;
  vip_level_ = 0u;
  vip_exp_0_ = 0u;
  last_get_bonus_time_ = 0u;
  safe_box_ = GOOGLE_ULONGLONG(0);
  get_bonus_count_ = 0u;
  checkin_7day_count_ = GOOGLE_ULONGLONG(0);
  reward_7day_time_ = 0u;
  collect_time_ = 0u;
  weapons_level_ = 0u;
  vip_time_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coupon_ = GOOGLE_ULONGLONG(0);
  vip_time_level_ = 0u;
  get_vip_reward_time_ = 0u;
  picture_frame_ = 0u;
  point_ = 0u;
  proxy_id_ = GOOGLE_ULONGLONG(0);
  bind_channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerInfo::~MsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgPlayerInfo)
  SharedDtor();
}

void MsgPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (dynamic_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dynamic_msg_;
  }
  if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerInfo_descriptor_;
}

const MsgPlayerInfo& MsgPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgPlayerInfo* MsgPlayerInfo::default_instance_ = NULL;

MsgPlayerInfo* MsgPlayerInfo::New() const {
  return new MsgPlayerInfo;
}

void MsgPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(vip_exp_, flag_bit_);
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(channel_id_, watch_ads_time_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(head_portrait_, vip_level_);
    if (has_dynamic_msg()) {
      if (dynamic_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dynamic_msg_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4211081216) {
    ZR_(last_get_bonus_time_, collect_time_);
    vip_exp_0_ = 0u;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(weapons_level_, vip_time_);
    ZR_(coupon_, point_);
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_name_->clear();
      }
    }
  }
  ZR_(proxy_id_, bind_channel_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  view_player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_vip_exp;
        break;
      }

      // optional double vip_exp = 4;
      case 4: {
        if (tag == 33) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // optional sint64 money = 5;
      case 5: {
        if (tag == 40) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flag_bit;
        break;
      }

      // optional uint64 flag_bit = 7;
      case 7: {
        if (tag == 56) {
         parse_flag_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_bit_)));
          set_has_flag_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_username;
        break;
      }

      // optional string username = 8;
      case 8: {
        if (tag == 66) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 9;
      case 9: {
        if (tag == 72) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_roulette_money;
        break;
      }

      // optional uint32 roulette_money = 10;
      case 10: {
        if (tag == 80) {
         parse_roulette_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roulette_money_)));
          set_has_roulette_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_roulette_rate;
        break;
      }

      // optional float roulette_rate = 11;
      case 11: {
        if (tag == 93) {
         parse_roulette_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roulette_rate_)));
          set_has_roulette_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_roulette_money_time;
        break;
      }

      // optional uint32 roulette_money_time = 12;
      case 12: {
        if (tag == 96) {
         parse_roulette_money_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roulette_money_time_)));
          set_has_roulette_money_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_roulette_rate_time;
        break;
      }

      // optional uint32 roulette_rate_time = 13;
      case 13: {
        if (tag == 104) {
         parse_roulette_rate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roulette_rate_time_)));
          set_has_roulette_rate_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 14;
      case 14: {
        if (tag == 112) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_watch_ads_number;
        break;
      }

      // optional uint32 watch_ads_number = 15;
      case 15: {
        if (tag == 120) {
         parse_watch_ads_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watch_ads_number_)));
          set_has_watch_ads_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_watch_ads_time;
        break;
      }

      // optional uint32 watch_ads_time = 16;
      case 16: {
        if (tag == 128) {
         parse_watch_ads_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watch_ads_time_)));
          set_has_watch_ads_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 17;
      case 17: {
        if (tag == 136) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_dynamic_msg;
        break;
      }

      // optional string dynamic_msg = 18;
      case 18: {
        if (tag == 146) {
         parse_dynamic_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamic_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dynamic_msg().data(), this->dynamic_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dynamic_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 19;
      case 19: {
        if (tag == 152) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_rmb;
        break;
      }

      // optional uint64 rmb = 20;
      case 20: {
        if (tag == 160) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_like;
        break;
      }

      // optional uint32 like = 21;
      case 21: {
        if (tag == 168) {
         parse_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_)));
          set_has_like();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 22;
      case 22: {
        if (tag == 176) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_last_ip;
        break;
      }

      // optional uint32 last_ip = 23;
      case 23: {
        if (tag == 184) {
         parse_last_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ip_)));
          set_has_last_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 24;
      case 24: {
        if (tag == 192) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_vip_exp_0;
        break;
      }

      // optional uint32 vip_exp_0 = 25;
      case 25: {
        if (tag == 200) {
         parse_vip_exp_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_0_)));
          set_has_vip_exp_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_last_get_bonus_time;
        break;
      }

      // optional uint32 last_get_bonus_time = 26;
      case 26: {
        if (tag == 208) {
         parse_last_get_bonus_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_get_bonus_time_)));
          set_has_last_get_bonus_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_view_player_list;
        break;
      }

      // repeated .MsgViewPlayersList view_player_list = 27;
      case 27: {
        if (tag == 218) {
         parse_view_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_view_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_view_player_list;
        if (input->ExpectTag(224)) goto parse_safe_box;
        break;
      }

      // optional uint64 safe_box = 28;
      case 28: {
        if (tag == 224) {
         parse_safe_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_box_)));
          set_has_safe_box();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_get_bonus_count;
        break;
      }

      // optional uint32 get_bonus_count = 29;
      case 29: {
        if (tag == 232) {
         parse_get_bonus_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_bonus_count_)));
          set_has_get_bonus_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_checkin_7day_count;
        break;
      }

      // optional uint64 checkin_7day_count = 30;
      case 30: {
        if (tag == 240) {
         parse_checkin_7day_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &checkin_7day_count_)));
          set_has_checkin_7day_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_reward_7day_time;
        break;
      }

      // optional uint32 reward_7day_time = 31;
      case 31: {
        if (tag == 248) {
         parse_reward_7day_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_7day_time_)));
          set_has_reward_7day_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_collect_time;
        break;
      }

      // optional uint32 collect_time = 32;
      case 32: {
        if (tag == 256) {
         parse_collect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
          set_has_collect_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_weapons_level;
        break;
      }

      // optional uint32 weapons_level = 33;
      case 33: {
        if (tag == 264) {
         parse_weapons_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapons_level_)));
          set_has_weapons_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_vip_time;
        break;
      }

      // optional uint32 vip_time = 34;
      case 34: {
        if (tag == 272) {
         parse_vip_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_time_)));
          set_has_vip_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_room_name;
        break;
      }

      // optional string room_name = 35;
      case 35: {
        if (tag == 282) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_coupon;
        break;
      }

      // optional uint64 coupon = 36;
      case 36: {
        if (tag == 288) {
         parse_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &coupon_)));
          set_has_coupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_vip_time_level;
        break;
      }

      // optional uint32 vip_time_level = 37;
      case 37: {
        if (tag == 296) {
         parse_vip_time_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_time_level_)));
          set_has_vip_time_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_get_vip_reward_time;
        break;
      }

      // optional uint32 get_vip_reward_time = 38;
      case 38: {
        if (tag == 304) {
         parse_get_vip_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_vip_reward_time_)));
          set_has_get_vip_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_picture_frame;
        break;
      }

      // optional uint32 picture_frame = 39;
      case 39: {
        if (tag == 312) {
         parse_picture_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &picture_frame_)));
          set_has_picture_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_point;
        break;
      }

      // optional uint32 point = 40;
      case 40: {
        if (tag == 320) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_proxy_id;
        break;
      }

      // optional uint64 proxy_id = 41;
      case 41: {
        if (tag == 328) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_bind_channel_id;
        break;
      }

      // optional uint32 bind_channel_id = 42;
      case 42: {
        if (tag == 336) {
         parse_bind_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_channel_id_)));
          set_has_bind_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPlayerInfo)
  return false;
#undef DO_
}

void MsgPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPlayerInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional double vip_exp = 4;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vip_exp(), output);
  }

  // optional sint64 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->money(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint64 flag_bit = 7;
  if (has_flag_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->flag_bit(), output);
  }

  // optional string username = 8;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->username(), output);
  }

  // optional uint32 channel_id = 9;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->channel_id(), output);
  }

  // optional uint32 roulette_money = 10;
  if (has_roulette_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->roulette_money(), output);
  }

  // optional float roulette_rate = 11;
  if (has_roulette_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->roulette_rate(), output);
  }

  // optional uint32 roulette_money_time = 12;
  if (has_roulette_money_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->roulette_money_time(), output);
  }

  // optional uint32 roulette_rate_time = 13;
  if (has_roulette_rate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->roulette_rate_time(), output);
  }

  // optional uint32 uid = 14;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->uid(), output);
  }

  // optional uint32 watch_ads_number = 15;
  if (has_watch_ads_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->watch_ads_number(), output);
  }

  // optional uint32 watch_ads_time = 16;
  if (has_watch_ads_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->watch_ads_time(), output);
  }

  // optional uint32 head_portrait = 17;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->head_portrait(), output);
  }

  // optional string dynamic_msg = 18;
  if (has_dynamic_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dynamic_msg().data(), this->dynamic_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dynamic_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->dynamic_msg(), output);
  }

  // optional uint32 create_time = 19;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->create_time(), output);
  }

  // optional uint64 rmb = 20;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->rmb(), output);
  }

  // optional uint32 like = 21;
  if (has_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->like(), output);
  }

  // optional uint64 exp = 22;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->exp(), output);
  }

  // optional uint32 last_ip = 23;
  if (has_last_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->last_ip(), output);
  }

  // optional uint32 vip_level = 24;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->vip_level(), output);
  }

  // optional uint32 vip_exp_0 = 25;
  if (has_vip_exp_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->vip_exp_0(), output);
  }

  // optional uint32 last_get_bonus_time = 26;
  if (has_last_get_bonus_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->last_get_bonus_time(), output);
  }

  // repeated .MsgViewPlayersList view_player_list = 27;
  for (int i = 0; i < this->view_player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->view_player_list(i), output);
  }

  // optional uint64 safe_box = 28;
  if (has_safe_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->safe_box(), output);
  }

  // optional uint32 get_bonus_count = 29;
  if (has_get_bonus_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->get_bonus_count(), output);
  }

  // optional uint64 checkin_7day_count = 30;
  if (has_checkin_7day_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->checkin_7day_count(), output);
  }

  // optional uint32 reward_7day_time = 31;
  if (has_reward_7day_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->reward_7day_time(), output);
  }

  // optional uint32 collect_time = 32;
  if (has_collect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->collect_time(), output);
  }

  // optional uint32 weapons_level = 33;
  if (has_weapons_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->weapons_level(), output);
  }

  // optional uint32 vip_time = 34;
  if (has_vip_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->vip_time(), output);
  }

  // optional string room_name = 35;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->room_name(), output);
  }

  // optional uint64 coupon = 36;
  if (has_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->coupon(), output);
  }

  // optional uint32 vip_time_level = 37;
  if (has_vip_time_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->vip_time_level(), output);
  }

  // optional uint32 get_vip_reward_time = 38;
  if (has_get_vip_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->get_vip_reward_time(), output);
  }

  // optional uint32 picture_frame = 39;
  if (has_picture_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->picture_frame(), output);
  }

  // optional uint32 point = 40;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->point(), output);
  }

  // optional uint64 proxy_id = 41;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(41, this->proxy_id(), output);
  }

  // optional uint32 bind_channel_id = 42;
  if (has_bind_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->bind_channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPlayerInfo)
}

::google::protobuf::uint8* MsgPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional double vip_exp = 4;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vip_exp(), target);
  }

  // optional sint64 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->money(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint64 flag_bit = 7;
  if (has_flag_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->flag_bit(), target);
  }

  // optional string username = 8;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->username(), target);
  }

  // optional uint32 channel_id = 9;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->channel_id(), target);
  }

  // optional uint32 roulette_money = 10;
  if (has_roulette_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->roulette_money(), target);
  }

  // optional float roulette_rate = 11;
  if (has_roulette_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->roulette_rate(), target);
  }

  // optional uint32 roulette_money_time = 12;
  if (has_roulette_money_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->roulette_money_time(), target);
  }

  // optional uint32 roulette_rate_time = 13;
  if (has_roulette_rate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->roulette_rate_time(), target);
  }

  // optional uint32 uid = 14;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->uid(), target);
  }

  // optional uint32 watch_ads_number = 15;
  if (has_watch_ads_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->watch_ads_number(), target);
  }

  // optional uint32 watch_ads_time = 16;
  if (has_watch_ads_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->watch_ads_time(), target);
  }

  // optional uint32 head_portrait = 17;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->head_portrait(), target);
  }

  // optional string dynamic_msg = 18;
  if (has_dynamic_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dynamic_msg().data(), this->dynamic_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dynamic_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->dynamic_msg(), target);
  }

  // optional uint32 create_time = 19;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->create_time(), target);
  }

  // optional uint64 rmb = 20;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->rmb(), target);
  }

  // optional uint32 like = 21;
  if (has_like()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->like(), target);
  }

  // optional uint64 exp = 22;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->exp(), target);
  }

  // optional uint32 last_ip = 23;
  if (has_last_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->last_ip(), target);
  }

  // optional uint32 vip_level = 24;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->vip_level(), target);
  }

  // optional uint32 vip_exp_0 = 25;
  if (has_vip_exp_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->vip_exp_0(), target);
  }

  // optional uint32 last_get_bonus_time = 26;
  if (has_last_get_bonus_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->last_get_bonus_time(), target);
  }

  // repeated .MsgViewPlayersList view_player_list = 27;
  for (int i = 0; i < this->view_player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->view_player_list(i), target);
  }

  // optional uint64 safe_box = 28;
  if (has_safe_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->safe_box(), target);
  }

  // optional uint32 get_bonus_count = 29;
  if (has_get_bonus_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->get_bonus_count(), target);
  }

  // optional uint64 checkin_7day_count = 30;
  if (has_checkin_7day_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->checkin_7day_count(), target);
  }

  // optional uint32 reward_7day_time = 31;
  if (has_reward_7day_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->reward_7day_time(), target);
  }

  // optional uint32 collect_time = 32;
  if (has_collect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->collect_time(), target);
  }

  // optional uint32 weapons_level = 33;
  if (has_weapons_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->weapons_level(), target);
  }

  // optional uint32 vip_time = 34;
  if (has_vip_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->vip_time(), target);
  }

  // optional string room_name = 35;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->room_name(), target);
  }

  // optional uint64 coupon = 36;
  if (has_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->coupon(), target);
  }

  // optional uint32 vip_time_level = 37;
  if (has_vip_time_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->vip_time_level(), target);
  }

  // optional uint32 get_vip_reward_time = 38;
  if (has_get_vip_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->get_vip_reward_time(), target);
  }

  // optional uint32 picture_frame = 39;
  if (has_picture_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->picture_frame(), target);
  }

  // optional uint32 point = 40;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->point(), target);
  }

  // optional uint64 proxy_id = 41;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(41, this->proxy_id(), target);
  }

  // optional uint32 bind_channel_id = 42;
  if (has_bind_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->bind_channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerInfo)
  return target;
}

int MsgPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional double vip_exp = 4;
    if (has_vip_exp()) {
      total_size += 1 + 8;
    }

    // optional sint64 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->money());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint64 flag_bit = 7;
    if (has_flag_bit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag_bit());
    }

    // optional string username = 8;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 channel_id = 9;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 roulette_money = 10;
    if (has_roulette_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roulette_money());
    }

    // optional float roulette_rate = 11;
    if (has_roulette_rate()) {
      total_size += 1 + 4;
    }

    // optional uint32 roulette_money_time = 12;
    if (has_roulette_money_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roulette_money_time());
    }

    // optional uint32 roulette_rate_time = 13;
    if (has_roulette_rate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roulette_rate_time());
    }

    // optional uint32 uid = 14;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 watch_ads_number = 15;
    if (has_watch_ads_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watch_ads_number());
    }

    // optional uint32 watch_ads_time = 16;
    if (has_watch_ads_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watch_ads_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 head_portrait = 17;
    if (has_head_portrait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

    // optional string dynamic_msg = 18;
    if (has_dynamic_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dynamic_msg());
    }

    // optional uint32 create_time = 19;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint64 rmb = 20;
    if (has_rmb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rmb());
    }

    // optional uint32 like = 21;
    if (has_like()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like());
    }

    // optional uint64 exp = 22;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 last_ip = 23;
    if (has_last_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ip());
    }

    // optional uint32 vip_level = 24;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 vip_exp_0 = 25;
    if (has_vip_exp_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp_0());
    }

    // optional uint32 last_get_bonus_time = 26;
    if (has_last_get_bonus_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_get_bonus_time());
    }

    // optional uint64 safe_box = 28;
    if (has_safe_box()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->safe_box());
    }

    // optional uint32 get_bonus_count = 29;
    if (has_get_bonus_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_bonus_count());
    }

    // optional uint64 checkin_7day_count = 30;
    if (has_checkin_7day_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->checkin_7day_count());
    }

    // optional uint32 reward_7day_time = 31;
    if (has_reward_7day_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_7day_time());
    }

    // optional uint32 collect_time = 32;
    if (has_collect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_time());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 weapons_level = 33;
    if (has_weapons_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapons_level());
    }

    // optional uint32 vip_time = 34;
    if (has_vip_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_time());
    }

    // optional string room_name = 35;
    if (has_room_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional uint64 coupon = 36;
    if (has_coupon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->coupon());
    }

    // optional uint32 vip_time_level = 37;
    if (has_vip_time_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_time_level());
    }

    // optional uint32 get_vip_reward_time = 38;
    if (has_get_vip_reward_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_vip_reward_time());
    }

    // optional uint32 picture_frame = 39;
    if (has_picture_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->picture_frame());
    }

    // optional uint32 point = 40;
    if (has_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint64 proxy_id = 41;
    if (has_proxy_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy_id());
    }

    // optional uint32 bind_channel_id = 42;
    if (has_bind_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind_channel_id());
    }

  }
  // repeated .MsgViewPlayersList view_player_list = 27;
  total_size += 2 * this->view_player_list_size();
  for (int i = 0; i < this->view_player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->view_player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerInfo::MergeFrom(const MsgPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  view_player_list_.MergeFrom(from.view_player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_flag_bit()) {
      set_flag_bit(from.flag_bit());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_roulette_money()) {
      set_roulette_money(from.roulette_money());
    }
    if (from.has_roulette_rate()) {
      set_roulette_rate(from.roulette_rate());
    }
    if (from.has_roulette_money_time()) {
      set_roulette_money_time(from.roulette_money_time());
    }
    if (from.has_roulette_rate_time()) {
      set_roulette_rate_time(from.roulette_rate_time());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_watch_ads_number()) {
      set_watch_ads_number(from.watch_ads_number());
    }
    if (from.has_watch_ads_time()) {
      set_watch_ads_time(from.watch_ads_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_dynamic_msg()) {
      set_dynamic_msg(from.dynamic_msg());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_last_ip()) {
      set_last_ip(from.last_ip());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_vip_exp_0()) {
      set_vip_exp_0(from.vip_exp_0());
    }
    if (from.has_last_get_bonus_time()) {
      set_last_get_bonus_time(from.last_get_bonus_time());
    }
    if (from.has_safe_box()) {
      set_safe_box(from.safe_box());
    }
    if (from.has_get_bonus_count()) {
      set_get_bonus_count(from.get_bonus_count());
    }
    if (from.has_checkin_7day_count()) {
      set_checkin_7day_count(from.checkin_7day_count());
    }
    if (from.has_reward_7day_time()) {
      set_reward_7day_time(from.reward_7day_time());
    }
    if (from.has_collect_time()) {
      set_collect_time(from.collect_time());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_weapons_level()) {
      set_weapons_level(from.weapons_level());
    }
    if (from.has_vip_time()) {
      set_vip_time(from.vip_time());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_coupon()) {
      set_coupon(from.coupon());
    }
    if (from.has_vip_time_level()) {
      set_vip_time_level(from.vip_time_level());
    }
    if (from.has_get_vip_reward_time()) {
      set_get_vip_reward_time(from.get_vip_reward_time());
    }
    if (from.has_picture_frame()) {
      set_picture_frame(from.picture_frame());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_bind_channel_id()) {
      set_bind_channel_id(from.bind_channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerInfo::CopyFrom(const MsgPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerInfo::IsInitialized() const {

  return true;
}

void MsgPlayerInfo::Swap(MsgPlayerInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(money_, other->money_);
    std::swap(sex_, other->sex_);
    std::swap(flag_bit_, other->flag_bit_);
    std::swap(username_, other->username_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(roulette_money_, other->roulette_money_);
    std::swap(roulette_rate_, other->roulette_rate_);
    std::swap(roulette_money_time_, other->roulette_money_time_);
    std::swap(roulette_rate_time_, other->roulette_rate_time_);
    std::swap(uid_, other->uid_);
    std::swap(watch_ads_number_, other->watch_ads_number_);
    std::swap(watch_ads_time_, other->watch_ads_time_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(dynamic_msg_, other->dynamic_msg_);
    std::swap(create_time_, other->create_time_);
    std::swap(rmb_, other->rmb_);
    std::swap(like_, other->like_);
    std::swap(exp_, other->exp_);
    std::swap(last_ip_, other->last_ip_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_exp_0_, other->vip_exp_0_);
    std::swap(last_get_bonus_time_, other->last_get_bonus_time_);
    view_player_list_.Swap(&other->view_player_list_);
    std::swap(safe_box_, other->safe_box_);
    std::swap(get_bonus_count_, other->get_bonus_count_);
    std::swap(checkin_7day_count_, other->checkin_7day_count_);
    std::swap(reward_7day_time_, other->reward_7day_time_);
    std::swap(collect_time_, other->collect_time_);
    std::swap(weapons_level_, other->weapons_level_);
    std::swap(vip_time_, other->vip_time_);
    std::swap(room_name_, other->room_name_);
    std::swap(coupon_, other->coupon_);
    std::swap(vip_time_level_, other->vip_time_level_);
    std::swap(get_vip_reward_time_, other->get_vip_reward_time_);
    std::swap(picture_frame_, other->picture_frame_);
    std::swap(point_, other->point_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(bind_channel_id_, other->bind_channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerInfo_descriptor_;
  metadata.reflection = MsgPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgViewPlayersList::kPidFieldNumber;
const int MsgViewPlayersList::kHeadPortraitFieldNumber;
#endif  // !_MSC_VER

MsgViewPlayersList::MsgViewPlayersList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgViewPlayersList)
}

void MsgViewPlayersList::InitAsDefaultInstance() {
}

MsgViewPlayersList::MsgViewPlayersList(const MsgViewPlayersList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgViewPlayersList)
}

void MsgViewPlayersList::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  head_portrait_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgViewPlayersList::~MsgViewPlayersList() {
  // @@protoc_insertion_point(destructor:MsgViewPlayersList)
  SharedDtor();
}

void MsgViewPlayersList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgViewPlayersList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgViewPlayersList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgViewPlayersList_descriptor_;
}

const MsgViewPlayersList& MsgViewPlayersList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgViewPlayersList* MsgViewPlayersList::default_instance_ = NULL;

MsgViewPlayersList* MsgViewPlayersList::New() const {
  return new MsgViewPlayersList;
}

void MsgViewPlayersList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgViewPlayersList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, head_portrait_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgViewPlayersList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgViewPlayersList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 2;
      case 2: {
        if (tag == 16) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgViewPlayersList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgViewPlayersList)
  return false;
#undef DO_
}

void MsgViewPlayersList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgViewPlayersList)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional uint32 head_portrait = 2;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_portrait(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgViewPlayersList)
}

::google::protobuf::uint8* MsgViewPlayersList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgViewPlayersList)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional uint32 head_portrait = 2;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_portrait(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgViewPlayersList)
  return target;
}

int MsgViewPlayersList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 head_portrait = 2;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgViewPlayersList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgViewPlayersList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgViewPlayersList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgViewPlayersList::MergeFrom(const MsgViewPlayersList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgViewPlayersList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgViewPlayersList::CopyFrom(const MsgViewPlayersList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgViewPlayersList::IsInitialized() const {

  return true;
}

void MsgViewPlayersList::Swap(MsgViewPlayersList* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgViewPlayersList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgViewPlayersList_descriptor_;
  metadata.reflection = MsgViewPlayersList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgVector::kXFieldNumber;
const int MsgVector::kYFieldNumber;
#endif  // !_MSC_VER

MsgVector::MsgVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgVector)
}

void MsgVector::InitAsDefaultInstance() {
}

MsgVector::MsgVector(const MsgVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgVector)
}

void MsgVector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgVector::~MsgVector() {
  // @@protoc_insertion_point(destructor:MsgVector)
  SharedDtor();
}

void MsgVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgVector_descriptor_;
}

const MsgVector& MsgVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgVector* MsgVector::default_instance_ = NULL;

MsgVector* MsgVector::New() const {
  return new MsgVector;
}

void MsgVector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgVector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgVector)
  return false;
#undef DO_
}

void MsgVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgVector)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgVector)
}

::google::protobuf::uint8* MsgVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgVector)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgVector)
  return target;
}

int MsgVector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgVector::MergeFrom(const MsgVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgVector::CopyFrom(const MsgVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgVector::IsInitialized() const {

  return true;
}

void MsgVector::Swap(MsgVector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgVector_descriptor_;
  metadata.reflection = MsgVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerState::kPidFieldNumber;
const int MsgPlayerState::kRoomTypeFieldNumber;
const int MsgPlayerState::kIsLikedFieldNumber;
#endif  // !_MSC_VER

MsgPlayerState::MsgPlayerState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPlayerState)
}

void MsgPlayerState::InitAsDefaultInstance() {
}

MsgPlayerState::MsgPlayerState(const MsgPlayerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPlayerState)
}

void MsgPlayerState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_liked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerState::~MsgPlayerState() {
  // @@protoc_insertion_point(destructor:MsgPlayerState)
  SharedDtor();
}

void MsgPlayerState::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgPlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerState_descriptor_;
}

const MsgPlayerState& MsgPlayerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgPlayerState* MsgPlayerState::default_instance_ = NULL;

MsgPlayerState* MsgPlayerState::New() const {
  return new MsgPlayerState;
}

void MsgPlayerState::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
    is_liked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPlayerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_type;
        break;
      }

      // optional string room_type = 2;
      case 2: {
        if (tag == 18) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_liked;
        break;
      }

      // optional bool is_liked = 3;
      case 3: {
        if (tag == 24) {
         parse_is_liked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_liked_)));
          set_has_is_liked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPlayerState)
  return false;
#undef DO_
}

void MsgPlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPlayerState)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional string room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_type(), output);
  }

  // optional bool is_liked = 3;
  if (has_is_liked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_liked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPlayerState)
}

::google::protobuf::uint8* MsgPlayerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerState)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional string room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_type(), target);
  }

  // optional bool is_liked = 3;
  if (has_is_liked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_liked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerState)
  return target;
}

int MsgPlayerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional string room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional bool is_liked = 3;
    if (has_is_liked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerState::MergeFrom(const MsgPlayerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_is_liked()) {
      set_is_liked(from.is_liked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerState::CopyFrom(const MsgPlayerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerState::IsInitialized() const {

  return true;
}

void MsgPlayerState::Swap(MsgPlayerState* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(room_type_, other->room_type_);
    std::swap(is_liked_, other->is_liked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerState_descriptor_;
  metadata.reflection = MsgPlayerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChampionship::kRoomTypeFieldNumber;
const int MsgChampionship::kCoinFieldNumber;
const int MsgChampionship::kLastEnterFieldNumber;
const int MsgChampionship::kBuyBackCountFieldNumber;
#endif  // !_MSC_VER

MsgChampionship::MsgChampionship()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgChampionship)
}

void MsgChampionship::InitAsDefaultInstance() {
}

MsgChampionship::MsgChampionship(const MsgChampionship& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgChampionship)
}

void MsgChampionship::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_ = 0u;
  last_enter_ = 0u;
  buy_back_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChampionship::~MsgChampionship() {
  // @@protoc_insertion_point(destructor:MsgChampionship)
  SharedDtor();
}

void MsgChampionship::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgChampionship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChampionship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChampionship_descriptor_;
}

const MsgChampionship& MsgChampionship::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgChampionship* MsgChampionship::default_instance_ = NULL;

MsgChampionship* MsgChampionship::New() const {
  return new MsgChampionship;
}

void MsgChampionship::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgChampionship*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(coin_, buy_back_count_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChampionship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgChampionship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_enter;
        break;
      }

      // optional uint32 last_enter = 3;
      case 3: {
        if (tag == 24) {
         parse_last_enter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_enter_)));
          set_has_last_enter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buy_back_count;
        break;
      }

      // optional uint32 buy_back_count = 4;
      case 4: {
        if (tag == 32) {
         parse_buy_back_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_back_count_)));
          set_has_buy_back_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgChampionship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgChampionship)
  return false;
#undef DO_
}

void MsgChampionship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgChampionship)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // optional uint32 last_enter = 3;
  if (has_last_enter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_enter(), output);
  }

  // optional uint32 buy_back_count = 4;
  if (has_buy_back_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_back_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgChampionship)
}

::google::protobuf::uint8* MsgChampionship::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgChampionship)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // optional uint32 last_enter = 3;
  if (has_last_enter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_enter(), target);
  }

  // optional uint32 buy_back_count = 4;
  if (has_buy_back_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_back_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgChampionship)
  return target;
}

int MsgChampionship::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 last_enter = 3;
    if (has_last_enter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_enter());
    }

    // optional uint32 buy_back_count = 4;
    if (has_buy_back_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_back_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChampionship::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChampionship* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChampionship*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChampionship::MergeFrom(const MsgChampionship& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_last_enter()) {
      set_last_enter(from.last_enter());
    }
    if (from.has_buy_back_count()) {
      set_buy_back_count(from.buy_back_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChampionship::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChampionship::CopyFrom(const MsgChampionship& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChampionship::IsInitialized() const {

  return true;
}

void MsgChampionship::Swap(MsgChampionship* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(coin_, other->coin_);
    std::swap(last_enter_, other->last_enter_);
    std::swap(buy_back_count_, other->buy_back_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChampionship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChampionship_descriptor_;
  metadata.reflection = MsgChampionship_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChampionshipList::kChampListFieldNumber;
#endif  // !_MSC_VER

MsgChampionshipList::MsgChampionshipList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgChampionshipList)
}

void MsgChampionshipList::InitAsDefaultInstance() {
}

MsgChampionshipList::MsgChampionshipList(const MsgChampionshipList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgChampionshipList)
}

void MsgChampionshipList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChampionshipList::~MsgChampionshipList() {
  // @@protoc_insertion_point(destructor:MsgChampionshipList)
  SharedDtor();
}

void MsgChampionshipList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgChampionshipList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChampionshipList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChampionshipList_descriptor_;
}

const MsgChampionshipList& MsgChampionshipList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgChampionshipList* MsgChampionshipList::default_instance_ = NULL;

MsgChampionshipList* MsgChampionshipList::New() const {
  return new MsgChampionshipList;
}

void MsgChampionshipList::Clear() {
  champ_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChampionshipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgChampionshipList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgChampionship champ_list = 1;
      case 1: {
        if (tag == 10) {
         parse_champ_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_champ_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_champ_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgChampionshipList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgChampionshipList)
  return false;
#undef DO_
}

void MsgChampionshipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgChampionshipList)
  // repeated .MsgChampionship champ_list = 1;
  for (int i = 0; i < this->champ_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->champ_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgChampionshipList)
}

::google::protobuf::uint8* MsgChampionshipList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgChampionshipList)
  // repeated .MsgChampionship champ_list = 1;
  for (int i = 0; i < this->champ_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->champ_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgChampionshipList)
  return target;
}

int MsgChampionshipList::ByteSize() const {
  int total_size = 0;

  // repeated .MsgChampionship champ_list = 1;
  total_size += 1 * this->champ_list_size();
  for (int i = 0; i < this->champ_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->champ_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChampionshipList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChampionshipList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChampionshipList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChampionshipList::MergeFrom(const MsgChampionshipList& from) {
  GOOGLE_CHECK_NE(&from, this);
  champ_list_.MergeFrom(from.champ_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChampionshipList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChampionshipList::CopyFrom(const MsgChampionshipList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChampionshipList::IsInitialized() const {

  return true;
}

void MsgChampionshipList::Swap(MsgChampionshipList* other) {
  if (other != this) {
    champ_list_.Swap(&other->champ_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChampionshipList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChampionshipList_descriptor_;
  metadata.reflection = MsgChampionshipList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGameinfo::kGameTypeFieldNumber;
const int MsgGameinfo::kExt320FieldNumber;
const int MsgGameinfo::kExt321FieldNumber;
const int MsgGameinfo::kExt322FieldNumber;
const int MsgGameinfo::kExt323FieldNumber;
const int MsgGameinfo::kExt640FieldNumber;
const int MsgGameinfo::kExt641FieldNumber;
#endif  // !_MSC_VER

MsgGameinfo::MsgGameinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGameinfo)
}

void MsgGameinfo::InitAsDefaultInstance() {
}

MsgGameinfo::MsgGameinfo(const MsgGameinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGameinfo)
}

void MsgGameinfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext32_0_ = 0u;
  ext32_1_ = 0u;
  ext32_2_ = 0u;
  ext32_3_ = 0u;
  ext64_0_ = GOOGLE_ULONGLONG(0);
  ext64_1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGameinfo::~MsgGameinfo() {
  // @@protoc_insertion_point(destructor:MsgGameinfo)
  SharedDtor();
}

void MsgGameinfo::SharedDtor() {
  if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgGameinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGameinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGameinfo_descriptor_;
}

const MsgGameinfo& MsgGameinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgGameinfo* MsgGameinfo::default_instance_ = NULL;

MsgGameinfo* MsgGameinfo::New() const {
  return new MsgGameinfo;
}

void MsgGameinfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGameinfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ext32_0_, ext64_1_);
    if (has_game_type()) {
      if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGameinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGameinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_type().data(), this->game_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ext32_0;
        break;
      }

      // optional uint32 ext32_0 = 2;
      case 2: {
        if (tag == 16) {
         parse_ext32_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext32_0_)));
          set_has_ext32_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ext32_1;
        break;
      }

      // optional uint32 ext32_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_ext32_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext32_1_)));
          set_has_ext32_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ext32_2;
        break;
      }

      // optional uint32 ext32_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_ext32_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext32_2_)));
          set_has_ext32_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ext32_3;
        break;
      }

      // optional uint32 ext32_3 = 5;
      case 5: {
        if (tag == 40) {
         parse_ext32_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext32_3_)));
          set_has_ext32_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ext64_0;
        break;
      }

      // optional uint64 ext64_0 = 6;
      case 6: {
        if (tag == 48) {
         parse_ext64_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ext64_0_)));
          set_has_ext64_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ext64_1;
        break;
      }

      // optional uint64 ext64_1 = 7;
      case 7: {
        if (tag == 56) {
         parse_ext64_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ext64_1_)));
          set_has_ext64_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGameinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGameinfo)
  return false;
#undef DO_
}

void MsgGameinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGameinfo)
  // optional string game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_type(), output);
  }

  // optional uint32 ext32_0 = 2;
  if (has_ext32_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ext32_0(), output);
  }

  // optional uint32 ext32_1 = 3;
  if (has_ext32_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ext32_1(), output);
  }

  // optional uint32 ext32_2 = 4;
  if (has_ext32_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ext32_2(), output);
  }

  // optional uint32 ext32_3 = 5;
  if (has_ext32_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ext32_3(), output);
  }

  // optional uint64 ext64_0 = 6;
  if (has_ext64_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ext64_0(), output);
  }

  // optional uint64 ext64_1 = 7;
  if (has_ext64_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ext64_1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGameinfo)
}

::google::protobuf::uint8* MsgGameinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGameinfo)
  // optional string game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_type(), target);
  }

  // optional uint32 ext32_0 = 2;
  if (has_ext32_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ext32_0(), target);
  }

  // optional uint32 ext32_1 = 3;
  if (has_ext32_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ext32_1(), target);
  }

  // optional uint32 ext32_2 = 4;
  if (has_ext32_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ext32_2(), target);
  }

  // optional uint32 ext32_3 = 5;
  if (has_ext32_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ext32_3(), target);
  }

  // optional uint64 ext64_0 = 6;
  if (has_ext64_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ext64_0(), target);
  }

  // optional uint64 ext64_1 = 7;
  if (has_ext64_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ext64_1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGameinfo)
  return target;
}

int MsgGameinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_type());
    }

    // optional uint32 ext32_0 = 2;
    if (has_ext32_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext32_0());
    }

    // optional uint32 ext32_1 = 3;
    if (has_ext32_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext32_1());
    }

    // optional uint32 ext32_2 = 4;
    if (has_ext32_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext32_2());
    }

    // optional uint32 ext32_3 = 5;
    if (has_ext32_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext32_3());
    }

    // optional uint64 ext64_0 = 6;
    if (has_ext64_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ext64_0());
    }

    // optional uint64 ext64_1 = 7;
    if (has_ext64_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ext64_1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGameinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGameinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGameinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGameinfo::MergeFrom(const MsgGameinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_ext32_0()) {
      set_ext32_0(from.ext32_0());
    }
    if (from.has_ext32_1()) {
      set_ext32_1(from.ext32_1());
    }
    if (from.has_ext32_2()) {
      set_ext32_2(from.ext32_2());
    }
    if (from.has_ext32_3()) {
      set_ext32_3(from.ext32_3());
    }
    if (from.has_ext64_0()) {
      set_ext64_0(from.ext64_0());
    }
    if (from.has_ext64_1()) {
      set_ext64_1(from.ext64_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGameinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGameinfo::CopyFrom(const MsgGameinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGameinfo::IsInitialized() const {

  return true;
}

void MsgGameinfo::Swap(MsgGameinfo* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(ext32_0_, other->ext32_0_);
    std::swap(ext32_1_, other->ext32_1_);
    std::swap(ext32_2_, other->ext32_2_);
    std::swap(ext32_3_, other->ext32_3_);
    std::swap(ext64_0_, other->ext64_0_);
    std::swap(ext64_1_, other->ext64_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGameinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGameinfo_descriptor_;
  metadata.reflection = MsgGameinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgVLP::kUsernameFieldNumber;
const int MsgVLP::kPasswordFieldNumber;
const int MsgVLP::kVersionFieldNumber;
const int MsgVLP::kAuthTypeFieldNumber;
#endif  // !_MSC_VER

MsgVLP::MsgVLP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgVLP)
}

void MsgVLP::InitAsDefaultInstance() {
}

MsgVLP::MsgVLP(const MsgVLP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgVLP)
}

void MsgVLP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  auth_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgVLP::~MsgVLP() {
  // @@protoc_insertion_point(destructor:MsgVLP)
  SharedDtor();
}

void MsgVLP::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void MsgVLP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgVLP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgVLP_descriptor_;
}

const MsgVLP& MsgVLP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgVLP* MsgVLP::default_instance_ = NULL;

MsgVLP* MsgVLP::New() const {
  return new MsgVLP;
}

void MsgVLP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgVLP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(version_, auth_type_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgVLP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgVLP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_version;
        break;
      }

      // optional fixed32 version = 3;
      case 3: {
        if (tag == 29) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_auth_type;
        break;
      }

      // optional .TChannel auth_type = 4;
      case 4: {
        if (tag == 32) {
         parse_auth_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TChannel_IsValid(value)) {
            set_auth_type(static_cast< ::TChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgVLP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgVLP)
  return false;
#undef DO_
}

void MsgVLP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgVLP)
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional fixed32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->version(), output);
  }

  // optional .TChannel auth_type = 4;
  if (has_auth_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->auth_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgVLP)
}

::google::protobuf::uint8* MsgVLP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgVLP)
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional fixed32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->version(), target);
  }

  // optional .TChannel auth_type = 4;
  if (has_auth_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->auth_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgVLP)
  return target;
}

int MsgVLP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional fixed32 version = 3;
    if (has_version()) {
      total_size += 1 + 4;
    }

    // optional .TChannel auth_type = 4;
    if (has_auth_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->auth_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgVLP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgVLP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgVLP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgVLP::MergeFrom(const MsgVLP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_auth_type()) {
      set_auth_type(from.auth_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgVLP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgVLP::CopyFrom(const MsgVLP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgVLP::IsInitialized() const {

  return true;
}

void MsgVLP::Swap(MsgVLP* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(version_, other->version_);
    std::swap(auth_type_, other->auth_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgVLP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgVLP_descriptor_;
  metadata.reflection = MsgVLP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogin::kTokenFieldNumber;
const int MsgLogin::kVersionFieldNumber;
#endif  // !_MSC_VER

MsgLogin::MsgLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgLogin)
}

void MsgLogin::InitAsDefaultInstance() {
}

MsgLogin::MsgLogin(const MsgLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgLogin)
}

void MsgLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogin::~MsgLogin() {
  // @@protoc_insertion_point(destructor:MsgLogin)
  SharedDtor();
}

void MsgLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void MsgLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogin_descriptor_;
}

const MsgLogin& MsgLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgLogin* MsgLogin::default_instance_ = NULL;

MsgLogin* MsgLogin::New() const {
  return new MsgLogin;
}

void MsgLogin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_version;
        break;
      }

      // optional fixed32 version = 2;
      case 2: {
        if (tag == 21) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgLogin)
  return false;
#undef DO_
}

void MsgLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgLogin)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional fixed32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgLogin)
}

::google::protobuf::uint8* MsgLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLogin)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional fixed32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLogin)
  return target;
}

int MsgLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional fixed32 version = 2;
    if (has_version()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogin::MergeFrom(const MsgLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogin::CopyFrom(const MsgLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogin::IsInitialized() const {

  return true;
}

void MsgLogin::Swap(MsgLogin* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogin_descriptor_;
  metadata.reflection = MsgLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreatePlayer::kNameFieldNumber;
#endif  // !_MSC_VER

MsgCreatePlayer::MsgCreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCreatePlayer)
}

void MsgCreatePlayer::InitAsDefaultInstance() {
}

MsgCreatePlayer::MsgCreatePlayer(const MsgCreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCreatePlayer)
}

void MsgCreatePlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreatePlayer::~MsgCreatePlayer() {
  // @@protoc_insertion_point(destructor:MsgCreatePlayer)
  SharedDtor();
}

void MsgCreatePlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgCreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreatePlayer_descriptor_;
}

const MsgCreatePlayer& MsgCreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgCreatePlayer* MsgCreatePlayer::default_instance_ = NULL;

MsgCreatePlayer* MsgCreatePlayer::New() const {
  return new MsgCreatePlayer;
}

void MsgCreatePlayer::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCreatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCreatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCreatePlayer)
  return false;
#undef DO_
}

void MsgCreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCreatePlayer)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCreatePlayer)
}

::google::protobuf::uint8* MsgCreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCreatePlayer)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCreatePlayer)
  return target;
}

int MsgCreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreatePlayer::MergeFrom(const MsgCreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreatePlayer::CopyFrom(const MsgCreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreatePlayer::IsInitialized() const {

  return true;
}

void MsgCreatePlayer::Swap(MsgCreatePlayer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreatePlayer_descriptor_;
  metadata.reflection = MsgCreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoadPlayer::kPlayerIdxFieldNumber;
#endif  // !_MSC_VER

MsgLoadPlayer::MsgLoadPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgLoadPlayer)
}

void MsgLoadPlayer::InitAsDefaultInstance() {
}

MsgLoadPlayer::MsgLoadPlayer(const MsgLoadPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgLoadPlayer)
}

void MsgLoadPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoadPlayer::~MsgLoadPlayer() {
  // @@protoc_insertion_point(destructor:MsgLoadPlayer)
  SharedDtor();
}

void MsgLoadPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoadPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoadPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoadPlayer_descriptor_;
}

const MsgLoadPlayer& MsgLoadPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgLoadPlayer* MsgLoadPlayer::default_instance_ = NULL;

MsgLoadPlayer* MsgLoadPlayer::New() const {
  return new MsgLoadPlayer;
}

void MsgLoadPlayer::Clear() {
  player_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoadPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgLoadPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_idx_)));
          set_has_player_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgLoadPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgLoadPlayer)
  return false;
#undef DO_
}

void MsgLoadPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgLoadPlayer)
  // optional uint32 player_idx = 1;
  if (has_player_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgLoadPlayer)
}

::google::protobuf::uint8* MsgLoadPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLoadPlayer)
  // optional uint32 player_idx = 1;
  if (has_player_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLoadPlayer)
  return target;
}

int MsgLoadPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_idx = 1;
    if (has_player_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoadPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoadPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoadPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoadPlayer::MergeFrom(const MsgLoadPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_idx()) {
      set_player_idx(from.player_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoadPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoadPlayer::CopyFrom(const MsgLoadPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoadPlayer::IsInitialized() const {

  return true;
}

void MsgLoadPlayer::Swap(MsgLoadPlayer* other) {
  if (other != this) {
    std::swap(player_idx_, other->player_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoadPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoadPlayer_descriptor_;
  metadata.reflection = MsgLoadPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInt::kValueFieldNumber;
#endif  // !_MSC_VER

MsgInt::MsgInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgInt)
}

void MsgInt::InitAsDefaultInstance() {
}

MsgInt::MsgInt(const MsgInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgInt)
}

void MsgInt::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInt::~MsgInt() {
  // @@protoc_insertion_point(destructor:MsgInt)
  SharedDtor();
}

void MsgInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInt_descriptor_;
}

const MsgInt& MsgInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgInt* MsgInt::default_instance_ = NULL;

MsgInt* MsgInt::New() const {
  return new MsgInt;
}

void MsgInt::Clear() {
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgInt)
  return false;
#undef DO_
}

void MsgInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgInt)
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgInt)
}

::google::protobuf::uint8* MsgInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgInt)
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgInt)
  return target;
}

int MsgInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInt::MergeFrom(const MsgInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInt::CopyFrom(const MsgInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInt::IsInitialized() const {

  return true;
}

void MsgInt::Swap(MsgInt* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInt_descriptor_;
  metadata.reflection = MsgInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBool::kValFieldNumber;
#endif  // !_MSC_VER

MsgBool::MsgBool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBool)
}

void MsgBool::InitAsDefaultInstance() {
}

MsgBool::MsgBool(const MsgBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBool)
}

void MsgBool::SharedCtor() {
  _cached_size_ = 0;
  val_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBool::~MsgBool() {
  // @@protoc_insertion_point(destructor:MsgBool)
  SharedDtor();
}

void MsgBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBool_descriptor_;
}

const MsgBool& MsgBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgBool* MsgBool::default_instance_ = NULL;

MsgBool* MsgBool::New() const {
  return new MsgBool;
}

void MsgBool::Clear() {
  val_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBool)
  return false;
#undef DO_
}

void MsgBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBool)
  // optional bool val = 1;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBool)
}

::google::protobuf::uint8* MsgBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBool)
  // optional bool val = 1;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBool)
  return target;
}

int MsgBool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool val = 1;
    if (has_val()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBool::MergeFrom(const MsgBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBool::CopyFrom(const MsgBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBool::IsInitialized() const {

  return true;
}

void MsgBool::Swap(MsgBool* other) {
  if (other != this) {
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBool_descriptor_;
  metadata.reflection = MsgBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgString::kStrFieldNumber;
#endif  // !_MSC_VER

MsgString::MsgString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgString)
}

void MsgString::InitAsDefaultInstance() {
}

MsgString::MsgString(const MsgString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgString)
}

void MsgString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgString::~MsgString() {
  // @@protoc_insertion_point(destructor:MsgString)
  SharedDtor();
}

void MsgString::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void MsgString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgString_descriptor_;
}

const MsgString& MsgString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgString* MsgString::default_instance_ = NULL;

MsgString* MsgString::New() const {
  return new MsgString;
}

void MsgString::Clear() {
  if (has_str()) {
    if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      str_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgString)
  return false;
#undef DO_
}

void MsgString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgString)
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgString)
}

::google::protobuf::uint8* MsgString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgString)
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgString)
  return target;
}

int MsgString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgString::MergeFrom(const MsgString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgString::CopyFrom(const MsgString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgString::IsInitialized() const {

  return true;
}

void MsgString::Swap(MsgString* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgString_descriptor_;
  metadata.reflection = MsgString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSystem::kValueFieldNumber;
#endif  // !_MSC_VER

MsgSystem::MsgSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSystem)
}

void MsgSystem::InitAsDefaultInstance() {
}

MsgSystem::MsgSystem(const MsgSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSystem)
}

void MsgSystem::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSystem::~MsgSystem() {
  // @@protoc_insertion_point(destructor:MsgSystem)
  SharedDtor();
}

void MsgSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSystem_descriptor_;
}

const MsgSystem& MsgSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgSystem* MsgSystem::default_instance_ = NULL;

MsgSystem* MsgSystem::New() const {
  return new MsgSystem;
}

void MsgSystem::Clear() {
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSystem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSystemType value = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSystemType_IsValid(value)) {
            set_value(static_cast< ::TSystemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSystem)
  return false;
#undef DO_
}

void MsgSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSystem)
  // optional .TSystemType value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSystem)
}

::google::protobuf::uint8* MsgSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSystem)
  // optional .TSystemType value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSystem)
  return target;
}

int MsgSystem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSystemType value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSystem::MergeFrom(const MsgSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSystem::CopyFrom(const MsgSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSystem::IsInitialized() const {

  return true;
}

void MsgSystem::Swap(MsgSystem* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSystem_descriptor_;
  metadata.reflection = MsgSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUpdateValue::kIdFieldNumber;
const int MsgUpdateValue::kValFieldNumber;
const int MsgUpdateValue::kExt320FieldNumber;
const int MsgUpdateValue::kExt321FieldNumber;
const int MsgUpdateValue::kExt640FieldNumber;
const int MsgUpdateValue::kExt641FieldNumber;
const int MsgUpdateValue::kExtdb0FieldNumber;
const int MsgUpdateValue::kStr0FieldNumber;
const int MsgUpdateValue::kStr1FieldNumber;
const int MsgUpdateValue::kStr2FieldNumber;
const int MsgUpdateValue::kStr3FieldNumber;
const int MsgUpdateValue::kStr4FieldNumber;
const int MsgUpdateValue::kStr5FieldNumber;
const int MsgUpdateValue::kBuf0FieldNumber;
const int MsgUpdateValue::kExtdb1FieldNumber;
const int MsgUpdateValue::kKeyValuesFieldNumber;
const int MsgUpdateValue::kStr6FieldNumber;
const int MsgUpdateValue::kExt642FieldNumber;
const int MsgUpdateValue::kExt643FieldNumber;
const int MsgUpdateValue::kExt322FieldNumber;
const int MsgUpdateValue::kExt323FieldNumber;
const int MsgUpdateValue::kExtdb2FieldNumber;
const int MsgUpdateValue::kExtdb3FieldNumber;
#endif  // !_MSC_VER

MsgUpdateValue::MsgUpdateValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUpdateValue)
}

void MsgUpdateValue::InitAsDefaultInstance() {
}

MsgUpdateValue::MsgUpdateValue(const MsgUpdateValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUpdateValue)
}

void MsgUpdateValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  val_ = GOOGLE_LONGLONG(0);
  ext32_0_ = 0;
  ext32_1_ = 0;
  ext64_0_ = GOOGLE_LONGLONG(0);
  ext64_1_ = GOOGLE_LONGLONG(0);
  extdb_0_ = 0;
  str_0_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buf_0_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extdb_1_ = 0;
  str_6_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext64_2_ = GOOGLE_LONGLONG(0);
  ext64_3_ = GOOGLE_LONGLONG(0);
  ext32_2_ = 0;
  ext32_3_ = 0;
  extdb_2_ = 0;
  extdb_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpdateValue::~MsgUpdateValue() {
  // @@protoc_insertion_point(destructor:MsgUpdateValue)
  SharedDtor();
}

void MsgUpdateValue::SharedDtor() {
  if (str_0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_0_;
  }
  if (str_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_1_;
  }
  if (str_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_2_;
  }
  if (str_3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_3_;
  }
  if (str_4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_4_;
  }
  if (str_5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_5_;
  }
  if (buf_0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buf_0_;
  }
  if (str_6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_6_;
  }
  if (this != default_instance_) {
  }
}

void MsgUpdateValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUpdateValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpdateValue_descriptor_;
}

const MsgUpdateValue& MsgUpdateValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgUpdateValue* MsgUpdateValue::default_instance_ = NULL;

MsgUpdateValue* MsgUpdateValue::New() const {
  return new MsgUpdateValue;
}

void MsgUpdateValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUpdateValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, extdb_0_);
    if (has_str_0()) {
      if (str_0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_0_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_str_1()) {
      if (str_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_1_->clear();
      }
    }
    if (has_str_2()) {
      if (str_2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_2_->clear();
      }
    }
    if (has_str_3()) {
      if (str_3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_3_->clear();
      }
    }
    if (has_str_4()) {
      if (str_4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_4_->clear();
      }
    }
    if (has_str_5()) {
      if (str_5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_5_->clear();
      }
    }
    if (has_buf_0()) {
      if (buf_0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buf_0_->clear();
      }
    }
    extdb_1_ = 0;
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(ext64_2_, extdb_3_);
    if (has_str_6()) {
      if (str_6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_6_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpdateValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUpdateValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int64 val = 2;
      case 2: {
        if (tag == 16) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ext32_0;
        break;
      }

      // optional int32 ext32_0 = 3;
      case 3: {
        if (tag == 24) {
         parse_ext32_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ext32_0_)));
          set_has_ext32_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ext32_1;
        break;
      }

      // optional int32 ext32_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_ext32_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ext32_1_)));
          set_has_ext32_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ext64_0;
        break;
      }

      // optional int64 ext64_0 = 5;
      case 5: {
        if (tag == 40) {
         parse_ext64_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext64_0_)));
          set_has_ext64_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ext64_1;
        break;
      }

      // optional int64 ext64_1 = 6;
      case 6: {
        if (tag == 48) {
         parse_ext64_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext64_1_)));
          set_has_ext64_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_extdb_0;
        break;
      }

      // optional double extdb_0 = 7;
      case 7: {
        if (tag == 57) {
         parse_extdb_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extdb_0_)));
          set_has_extdb_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_str_0;
        break;
      }

      // optional string str_0 = 8;
      case 8: {
        if (tag == 66) {
         parse_str_0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_0()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_0().data(), this->str_0().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_0");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_str_1;
        break;
      }

      // optional string str_1 = 9;
      case 9: {
        if (tag == 74) {
         parse_str_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_1().data(), this->str_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_str_2;
        break;
      }

      // optional string str_2 = 10;
      case 10: {
        if (tag == 82) {
         parse_str_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_2().data(), this->str_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_str_3;
        break;
      }

      // optional string str_3 = 11;
      case 11: {
        if (tag == 90) {
         parse_str_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_3().data(), this->str_3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_key_values;
        break;
      }

      // repeated .MsgUpdateValue key_values = 12;
      case 12: {
        if (tag == 98) {
         parse_key_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_key_values;
        if (input->ExpectTag(106)) goto parse_str_4;
        break;
      }

      // optional string str_4 = 13;
      case 13: {
        if (tag == 106) {
         parse_str_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_4().data(), this->str_4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_str_5;
        break;
      }

      // optional string str_5 = 14;
      case 14: {
        if (tag == 114) {
         parse_str_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_5().data(), this->str_5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_buf_0;
        break;
      }

      // optional bytes buf_0 = 15;
      case 15: {
        if (tag == 122) {
         parse_buf_0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf_0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_extdb_1;
        break;
      }

      // optional double extdb_1 = 16;
      case 16: {
        if (tag == 129) {
         parse_extdb_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extdb_1_)));
          set_has_extdb_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_str_6;
        break;
      }

      // optional string str_6 = 17;
      case 17: {
        if (tag == 138) {
         parse_str_6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_6().data(), this->str_6().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str_6");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ext64_2;
        break;
      }

      // optional int64 ext64_2 = 18;
      case 18: {
        if (tag == 144) {
         parse_ext64_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext64_2_)));
          set_has_ext64_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ext64_3;
        break;
      }

      // optional int64 ext64_3 = 19;
      case 19: {
        if (tag == 152) {
         parse_ext64_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext64_3_)));
          set_has_ext64_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ext32_2;
        break;
      }

      // optional int32 ext32_2 = 20;
      case 20: {
        if (tag == 160) {
         parse_ext32_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ext32_2_)));
          set_has_ext32_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ext32_3;
        break;
      }

      // optional int32 ext32_3 = 21;
      case 21: {
        if (tag == 168) {
         parse_ext32_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ext32_3_)));
          set_has_ext32_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_extdb_2;
        break;
      }

      // optional double extdb_2 = 22;
      case 22: {
        if (tag == 177) {
         parse_extdb_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extdb_2_)));
          set_has_extdb_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_extdb_3;
        break;
      }

      // optional double extdb_3 = 23;
      case 23: {
        if (tag == 185) {
         parse_extdb_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extdb_3_)));
          set_has_extdb_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUpdateValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUpdateValue)
  return false;
#undef DO_
}

void MsgUpdateValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUpdateValue)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->val(), output);
  }

  // optional int32 ext32_0 = 3;
  if (has_ext32_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ext32_0(), output);
  }

  // optional int32 ext32_1 = 4;
  if (has_ext32_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ext32_1(), output);
  }

  // optional int64 ext64_0 = 5;
  if (has_ext64_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ext64_0(), output);
  }

  // optional int64 ext64_1 = 6;
  if (has_ext64_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ext64_1(), output);
  }

  // optional double extdb_0 = 7;
  if (has_extdb_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->extdb_0(), output);
  }

  // optional string str_0 = 8;
  if (has_str_0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_0().data(), this->str_0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->str_0(), output);
  }

  // optional string str_1 = 9;
  if (has_str_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_1().data(), this->str_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->str_1(), output);
  }

  // optional string str_2 = 10;
  if (has_str_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_2().data(), this->str_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->str_2(), output);
  }

  // optional string str_3 = 11;
  if (has_str_3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_3().data(), this->str_3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->str_3(), output);
  }

  // repeated .MsgUpdateValue key_values = 12;
  for (int i = 0; i < this->key_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->key_values(i), output);
  }

  // optional string str_4 = 13;
  if (has_str_4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_4().data(), this->str_4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->str_4(), output);
  }

  // optional string str_5 = 14;
  if (has_str_5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_5().data(), this->str_5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->str_5(), output);
  }

  // optional bytes buf_0 = 15;
  if (has_buf_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->buf_0(), output);
  }

  // optional double extdb_1 = 16;
  if (has_extdb_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->extdb_1(), output);
  }

  // optional string str_6 = 17;
  if (has_str_6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_6().data(), this->str_6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_6");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->str_6(), output);
  }

  // optional int64 ext64_2 = 18;
  if (has_ext64_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->ext64_2(), output);
  }

  // optional int64 ext64_3 = 19;
  if (has_ext64_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->ext64_3(), output);
  }

  // optional int32 ext32_2 = 20;
  if (has_ext32_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ext32_2(), output);
  }

  // optional int32 ext32_3 = 21;
  if (has_ext32_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ext32_3(), output);
  }

  // optional double extdb_2 = 22;
  if (has_extdb_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->extdb_2(), output);
  }

  // optional double extdb_3 = 23;
  if (has_extdb_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->extdb_3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUpdateValue)
}

::google::protobuf::uint8* MsgUpdateValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUpdateValue)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->val(), target);
  }

  // optional int32 ext32_0 = 3;
  if (has_ext32_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ext32_0(), target);
  }

  // optional int32 ext32_1 = 4;
  if (has_ext32_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ext32_1(), target);
  }

  // optional int64 ext64_0 = 5;
  if (has_ext64_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ext64_0(), target);
  }

  // optional int64 ext64_1 = 6;
  if (has_ext64_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ext64_1(), target);
  }

  // optional double extdb_0 = 7;
  if (has_extdb_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->extdb_0(), target);
  }

  // optional string str_0 = 8;
  if (has_str_0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_0().data(), this->str_0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_0");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->str_0(), target);
  }

  // optional string str_1 = 9;
  if (has_str_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_1().data(), this->str_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->str_1(), target);
  }

  // optional string str_2 = 10;
  if (has_str_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_2().data(), this->str_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->str_2(), target);
  }

  // optional string str_3 = 11;
  if (has_str_3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_3().data(), this->str_3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->str_3(), target);
  }

  // repeated .MsgUpdateValue key_values = 12;
  for (int i = 0; i < this->key_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->key_values(i), target);
  }

  // optional string str_4 = 13;
  if (has_str_4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_4().data(), this->str_4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->str_4(), target);
  }

  // optional string str_5 = 14;
  if (has_str_5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_5().data(), this->str_5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->str_5(), target);
  }

  // optional bytes buf_0 = 15;
  if (has_buf_0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->buf_0(), target);
  }

  // optional double extdb_1 = 16;
  if (has_extdb_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->extdb_1(), target);
  }

  // optional string str_6 = 17;
  if (has_str_6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_6().data(), this->str_6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str_6");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->str_6(), target);
  }

  // optional int64 ext64_2 = 18;
  if (has_ext64_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->ext64_2(), target);
  }

  // optional int64 ext64_3 = 19;
  if (has_ext64_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->ext64_3(), target);
  }

  // optional int32 ext32_2 = 20;
  if (has_ext32_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ext32_2(), target);
  }

  // optional int32 ext32_3 = 21;
  if (has_ext32_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ext32_3(), target);
  }

  // optional double extdb_2 = 22;
  if (has_extdb_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->extdb_2(), target);
  }

  // optional double extdb_3 = 23;
  if (has_extdb_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->extdb_3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUpdateValue)
  return target;
}

int MsgUpdateValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int64 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

    // optional int32 ext32_0 = 3;
    if (has_ext32_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ext32_0());
    }

    // optional int32 ext32_1 = 4;
    if (has_ext32_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ext32_1());
    }

    // optional int64 ext64_0 = 5;
    if (has_ext64_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext64_0());
    }

    // optional int64 ext64_1 = 6;
    if (has_ext64_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext64_1());
    }

    // optional double extdb_0 = 7;
    if (has_extdb_0()) {
      total_size += 1 + 8;
    }

    // optional string str_0 = 8;
    if (has_str_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_0());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string str_1 = 9;
    if (has_str_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_1());
    }

    // optional string str_2 = 10;
    if (has_str_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_2());
    }

    // optional string str_3 = 11;
    if (has_str_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_3());
    }

    // optional string str_4 = 13;
    if (has_str_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_4());
    }

    // optional string str_5 = 14;
    if (has_str_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_5());
    }

    // optional bytes buf_0 = 15;
    if (has_buf_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf_0());
    }

    // optional double extdb_1 = 16;
    if (has_extdb_1()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string str_6 = 17;
    if (has_str_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_6());
    }

    // optional int64 ext64_2 = 18;
    if (has_ext64_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext64_2());
    }

    // optional int64 ext64_3 = 19;
    if (has_ext64_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext64_3());
    }

    // optional int32 ext32_2 = 20;
    if (has_ext32_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ext32_2());
    }

    // optional int32 ext32_3 = 21;
    if (has_ext32_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ext32_3());
    }

    // optional double extdb_2 = 22;
    if (has_extdb_2()) {
      total_size += 2 + 8;
    }

    // optional double extdb_3 = 23;
    if (has_extdb_3()) {
      total_size += 2 + 8;
    }

  }
  // repeated .MsgUpdateValue key_values = 12;
  total_size += 1 * this->key_values_size();
  for (int i = 0; i < this->key_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUpdateValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpdateValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpdateValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpdateValue::MergeFrom(const MsgUpdateValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_values_.MergeFrom(from.key_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_ext32_0()) {
      set_ext32_0(from.ext32_0());
    }
    if (from.has_ext32_1()) {
      set_ext32_1(from.ext32_1());
    }
    if (from.has_ext64_0()) {
      set_ext64_0(from.ext64_0());
    }
    if (from.has_ext64_1()) {
      set_ext64_1(from.ext64_1());
    }
    if (from.has_extdb_0()) {
      set_extdb_0(from.extdb_0());
    }
    if (from.has_str_0()) {
      set_str_0(from.str_0());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_str_1()) {
      set_str_1(from.str_1());
    }
    if (from.has_str_2()) {
      set_str_2(from.str_2());
    }
    if (from.has_str_3()) {
      set_str_3(from.str_3());
    }
    if (from.has_str_4()) {
      set_str_4(from.str_4());
    }
    if (from.has_str_5()) {
      set_str_5(from.str_5());
    }
    if (from.has_buf_0()) {
      set_buf_0(from.buf_0());
    }
    if (from.has_extdb_1()) {
      set_extdb_1(from.extdb_1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_str_6()) {
      set_str_6(from.str_6());
    }
    if (from.has_ext64_2()) {
      set_ext64_2(from.ext64_2());
    }
    if (from.has_ext64_3()) {
      set_ext64_3(from.ext64_3());
    }
    if (from.has_ext32_2()) {
      set_ext32_2(from.ext32_2());
    }
    if (from.has_ext32_3()) {
      set_ext32_3(from.ext32_3());
    }
    if (from.has_extdb_2()) {
      set_extdb_2(from.extdb_2());
    }
    if (from.has_extdb_3()) {
      set_extdb_3(from.extdb_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpdateValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpdateValue::CopyFrom(const MsgUpdateValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateValue::IsInitialized() const {

  return true;
}

void MsgUpdateValue::Swap(MsgUpdateValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(val_, other->val_);
    std::swap(ext32_0_, other->ext32_0_);
    std::swap(ext32_1_, other->ext32_1_);
    std::swap(ext64_0_, other->ext64_0_);
    std::swap(ext64_1_, other->ext64_1_);
    std::swap(extdb_0_, other->extdb_0_);
    std::swap(str_0_, other->str_0_);
    std::swap(str_1_, other->str_1_);
    std::swap(str_2_, other->str_2_);
    std::swap(str_3_, other->str_3_);
    std::swap(str_4_, other->str_4_);
    std::swap(str_5_, other->str_5_);
    std::swap(buf_0_, other->buf_0_);
    std::swap(extdb_1_, other->extdb_1_);
    key_values_.Swap(&other->key_values_);
    std::swap(str_6_, other->str_6_);
    std::swap(ext64_2_, other->ext64_2_);
    std::swap(ext64_3_, other->ext64_3_);
    std::swap(ext32_2_, other->ext32_2_);
    std::swap(ext32_3_, other->ext32_3_);
    std::swap(extdb_2_, other->extdb_2_);
    std::swap(extdb_3_, other->extdb_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpdateValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpdateValue_descriptor_;
  metadata.reflection = MsgUpdateValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSetSession::kSeedFieldNumber;
const int MsgSetSession::kSessionFieldNumber;
#endif  // !_MSC_VER

MsgSetSession::MsgSetSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSetSession)
}

void MsgSetSession::InitAsDefaultInstance() {
}

MsgSetSession::MsgSetSession(const MsgSetSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSetSession)
}

void MsgSetSession::SharedCtor() {
  _cached_size_ = 0;
  seed_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSetSession::~MsgSetSession() {
  // @@protoc_insertion_point(destructor:MsgSetSession)
  SharedDtor();
}

void MsgSetSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSetSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSetSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSetSession_descriptor_;
}

const MsgSetSession& MsgSetSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgSetSession* MsgSetSession::default_instance_ = NULL;

MsgSetSession* MsgSetSession::New() const {
  return new MsgSetSession;
}

void MsgSetSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSetSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(session_, seed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSetSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSetSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 seed = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_session;
        break;
      }

      // optional fixed64 session = 2;
      case 2: {
        if (tag == 17) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSetSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSetSession)
  return false;
#undef DO_
}

void MsgSetSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSetSession)
  // optional fixed32 seed = 1;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->seed(), output);
  }

  // optional fixed64 session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSetSession)
}

::google::protobuf::uint8* MsgSetSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSetSession)
  // optional fixed32 seed = 1;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->seed(), target);
  }

  // optional fixed64 session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSetSession)
  return target;
}

int MsgSetSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 seed = 1;
    if (has_seed()) {
      total_size += 1 + 4;
    }

    // optional fixed64 session = 2;
    if (has_session()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSetSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSetSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSetSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSetSession::MergeFrom(const MsgSetSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSetSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSetSession::CopyFrom(const MsgSetSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSetSession::IsInitialized() const {

  return true;
}

void MsgSetSession::Swap(MsgSetSession* other) {
  if (other != this) {
    std::swap(seed_, other->seed_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSetSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSetSession_descriptor_;
  metadata.reflection = MsgSetSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterGame::kRoomTypeFieldNumber;
const int MsgEnterGame::kParam0FieldNumber;
#endif  // !_MSC_VER

MsgEnterGame::MsgEnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgEnterGame)
}

void MsgEnterGame::InitAsDefaultInstance() {
}

MsgEnterGame::MsgEnterGame(const MsgEnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgEnterGame)
}

void MsgEnterGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_0_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterGame::~MsgEnterGame() {
  // @@protoc_insertion_point(destructor:MsgEnterGame)
  SharedDtor();
}

void MsgEnterGame::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterGame_descriptor_;
}

const MsgEnterGame& MsgEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgEnterGame* MsgEnterGame::default_instance_ = NULL;

MsgEnterGame* MsgEnterGame::New() const {
  return new MsgEnterGame;
}

void MsgEnterGame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
    param_0_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgEnterGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param_0;
        break;
      }

      // optional uint32 param_0 = 2;
      case 2: {
        if (tag == 16) {
         parse_param_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_0_)));
          set_has_param_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgEnterGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgEnterGame)
  return false;
#undef DO_
}

void MsgEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgEnterGame)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // optional uint32 param_0 = 2;
  if (has_param_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgEnterGame)
}

::google::protobuf::uint8* MsgEnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgEnterGame)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // optional uint32 param_0 = 2;
  if (has_param_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgEnterGame)
  return target;
}

int MsgEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 param_0 = 2;
    if (has_param_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_0());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterGame::MergeFrom(const MsgEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_param_0()) {
      set_param_0(from.param_0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterGame::CopyFrom(const MsgEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterGame::IsInitialized() const {

  return true;
}

void MsgEnterGame::Swap(MsgEnterGame* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(param_0_, other->param_0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterGame_descriptor_;
  metadata.reflection = MsgEnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReward::kMoneyFieldNumber;
const int MsgReward::kTimeFieldNumber;
const int MsgReward::kCurrMoneyFieldNumber;
const int MsgReward::kRateFieldNumber;
const int MsgReward::kCouponFieldNumber;
#endif  // !_MSC_VER

MsgReward::MsgReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgReward)
}

void MsgReward::InitAsDefaultInstance() {
}

MsgReward::MsgReward(const MsgReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgReward)
}

void MsgReward::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  curr_money_ = GOOGLE_ULONGLONG(0);
  rate_ = 0;
  coupon_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReward::~MsgReward() {
  // @@protoc_insertion_point(destructor:MsgReward)
  SharedDtor();
}

void MsgReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReward_descriptor_;
}

const MsgReward& MsgReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgReward* MsgReward::default_instance_ = NULL;

MsgReward* MsgReward::New() const {
  return new MsgReward;
}

void MsgReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(money_, coupon_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_money;
        break;
      }

      // optional uint64 curr_money = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_money_)));
          set_has_curr_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_rate;
        break;
      }

      // optional float rate = 4;
      case 4: {
        if (tag == 37) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coupon;
        break;
      }

      // optional uint64 coupon = 5;
      case 5: {
        if (tag == 40) {
         parse_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &coupon_)));
          set_has_coupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgReward)
  return false;
#undef DO_
}

void MsgReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgReward)
  // optional uint64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->money(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional uint64 curr_money = 3;
  if (has_curr_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curr_money(), output);
  }

  // optional float rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rate(), output);
  }

  // optional uint64 coupon = 5;
  if (has_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->coupon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgReward)
}

::google::protobuf::uint8* MsgReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgReward)
  // optional uint64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->money(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional uint64 curr_money = 3;
  if (has_curr_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curr_money(), target);
  }

  // optional float rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rate(), target);
  }

  // optional uint64 coupon = 5;
  if (has_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->coupon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgReward)
  return target;
}

int MsgReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 curr_money = 3;
    if (has_curr_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_money());
    }

    // optional float rate = 4;
    if (has_rate()) {
      total_size += 1 + 4;
    }

    // optional uint64 coupon = 5;
    if (has_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->coupon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReward::MergeFrom(const MsgReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_curr_money()) {
      set_curr_money(from.curr_money());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_coupon()) {
      set_coupon(from.coupon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReward::CopyFrom(const MsgReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReward::IsInitialized() const {

  return true;
}

void MsgReward::Swap(MsgReward* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(time_, other->time_);
    std::swap(curr_money_, other->curr_money_);
    std::swap(rate_, other->rate_);
    std::swap(coupon_, other->coupon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReward_descriptor_;
  metadata.reflection = MsgReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRankingPlayer::kNameFieldNumber;
const int MsgRankingPlayer::kScoreFieldNumber;
const int MsgRankingPlayer::kRewardFieldNumber;
const int MsgRankingPlayer::kUsernameFieldNumber;
const int MsgRankingPlayer::kChannelIdFieldNumber;
const int MsgRankingPlayer::kRoleidFieldNumber;
const int MsgRankingPlayer::kHeadPortraitFieldNumber;
const int MsgRankingPlayer::kRankingFieldNumber;
const int MsgRankingPlayer::kLevelFieldNumber;
const int MsgRankingPlayer::kVipExpFieldNumber;
const int MsgRankingPlayer::kLastIpFieldNumber;
const int MsgRankingPlayer::kVipLevelFieldNumber;
#endif  // !_MSC_VER

MsgRankingPlayer::MsgRankingPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRankingPlayer)
}

void MsgRankingPlayer::InitAsDefaultInstance() {
}

MsgRankingPlayer::MsgRankingPlayer(const MsgRankingPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRankingPlayer)
}

void MsgRankingPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = GOOGLE_ULONGLONG(0);
  reward_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
  roleid_ = GOOGLE_ULONGLONG(0);
  head_portrait_ = 0u;
  ranking_ = 0u;
  level_ = 0u;
  vip_exp_ = 0u;
  last_ip_ = 0u;
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRankingPlayer::~MsgRankingPlayer() {
  // @@protoc_insertion_point(destructor:MsgRankingPlayer)
  SharedDtor();
}

void MsgRankingPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void MsgRankingPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRankingPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRankingPlayer_descriptor_;
}

const MsgRankingPlayer& MsgRankingPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRankingPlayer* MsgRankingPlayer::default_instance_ = NULL;

MsgRankingPlayer* MsgRankingPlayer::New() const {
  return new MsgRankingPlayer;
}

void MsgRankingPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRankingPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(score_, reward_);
    ZR_(roleid_, ranking_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  ZR_(level_, vip_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRankingPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRankingPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint64 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional uint64 reward = 3;
      case 3: {
        if (tag == 24) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // optional string username = 4;
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 5;
      case 5: {
        if (tag == 40) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roleid;
        break;
      }

      // optional uint64 roleid = 6;
      case 6: {
        if (tag == 48) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 7;
      case 7: {
        if (tag == 56) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ranking;
        break;
      }

      // optional uint32 ranking = 8;
      case 8: {
        if (tag == 64) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional uint32 level = 9;
      case 9: {
        if (tag == 72) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vip_exp;
        break;
      }

      // optional uint32 vip_exp = 10;
      case 10: {
        if (tag == 80) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_last_ip;
        break;
      }

      // optional uint32 last_ip = 11;
      case 11: {
        if (tag == 88) {
         parse_last_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ip_)));
          set_has_last_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 12;
      case 12: {
        if (tag == 96) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRankingPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRankingPlayer)
  return false;
#undef DO_
}

void MsgRankingPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRankingPlayer)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }

  // optional uint64 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->reward(), output);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // optional uint64 roleid = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->roleid(), output);
  }

  // optional uint32 head_portrait = 7;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->head_portrait(), output);
  }

  // optional uint32 ranking = 8;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ranking(), output);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // optional uint32 vip_exp = 10;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->vip_exp(), output);
  }

  // optional uint32 last_ip = 11;
  if (has_last_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->last_ip(), output);
  }

  // optional uint32 vip_level = 12;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRankingPlayer)
}

::google::protobuf::uint8* MsgRankingPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRankingPlayer)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }

  // optional uint64 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->reward(), target);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // optional uint64 roleid = 6;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->roleid(), target);
  }

  // optional uint32 head_portrait = 7;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->head_portrait(), target);
  }

  // optional uint32 ranking = 8;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ranking(), target);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // optional uint32 vip_exp = 10;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->vip_exp(), target);
  }

  // optional uint32 last_ip = 11;
  if (has_last_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->last_ip(), target);
  }

  // optional uint32 vip_level = 12;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRankingPlayer)
  return target;
}

int MsgRankingPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

    // optional uint64 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reward());
    }

    // optional string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint64 roleid = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 head_portrait = 7;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

    // optional uint32 ranking = 8;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vip_exp = 10;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp());
    }

    // optional uint32 last_ip = 11;
    if (has_last_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ip());
    }

    // optional uint32 vip_level = 12;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRankingPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRankingPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRankingPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRankingPlayer::MergeFrom(const MsgRankingPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_last_ip()) {
      set_last_ip(from.last_ip());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRankingPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRankingPlayer::CopyFrom(const MsgRankingPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRankingPlayer::IsInitialized() const {

  return true;
}

void MsgRankingPlayer::Swap(MsgRankingPlayer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(reward_, other->reward_);
    std::swap(username_, other->username_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(roleid_, other->roleid_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(ranking_, other->ranking_);
    std::swap(level_, other->level_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(last_ip_, other->last_ip_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRankingPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRankingPlayer_descriptor_;
  metadata.reflection = MsgRankingPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRankingTop::kPlayerListFieldNumber;
const int MsgRankingTop::kMyRankFieldNumber;
const int MsgRankingTop::kMyRewardFieldNumber;
const int MsgRankingTop::kPrizePoolFieldNumber;
const int MsgRankingTop::kPlayerNearFieldNumber;
const int MsgRankingTop::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

MsgRankingTop::MsgRankingTop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRankingTop)
}

void MsgRankingTop::InitAsDefaultInstance() {
}

MsgRankingTop::MsgRankingTop(const MsgRankingTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRankingTop)
}

void MsgRankingTop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  my_rank_ = 0u;
  my_reward_ = GOOGLE_ULONGLONG(0);
  prize_pool_ = GOOGLE_ULONGLONG(0);
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRankingTop::~MsgRankingTop() {
  // @@protoc_insertion_point(destructor:MsgRankingTop)
  SharedDtor();
}

void MsgRankingTop::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgRankingTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRankingTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRankingTop_descriptor_;
}

const MsgRankingTop& MsgRankingTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRankingTop* MsgRankingTop::default_instance_ = NULL;

MsgRankingTop* MsgRankingTop::New() const {
  return new MsgRankingTop;
}

void MsgRankingTop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRankingTop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 46) {
    ZR_(my_reward_, prize_pool_);
    my_rank_ = 0u;
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  player_near_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRankingTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRankingTop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgRankingPlayer player_list = 1;
      case 1: {
        if (tag == 10) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectTag(16)) goto parse_my_rank;
        break;
      }

      // optional uint32 my_rank = 2;
      case 2: {
        if (tag == 16) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_my_reward;
        break;
      }

      // optional uint64 my_reward = 3;
      case 3: {
        if (tag == 24) {
         parse_my_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_reward_)));
          set_has_my_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prize_pool;
        break;
      }

      // optional uint64 prize_pool = 4;
      case 4: {
        if (tag == 32) {
         parse_prize_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prize_pool_)));
          set_has_prize_pool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_near;
        break;
      }

      // repeated .MsgRankingPlayer player_near = 5;
      case 5: {
        if (tag == 42) {
         parse_player_near:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_near()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_near;
        if (input->ExpectTag(50)) goto parse_room_type;
        break;
      }

      // optional string room_type = 6;
      case 6: {
        if (tag == 50) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRankingTop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRankingTop)
  return false;
#undef DO_
}

void MsgRankingTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRankingTop)
  // repeated .MsgRankingPlayer player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }

  // optional uint32 my_rank = 2;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->my_rank(), output);
  }

  // optional uint64 my_reward = 3;
  if (has_my_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->my_reward(), output);
  }

  // optional uint64 prize_pool = 4;
  if (has_prize_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prize_pool(), output);
  }

  // repeated .MsgRankingPlayer player_near = 5;
  for (int i = 0; i < this->player_near_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_near(i), output);
  }

  // optional string room_type = 6;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRankingTop)
}

::google::protobuf::uint8* MsgRankingTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRankingTop)
  // repeated .MsgRankingPlayer player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }

  // optional uint32 my_rank = 2;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->my_rank(), target);
  }

  // optional uint64 my_reward = 3;
  if (has_my_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->my_reward(), target);
  }

  // optional uint64 prize_pool = 4;
  if (has_prize_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prize_pool(), target);
  }

  // repeated .MsgRankingPlayer player_near = 5;
  for (int i = 0; i < this->player_near_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_near(i), target);
  }

  // optional string room_type = 6;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRankingTop)
  return target;
}

int MsgRankingTop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 my_rank = 2;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_rank());
    }

    // optional uint64 my_reward = 3;
    if (has_my_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_reward());
    }

    // optional uint64 prize_pool = 4;
    if (has_prize_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prize_pool());
    }

    // optional string room_type = 6;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

  }
  // repeated .MsgRankingPlayer player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgRankingPlayer player_near = 5;
  total_size += 1 * this->player_near_size();
  for (int i = 0; i < this->player_near_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_near(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRankingTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRankingTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRankingTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRankingTop::MergeFrom(const MsgRankingTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  player_near_.MergeFrom(from.player_near_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
    if (from.has_my_reward()) {
      set_my_reward(from.my_reward());
    }
    if (from.has_prize_pool()) {
      set_prize_pool(from.prize_pool());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRankingTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRankingTop::CopyFrom(const MsgRankingTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRankingTop::IsInitialized() const {

  return true;
}

void MsgRankingTop::Swap(MsgRankingTop* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    std::swap(my_rank_, other->my_rank_);
    std::swap(my_reward_, other->my_reward_);
    std::swap(prize_pool_, other->prize_pool_);
    player_near_.Swap(&other->player_near_);
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRankingTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRankingTop_descriptor_;
  metadata.reflection = MsgRankingTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPrizePool::kRoomTypeFieldNumber;
const int MsgPrizePool::kPrizePoolFieldNumber;
#endif  // !_MSC_VER

MsgPrizePool::MsgPrizePool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPrizePool)
}

void MsgPrizePool::InitAsDefaultInstance() {
}

MsgPrizePool::MsgPrizePool(const MsgPrizePool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPrizePool)
}

void MsgPrizePool::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prize_pool_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPrizePool::~MsgPrizePool() {
  // @@protoc_insertion_point(destructor:MsgPrizePool)
  SharedDtor();
}

void MsgPrizePool::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgPrizePool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPrizePool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPrizePool_descriptor_;
}

const MsgPrizePool& MsgPrizePool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgPrizePool* MsgPrizePool::default_instance_ = NULL;

MsgPrizePool* MsgPrizePool::New() const {
  return new MsgPrizePool;
}

void MsgPrizePool::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
    prize_pool_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPrizePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPrizePool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prize_pool;
        break;
      }

      // optional uint64 prize_pool = 2;
      case 2: {
        if (tag == 16) {
         parse_prize_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prize_pool_)));
          set_has_prize_pool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPrizePool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPrizePool)
  return false;
#undef DO_
}

void MsgPrizePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPrizePool)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // optional uint64 prize_pool = 2;
  if (has_prize_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->prize_pool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPrizePool)
}

::google::protobuf::uint8* MsgPrizePool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPrizePool)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // optional uint64 prize_pool = 2;
  if (has_prize_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->prize_pool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPrizePool)
  return target;
}

int MsgPrizePool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint64 prize_pool = 2;
    if (has_prize_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prize_pool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPrizePool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPrizePool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPrizePool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPrizePool::MergeFrom(const MsgPrizePool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_prize_pool()) {
      set_prize_pool(from.prize_pool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPrizePool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPrizePool::CopyFrom(const MsgPrizePool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPrizePool::IsInitialized() const {

  return true;
}

void MsgPrizePool::Swap(MsgPrizePool* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(prize_pool_, other->prize_pool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPrizePool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPrizePool_descriptor_;
  metadata.reflection = MsgPrizePool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChat::kPidFieldNumber;
const int MsgChat::kTextFieldNumber;
const int MsgChat::kVoiceFieldNumber;
const int MsgChat::kChannelFieldNumber;
const int MsgChat::kChannelIdFieldNumber;
const int MsgChat::kUsernameFieldNumber;
const int MsgChat::kHeadPortraitFieldNumber;
const int MsgChat::kFaceFieldNumber;
const int MsgChat::kNameFieldNumber;
#endif  // !_MSC_VER

MsgChat::MsgChat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgChat)
}

void MsgChat::InitAsDefaultInstance() {
}

MsgChat::MsgChat(const MsgChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgChat)
}

void MsgChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
  channel_id_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_portrait_ = 0u;
  face_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChat::~MsgChat() {
  // @@protoc_insertion_point(destructor:MsgChat)
  SharedDtor();
}

void MsgChat::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChat_descriptor_;
}

const MsgChat& MsgChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgChat* MsgChat::default_instance_ = NULL;

MsgChat* MsgChat::New() const {
  return new MsgChat;
}

void MsgChat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgChat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(channel_, channel_id_);
    ZR_(head_portrait_, face_);
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // optional bytes voice = 3;
      case 3: {
        if (tag == 26) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional .TMsgChannel channel = 4;
      case 4: {
        if (tag == 32) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMsgChannel_IsValid(value)) {
            set_channel(static_cast< ::TMsgChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 5;
      case 5: {
        if (tag == 40) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_username;
        break;
      }

      // optional string username = 6;
      case 6: {
        if (tag == 50) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 7;
      case 7: {
        if (tag == 56) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_face;
        break;
      }

      // optional uint32 face = 8;
      case 8: {
        if (tag == 64) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgChat)
  return false;
#undef DO_
}

void MsgChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgChat)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->voice(), output);
  }

  // optional .TMsgChannel channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channel(), output);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  // optional uint32 head_portrait = 7;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->head_portrait(), output);
  }

  // optional uint32 face = 8;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->face(), output);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgChat)
}

::google::protobuf::uint8* MsgChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgChat)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bytes voice = 3;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->voice(), target);
  }

  // optional .TMsgChannel channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channel(), target);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  // optional uint32 head_portrait = 7;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->head_portrait(), target);
  }

  // optional uint32 face = 8;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->face(), target);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgChat)
  return target;
}

int MsgChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bytes voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional .TMsgChannel channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string username = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 head_portrait = 7;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

    // optional uint32 face = 8;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChat::MergeFrom(const MsgChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChat::CopyFrom(const MsgChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChat::IsInitialized() const {

  return true;
}

void MsgChat::Swap(MsgChat* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(text_, other->text_);
    std::swap(voice_, other->voice_);
    std::swap(channel_, other->channel_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(username_, other->username_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(face_, other->face_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChat_descriptor_;
  metadata.reflection = MsgChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTip::kSrcPidFieldNumber;
const int MsgTip::kDecPidFieldNumber;
const int MsgTip::kTipTypeFieldNumber;
#endif  // !_MSC_VER

MsgTip::MsgTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgTip)
}

void MsgTip::InitAsDefaultInstance() {
}

MsgTip::MsgTip(const MsgTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgTip)
}

void MsgTip::SharedCtor() {
  _cached_size_ = 0;
  src_pid_ = GOOGLE_ULONGLONG(0);
  dec_pid_ = GOOGLE_ULONGLONG(0);
  tip_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTip::~MsgTip() {
  // @@protoc_insertion_point(destructor:MsgTip)
  SharedDtor();
}

void MsgTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTip_descriptor_;
}

const MsgTip& MsgTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgTip* MsgTip::default_instance_ = NULL;

MsgTip* MsgTip::New() const {
  return new MsgTip;
}

void MsgTip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(src_pid_, tip_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_pid_)));
          set_has_src_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dec_pid;
        break;
      }

      // optional uint64 dec_pid = 2;
      case 2: {
        if (tag == 16) {
         parse_dec_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dec_pid_)));
          set_has_dec_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tip_type;
        break;
      }

      // optional uint32 tip_type = 3;
      case 3: {
        if (tag == 24) {
         parse_tip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tip_type_)));
          set_has_tip_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgTip)
  return false;
#undef DO_
}

void MsgTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgTip)
  // optional uint64 src_pid = 1;
  if (has_src_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_pid(), output);
  }

  // optional uint64 dec_pid = 2;
  if (has_dec_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dec_pid(), output);
  }

  // optional uint32 tip_type = 3;
  if (has_tip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tip_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgTip)
}

::google::protobuf::uint8* MsgTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTip)
  // optional uint64 src_pid = 1;
  if (has_src_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_pid(), target);
  }

  // optional uint64 dec_pid = 2;
  if (has_dec_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dec_pid(), target);
  }

  // optional uint32 tip_type = 3;
  if (has_tip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tip_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTip)
  return target;
}

int MsgTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_pid = 1;
    if (has_src_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_pid());
    }

    // optional uint64 dec_pid = 2;
    if (has_dec_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dec_pid());
    }

    // optional uint32 tip_type = 3;
    if (has_tip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tip_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTip::MergeFrom(const MsgTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pid()) {
      set_src_pid(from.src_pid());
    }
    if (from.has_dec_pid()) {
      set_dec_pid(from.dec_pid());
    }
    if (from.has_tip_type()) {
      set_tip_type(from.tip_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTip::CopyFrom(const MsgTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTip::IsInitialized() const {

  return true;
}

void MsgTip::Swap(MsgTip* other) {
  if (other != this) {
    std::swap(src_pid_, other->src_pid_);
    std::swap(dec_pid_, other->dec_pid_);
    std::swap(tip_type_, other->tip_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTip_descriptor_;
  metadata.reflection = MsgTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKPI::kKpiTypeFieldNumber;
const int MsgKPI::kKpiValueFieldNumber;
#endif  // !_MSC_VER

MsgKPI::MsgKPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgKPI)
}

void MsgKPI::InitAsDefaultInstance() {
}

MsgKPI::MsgKPI(const MsgKPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgKPI)
}

void MsgKPI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kpi_type_ = 1;
  kpi_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKPI::~MsgKPI() {
  // @@protoc_insertion_point(destructor:MsgKPI)
  SharedDtor();
}

void MsgKPI::SharedDtor() {
  if (kpi_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpi_value_;
  }
  if (this != default_instance_) {
  }
}

void MsgKPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgKPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKPI_descriptor_;
}

const MsgKPI& MsgKPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgKPI* MsgKPI::default_instance_ = NULL;

MsgKPI* MsgKPI::New() const {
  return new MsgKPI;
}

void MsgKPI::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    kpi_type_ = 1;
    if (has_kpi_value()) {
      if (kpi_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kpi_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgKPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TKPIType kpi_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TKPIType_IsValid(value)) {
            set_kpi_type(static_cast< ::TKPIType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kpi_value;
        break;
      }

      // optional bytes kpi_value = 2;
      case 2: {
        if (tag == 18) {
         parse_kpi_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kpi_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgKPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgKPI)
  return false;
#undef DO_
}

void MsgKPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgKPI)
  // optional .TKPIType kpi_type = 1;
  if (has_kpi_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kpi_type(), output);
  }

  // optional bytes kpi_value = 2;
  if (has_kpi_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->kpi_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgKPI)
}

::google::protobuf::uint8* MsgKPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgKPI)
  // optional .TKPIType kpi_type = 1;
  if (has_kpi_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kpi_type(), target);
  }

  // optional bytes kpi_value = 2;
  if (has_kpi_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->kpi_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgKPI)
  return target;
}

int MsgKPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TKPIType kpi_type = 1;
    if (has_kpi_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kpi_type());
    }

    // optional bytes kpi_value = 2;
    if (has_kpi_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kpi_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgKPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKPI::MergeFrom(const MsgKPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kpi_type()) {
      set_kpi_type(from.kpi_type());
    }
    if (from.has_kpi_value()) {
      set_kpi_value(from.kpi_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKPI::CopyFrom(const MsgKPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKPI::IsInitialized() const {

  return true;
}

void MsgKPI::Swap(MsgKPI* other) {
  if (other != this) {
    std::swap(kpi_type_, other->kpi_type_);
    std::swap(kpi_value_, other->kpi_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKPI_descriptor_;
  metadata.reflection = MsgKPI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKPICount::kKpiCountFieldNumber;
#endif  // !_MSC_VER

MsgKPICount::MsgKPICount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgKPICount)
}

void MsgKPICount::InitAsDefaultInstance() {
}

MsgKPICount::MsgKPICount(const MsgKPICount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgKPICount)
}

void MsgKPICount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKPICount::~MsgKPICount() {
  // @@protoc_insertion_point(destructor:MsgKPICount)
  SharedDtor();
}

void MsgKPICount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgKPICount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgKPICount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKPICount_descriptor_;
}

const MsgKPICount& MsgKPICount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgKPICount* MsgKPICount::default_instance_ = NULL;

MsgKPICount* MsgKPICount::New() const {
  return new MsgKPICount;
}

void MsgKPICount::Clear() {
  kpi_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKPICount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgKPICount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgKPI kpi_count = 1;
      case 1: {
        if (tag == 10) {
         parse_kpi_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kpi_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_kpi_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgKPICount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgKPICount)
  return false;
#undef DO_
}

void MsgKPICount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgKPICount)
  // repeated .MsgKPI kpi_count = 1;
  for (int i = 0; i < this->kpi_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kpi_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgKPICount)
}

::google::protobuf::uint8* MsgKPICount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgKPICount)
  // repeated .MsgKPI kpi_count = 1;
  for (int i = 0; i < this->kpi_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kpi_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgKPICount)
  return target;
}

int MsgKPICount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgKPI kpi_count = 1;
  total_size += 1 * this->kpi_count_size();
  for (int i = 0; i < this->kpi_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kpi_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgKPICount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKPICount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKPICount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKPICount::MergeFrom(const MsgKPICount& from) {
  GOOGLE_CHECK_NE(&from, this);
  kpi_count_.MergeFrom(from.kpi_count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKPICount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKPICount::CopyFrom(const MsgKPICount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKPICount::IsInitialized() const {

  return true;
}

void MsgKPICount::Swap(MsgKPICount* other) {
  if (other != this) {
    kpi_count_.Swap(&other->kpi_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKPICount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKPICount_descriptor_;
  metadata.reflection = MsgKPICount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoulette::kAngleFieldNumber;
const int MsgRoulette::kAddMoneyFieldNumber;
const int MsgRoulette::kCurrMoneyFieldNumber;
#endif  // !_MSC_VER

MsgRoulette::MsgRoulette()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoulette)
}

void MsgRoulette::InitAsDefaultInstance() {
}

MsgRoulette::MsgRoulette(const MsgRoulette& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoulette)
}

void MsgRoulette::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0u;
  add_money_ = GOOGLE_ULONGLONG(0);
  curr_money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoulette::~MsgRoulette() {
  // @@protoc_insertion_point(destructor:MsgRoulette)
  SharedDtor();
}

void MsgRoulette::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRoulette::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoulette::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoulette_descriptor_;
}

const MsgRoulette& MsgRoulette::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRoulette* MsgRoulette::default_instance_ = NULL;

MsgRoulette* MsgRoulette::New() const {
  return new MsgRoulette;
}

void MsgRoulette::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRoulette*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(add_money_, angle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoulette::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoulette)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 angle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add_money;
        break;
      }

      // optional uint64 add_money = 2;
      case 2: {
        if (tag == 16) {
         parse_add_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_money_)));
          set_has_add_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_money;
        break;
      }

      // optional uint64 curr_money = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_money_)));
          set_has_curr_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoulette)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoulette)
  return false;
#undef DO_
}

void MsgRoulette::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoulette)
  // optional uint32 angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->angle(), output);
  }

  // optional uint64 add_money = 2;
  if (has_add_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->add_money(), output);
  }

  // optional uint64 curr_money = 3;
  if (has_curr_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curr_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoulette)
}

::google::protobuf::uint8* MsgRoulette::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoulette)
  // optional uint32 angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->angle(), target);
  }

  // optional uint64 add_money = 2;
  if (has_add_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->add_money(), target);
  }

  // optional uint64 curr_money = 3;
  if (has_curr_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curr_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoulette)
  return target;
}

int MsgRoulette::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 angle = 1;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->angle());
    }

    // optional uint64 add_money = 2;
    if (has_add_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_money());
    }

    // optional uint64 curr_money = 3;
    if (has_curr_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoulette::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoulette* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoulette*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoulette::MergeFrom(const MsgRoulette& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_add_money()) {
      set_add_money(from.add_money());
    }
    if (from.has_curr_money()) {
      set_curr_money(from.curr_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoulette::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoulette::CopyFrom(const MsgRoulette& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoulette::IsInitialized() const {

  return true;
}

void MsgRoulette::Swap(MsgRoulette* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(add_money_, other->add_money_);
    std::swap(curr_money_, other->curr_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoulette::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoulette_descriptor_;
  metadata.reflection = MsgRoulette_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgViewerlist::kPlayerListFieldNumber;
#endif  // !_MSC_VER

MsgViewerlist::MsgViewerlist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgViewerlist)
}

void MsgViewerlist::InitAsDefaultInstance() {
}

MsgViewerlist::MsgViewerlist(const MsgViewerlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgViewerlist)
}

void MsgViewerlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgViewerlist::~MsgViewerlist() {
  // @@protoc_insertion_point(destructor:MsgViewerlist)
  SharedDtor();
}

void MsgViewerlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgViewerlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgViewerlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgViewerlist_descriptor_;
}

const MsgViewerlist& MsgViewerlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgViewerlist* MsgViewerlist::default_instance_ = NULL;

MsgViewerlist* MsgViewerlist::New() const {
  return new MsgViewerlist;
}

void MsgViewerlist::Clear() {
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgViewerlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgViewerlist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgPlayerInfo player_list = 1;
      case 1: {
        if (tag == 10) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgViewerlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgViewerlist)
  return false;
#undef DO_
}

void MsgViewerlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgViewerlist)
  // repeated .MsgPlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgViewerlist)
}

::google::protobuf::uint8* MsgViewerlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgViewerlist)
  // repeated .MsgPlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgViewerlist)
  return target;
}

int MsgViewerlist::ByteSize() const {
  int total_size = 0;

  // repeated .MsgPlayerInfo player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgViewerlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgViewerlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgViewerlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgViewerlist::MergeFrom(const MsgViewerlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgViewerlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgViewerlist::CopyFrom(const MsgViewerlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgViewerlist::IsInitialized() const {

  return true;
}

void MsgViewerlist::Swap(MsgViewerlist* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgViewerlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgViewerlist_descriptor_;
  metadata.reflection = MsgViewerlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShopBonusInfo::kItemIdFieldNumber;
const int MsgShopBonusInfo::kWeightFieldNumber;
const int MsgShopBonusInfo::kBonusFieldNumber;
const int MsgShopBonusInfo::kTimeFieldNumber;
const int MsgShopBonusInfo::kBaseRmbFieldNumber;
const int MsgShopBonusInfo::kRmbBonusFieldNumber;
#endif  // !_MSC_VER

MsgShopBonusInfo::MsgShopBonusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShopBonusInfo)
}

void MsgShopBonusInfo::InitAsDefaultInstance() {
}

MsgShopBonusInfo::MsgShopBonusInfo(const MsgShopBonusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShopBonusInfo)
}

void MsgShopBonusInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  weight_ = 0u;
  bonus_ = 0;
  time_ = 0u;
  base_rmb_ = GOOGLE_ULONGLONG(0);
  rmb_bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShopBonusInfo::~MsgShopBonusInfo() {
  // @@protoc_insertion_point(destructor:MsgShopBonusInfo)
  SharedDtor();
}

void MsgShopBonusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgShopBonusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShopBonusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShopBonusInfo_descriptor_;
}

const MsgShopBonusInfo& MsgShopBonusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgShopBonusInfo* MsgShopBonusInfo::default_instance_ = NULL;

MsgShopBonusInfo* MsgShopBonusInfo::New() const {
  return new MsgShopBonusInfo;
}

void MsgShopBonusInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgShopBonusInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(item_id_, rmb_bonus_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShopBonusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShopBonusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bonus;
        break;
      }

      // optional float bonus = 3;
      case 3: {
        if (tag == 29) {
         parse_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_)));
          set_has_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_base_rmb;
        break;
      }

      // optional uint64 base_rmb = 5;
      case 5: {
        if (tag == 40) {
         parse_base_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_rmb_)));
          set_has_base_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rmb_bonus;
        break;
      }

      // optional double rmb_bonus = 6;
      case 6: {
        if (tag == 49) {
         parse_rmb_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rmb_bonus_)));
          set_has_rmb_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShopBonusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShopBonusInfo)
  return false;
#undef DO_
}

void MsgShopBonusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShopBonusInfo)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  // optional float bonus = 3;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bonus(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional uint64 base_rmb = 5;
  if (has_base_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->base_rmb(), output);
  }

  // optional double rmb_bonus = 6;
  if (has_rmb_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rmb_bonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShopBonusInfo)
}

::google::protobuf::uint8* MsgShopBonusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShopBonusInfo)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  // optional float bonus = 3;
  if (has_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bonus(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional uint64 base_rmb = 5;
  if (has_base_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->base_rmb(), target);
  }

  // optional double rmb_bonus = 6;
  if (has_rmb_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rmb_bonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShopBonusInfo)
  return target;
}

int MsgShopBonusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // optional float bonus = 3;
    if (has_bonus()) {
      total_size += 1 + 4;
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 base_rmb = 5;
    if (has_base_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_rmb());
    }

    // optional double rmb_bonus = 6;
    if (has_rmb_bonus()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShopBonusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShopBonusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShopBonusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShopBonusInfo::MergeFrom(const MsgShopBonusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_bonus()) {
      set_bonus(from.bonus());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_base_rmb()) {
      set_base_rmb(from.base_rmb());
    }
    if (from.has_rmb_bonus()) {
      set_rmb_bonus(from.rmb_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShopBonusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShopBonusInfo::CopyFrom(const MsgShopBonusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShopBonusInfo::IsInitialized() const {

  return true;
}

void MsgShopBonusInfo::Swap(MsgShopBonusInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(weight_, other->weight_);
    std::swap(bonus_, other->bonus_);
    std::swap(time_, other->time_);
    std::swap(base_rmb_, other->base_rmb_);
    std::swap(rmb_bonus_, other->rmb_bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShopBonusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShopBonusInfo_descriptor_;
  metadata.reflection = MsgShopBonusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShopInfo::kShopBonusInfoFieldNumber;
#endif  // !_MSC_VER

MsgShopInfo::MsgShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShopInfo)
}

void MsgShopInfo::InitAsDefaultInstance() {
}

MsgShopInfo::MsgShopInfo(const MsgShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShopInfo)
}

void MsgShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShopInfo::~MsgShopInfo() {
  // @@protoc_insertion_point(destructor:MsgShopInfo)
  SharedDtor();
}

void MsgShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShopInfo_descriptor_;
}

const MsgShopInfo& MsgShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgShopInfo* MsgShopInfo::default_instance_ = NULL;

MsgShopInfo* MsgShopInfo::New() const {
  return new MsgShopInfo;
}

void MsgShopInfo::Clear() {
  shop_bonus_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgShopBonusInfo shop_bonus_info = 1;
      case 1: {
        if (tag == 10) {
         parse_shop_bonus_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_bonus_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shop_bonus_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShopInfo)
  return false;
#undef DO_
}

void MsgShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShopInfo)
  // repeated .MsgShopBonusInfo shop_bonus_info = 1;
  for (int i = 0; i < this->shop_bonus_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop_bonus_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShopInfo)
}

::google::protobuf::uint8* MsgShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShopInfo)
  // repeated .MsgShopBonusInfo shop_bonus_info = 1;
  for (int i = 0; i < this->shop_bonus_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop_bonus_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShopInfo)
  return target;
}

int MsgShopInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MsgShopBonusInfo shop_bonus_info = 1;
  total_size += 1 * this->shop_bonus_info_size();
  for (int i = 0; i < this->shop_bonus_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_bonus_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShopInfo::MergeFrom(const MsgShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_bonus_info_.MergeFrom(from.shop_bonus_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShopInfo::CopyFrom(const MsgShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShopInfo::IsInitialized() const {

  return true;
}

void MsgShopInfo::Swap(MsgShopInfo* other) {
  if (other != this) {
    shop_bonus_info_.Swap(&other->shop_bonus_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShopInfo_descriptor_;
  metadata.reflection = MsgShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoomInfoList::kRoomTypeFieldNumber;
const int MsgRoomInfoList::kTimeIDFieldNumber;
const int MsgRoomInfoList::kRoomNumFieldNumber;
const int MsgRoomInfoList::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

MsgRoomInfoList::MsgRoomInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoomInfoList)
}

void MsgRoomInfoList::InitAsDefaultInstance() {
}

MsgRoomInfoList::MsgRoomInfoList(const MsgRoomInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoomInfoList)
}

void MsgRoomInfoList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeid_ = 0u;
  room_num_ = 0u;
  player_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoomInfoList::~MsgRoomInfoList() {
  // @@protoc_insertion_point(destructor:MsgRoomInfoList)
  SharedDtor();
}

void MsgRoomInfoList::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgRoomInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoomInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoomInfoList_descriptor_;
}

const MsgRoomInfoList& MsgRoomInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRoomInfoList* MsgRoomInfoList::default_instance_ = NULL;

MsgRoomInfoList* MsgRoomInfoList::New() const {
  return new MsgRoomInfoList;
}

void MsgRoomInfoList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRoomInfoList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(timeid_, player_num_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoomInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoomInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeID;
        break;
      }

      // optional uint32 timeID = 2;
      case 2: {
        if (tag == 16) {
         parse_timeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeid_)));
          set_has_timeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_num;
        break;
      }

      // optional uint32 room_num = 3;
      case 3: {
        if (tag == 24) {
         parse_room_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_num_)));
          set_has_room_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 4;
      case 4: {
        if (tag == 32) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoomInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoomInfoList)
  return false;
#undef DO_
}

void MsgRoomInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoomInfoList)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // optional uint32 timeID = 2;
  if (has_timeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeid(), output);
  }

  // optional uint32 room_num = 3;
  if (has_room_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_num(), output);
  }

  // optional uint32 player_num = 4;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoomInfoList)
}

::google::protobuf::uint8* MsgRoomInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoomInfoList)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // optional uint32 timeID = 2;
  if (has_timeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeid(), target);
  }

  // optional uint32 room_num = 3;
  if (has_room_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_num(), target);
  }

  // optional uint32 player_num = 4;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoomInfoList)
  return target;
}

int MsgRoomInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 timeID = 2;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeid());
    }

    // optional uint32 room_num = 3;
    if (has_room_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_num());
    }

    // optional uint32 player_num = 4;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoomInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoomInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoomInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoomInfoList::MergeFrom(const MsgRoomInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_timeid()) {
      set_timeid(from.timeid());
    }
    if (from.has_room_num()) {
      set_room_num(from.room_num());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoomInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoomInfoList::CopyFrom(const MsgRoomInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoomInfoList::IsInitialized() const {

  return true;
}

void MsgRoomInfoList::Swap(MsgRoomInfoList* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(timeid_, other->timeid_);
    std::swap(room_num_, other->room_num_);
    std::swap(player_num_, other->player_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoomInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoomInfoList_descriptor_;
  metadata.reflection = MsgRoomInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgApplyRoomList::kRoomTypeFieldNumber;
const int MsgApplyRoomList::kTimeIDFieldNumber;
const int MsgApplyRoomList::kStateFieldNumber;
#endif  // !_MSC_VER

MsgApplyRoomList::MsgApplyRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgApplyRoomList)
}

void MsgApplyRoomList::InitAsDefaultInstance() {
}

MsgApplyRoomList::MsgApplyRoomList(const MsgApplyRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgApplyRoomList)
}

void MsgApplyRoomList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeid_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgApplyRoomList::~MsgApplyRoomList() {
  // @@protoc_insertion_point(destructor:MsgApplyRoomList)
  SharedDtor();
}

void MsgApplyRoomList::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgApplyRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgApplyRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgApplyRoomList_descriptor_;
}

const MsgApplyRoomList& MsgApplyRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgApplyRoomList* MsgApplyRoomList::default_instance_ = NULL;

MsgApplyRoomList* MsgApplyRoomList::New() const {
  return new MsgApplyRoomList;
}

void MsgApplyRoomList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgApplyRoomList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(timeid_, state_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgApplyRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgApplyRoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeID;
        break;
      }

      // optional uint32 timeID = 2;
      case 2: {
        if (tag == 16) {
         parse_timeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeid_)));
          set_has_timeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgApplyRoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgApplyRoomList)
  return false;
#undef DO_
}

void MsgApplyRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgApplyRoomList)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // optional uint32 timeID = 2;
  if (has_timeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeid(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgApplyRoomList)
}

::google::protobuf::uint8* MsgApplyRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgApplyRoomList)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // optional uint32 timeID = 2;
  if (has_timeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeid(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgApplyRoomList)
  return target;
}

int MsgApplyRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 timeID = 2;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeid());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgApplyRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgApplyRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgApplyRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgApplyRoomList::MergeFrom(const MsgApplyRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_timeid()) {
      set_timeid(from.timeid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgApplyRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyRoomList::CopyFrom(const MsgApplyRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyRoomList::IsInitialized() const {

  return true;
}

void MsgApplyRoomList::Swap(MsgApplyRoomList* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(timeid_, other->timeid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgApplyRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgApplyRoomList_descriptor_;
  metadata.reflection = MsgApplyRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoomInfo::kGameTypeFieldNumber;
const int MsgRoomInfo::kInfoListFieldNumber;
const int MsgRoomInfo::kApplyListFieldNumber;
#endif  // !_MSC_VER

MsgRoomInfo::MsgRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoomInfo)
}

void MsgRoomInfo::InitAsDefaultInstance() {
}

MsgRoomInfo::MsgRoomInfo(const MsgRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoomInfo)
}

void MsgRoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoomInfo::~MsgRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgRoomInfo)
  SharedDtor();
}

void MsgRoomInfo::SharedDtor() {
  if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoomInfo_descriptor_;
}

const MsgRoomInfo& MsgRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRoomInfo* MsgRoomInfo::default_instance_ = NULL;

MsgRoomInfo* MsgRoomInfo::New() const {
  return new MsgRoomInfo;
}

void MsgRoomInfo::Clear() {
  if (has_game_type()) {
    if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      game_type_->clear();
    }
  }
  info_list_.Clear();
  apply_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_type().data(), this->game_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info_list;
        break;
      }

      // repeated .MsgRoomInfoList info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info_list;
        if (input->ExpectTag(26)) goto parse_apply_list;
        break;
      }

      // repeated .MsgApplyRoomList apply_list = 3;
      case 3: {
        if (tag == 26) {
         parse_apply_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_apply_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoomInfo)
  return false;
#undef DO_
}

void MsgRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoomInfo)
  // optional string game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_type(), output);
  }

  // repeated .MsgRoomInfoList info_list = 2;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_list(i), output);
  }

  // repeated .MsgApplyRoomList apply_list = 3;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->apply_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoomInfo)
}

::google::protobuf::uint8* MsgRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoomInfo)
  // optional string game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_type(), target);
  }

  // repeated .MsgRoomInfoList info_list = 2;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_list(i), target);
  }

  // repeated .MsgApplyRoomList apply_list = 3;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->apply_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoomInfo)
  return target;
}

int MsgRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_type());
    }

  }
  // repeated .MsgRoomInfoList info_list = 2;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  // repeated .MsgApplyRoomList apply_list = 3;
  total_size += 1 * this->apply_list_size();
  for (int i = 0; i < this->apply_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoomInfo::MergeFrom(const MsgRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  apply_list_.MergeFrom(from.apply_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoomInfo::CopyFrom(const MsgRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoomInfo::IsInitialized() const {

  return true;
}

void MsgRoomInfo::Swap(MsgRoomInfo* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    info_list_.Swap(&other->info_list_);
    apply_list_.Swap(&other->apply_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoomInfo_descriptor_;
  metadata.reflection = MsgRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCBJRankInfoList::kPidFieldNumber;
const int MsgCBJRankInfoList::kRankFieldNumber;
#endif  // !_MSC_VER

MsgCBJRankInfoList::MsgCBJRankInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCBJRankInfoList)
}

void MsgCBJRankInfoList::InitAsDefaultInstance() {
}

MsgCBJRankInfoList::MsgCBJRankInfoList(const MsgCBJRankInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCBJRankInfoList)
}

void MsgCBJRankInfoList::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCBJRankInfoList::~MsgCBJRankInfoList() {
  // @@protoc_insertion_point(destructor:MsgCBJRankInfoList)
  SharedDtor();
}

void MsgCBJRankInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCBJRankInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCBJRankInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCBJRankInfoList_descriptor_;
}

const MsgCBJRankInfoList& MsgCBJRankInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgCBJRankInfoList* MsgCBJRankInfoList::default_instance_ = NULL;

MsgCBJRankInfoList* MsgCBJRankInfoList::New() const {
  return new MsgCBJRankInfoList;
}

void MsgCBJRankInfoList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCBJRankInfoList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCBJRankInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCBJRankInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCBJRankInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCBJRankInfoList)
  return false;
#undef DO_
}

void MsgCBJRankInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCBJRankInfoList)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCBJRankInfoList)
}

::google::protobuf::uint8* MsgCBJRankInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCBJRankInfoList)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCBJRankInfoList)
  return target;
}

int MsgCBJRankInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCBJRankInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCBJRankInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCBJRankInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCBJRankInfoList::MergeFrom(const MsgCBJRankInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCBJRankInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCBJRankInfoList::CopyFrom(const MsgCBJRankInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCBJRankInfoList::IsInitialized() const {

  return true;
}

void MsgCBJRankInfoList::Swap(MsgCBJRankInfoList* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCBJRankInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCBJRankInfoList_descriptor_;
  metadata.reflection = MsgCBJRankInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCBJRankInfo::kInfoListFieldNumber;
#endif  // !_MSC_VER

MsgCBJRankInfo::MsgCBJRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCBJRankInfo)
}

void MsgCBJRankInfo::InitAsDefaultInstance() {
}

MsgCBJRankInfo::MsgCBJRankInfo(const MsgCBJRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCBJRankInfo)
}

void MsgCBJRankInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCBJRankInfo::~MsgCBJRankInfo() {
  // @@protoc_insertion_point(destructor:MsgCBJRankInfo)
  SharedDtor();
}

void MsgCBJRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCBJRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCBJRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCBJRankInfo_descriptor_;
}

const MsgCBJRankInfo& MsgCBJRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgCBJRankInfo* MsgCBJRankInfo::default_instance_ = NULL;

MsgCBJRankInfo* MsgCBJRankInfo::New() const {
  return new MsgCBJRankInfo;
}

void MsgCBJRankInfo::Clear() {
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCBJRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCBJRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgCBJRankInfoList info_list = 1;
      case 1: {
        if (tag == 10) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCBJRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCBJRankInfo)
  return false;
#undef DO_
}

void MsgCBJRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCBJRankInfo)
  // repeated .MsgCBJRankInfoList info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCBJRankInfo)
}

::google::protobuf::uint8* MsgCBJRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCBJRankInfo)
  // repeated .MsgCBJRankInfoList info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCBJRankInfo)
  return target;
}

int MsgCBJRankInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MsgCBJRankInfoList info_list = 1;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCBJRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCBJRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCBJRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCBJRankInfo::MergeFrom(const MsgCBJRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCBJRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCBJRankInfo::CopyFrom(const MsgCBJRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCBJRankInfo::IsInitialized() const {

  return true;
}

void MsgCBJRankInfo::Swap(MsgCBJRankInfo* other) {
  if (other != this) {
    info_list_.Swap(&other->info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCBJRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCBJRankInfo_descriptor_;
  metadata.reflection = MsgCBJRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFreeMoney::kFreeMoneyNumFieldNumber;
const int MsgFreeMoney::kAddMoneyFieldNumber;
const int MsgFreeMoney::kCurrMoneyFieldNumber;
#endif  // !_MSC_VER

MsgFreeMoney::MsgFreeMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFreeMoney)
}

void MsgFreeMoney::InitAsDefaultInstance() {
}

MsgFreeMoney::MsgFreeMoney(const MsgFreeMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFreeMoney)
}

void MsgFreeMoney::SharedCtor() {
  _cached_size_ = 0;
  free_money_num_ = 0u;
  add_money_ = GOOGLE_ULONGLONG(0);
  curr_money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFreeMoney::~MsgFreeMoney() {
  // @@protoc_insertion_point(destructor:MsgFreeMoney)
  SharedDtor();
}

void MsgFreeMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFreeMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFreeMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFreeMoney_descriptor_;
}

const MsgFreeMoney& MsgFreeMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgFreeMoney* MsgFreeMoney::default_instance_ = NULL;

MsgFreeMoney* MsgFreeMoney::New() const {
  return new MsgFreeMoney;
}

void MsgFreeMoney::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgFreeMoney*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(add_money_, free_money_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFreeMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFreeMoney)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 free_money_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_money_num_)));
          set_has_free_money_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add_money;
        break;
      }

      // optional uint64 add_money = 2;
      case 2: {
        if (tag == 16) {
         parse_add_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_money_)));
          set_has_add_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_money;
        break;
      }

      // optional uint64 curr_money = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_money_)));
          set_has_curr_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFreeMoney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFreeMoney)
  return false;
#undef DO_
}

void MsgFreeMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFreeMoney)
  // optional uint32 free_money_num = 1;
  if (has_free_money_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->free_money_num(), output);
  }

  // optional uint64 add_money = 2;
  if (has_add_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->add_money(), output);
  }

  // optional uint64 curr_money = 3;
  if (has_curr_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curr_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFreeMoney)
}

::google::protobuf::uint8* MsgFreeMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFreeMoney)
  // optional uint32 free_money_num = 1;
  if (has_free_money_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->free_money_num(), target);
  }

  // optional uint64 add_money = 2;
  if (has_add_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->add_money(), target);
  }

  // optional uint64 curr_money = 3;
  if (has_curr_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curr_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFreeMoney)
  return target;
}

int MsgFreeMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 free_money_num = 1;
    if (has_free_money_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_money_num());
    }

    // optional uint64 add_money = 2;
    if (has_add_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_money());
    }

    // optional uint64 curr_money = 3;
    if (has_curr_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFreeMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFreeMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFreeMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFreeMoney::MergeFrom(const MsgFreeMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_free_money_num()) {
      set_free_money_num(from.free_money_num());
    }
    if (from.has_add_money()) {
      set_add_money(from.add_money());
    }
    if (from.has_curr_money()) {
      set_curr_money(from.curr_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFreeMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFreeMoney::CopyFrom(const MsgFreeMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFreeMoney::IsInitialized() const {

  return true;
}

void MsgFreeMoney::Swap(MsgFreeMoney* other) {
  if (other != this) {
    std::swap(free_money_num_, other->free_money_num_);
    std::swap(add_money_, other->add_money_);
    std::swap(curr_money_, other->curr_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFreeMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFreeMoney_descriptor_;
  metadata.reflection = MsgFreeMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAchievementInfo::kAchievementIdFieldNumber;
const int MsgAchievementInfo::kStateFieldNumber;
const int MsgAchievementInfo::kTargetFieldNumber;
#endif  // !_MSC_VER

MsgAchievementInfo::MsgAchievementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAchievementInfo)
}

void MsgAchievementInfo::InitAsDefaultInstance() {
}

MsgAchievementInfo::MsgAchievementInfo(const MsgAchievementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAchievementInfo)
}

void MsgAchievementInfo::SharedCtor() {
  _cached_size_ = 0;
  achievement_id_ = 0u;
  state_ = 0;
  target_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAchievementInfo::~MsgAchievementInfo() {
  // @@protoc_insertion_point(destructor:MsgAchievementInfo)
  SharedDtor();
}

void MsgAchievementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAchievementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAchievementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAchievementInfo_descriptor_;
}

const MsgAchievementInfo& MsgAchievementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgAchievementInfo* MsgAchievementInfo::default_instance_ = NULL;

MsgAchievementInfo* MsgAchievementInfo::New() const {
  return new MsgAchievementInfo;
}

void MsgAchievementInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAchievementInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(achievement_id_, target_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAchievementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAchievementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
          set_has_achievement_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .TAchievementState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TAchievementState_IsValid(value)) {
            set_state(static_cast< ::TAchievementState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional uint64 target = 3;
      case 3: {
        if (tag == 24) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAchievementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAchievementInfo)
  return false;
#undef DO_
}

void MsgAchievementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAchievementInfo)
  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // optional .TAchievementState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAchievementInfo)
}

::google::protobuf::uint8* MsgAchievementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAchievementInfo)
  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_id(), target);
  }

  // optional .TAchievementState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAchievementInfo)
  return target;
}

int MsgAchievementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 achievement_id = 1;
    if (has_achievement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_id());
    }

    // optional .TAchievementState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAchievementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAchievementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAchievementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAchievementInfo::MergeFrom(const MsgAchievementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement_id()) {
      set_achievement_id(from.achievement_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAchievementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAchievementInfo::CopyFrom(const MsgAchievementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAchievementInfo::IsInitialized() const {

  return true;
}

void MsgAchievementInfo::Swap(MsgAchievementInfo* other) {
  if (other != this) {
    std::swap(achievement_id_, other->achievement_id_);
    std::swap(state_, other->state_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAchievementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAchievementInfo_descriptor_;
  metadata.reflection = MsgAchievementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAchievementList::kAchievementListFieldNumber;
const int MsgAchievementList::kCheckFieldNumber;
#endif  // !_MSC_VER

MsgAchievementList::MsgAchievementList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAchievementList)
}

void MsgAchievementList::InitAsDefaultInstance() {
}

MsgAchievementList::MsgAchievementList(const MsgAchievementList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAchievementList)
}

void MsgAchievementList::SharedCtor() {
  _cached_size_ = 0;
  check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAchievementList::~MsgAchievementList() {
  // @@protoc_insertion_point(destructor:MsgAchievementList)
  SharedDtor();
}

void MsgAchievementList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAchievementList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAchievementList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAchievementList_descriptor_;
}

const MsgAchievementList& MsgAchievementList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgAchievementList* MsgAchievementList::default_instance_ = NULL;

MsgAchievementList* MsgAchievementList::New() const {
  return new MsgAchievementList;
}

void MsgAchievementList::Clear() {
  check_ = 0u;
  achievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAchievementList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAchievementList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgAchievementInfo achievement_list = 1;
      case 1: {
        if (tag == 10) {
         parse_achievement_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_achievement_list;
        if (input->ExpectTag(16)) goto parse_check;
        break;
      }

      // optional uint32 check = 2;
      case 2: {
        if (tag == 16) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAchievementList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAchievementList)
  return false;
#undef DO_
}

void MsgAchievementList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAchievementList)
  // repeated .MsgAchievementInfo achievement_list = 1;
  for (int i = 0; i < this->achievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement_list(i), output);
  }

  // optional uint32 check = 2;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAchievementList)
}

::google::protobuf::uint8* MsgAchievementList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAchievementList)
  // repeated .MsgAchievementInfo achievement_list = 1;
  for (int i = 0; i < this->achievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement_list(i), target);
  }

  // optional uint32 check = 2;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAchievementList)
  return target;
}

int MsgAchievementList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 check = 2;
    if (has_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check());
    }

  }
  // repeated .MsgAchievementInfo achievement_list = 1;
  total_size += 1 * this->achievement_list_size();
  for (int i = 0; i < this->achievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAchievementList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAchievementList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAchievementList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAchievementList::MergeFrom(const MsgAchievementList& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_list_.MergeFrom(from.achievement_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAchievementList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAchievementList::CopyFrom(const MsgAchievementList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAchievementList::IsInitialized() const {

  return true;
}

void MsgAchievementList::Swap(MsgAchievementList* other) {
  if (other != this) {
    achievement_list_.Swap(&other->achievement_list_);
    std::swap(check_, other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAchievementList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAchievementList_descriptor_;
  metadata.reflection = MsgAchievementList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCompleteAchievement::kAchievementsFieldNumber;
#endif  // !_MSC_VER

MsgCompleteAchievement::MsgCompleteAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCompleteAchievement)
}

void MsgCompleteAchievement::InitAsDefaultInstance() {
}

MsgCompleteAchievement::MsgCompleteAchievement(const MsgCompleteAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCompleteAchievement)
}

void MsgCompleteAchievement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  achievements_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCompleteAchievement::~MsgCompleteAchievement() {
  // @@protoc_insertion_point(destructor:MsgCompleteAchievement)
  SharedDtor();
}

void MsgCompleteAchievement::SharedDtor() {
  if (achievements_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete achievements_;
  }
  if (this != default_instance_) {
  }
}

void MsgCompleteAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCompleteAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCompleteAchievement_descriptor_;
}

const MsgCompleteAchievement& MsgCompleteAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgCompleteAchievement* MsgCompleteAchievement::default_instance_ = NULL;

MsgCompleteAchievement* MsgCompleteAchievement::New() const {
  return new MsgCompleteAchievement;
}

void MsgCompleteAchievement::Clear() {
  if (has_achievements()) {
    if (achievements_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      achievements_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCompleteAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCompleteAchievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes achievements = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_achievements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCompleteAchievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCompleteAchievement)
  return false;
#undef DO_
}

void MsgCompleteAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCompleteAchievement)
  // optional bytes achievements = 1;
  if (has_achievements()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->achievements(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCompleteAchievement)
}

::google::protobuf::uint8* MsgCompleteAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCompleteAchievement)
  // optional bytes achievements = 1;
  if (has_achievements()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->achievements(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCompleteAchievement)
  return target;
}

int MsgCompleteAchievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes achievements = 1;
    if (has_achievements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->achievements());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCompleteAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCompleteAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCompleteAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCompleteAchievement::MergeFrom(const MsgCompleteAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievements()) {
      set_achievements(from.achievements());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCompleteAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCompleteAchievement::CopyFrom(const MsgCompleteAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCompleteAchievement::IsInitialized() const {

  return true;
}

void MsgCompleteAchievement::Swap(MsgCompleteAchievement* other) {
  if (other != this) {
    std::swap(achievements_, other->achievements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCompleteAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCompleteAchievement_descriptor_;
  metadata.reflection = MsgCompleteAchievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStatisticsInfo::kStatisticsIdFieldNumber;
const int MsgStatisticsInfo::kCountFieldNumber;
#endif  // !_MSC_VER

MsgStatisticsInfo::MsgStatisticsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgStatisticsInfo)
}

void MsgStatisticsInfo::InitAsDefaultInstance() {
}

MsgStatisticsInfo::MsgStatisticsInfo(const MsgStatisticsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgStatisticsInfo)
}

void MsgStatisticsInfo::SharedCtor() {
  _cached_size_ = 0;
  statistics_id_ = 0u;
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStatisticsInfo::~MsgStatisticsInfo() {
  // @@protoc_insertion_point(destructor:MsgStatisticsInfo)
  SharedDtor();
}

void MsgStatisticsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStatisticsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStatisticsInfo_descriptor_;
}

const MsgStatisticsInfo& MsgStatisticsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgStatisticsInfo* MsgStatisticsInfo::default_instance_ = NULL;

MsgStatisticsInfo* MsgStatisticsInfo::New() const {
  return new MsgStatisticsInfo;
}

void MsgStatisticsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStatisticsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, statistics_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgStatisticsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 statistics_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statistics_id_)));
          set_has_statistics_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional sint64 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgStatisticsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgStatisticsInfo)
  return false;
#undef DO_
}

void MsgStatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgStatisticsInfo)
  // optional uint32 statistics_id = 1;
  if (has_statistics_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->statistics_id(), output);
  }

  // optional sint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgStatisticsInfo)
}

::google::protobuf::uint8* MsgStatisticsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgStatisticsInfo)
  // optional uint32 statistics_id = 1;
  if (has_statistics_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->statistics_id(), target);
  }

  // optional sint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgStatisticsInfo)
  return target;
}

int MsgStatisticsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 statistics_id = 1;
    if (has_statistics_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statistics_id());
    }

    // optional sint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStatisticsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStatisticsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStatisticsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStatisticsInfo::MergeFrom(const MsgStatisticsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statistics_id()) {
      set_statistics_id(from.statistics_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStatisticsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStatisticsInfo::CopyFrom(const MsgStatisticsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStatisticsInfo::IsInitialized() const {

  return true;
}

void MsgStatisticsInfo::Swap(MsgStatisticsInfo* other) {
  if (other != this) {
    std::swap(statistics_id_, other->statistics_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStatisticsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStatisticsInfo_descriptor_;
  metadata.reflection = MsgStatisticsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStatisticsList::kStatisticsListFieldNumber;
const int MsgStatisticsList::kRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgStatisticsList::MsgStatisticsList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgStatisticsList)
}

void MsgStatisticsList::InitAsDefaultInstance() {
}

MsgStatisticsList::MsgStatisticsList(const MsgStatisticsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgStatisticsList)
}

void MsgStatisticsList::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStatisticsList::~MsgStatisticsList() {
  // @@protoc_insertion_point(destructor:MsgStatisticsList)
  SharedDtor();
}

void MsgStatisticsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStatisticsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStatisticsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStatisticsList_descriptor_;
}

const MsgStatisticsList& MsgStatisticsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgStatisticsList* MsgStatisticsList::default_instance_ = NULL;

MsgStatisticsList* MsgStatisticsList::New() const {
  return new MsgStatisticsList;
}

void MsgStatisticsList::Clear() {
  role_id_ = GOOGLE_ULONGLONG(0);
  statistics_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStatisticsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgStatisticsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgStatisticsInfo statistics_list = 1;
      case 1: {
        if (tag == 10) {
         parse_statistics_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statistics_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_statistics_list;
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (tag == 16) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgStatisticsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgStatisticsList)
  return false;
#undef DO_
}

void MsgStatisticsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgStatisticsList)
  // repeated .MsgStatisticsInfo statistics_list = 1;
  for (int i = 0; i < this->statistics_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statistics_list(i), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgStatisticsList)
}

::google::protobuf::uint8* MsgStatisticsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgStatisticsList)
  // repeated .MsgStatisticsInfo statistics_list = 1;
  for (int i = 0; i < this->statistics_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statistics_list(i), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgStatisticsList)
  return target;
}

int MsgStatisticsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .MsgStatisticsInfo statistics_list = 1;
  total_size += 1 * this->statistics_list_size();
  for (int i = 0; i < this->statistics_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statistics_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStatisticsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStatisticsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStatisticsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStatisticsList::MergeFrom(const MsgStatisticsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  statistics_list_.MergeFrom(from.statistics_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStatisticsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStatisticsList::CopyFrom(const MsgStatisticsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStatisticsList::IsInitialized() const {

  return true;
}

void MsgStatisticsList::Swap(MsgStatisticsList* other) {
  if (other != this) {
    statistics_list_.Swap(&other->statistics_list_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStatisticsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStatisticsList_descriptor_;
  metadata.reflection = MsgStatisticsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJackpots::kGameTypeFieldNumber;
const int MsgJackpots::kJackpotsFieldNumber;
#endif  // !_MSC_VER

MsgJackpots::MsgJackpots()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgJackpots)
}

void MsgJackpots::InitAsDefaultInstance() {
}

MsgJackpots::MsgJackpots(const MsgJackpots& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgJackpots)
}

void MsgJackpots::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jackpots_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJackpots::~MsgJackpots() {
  // @@protoc_insertion_point(destructor:MsgJackpots)
  SharedDtor();
}

void MsgJackpots::SharedDtor() {
  if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgJackpots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJackpots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJackpots_descriptor_;
}

const MsgJackpots& MsgJackpots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgJackpots* MsgJackpots::default_instance_ = NULL;

MsgJackpots* MsgJackpots::New() const {
  return new MsgJackpots;
}

void MsgJackpots::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_game_type()) {
      if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_type_->clear();
      }
    }
    jackpots_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJackpots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgJackpots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_type().data(), this->game_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_jackpots;
        break;
      }

      // optional double jackpots = 2;
      case 2: {
        if (tag == 17) {
         parse_jackpots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jackpots_)));
          set_has_jackpots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgJackpots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgJackpots)
  return false;
#undef DO_
}

void MsgJackpots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgJackpots)
  // optional string game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_type(), output);
  }

  // optional double jackpots = 2;
  if (has_jackpots()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jackpots(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgJackpots)
}

::google::protobuf::uint8* MsgJackpots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgJackpots)
  // optional string game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_type(), target);
  }

  // optional double jackpots = 2;
  if (has_jackpots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jackpots(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgJackpots)
  return target;
}

int MsgJackpots::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_type());
    }

    // optional double jackpots = 2;
    if (has_jackpots()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJackpots::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJackpots* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJackpots*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJackpots::MergeFrom(const MsgJackpots& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_jackpots()) {
      set_jackpots(from.jackpots());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJackpots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJackpots::CopyFrom(const MsgJackpots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJackpots::IsInitialized() const {

  return true;
}

void MsgJackpots::Swap(MsgJackpots* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(jackpots_, other->jackpots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJackpots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJackpots_descriptor_;
  metadata.reflection = MsgJackpots_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAllJackpots::kJackpotsFieldNumber;
#endif  // !_MSC_VER

MsgAllJackpots::MsgAllJackpots()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAllJackpots)
}

void MsgAllJackpots::InitAsDefaultInstance() {
}

MsgAllJackpots::MsgAllJackpots(const MsgAllJackpots& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAllJackpots)
}

void MsgAllJackpots::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAllJackpots::~MsgAllJackpots() {
  // @@protoc_insertion_point(destructor:MsgAllJackpots)
  SharedDtor();
}

void MsgAllJackpots::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAllJackpots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAllJackpots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAllJackpots_descriptor_;
}

const MsgAllJackpots& MsgAllJackpots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgAllJackpots* MsgAllJackpots::default_instance_ = NULL;

MsgAllJackpots* MsgAllJackpots::New() const {
  return new MsgAllJackpots;
}

void MsgAllJackpots::Clear() {
  jackpots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAllJackpots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAllJackpots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgJackpots jackpots = 1;
      case 1: {
        if (tag == 10) {
         parse_jackpots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jackpots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_jackpots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAllJackpots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAllJackpots)
  return false;
#undef DO_
}

void MsgAllJackpots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAllJackpots)
  // repeated .MsgJackpots jackpots = 1;
  for (int i = 0; i < this->jackpots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jackpots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAllJackpots)
}

::google::protobuf::uint8* MsgAllJackpots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAllJackpots)
  // repeated .MsgJackpots jackpots = 1;
  for (int i = 0; i < this->jackpots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jackpots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAllJackpots)
  return target;
}

int MsgAllJackpots::ByteSize() const {
  int total_size = 0;

  // repeated .MsgJackpots jackpots = 1;
  total_size += 1 * this->jackpots_size();
  for (int i = 0; i < this->jackpots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jackpots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAllJackpots::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAllJackpots* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAllJackpots*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAllJackpots::MergeFrom(const MsgAllJackpots& from) {
  GOOGLE_CHECK_NE(&from, this);
  jackpots_.MergeFrom(from.jackpots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAllJackpots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAllJackpots::CopyFrom(const MsgAllJackpots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAllJackpots::IsInitialized() const {

  return true;
}

void MsgAllJackpots::Swap(MsgAllJackpots* other) {
  if (other != this) {
    jackpots_.Swap(&other->jackpots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAllJackpots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAllJackpots_descriptor_;
  metadata.reflection = MsgAllJackpots_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGift::kSrcPidFieldNumber;
const int MsgGift::kDecPidFieldNumber;
const int MsgGift::kTipMoneyFieldNumber;
const int MsgGift::kSrcCurrMoneyFieldNumber;
#endif  // !_MSC_VER

MsgGift::MsgGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGift)
}

void MsgGift::InitAsDefaultInstance() {
}

MsgGift::MsgGift(const MsgGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGift)
}

void MsgGift::SharedCtor() {
  _cached_size_ = 0;
  src_pid_ = GOOGLE_ULONGLONG(0);
  dec_pid_ = GOOGLE_ULONGLONG(0);
  tip_money_ = 0u;
  src_curr_money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGift::~MsgGift() {
  // @@protoc_insertion_point(destructor:MsgGift)
  SharedDtor();
}

void MsgGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGift_descriptor_;
}

const MsgGift& MsgGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgGift* MsgGift::default_instance_ = NULL;

MsgGift* MsgGift::New() const {
  return new MsgGift;
}

void MsgGift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(src_pid_, tip_money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_pid_)));
          set_has_src_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dec_pid;
        break;
      }

      // optional uint64 dec_pid = 2;
      case 2: {
        if (tag == 16) {
         parse_dec_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dec_pid_)));
          set_has_dec_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tip_money;
        break;
      }

      // optional uint32 tip_money = 3;
      case 3: {
        if (tag == 24) {
         parse_tip_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tip_money_)));
          set_has_tip_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_src_curr_money;
        break;
      }

      // optional uint64 src_curr_money = 4;
      case 4: {
        if (tag == 32) {
         parse_src_curr_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_curr_money_)));
          set_has_src_curr_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGift)
  return false;
#undef DO_
}

void MsgGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGift)
  // optional uint64 src_pid = 1;
  if (has_src_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_pid(), output);
  }

  // optional uint64 dec_pid = 2;
  if (has_dec_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dec_pid(), output);
  }

  // optional uint32 tip_money = 3;
  if (has_tip_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tip_money(), output);
  }

  // optional uint64 src_curr_money = 4;
  if (has_src_curr_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->src_curr_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGift)
}

::google::protobuf::uint8* MsgGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGift)
  // optional uint64 src_pid = 1;
  if (has_src_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_pid(), target);
  }

  // optional uint64 dec_pid = 2;
  if (has_dec_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dec_pid(), target);
  }

  // optional uint32 tip_money = 3;
  if (has_tip_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tip_money(), target);
  }

  // optional uint64 src_curr_money = 4;
  if (has_src_curr_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->src_curr_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGift)
  return target;
}

int MsgGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_pid = 1;
    if (has_src_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_pid());
    }

    // optional uint64 dec_pid = 2;
    if (has_dec_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dec_pid());
    }

    // optional uint32 tip_money = 3;
    if (has_tip_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tip_money());
    }

    // optional uint64 src_curr_money = 4;
    if (has_src_curr_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_curr_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGift::MergeFrom(const MsgGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pid()) {
      set_src_pid(from.src_pid());
    }
    if (from.has_dec_pid()) {
      set_dec_pid(from.dec_pid());
    }
    if (from.has_tip_money()) {
      set_tip_money(from.tip_money());
    }
    if (from.has_src_curr_money()) {
      set_src_curr_money(from.src_curr_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGift::CopyFrom(const MsgGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGift::IsInitialized() const {

  return true;
}

void MsgGift::Swap(MsgGift* other) {
  if (other != this) {
    std::swap(src_pid_, other->src_pid_);
    std::swap(dec_pid_, other->dec_pid_);
    std::swap(tip_money_, other->tip_money_);
    std::swap(src_curr_money_, other->src_curr_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGift_descriptor_;
  metadata.reflection = MsgGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgResGift::kNameFieldNumber;
const int MsgResGift::kTipMoneyFieldNumber;
#endif  // !_MSC_VER

MsgResGift::MsgResGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgResGift)
}

void MsgResGift::InitAsDefaultInstance() {
}

MsgResGift::MsgResGift(const MsgResGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgResGift)
}

void MsgResGift::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tip_money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgResGift::~MsgResGift() {
  // @@protoc_insertion_point(destructor:MsgResGift)
  SharedDtor();
}

void MsgResGift::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgResGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgResGift_descriptor_;
}

const MsgResGift& MsgResGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgResGift* MsgResGift::default_instance_ = NULL;

MsgResGift* MsgResGift::New() const {
  return new MsgResGift;
}

void MsgResGift::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    tip_money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgResGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgResGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tip_money;
        break;
      }

      // optional uint32 tip_money = 2;
      case 2: {
        if (tag == 16) {
         parse_tip_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tip_money_)));
          set_has_tip_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgResGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgResGift)
  return false;
#undef DO_
}

void MsgResGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgResGift)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 tip_money = 2;
  if (has_tip_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tip_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgResGift)
}

::google::protobuf::uint8* MsgResGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgResGift)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 tip_money = 2;
  if (has_tip_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tip_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgResGift)
  return target;
}

int MsgResGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 tip_money = 2;
    if (has_tip_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tip_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgResGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgResGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgResGift::MergeFrom(const MsgResGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tip_money()) {
      set_tip_money(from.tip_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgResGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResGift::CopyFrom(const MsgResGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResGift::IsInitialized() const {

  return true;
}

void MsgResGift::Swap(MsgResGift* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tip_money_, other->tip_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgResGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgResGift_descriptor_;
  metadata.reflection = MsgResGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSearchPlayerInfo::kNameFieldNumber;
const int MsgSearchPlayerInfo::kHeadPortraitFieldNumber;
const int MsgSearchPlayerInfo::kSexFieldNumber;
#endif  // !_MSC_VER

MsgSearchPlayerInfo::MsgSearchPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSearchPlayerInfo)
}

void MsgSearchPlayerInfo::InitAsDefaultInstance() {
}

MsgSearchPlayerInfo::MsgSearchPlayerInfo(const MsgSearchPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSearchPlayerInfo)
}

void MsgSearchPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_portrait_ = 0u;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSearchPlayerInfo::~MsgSearchPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgSearchPlayerInfo)
  SharedDtor();
}

void MsgSearchPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgSearchPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSearchPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSearchPlayerInfo_descriptor_;
}

const MsgSearchPlayerInfo& MsgSearchPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgSearchPlayerInfo* MsgSearchPlayerInfo::default_instance_ = NULL;

MsgSearchPlayerInfo* MsgSearchPlayerInfo::New() const {
  return new MsgSearchPlayerInfo;
}

void MsgSearchPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSearchPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(head_portrait_, sex_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSearchPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSearchPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_head_portrait;
        break;
      }

      // optional uint32 head_portrait = 2;
      case 2: {
        if (tag == 16) {
         parse_head_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_portrait_)));
          set_has_head_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSearchPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSearchPlayerInfo)
  return false;
#undef DO_
}

void MsgSearchPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSearchPlayerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 head_portrait = 2;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_portrait(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSearchPlayerInfo)
}

::google::protobuf::uint8* MsgSearchPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSearchPlayerInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 head_portrait = 2;
  if (has_head_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_portrait(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSearchPlayerInfo)
  return target;
}

int MsgSearchPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_portrait = 2;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_portrait());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSearchPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSearchPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSearchPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSearchPlayerInfo::MergeFrom(const MsgSearchPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSearchPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSearchPlayerInfo::CopyFrom(const MsgSearchPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSearchPlayerInfo::IsInitialized() const {

  return true;
}

void MsgSearchPlayerInfo::Swap(MsgSearchPlayerInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSearchPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSearchPlayerInfo_descriptor_;
  metadata.reflection = MsgSearchPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg7DaysReward::kMoneyFieldNumber;
const int Msg7DaysReward::kRmbFieldNumber;
const int Msg7DaysReward::kItemListFieldNumber;
const int Msg7DaysReward::kIntergralFieldNumber;
const int Msg7DaysReward::kWhichDayFieldNumber;
#endif  // !_MSC_VER

Msg7DaysReward::Msg7DaysReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Msg7DaysReward)
}

void Msg7DaysReward::InitAsDefaultInstance() {
}

Msg7DaysReward::Msg7DaysReward(const Msg7DaysReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Msg7DaysReward)
}

void Msg7DaysReward::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_ULONGLONG(0);
  rmb_ = GOOGLE_ULONGLONG(0);
  intergral_ = GOOGLE_ULONGLONG(0);
  which_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg7DaysReward::~Msg7DaysReward() {
  // @@protoc_insertion_point(destructor:Msg7DaysReward)
  SharedDtor();
}

void Msg7DaysReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg7DaysReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg7DaysReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg7DaysReward_descriptor_;
}

const Msg7DaysReward& Msg7DaysReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

Msg7DaysReward* Msg7DaysReward::default_instance_ = NULL;

Msg7DaysReward* Msg7DaysReward::New() const {
  return new Msg7DaysReward;
}

void Msg7DaysReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Msg7DaysReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(money_, rmb_);
  ZR_(intergral_, which_day_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg7DaysReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Msg7DaysReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rmb;
        break;
      }

      // optional uint64 rmb = 2;
      case 2: {
        if (tag == 16) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .MsgItem item_list = 3;
      case 3: {
        if (tag == 26) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(32)) goto parse_intergral;
        break;
      }

      // optional uint64 intergral = 4;
      case 4: {
        if (tag == 32) {
         parse_intergral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &intergral_)));
          set_has_intergral();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_which_day;
        break;
      }

      // optional uint32 which_day = 5;
      case 5: {
        if (tag == 40) {
         parse_which_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &which_day_)));
          set_has_which_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Msg7DaysReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Msg7DaysReward)
  return false;
#undef DO_
}

void Msg7DaysReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Msg7DaysReward)
  // optional uint64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->money(), output);
  }

  // optional uint64 rmb = 2;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rmb(), output);
  }

  // repeated .MsgItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // optional uint64 intergral = 4;
  if (has_intergral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->intergral(), output);
  }

  // optional uint32 which_day = 5;
  if (has_which_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->which_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Msg7DaysReward)
}

::google::protobuf::uint8* Msg7DaysReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg7DaysReward)
  // optional uint64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->money(), target);
  }

  // optional uint64 rmb = 2;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rmb(), target);
  }

  // repeated .MsgItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  // optional uint64 intergral = 4;
  if (has_intergral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->intergral(), target);
  }

  // optional uint32 which_day = 5;
  if (has_which_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->which_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg7DaysReward)
  return target;
}

int Msg7DaysReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // optional uint64 rmb = 2;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rmb());
    }

    // optional uint64 intergral = 4;
    if (has_intergral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->intergral());
    }

    // optional uint32 which_day = 5;
    if (has_which_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->which_day());
    }

  }
  // repeated .MsgItem item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg7DaysReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg7DaysReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg7DaysReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg7DaysReward::MergeFrom(const Msg7DaysReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_intergral()) {
      set_intergral(from.intergral());
    }
    if (from.has_which_day()) {
      set_which_day(from.which_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg7DaysReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg7DaysReward::CopyFrom(const Msg7DaysReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg7DaysReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_list())) return false;
  return true;
}

void Msg7DaysReward::Swap(Msg7DaysReward* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    item_list_.Swap(&other->item_list_);
    std::swap(intergral_, other->intergral_);
    std::swap(which_day_, other->which_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg7DaysReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg7DaysReward_descriptor_;
  metadata.reflection = Msg7DaysReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgItemParam::kTypeFieldNumber;
const int MsgItemParam::kValueFieldNumber;
#endif  // !_MSC_VER

MsgItemParam::MsgItemParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgItemParam)
}

void MsgItemParam::InitAsDefaultInstance() {
}

MsgItemParam::MsgItemParam(const MsgItemParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgItemParam)
}

void MsgItemParam::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgItemParam::~MsgItemParam() {
  // @@protoc_insertion_point(destructor:MsgItemParam)
  SharedDtor();
}

void MsgItemParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgItemParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgItemParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemParam_descriptor_;
}

const MsgItemParam& MsgItemParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgItemParam* MsgItemParam::default_instance_ = NULL;

MsgItemParam* MsgItemParam::New() const {
  return new MsgItemParam;
}

void MsgItemParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = -1;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgItemParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgItemParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ATTRIB_TYPE.TAttribType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ATTRIB_TYPE::TAttribType_IsValid(value)) {
            set_type(static_cast< ::ATTRIB_TYPE::TAttribType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional sint64 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgItemParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgItemParam)
  return false;
#undef DO_
}

void MsgItemParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgItemParam)
  // required .ATTRIB_TYPE.TAttribType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional sint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgItemParam)
}

::google::protobuf::uint8* MsgItemParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgItemParam)
  // required .ATTRIB_TYPE.TAttribType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional sint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgItemParam)
  return target;
}

int MsgItemParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ATTRIB_TYPE.TAttribType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional sint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgItemParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgItemParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgItemParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgItemParam::MergeFrom(const MsgItemParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgItemParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgItemParam::CopyFrom(const MsgItemParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgItemParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgItemParam::Swap(MsgItemParam* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgItemParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgItemParam_descriptor_;
  metadata.reflection = MsgItemParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgItem::kItemIdFieldNumber;
const int MsgItem::kTemplateIdFieldNumber;
const int MsgItem::kNumFieldNumber;
const int MsgItem::kConTypeFieldNumber;
const int MsgItem::kItemParamFieldNumber;
#endif  // !_MSC_VER

MsgItem::MsgItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgItem)
}

void MsgItem::InitAsDefaultInstance() {
}

MsgItem::MsgItem(const MsgItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgItem)
}

void MsgItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  num_ = 0u;
  con_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgItem::~MsgItem() {
  // @@protoc_insertion_point(destructor:MsgItem)
  SharedDtor();
}

void MsgItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItem_descriptor_;
}

const MsgItem& MsgItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgItem* MsgItem::default_instance_ = NULL;

MsgItem* MsgItem::New() const {
  return new MsgItem;
}

void MsgItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(item_id_, num_);
    con_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 item_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_con_type;
        break;
      }

      // optional uint32 con_type = 4;
      case 4: {
        if (tag == 32) {
         parse_con_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &con_type_)));
          set_has_con_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ItemParam;
        break;
      }

      // repeated .MsgItemParam ItemParam = 5;
      case 5: {
        if (tag == 42) {
         parse_ItemParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ItemParam;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgItem)
  return false;
#undef DO_
}

void MsgItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgItem)
  // optional fixed64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->item_id(), output);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->template_id(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional uint32 con_type = 4;
  if (has_con_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->con_type(), output);
  }

  // repeated .MsgItemParam ItemParam = 5;
  for (int i = 0; i < this->itemparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->itemparam(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgItem)
}

::google::protobuf::uint8* MsgItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgItem)
  // optional fixed64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->item_id(), target);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->template_id(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional uint32 con_type = 4;
  if (has_con_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->con_type(), target);
  }

  // repeated .MsgItemParam ItemParam = 5;
  for (int i = 0; i < this->itemparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->itemparam(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgItem)
  return target;
}

int MsgItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 con_type = 4;
    if (has_con_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->con_type());
    }

  }
  // repeated .MsgItemParam ItemParam = 5;
  total_size += 1 * this->itemparam_size();
  for (int i = 0; i < this->itemparam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemparam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgItem::MergeFrom(const MsgItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemparam_.MergeFrom(from.itemparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_con_type()) {
      set_con_type(from.con_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgItem::CopyFrom(const MsgItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->itemparam())) return false;
  return true;
}

void MsgItem::Swap(MsgItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(template_id_, other->template_id_);
    std::swap(num_, other->num_);
    std::swap(con_type_, other->con_type_);
    itemparam_.Swap(&other->itemparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgItem_descriptor_;
  metadata.reflection = MsgItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgItemCont::kMsgItemFieldNumber;
#endif  // !_MSC_VER

MsgItemCont::MsgItemCont()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgItemCont)
}

void MsgItemCont::InitAsDefaultInstance() {
}

MsgItemCont::MsgItemCont(const MsgItemCont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgItemCont)
}

void MsgItemCont::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgItemCont::~MsgItemCont() {
  // @@protoc_insertion_point(destructor:MsgItemCont)
  SharedDtor();
}

void MsgItemCont::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgItemCont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgItemCont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemCont_descriptor_;
}

const MsgItemCont& MsgItemCont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgItemCont* MsgItemCont::default_instance_ = NULL;

MsgItemCont* MsgItemCont::New() const {
  return new MsgItemCont;
}

void MsgItemCont::Clear() {
  msg_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgItemCont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgItemCont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgItem msg_item = 1;
      case 1: {
        if (tag == 10) {
         parse_msg_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msg_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgItemCont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgItemCont)
  return false;
#undef DO_
}

void MsgItemCont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgItemCont)
  // repeated .MsgItem msg_item = 1;
  for (int i = 0; i < this->msg_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgItemCont)
}

::google::protobuf::uint8* MsgItemCont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgItemCont)
  // repeated .MsgItem msg_item = 1;
  for (int i = 0; i < this->msg_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgItemCont)
  return target;
}

int MsgItemCont::ByteSize() const {
  int total_size = 0;

  // repeated .MsgItem msg_item = 1;
  total_size += 1 * this->msg_item_size();
  for (int i = 0; i < this->msg_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgItemCont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgItemCont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgItemCont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgItemCont::MergeFrom(const MsgItemCont& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_item_.MergeFrom(from.msg_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgItemCont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgItemCont::CopyFrom(const MsgItemCont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgItemCont::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_item())) return false;
  return true;
}

void MsgItemCont::Swap(MsgItemCont* other) {
  if (other != this) {
    msg_item_.Swap(&other->msg_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgItemCont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgItemCont_descriptor_;
  metadata.reflection = MsgItemCont_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLimitUse::kTemplateIdFieldNumber;
const int MsgLimitUse::kUseTimeFieldNumber;
#endif  // !_MSC_VER

MsgLimitUse::MsgLimitUse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgLimitUse)
}

void MsgLimitUse::InitAsDefaultInstance() {
}

MsgLimitUse::MsgLimitUse(const MsgLimitUse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgLimitUse)
}

void MsgLimitUse::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  use_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLimitUse::~MsgLimitUse() {
  // @@protoc_insertion_point(destructor:MsgLimitUse)
  SharedDtor();
}

void MsgLimitUse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLimitUse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLimitUse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLimitUse_descriptor_;
}

const MsgLimitUse& MsgLimitUse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgLimitUse* MsgLimitUse::default_instance_ = NULL;

MsgLimitUse* MsgLimitUse::New() const {
  return new MsgLimitUse;
}

void MsgLimitUse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgLimitUse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(template_id_, use_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLimitUse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgLimitUse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_time;
        break;
      }

      // optional uint32 use_time = 2;
      case 2: {
        if (tag == 16) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgLimitUse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgLimitUse)
  return false;
#undef DO_
}

void MsgLimitUse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgLimitUse)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgLimitUse)
}

::google::protobuf::uint8* MsgLimitUse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLimitUse)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLimitUse)
  return target;
}

int MsgLimitUse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint32 use_time = 2;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLimitUse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLimitUse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLimitUse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLimitUse::MergeFrom(const MsgLimitUse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLimitUse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLimitUse::CopyFrom(const MsgLimitUse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLimitUse::IsInitialized() const {

  return true;
}

void MsgLimitUse::Swap(MsgLimitUse* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(use_time_, other->use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLimitUse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLimitUse_descriptor_;
  metadata.reflection = MsgLimitUse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLimitUseCont::kMsgLimituseFieldNumber;
#endif  // !_MSC_VER

MsgLimitUseCont::MsgLimitUseCont()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgLimitUseCont)
}

void MsgLimitUseCont::InitAsDefaultInstance() {
}

MsgLimitUseCont::MsgLimitUseCont(const MsgLimitUseCont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgLimitUseCont)
}

void MsgLimitUseCont::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLimitUseCont::~MsgLimitUseCont() {
  // @@protoc_insertion_point(destructor:MsgLimitUseCont)
  SharedDtor();
}

void MsgLimitUseCont::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLimitUseCont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLimitUseCont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLimitUseCont_descriptor_;
}

const MsgLimitUseCont& MsgLimitUseCont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgLimitUseCont* MsgLimitUseCont::default_instance_ = NULL;

MsgLimitUseCont* MsgLimitUseCont::New() const {
  return new MsgLimitUseCont;
}

void MsgLimitUseCont::Clear() {
  msg_limituse_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLimitUseCont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgLimitUseCont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgLimitUse msg_limituse = 1;
      case 1: {
        if (tag == 10) {
         parse_msg_limituse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_limituse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msg_limituse;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgLimitUseCont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgLimitUseCont)
  return false;
#undef DO_
}

void MsgLimitUseCont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgLimitUseCont)
  // repeated .MsgLimitUse msg_limituse = 1;
  for (int i = 0; i < this->msg_limituse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_limituse(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgLimitUseCont)
}

::google::protobuf::uint8* MsgLimitUseCont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLimitUseCont)
  // repeated .MsgLimitUse msg_limituse = 1;
  for (int i = 0; i < this->msg_limituse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_limituse(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLimitUseCont)
  return target;
}

int MsgLimitUseCont::ByteSize() const {
  int total_size = 0;

  // repeated .MsgLimitUse msg_limituse = 1;
  total_size += 1 * this->msg_limituse_size();
  for (int i = 0; i < this->msg_limituse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_limituse(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLimitUseCont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLimitUseCont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLimitUseCont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLimitUseCont::MergeFrom(const MsgLimitUseCont& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_limituse_.MergeFrom(from.msg_limituse_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLimitUseCont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLimitUseCont::CopyFrom(const MsgLimitUseCont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLimitUseCont::IsInitialized() const {

  return true;
}

void MsgLimitUseCont::Swap(MsgLimitUseCont* other) {
  if (other != this) {
    msg_limituse_.Swap(&other->msg_limituse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLimitUseCont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLimitUseCont_descriptor_;
  metadata.reflection = MsgLimitUseCont_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSellItem::kTemplateIdFieldNumber;
const int MsgSellItem::kItemCountFieldNumber;
const int MsgSellItem::kSellCountFieldNumber;
#endif  // !_MSC_VER

MsgSellItem::MsgSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSellItem)
}

void MsgSellItem::InitAsDefaultInstance() {
}

MsgSellItem::MsgSellItem(const MsgSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSellItem)
}

void MsgSellItem::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  item_count_ = 0u;
  sell_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSellItem::~MsgSellItem() {
  // @@protoc_insertion_point(destructor:MsgSellItem)
  SharedDtor();
}

void MsgSellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSellItem_descriptor_;
}

const MsgSellItem& MsgSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgSellItem* MsgSellItem::default_instance_ = NULL;

MsgSellItem* MsgSellItem::New() const {
  return new MsgSellItem;
}

void MsgSellItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSellItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(template_id_, sell_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSellItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 2;
      case 2: {
        if (tag == 16) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sell_count;
        break;
      }

      // optional uint32 sell_count = 3;
      case 3: {
        if (tag == 24) {
         parse_sell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_count_)));
          set_has_sell_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSellItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSellItem)
  return false;
#undef DO_
}

void MsgSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSellItem)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  // optional uint32 sell_count = 3;
  if (has_sell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sell_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSellItem)
}

::google::protobuf::uint8* MsgSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSellItem)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  // optional uint32 sell_count = 3;
  if (has_sell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sell_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSellItem)
  return target;
}

int MsgSellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 sell_count = 3;
    if (has_sell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSellItem::MergeFrom(const MsgSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_sell_count()) {
      set_sell_count(from.sell_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSellItem::CopyFrom(const MsgSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSellItem::IsInitialized() const {

  return true;
}

void MsgSellItem::Swap(MsgSellItem* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(sell_count_, other->sell_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSellItem_descriptor_;
  metadata.reflection = MsgSellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUseItem::kTemplateIdFieldNumber;
const int MsgUseItem::kItemCountFieldNumber;
const int MsgUseItem::kUseCountFieldNumber;
const int MsgUseItem::kUseTargetFieldNumber;
#endif  // !_MSC_VER

MsgUseItem::MsgUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUseItem)
}

void MsgUseItem::InitAsDefaultInstance() {
}

MsgUseItem::MsgUseItem(const MsgUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUseItem)
}

void MsgUseItem::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  item_count_ = 0u;
  use_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUseItem::~MsgUseItem() {
  // @@protoc_insertion_point(destructor:MsgUseItem)
  SharedDtor();
}

void MsgUseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUseItem_descriptor_;
}

const MsgUseItem& MsgUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgUseItem* MsgUseItem::default_instance_ = NULL;

MsgUseItem* MsgUseItem::New() const {
  return new MsgUseItem;
}

void MsgUseItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUseItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(template_id_, item_count_);
    use_count_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  use_target_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 2;
      case 2: {
        if (tag == 16) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_count;
        break;
      }

      // optional uint32 use_count = 3;
      case 3: {
        if (tag == 24) {
         parse_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_count_)));
          set_has_use_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_use_target;
        break;
      }

      // repeated uint64 use_target = 4;
      case 4: {
        if (tag == 32) {
         parse_use_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_use_target())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_use_target())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_use_target;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUseItem)
  return false;
#undef DO_
}

void MsgUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUseItem)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  // optional uint32 use_count = 3;
  if (has_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->use_count(), output);
  }

  // repeated uint64 use_target = 4;
  for (int i = 0; i < this->use_target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->use_target(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUseItem)
}

::google::protobuf::uint8* MsgUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUseItem)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  // optional uint32 use_count = 3;
  if (has_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->use_count(), target);
  }

  // repeated uint64 use_target = 4;
  for (int i = 0; i < this->use_target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->use_target(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUseItem)
  return target;
}

int MsgUseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 use_count = 3;
    if (has_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_count());
    }

  }
  // repeated uint64 use_target = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->use_target_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->use_target(i));
    }
    total_size += 1 * this->use_target_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUseItem::MergeFrom(const MsgUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  use_target_.MergeFrom(from.use_target_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_use_count()) {
      set_use_count(from.use_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUseItem::CopyFrom(const MsgUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseItem::IsInitialized() const {

  return true;
}

void MsgUseItem::Swap(MsgUseItem* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(use_count_, other->use_count_);
    use_target_.Swap(&other->use_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUseItem_descriptor_;
  metadata.reflection = MsgUseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUseItemUpdate::kMoneyFieldNumber;
const int MsgUseItemUpdate::kItemInfoFieldNumber;
const int MsgUseItemUpdate::kItemAddFieldNumber;
const int MsgUseItemUpdate::kUsePidFieldNumber;
const int MsgUseItemUpdate::kUseTargetFieldNumber;
#endif  // !_MSC_VER

MsgUseItemUpdate::MsgUseItemUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUseItemUpdate)
}

void MsgUseItemUpdate::InitAsDefaultInstance() {
}

MsgUseItemUpdate::MsgUseItemUpdate(const MsgUseItemUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUseItemUpdate)
}

void MsgUseItemUpdate::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_ULONGLONG(0);
  use_pid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUseItemUpdate::~MsgUseItemUpdate() {
  // @@protoc_insertion_point(destructor:MsgUseItemUpdate)
  SharedDtor();
}

void MsgUseItemUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUseItemUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUseItemUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUseItemUpdate_descriptor_;
}

const MsgUseItemUpdate& MsgUseItemUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgUseItemUpdate* MsgUseItemUpdate::default_instance_ = NULL;

MsgUseItemUpdate* MsgUseItemUpdate::New() const {
  return new MsgUseItemUpdate;
}

void MsgUseItemUpdate::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    money_ = GOOGLE_ULONGLONG(0);
    use_pid_ = GOOGLE_ULONGLONG(0);
  }
  item_info_.Clear();
  item_add_.Clear();
  use_target_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUseItemUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUseItemUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // repeated .MsgItem item_info = 2;
      case 2: {
        if (tag == 18) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        if (input->ExpectTag(26)) goto parse_item_add;
        break;
      }

      // repeated .MsgItem item_add = 3;
      case 3: {
        if (tag == 26) {
         parse_item_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_add()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_add;
        if (input->ExpectTag(32)) goto parse_use_pid;
        break;
      }

      // optional uint64 use_pid = 4;
      case 4: {
        if (tag == 32) {
         parse_use_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &use_pid_)));
          set_has_use_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_target;
        break;
      }

      // repeated uint64 use_target = 5;
      case 5: {
        if (tag == 40) {
         parse_use_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_use_target())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_use_target())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_target;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUseItemUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUseItemUpdate)
  return false;
#undef DO_
}

void MsgUseItemUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUseItemUpdate)
  // optional uint64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->money(), output);
  }

  // repeated .MsgItem item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(i), output);
  }

  // repeated .MsgItem item_add = 3;
  for (int i = 0; i < this->item_add_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_add(i), output);
  }

  // optional uint64 use_pid = 4;
  if (has_use_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->use_pid(), output);
  }

  // repeated uint64 use_target = 5;
  for (int i = 0; i < this->use_target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->use_target(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUseItemUpdate)
}

::google::protobuf::uint8* MsgUseItemUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUseItemUpdate)
  // optional uint64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->money(), target);
  }

  // repeated .MsgItem item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(i), target);
  }

  // repeated .MsgItem item_add = 3;
  for (int i = 0; i < this->item_add_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_add(i), target);
  }

  // optional uint64 use_pid = 4;
  if (has_use_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->use_pid(), target);
  }

  // repeated uint64 use_target = 5;
  for (int i = 0; i < this->use_target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->use_target(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUseItemUpdate)
  return target;
}

int MsgUseItemUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // optional uint64 use_pid = 4;
    if (has_use_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->use_pid());
    }

  }
  // repeated .MsgItem item_info = 2;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }

  // repeated .MsgItem item_add = 3;
  total_size += 1 * this->item_add_size();
  for (int i = 0; i < this->item_add_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_add(i));
  }

  // repeated uint64 use_target = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->use_target_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->use_target(i));
    }
    total_size += 1 * this->use_target_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUseItemUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUseItemUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUseItemUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUseItemUpdate::MergeFrom(const MsgUseItemUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_info_.MergeFrom(from.item_info_);
  item_add_.MergeFrom(from.item_add_);
  use_target_.MergeFrom(from.use_target_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_use_pid()) {
      set_use_pid(from.use_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUseItemUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUseItemUpdate::CopyFrom(const MsgUseItemUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseItemUpdate::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_info())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item_add())) return false;
  return true;
}

void MsgUseItemUpdate::Swap(MsgUseItemUpdate* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    item_info_.Swap(&other->item_info_);
    item_add_.Swap(&other->item_add_);
    std::swap(use_pid_, other->use_pid_);
    use_target_.Swap(&other->use_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUseItemUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUseItemUpdate_descriptor_;
  metadata.reflection = MsgUseItemUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSellItemUpdate::kMoneyFieldNumber;
const int MsgSellItemUpdate::kItemInfoFieldNumber;
#endif  // !_MSC_VER

MsgSellItemUpdate::MsgSellItemUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSellItemUpdate)
}

void MsgSellItemUpdate::InitAsDefaultInstance() {
}

MsgSellItemUpdate::MsgSellItemUpdate(const MsgSellItemUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSellItemUpdate)
}

void MsgSellItemUpdate::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSellItemUpdate::~MsgSellItemUpdate() {
  // @@protoc_insertion_point(destructor:MsgSellItemUpdate)
  SharedDtor();
}

void MsgSellItemUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSellItemUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSellItemUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSellItemUpdate_descriptor_;
}

const MsgSellItemUpdate& MsgSellItemUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgSellItemUpdate* MsgSellItemUpdate::default_instance_ = NULL;

MsgSellItemUpdate* MsgSellItemUpdate::New() const {
  return new MsgSellItemUpdate;
}

void MsgSellItemUpdate::Clear() {
  money_ = GOOGLE_ULONGLONG(0);
  item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSellItemUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSellItemUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // repeated .MsgItem item_info = 2;
      case 2: {
        if (tag == 18) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSellItemUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSellItemUpdate)
  return false;
#undef DO_
}

void MsgSellItemUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSellItemUpdate)
  // optional uint64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->money(), output);
  }

  // repeated .MsgItem item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSellItemUpdate)
}

::google::protobuf::uint8* MsgSellItemUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSellItemUpdate)
  // optional uint64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->money(), target);
  }

  // repeated .MsgItem item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSellItemUpdate)
  return target;
}

int MsgSellItemUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

  }
  // repeated .MsgItem item_info = 2;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSellItemUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSellItemUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSellItemUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSellItemUpdate::MergeFrom(const MsgSellItemUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_info_.MergeFrom(from.item_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSellItemUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSellItemUpdate::CopyFrom(const MsgSellItemUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSellItemUpdate::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_info())) return false;
  return true;
}

void MsgSellItemUpdate::Swap(MsgSellItemUpdate* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    item_info_.Swap(&other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSellItemUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSellItemUpdate_descriptor_;
  metadata.reflection = MsgSellItemUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAddItems::kAddMoneyFieldNumber;
const int MsgAddItems::kCurrMoneyFieldNumber;
const int MsgAddItems::kAddItemsFieldNumber;
#endif  // !_MSC_VER

MsgAddItems::MsgAddItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAddItems)
}

void MsgAddItems::InitAsDefaultInstance() {
}

MsgAddItems::MsgAddItems(const MsgAddItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAddItems)
}

void MsgAddItems::SharedCtor() {
  _cached_size_ = 0;
  add_money_ = GOOGLE_ULONGLONG(0);
  curr_money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAddItems::~MsgAddItems() {
  // @@protoc_insertion_point(destructor:MsgAddItems)
  SharedDtor();
}

void MsgAddItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAddItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAddItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAddItems_descriptor_;
}

const MsgAddItems& MsgAddItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgAddItems* MsgAddItems::default_instance_ = NULL;

MsgAddItems* MsgAddItems::New() const {
  return new MsgAddItems;
}

void MsgAddItems::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAddItems*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(add_money_, curr_money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  add_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAddItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAddItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 add_money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_money_)));
          set_has_add_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curr_money;
        break;
      }

      // optional uint64 curr_money = 2;
      case 2: {
        if (tag == 16) {
         parse_curr_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_money_)));
          set_has_curr_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_add_items;
        break;
      }

      // repeated .MsgItem add_items = 3;
      case 3: {
        if (tag == 26) {
         parse_add_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_add_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAddItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAddItems)
  return false;
#undef DO_
}

void MsgAddItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAddItems)
  // optional uint64 add_money = 1;
  if (has_add_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->add_money(), output);
  }

  // optional uint64 curr_money = 2;
  if (has_curr_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->curr_money(), output);
  }

  // repeated .MsgItem add_items = 3;
  for (int i = 0; i < this->add_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->add_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAddItems)
}

::google::protobuf::uint8* MsgAddItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAddItems)
  // optional uint64 add_money = 1;
  if (has_add_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->add_money(), target);
  }

  // optional uint64 curr_money = 2;
  if (has_curr_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->curr_money(), target);
  }

  // repeated .MsgItem add_items = 3;
  for (int i = 0; i < this->add_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->add_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAddItems)
  return target;
}

int MsgAddItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 add_money = 1;
    if (has_add_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_money());
    }

    // optional uint64 curr_money = 2;
    if (has_curr_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_money());
    }

  }
  // repeated .MsgItem add_items = 3;
  total_size += 1 * this->add_items_size();
  for (int i = 0; i < this->add_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAddItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAddItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAddItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAddItems::MergeFrom(const MsgAddItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_items_.MergeFrom(from.add_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_money()) {
      set_add_money(from.add_money());
    }
    if (from.has_curr_money()) {
      set_curr_money(from.curr_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAddItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAddItems::CopyFrom(const MsgAddItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAddItems::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->add_items())) return false;
  return true;
}

void MsgAddItems::Swap(MsgAddItems* other) {
  if (other != this) {
    std::swap(add_money_, other->add_money_);
    std::swap(curr_money_, other->curr_money_);
    add_items_.Swap(&other->add_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAddItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAddItems_descriptor_;
  metadata.reflection = MsgAddItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingInfo::kMatchNameFieldNumber;
const int MsgQualifyingInfo::kMatchScoreFieldNumber;
const int MsgQualifyingInfo::kMatchCreditscoreFieldNumber;
const int MsgQualifyingInfo::kMatchDanFieldNumber;
const int MsgQualifyingInfo::kMatchStarFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingInfo::MsgQualifyingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingInfo)
}

void MsgQualifyingInfo::InitAsDefaultInstance() {
}

MsgQualifyingInfo::MsgQualifyingInfo(const MsgQualifyingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingInfo)
}

void MsgQualifyingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_score_ = 0u;
  match_creditscore_ = 0u;
  match_dan_ = 0u;
  match_star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingInfo::~MsgQualifyingInfo() {
  // @@protoc_insertion_point(destructor:MsgQualifyingInfo)
  SharedDtor();
}

void MsgQualifyingInfo::SharedDtor() {
  if (match_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete match_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgQualifyingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingInfo_descriptor_;
}

const MsgQualifyingInfo& MsgQualifyingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgQualifyingInfo* MsgQualifyingInfo::default_instance_ = NULL;

MsgQualifyingInfo* MsgQualifyingInfo::New() const {
  return new MsgQualifyingInfo;
}

void MsgQualifyingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQualifyingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(match_score_, match_star_);
    if (has_match_name()) {
      if (match_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        match_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string match_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_name().data(), this->match_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "match_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_score;
        break;
      }

      // optional uint32 match_score = 2;
      case 2: {
        if (tag == 16) {
         parse_match_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_score_)));
          set_has_match_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_match_creditscore;
        break;
      }

      // optional uint32 match_creditscore = 3;
      case 3: {
        if (tag == 24) {
         parse_match_creditscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_creditscore_)));
          set_has_match_creditscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_match_dan;
        break;
      }

      // optional uint32 match_dan = 4;
      case 4: {
        if (tag == 32) {
         parse_match_dan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_dan_)));
          set_has_match_dan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_match_star;
        break;
      }

      // optional uint32 match_star = 5;
      case 5: {
        if (tag == 40) {
         parse_match_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_star_)));
          set_has_match_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingInfo)
  return false;
#undef DO_
}

void MsgQualifyingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingInfo)
  // optional string match_name = 1;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_name(), output);
  }

  // optional uint32 match_score = 2;
  if (has_match_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->match_score(), output);
  }

  // optional uint32 match_creditscore = 3;
  if (has_match_creditscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->match_creditscore(), output);
  }

  // optional uint32 match_dan = 4;
  if (has_match_dan()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->match_dan(), output);
  }

  // optional uint32 match_star = 5;
  if (has_match_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingInfo)
}

::google::protobuf::uint8* MsgQualifyingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingInfo)
  // optional string match_name = 1;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_name(), target);
  }

  // optional uint32 match_score = 2;
  if (has_match_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->match_score(), target);
  }

  // optional uint32 match_creditscore = 3;
  if (has_match_creditscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->match_creditscore(), target);
  }

  // optional uint32 match_dan = 4;
  if (has_match_dan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->match_dan(), target);
  }

  // optional uint32 match_star = 5;
  if (has_match_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingInfo)
  return target;
}

int MsgQualifyingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string match_name = 1;
    if (has_match_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_name());
    }

    // optional uint32 match_score = 2;
    if (has_match_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_score());
    }

    // optional uint32 match_creditscore = 3;
    if (has_match_creditscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_creditscore());
    }

    // optional uint32 match_dan = 4;
    if (has_match_dan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_dan());
    }

    // optional uint32 match_star = 5;
    if (has_match_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingInfo::MergeFrom(const MsgQualifyingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_name()) {
      set_match_name(from.match_name());
    }
    if (from.has_match_score()) {
      set_match_score(from.match_score());
    }
    if (from.has_match_creditscore()) {
      set_match_creditscore(from.match_creditscore());
    }
    if (from.has_match_dan()) {
      set_match_dan(from.match_dan());
    }
    if (from.has_match_star()) {
      set_match_star(from.match_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingInfo::CopyFrom(const MsgQualifyingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingInfo::IsInitialized() const {

  return true;
}

void MsgQualifyingInfo::Swap(MsgQualifyingInfo* other) {
  if (other != this) {
    std::swap(match_name_, other->match_name_);
    std::swap(match_score_, other->match_score_);
    std::swap(match_creditscore_, other->match_creditscore_);
    std::swap(match_dan_, other->match_dan_);
    std::swap(match_star_, other->match_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingInfo_descriptor_;
  metadata.reflection = MsgQualifyingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQualifyingCount::kQualifyingListFieldNumber;
#endif  // !_MSC_VER

MsgQualifyingCount::MsgQualifyingCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQualifyingCount)
}

void MsgQualifyingCount::InitAsDefaultInstance() {
}

MsgQualifyingCount::MsgQualifyingCount(const MsgQualifyingCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQualifyingCount)
}

void MsgQualifyingCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQualifyingCount::~MsgQualifyingCount() {
  // @@protoc_insertion_point(destructor:MsgQualifyingCount)
  SharedDtor();
}

void MsgQualifyingCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQualifyingCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQualifyingCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQualifyingCount_descriptor_;
}

const MsgQualifyingCount& MsgQualifyingCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgQualifyingCount* MsgQualifyingCount::default_instance_ = NULL;

MsgQualifyingCount* MsgQualifyingCount::New() const {
  return new MsgQualifyingCount;
}

void MsgQualifyingCount::Clear() {
  qualifying_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQualifyingCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQualifyingCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgQualifyingInfo qualifying_list = 1;
      case 1: {
        if (tag == 10) {
         parse_qualifying_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qualifying_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_qualifying_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQualifyingCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQualifyingCount)
  return false;
#undef DO_
}

void MsgQualifyingCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQualifyingCount)
  // repeated .MsgQualifyingInfo qualifying_list = 1;
  for (int i = 0; i < this->qualifying_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qualifying_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQualifyingCount)
}

::google::protobuf::uint8* MsgQualifyingCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQualifyingCount)
  // repeated .MsgQualifyingInfo qualifying_list = 1;
  for (int i = 0; i < this->qualifying_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->qualifying_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQualifyingCount)
  return target;
}

int MsgQualifyingCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgQualifyingInfo qualifying_list = 1;
  total_size += 1 * this->qualifying_list_size();
  for (int i = 0; i < this->qualifying_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qualifying_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQualifyingCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQualifyingCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQualifyingCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQualifyingCount::MergeFrom(const MsgQualifyingCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  qualifying_list_.MergeFrom(from.qualifying_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQualifyingCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQualifyingCount::CopyFrom(const MsgQualifyingCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQualifyingCount::IsInitialized() const {

  return true;
}

void MsgQualifyingCount::Swap(MsgQualifyingCount* other) {
  if (other != this) {
    qualifying_list_.Swap(&other->qualifying_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQualifyingCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQualifyingCount_descriptor_;
  metadata.reflection = MsgQualifyingCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShareReward::kPlayerInfoFieldNumber;
const int MsgShareReward::kAddItemsFieldNumber;
#endif  // !_MSC_VER

MsgShareReward::MsgShareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShareReward)
}

void MsgShareReward::InitAsDefaultInstance() {
  player_info_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgShareReward::MsgShareReward(const MsgShareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShareReward)
}

void MsgShareReward::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShareReward::~MsgShareReward() {
  // @@protoc_insertion_point(destructor:MsgShareReward)
  SharedDtor();
}

void MsgShareReward::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void MsgShareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShareReward_descriptor_;
}

const MsgShareReward& MsgShareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgShareReward* MsgShareReward::default_instance_ = NULL;

MsgShareReward* MsgShareReward::New() const {
  return new MsgShareReward;
}

void MsgShareReward::Clear() {
  if (has_player_info()) {
    if (player_info_ != NULL) player_info_->::MsgPlayerInfo::Clear();
  }
  add_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShareReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_add_items;
        break;
      }

      // repeated .MsgItem add_items = 2;
      case 2: {
        if (tag == 18) {
         parse_add_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_add_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShareReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShareReward)
  return false;
#undef DO_
}

void MsgShareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShareReward)
  // optional .MsgPlayerInfo player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // repeated .MsgItem add_items = 2;
  for (int i = 0; i < this->add_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShareReward)
}

::google::protobuf::uint8* MsgShareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShareReward)
  // optional .MsgPlayerInfo player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // repeated .MsgItem add_items = 2;
  for (int i = 0; i < this->add_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->add_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShareReward)
  return target;
}

int MsgShareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  // repeated .MsgItem add_items = 2;
  total_size += 1 * this->add_items_size();
  for (int i = 0; i < this->add_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShareReward::MergeFrom(const MsgShareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_items_.MergeFrom(from.add_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::MsgPlayerInfo::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShareReward::CopyFrom(const MsgShareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShareReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->add_items())) return false;
  return true;
}

void MsgShareReward::Swap(MsgShareReward* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    add_items_.Swap(&other->add_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShareReward_descriptor_;
  metadata.reflection = MsgShareReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBindFriendReward::kDstPidFieldNumber;
const int MsgBindFriendReward::kDstStateFieldNumber;
const int MsgBindFriendReward::kDstCountFieldNumber;
const int MsgBindFriendReward::kAddItemsFieldNumber;
#endif  // !_MSC_VER

MsgBindFriendReward::MsgBindFriendReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBindFriendReward)
}

void MsgBindFriendReward::InitAsDefaultInstance() {
}

MsgBindFriendReward::MsgBindFriendReward(const MsgBindFriendReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBindFriendReward)
}

void MsgBindFriendReward::SharedCtor() {
  _cached_size_ = 0;
  dst_pid_ = GOOGLE_ULONGLONG(0);
  dst_state_ = 0u;
  dst_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBindFriendReward::~MsgBindFriendReward() {
  // @@protoc_insertion_point(destructor:MsgBindFriendReward)
  SharedDtor();
}

void MsgBindFriendReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBindFriendReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBindFriendReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBindFriendReward_descriptor_;
}

const MsgBindFriendReward& MsgBindFriendReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgBindFriendReward* MsgBindFriendReward::default_instance_ = NULL;

MsgBindFriendReward* MsgBindFriendReward::New() const {
  return new MsgBindFriendReward;
}

void MsgBindFriendReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgBindFriendReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dst_pid_, dst_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  add_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBindFriendReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBindFriendReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dst_pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_pid_)));
          set_has_dst_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst_state;
        break;
      }

      // optional uint32 dst_state = 2;
      case 2: {
        if (tag == 16) {
         parse_dst_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_state_)));
          set_has_dst_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dst_count;
        break;
      }

      // optional uint32 dst_count = 3;
      case 3: {
        if (tag == 24) {
         parse_dst_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_count_)));
          set_has_dst_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_add_items;
        break;
      }

      // repeated .MsgItem add_items = 4;
      case 4: {
        if (tag == 34) {
         parse_add_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_add_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBindFriendReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBindFriendReward)
  return false;
#undef DO_
}

void MsgBindFriendReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBindFriendReward)
  // optional uint64 dst_pid = 1;
  if (has_dst_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst_pid(), output);
  }

  // optional uint32 dst_state = 2;
  if (has_dst_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dst_state(), output);
  }

  // optional uint32 dst_count = 3;
  if (has_dst_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dst_count(), output);
  }

  // repeated .MsgItem add_items = 4;
  for (int i = 0; i < this->add_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->add_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBindFriendReward)
}

::google::protobuf::uint8* MsgBindFriendReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBindFriendReward)
  // optional uint64 dst_pid = 1;
  if (has_dst_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst_pid(), target);
  }

  // optional uint32 dst_state = 2;
  if (has_dst_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dst_state(), target);
  }

  // optional uint32 dst_count = 3;
  if (has_dst_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dst_count(), target);
  }

  // repeated .MsgItem add_items = 4;
  for (int i = 0; i < this->add_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->add_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBindFriendReward)
  return target;
}

int MsgBindFriendReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dst_pid = 1;
    if (has_dst_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_pid());
    }

    // optional uint32 dst_state = 2;
    if (has_dst_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_state());
    }

    // optional uint32 dst_count = 3;
    if (has_dst_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_count());
    }

  }
  // repeated .MsgItem add_items = 4;
  total_size += 1 * this->add_items_size();
  for (int i = 0; i < this->add_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBindFriendReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBindFriendReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBindFriendReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBindFriendReward::MergeFrom(const MsgBindFriendReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_items_.MergeFrom(from.add_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_pid()) {
      set_dst_pid(from.dst_pid());
    }
    if (from.has_dst_state()) {
      set_dst_state(from.dst_state());
    }
    if (from.has_dst_count()) {
      set_dst_count(from.dst_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBindFriendReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindFriendReward::CopyFrom(const MsgBindFriendReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindFriendReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->add_items())) return false;
  return true;
}

void MsgBindFriendReward::Swap(MsgBindFriendReward* other) {
  if (other != this) {
    std::swap(dst_pid_, other->dst_pid_);
    std::swap(dst_state_, other->dst_state_);
    std::swap(dst_count_, other->dst_count_);
    add_items_.Swap(&other->add_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBindFriendReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBindFriendReward_descriptor_;
  metadata.reflection = MsgBindFriendReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSaveAccountInfo::kPidFieldNumber;
const int MsgSaveAccountInfo::kEmailFieldNumber;
const int MsgSaveAccountInfo::kMobileFieldNumber;
const int MsgSaveAccountInfo::kPhoneFieldNumber;
const int MsgSaveAccountInfo::kSexFieldNumber;
#endif  // !_MSC_VER

MsgSaveAccountInfo::MsgSaveAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSaveAccountInfo)
}

void MsgSaveAccountInfo::InitAsDefaultInstance() {
}

MsgSaveAccountInfo::MsgSaveAccountInfo(const MsgSaveAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSaveAccountInfo)
}

void MsgSaveAccountInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSaveAccountInfo::~MsgSaveAccountInfo() {
  // @@protoc_insertion_point(destructor:MsgSaveAccountInfo)
  SharedDtor();
}

void MsgSaveAccountInfo::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void MsgSaveAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSaveAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSaveAccountInfo_descriptor_;
}

const MsgSaveAccountInfo& MsgSaveAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgSaveAccountInfo* MsgSaveAccountInfo::default_instance_ = NULL;

MsgSaveAccountInfo* MsgSaveAccountInfo::New() const {
  return new MsgSaveAccountInfo;
}

void MsgSaveAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSaveAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSaveAccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }

      // optional string email = 2;
      case 2: {
        if (tag == 18) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile;
        break;
      }

      // optional string mobile = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // optional string phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional .TSex sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSex_IsValid(value)) {
            set_sex(static_cast< ::TSex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSaveAccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSaveAccountInfo)
  return false;
#undef DO_
}

void MsgSaveAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSaveAccountInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional string email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->email(), output);
  }

  // optional string mobile = 3;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mobile(), output);
  }

  // optional string phone = 4;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phone(), output);
  }

  // optional .TSex sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSaveAccountInfo)
}

::google::protobuf::uint8* MsgSaveAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSaveAccountInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional string email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }

  // optional string mobile = 3;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mobile(), target);
  }

  // optional string phone = 4;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phone(), target);
  }

  // optional .TSex sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSaveAccountInfo)
  return target;
}

int MsgSaveAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional string email = 2;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string mobile = 3;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string phone = 4;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional .TSex sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSaveAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSaveAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSaveAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSaveAccountInfo::MergeFrom(const MsgSaveAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSaveAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSaveAccountInfo::CopyFrom(const MsgSaveAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSaveAccountInfo::IsInitialized() const {

  return true;
}

void MsgSaveAccountInfo::Swap(MsgSaveAccountInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(email_, other->email_);
    std::swap(mobile_, other->mobile_);
    std::swap(phone_, other->phone_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSaveAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSaveAccountInfo_descriptor_;
  metadata.reflection = MsgSaveAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMissionInfo::kMissionIdFieldNumber;
const int MsgMissionInfo::kTargetFieldNumber;
const int MsgMissionInfo::kStateFieldNumber;
#endif  // !_MSC_VER

MsgMissionInfo::MsgMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMissionInfo)
}

void MsgMissionInfo::InitAsDefaultInstance() {
}

MsgMissionInfo::MsgMissionInfo(const MsgMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMissionInfo)
}

void MsgMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0u;
  target_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionInfo::~MsgMissionInfo() {
  // @@protoc_insertion_point(destructor:MsgMissionInfo)
  SharedDtor();
}

void MsgMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionInfo_descriptor_;
}

const MsgMissionInfo& MsgMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgMissionInfo* MsgMissionInfo::default_instance_ = NULL;

MsgMissionInfo* MsgMissionInfo::New() const {
  return new MsgMissionInfo;
}

void MsgMissionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMissionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(target_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMissionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mission_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }

      // optional uint64 target = 2;
      case 2: {
        if (tag == 16) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .TMissionState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMissionState_IsValid(value)) {
            set_state(static_cast< ::TMissionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMissionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMissionInfo)
  return false;
#undef DO_
}

void MsgMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMissionInfo)
  // optional uint32 mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_id(), output);
  }

  // optional uint64 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target(), output);
  }

  // optional .TMissionState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMissionInfo)
}

::google::protobuf::uint8* MsgMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMissionInfo)
  // optional uint32 mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_id(), target);
  }

  // optional uint64 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target(), target);
  }

  // optional .TMissionState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMissionInfo)
  return target;
}

int MsgMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // optional uint64 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target());
    }

    // optional .TMissionState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionInfo::MergeFrom(const MsgMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionInfo::CopyFrom(const MsgMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionInfo::IsInitialized() const {

  return true;
}

void MsgMissionInfo::Swap(MsgMissionInfo* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(target_, other->target_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionInfo_descriptor_;
  metadata.reflection = MsgMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMissionList::kMissionListFieldNumber;
const int MsgMissionList::kCheckFieldNumber;
#endif  // !_MSC_VER

MsgMissionList::MsgMissionList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMissionList)
}

void MsgMissionList::InitAsDefaultInstance() {
}

MsgMissionList::MsgMissionList(const MsgMissionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMissionList)
}

void MsgMissionList::SharedCtor() {
  _cached_size_ = 0;
  check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionList::~MsgMissionList() {
  // @@protoc_insertion_point(destructor:MsgMissionList)
  SharedDtor();
}

void MsgMissionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMissionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMissionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionList_descriptor_;
}

const MsgMissionList& MsgMissionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgMissionList* MsgMissionList::default_instance_ = NULL;

MsgMissionList* MsgMissionList::New() const {
  return new MsgMissionList;
}

void MsgMissionList::Clear() {
  check_ = 0u;
  mission_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMissionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgMissionInfo mission_list = 1;
      case 1: {
        if (tag == 10) {
         parse_mission_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mission_list;
        if (input->ExpectTag(16)) goto parse_check;
        break;
      }

      // optional uint32 check = 2;
      case 2: {
        if (tag == 16) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMissionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMissionList)
  return false;
#undef DO_
}

void MsgMissionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMissionList)
  // repeated .MsgMissionInfo mission_list = 1;
  for (int i = 0; i < this->mission_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_list(i), output);
  }

  // optional uint32 check = 2;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMissionList)
}

::google::protobuf::uint8* MsgMissionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMissionList)
  // repeated .MsgMissionInfo mission_list = 1;
  for (int i = 0; i < this->mission_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission_list(i), target);
  }

  // optional uint32 check = 2;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMissionList)
  return target;
}

int MsgMissionList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 check = 2;
    if (has_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check());
    }

  }
  // repeated .MsgMissionInfo mission_list = 1;
  total_size += 1 * this->mission_list_size();
  for (int i = 0; i < this->mission_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMissionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionList::MergeFrom(const MsgMissionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_list_.MergeFrom(from.mission_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionList::CopyFrom(const MsgMissionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionList::IsInitialized() const {

  return true;
}

void MsgMissionList::Swap(MsgMissionList* other) {
  if (other != this) {
    mission_list_.Swap(&other->mission_list_);
    std::swap(check_, other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionList_descriptor_;
  metadata.reflection = MsgMissionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMissionReward::kMissionIdFieldNumber;
const int MsgMissionReward::kMoneyFieldNumber;
const int MsgMissionReward::kRmbFieldNumber;
const int MsgMissionReward::kMsgItemFieldNumber;
#endif  // !_MSC_VER

MsgMissionReward::MsgMissionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMissionReward)
}

void MsgMissionReward::InitAsDefaultInstance() {
}

MsgMissionReward::MsgMissionReward(const MsgMissionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMissionReward)
}

void MsgMissionReward::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0u;
  money_ = GOOGLE_ULONGLONG(0);
  rmb_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionReward::~MsgMissionReward() {
  // @@protoc_insertion_point(destructor:MsgMissionReward)
  SharedDtor();
}

void MsgMissionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMissionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMissionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionReward_descriptor_;
}

const MsgMissionReward& MsgMissionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgMissionReward* MsgMissionReward::default_instance_ = NULL;

MsgMissionReward* MsgMissionReward::New() const {
  return new MsgMissionReward;
}

void MsgMissionReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMissionReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(money_, rmb_);
    mission_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  msg_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMissionReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mission_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint64 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rmb;
        break;
      }

      // optional uint64 rmb = 3;
      case 3: {
        if (tag == 24) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_item;
        break;
      }

      // repeated .MsgItem msg_item = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMissionReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMissionReward)
  return false;
#undef DO_
}

void MsgMissionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMissionReward)
  // optional uint32 mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_id(), output);
  }

  // optional uint64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->money(), output);
  }

  // optional uint64 rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rmb(), output);
  }

  // repeated .MsgItem msg_item = 4;
  for (int i = 0; i < this->msg_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msg_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMissionReward)
}

::google::protobuf::uint8* MsgMissionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMissionReward)
  // optional uint32 mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_id(), target);
  }

  // optional uint64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->money(), target);
  }

  // optional uint64 rmb = 3;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rmb(), target);
  }

  // repeated .MsgItem msg_item = 4;
  for (int i = 0; i < this->msg_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMissionReward)
  return target;
}

int MsgMissionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // optional uint64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // optional uint64 rmb = 3;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rmb());
    }

  }
  // repeated .MsgItem msg_item = 4;
  total_size += 1 * this->msg_item_size();
  for (int i = 0; i < this->msg_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMissionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionReward::MergeFrom(const MsgMissionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_item_.MergeFrom(from.msg_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionReward::CopyFrom(const MsgMissionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_item())) return false;
  return true;
}

void MsgMissionReward::Swap(MsgMissionReward* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    msg_item_.Swap(&other->msg_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionReward_descriptor_;
  metadata.reflection = MsgMissionReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRequestList::kCheckFieldNumber;
#endif  // !_MSC_VER

MsgRequestList::MsgRequestList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRequestList)
}

void MsgRequestList::InitAsDefaultInstance() {
}

MsgRequestList::MsgRequestList(const MsgRequestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRequestList)
}

void MsgRequestList::SharedCtor() {
  _cached_size_ = 0;
  check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRequestList::~MsgRequestList() {
  // @@protoc_insertion_point(destructor:MsgRequestList)
  SharedDtor();
}

void MsgRequestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRequestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRequestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRequestList_descriptor_;
}

const MsgRequestList& MsgRequestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRequestList* MsgRequestList::default_instance_ = NULL;

MsgRequestList* MsgRequestList::New() const {
  return new MsgRequestList;
}

void MsgRequestList::Clear() {
  check_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRequestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRequestList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 check = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRequestList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRequestList)
  return false;
#undef DO_
}

void MsgRequestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRequestList)
  // optional uint32 check = 1;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRequestList)
}

::google::protobuf::uint8* MsgRequestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRequestList)
  // optional uint32 check = 1;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRequestList)
  return target;
}

int MsgRequestList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 check = 1;
    if (has_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRequestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRequestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRequestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRequestList::MergeFrom(const MsgRequestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRequestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRequestList::CopyFrom(const MsgRequestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRequestList::IsInitialized() const {

  return true;
}

void MsgRequestList::Swap(MsgRequestList* other) {
  if (other != this) {
    std::swap(check_, other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRequestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRequestList_descriptor_;
  metadata.reflection = MsgRequestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreBuyItem::kTemplateIdFieldNumber;
const int MsgStoreBuyItem::kCountFieldNumber;
#endif  // !_MSC_VER

MsgStoreBuyItem::MsgStoreBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgStoreBuyItem)
}

void MsgStoreBuyItem::InitAsDefaultInstance() {
}

MsgStoreBuyItem::MsgStoreBuyItem(const MsgStoreBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgStoreBuyItem)
}

void MsgStoreBuyItem::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreBuyItem::~MsgStoreBuyItem() {
  // @@protoc_insertion_point(destructor:MsgStoreBuyItem)
  SharedDtor();
}

void MsgStoreBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreBuyItem_descriptor_;
}

const MsgStoreBuyItem& MsgStoreBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgStoreBuyItem* MsgStoreBuyItem::default_instance_ = NULL;

MsgStoreBuyItem* MsgStoreBuyItem::New() const {
  return new MsgStoreBuyItem;
}

void MsgStoreBuyItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreBuyItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(template_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgStoreBuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgStoreBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgStoreBuyItem)
  return false;
#undef DO_
}

void MsgStoreBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgStoreBuyItem)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgStoreBuyItem)
}

::google::protobuf::uint8* MsgStoreBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgStoreBuyItem)
  // optional uint32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgStoreBuyItem)
  return target;
}

int MsgStoreBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreBuyItem::MergeFrom(const MsgStoreBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreBuyItem::CopyFrom(const MsgStoreBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreBuyItem::IsInitialized() const {

  return true;
}

void MsgStoreBuyItem::Swap(MsgStoreBuyItem* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreBuyItem_descriptor_;
  metadata.reflection = MsgStoreBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStoreBuyItemInfo::kMoneyFieldNumber;
const int MsgStoreBuyItemInfo::kRmbFieldNumber;
const int MsgStoreBuyItemInfo::kMsgItemFieldNumber;
const int MsgStoreBuyItemInfo::kVipTimeFieldNumber;
const int MsgStoreBuyItemInfo::kPointFieldNumber;
#endif  // !_MSC_VER

MsgStoreBuyItemInfo::MsgStoreBuyItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgStoreBuyItemInfo)
}

void MsgStoreBuyItemInfo::InitAsDefaultInstance() {
}

MsgStoreBuyItemInfo::MsgStoreBuyItemInfo(const MsgStoreBuyItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgStoreBuyItemInfo)
}

void MsgStoreBuyItemInfo::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  rmb_ = GOOGLE_LONGLONG(0);
  vip_time_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStoreBuyItemInfo::~MsgStoreBuyItemInfo() {
  // @@protoc_insertion_point(destructor:MsgStoreBuyItemInfo)
  SharedDtor();
}

void MsgStoreBuyItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStoreBuyItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStoreBuyItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStoreBuyItemInfo_descriptor_;
}

const MsgStoreBuyItemInfo& MsgStoreBuyItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgStoreBuyItemInfo* MsgStoreBuyItemInfo::default_instance_ = NULL;

MsgStoreBuyItemInfo* MsgStoreBuyItemInfo::New() const {
  return new MsgStoreBuyItemInfo;
}

void MsgStoreBuyItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStoreBuyItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(money_, rmb_);
  ZR_(vip_time_, point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  msg_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStoreBuyItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgStoreBuyItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rmb;
        break;
      }

      // optional int64 rmb = 2;
      case 2: {
        if (tag == 16) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg_item;
        break;
      }

      // repeated .MsgItem msg_item = 3;
      case 3: {
        if (tag == 26) {
         parse_msg_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg_item;
        if (input->ExpectTag(32)) goto parse_vip_time;
        break;
      }

      // optional uint32 vip_time = 4;
      case 4: {
        if (tag == 32) {
         parse_vip_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_time_)));
          set_has_vip_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_point;
        break;
      }

      // optional uint32 point = 5;
      case 5: {
        if (tag == 40) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgStoreBuyItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgStoreBuyItemInfo)
  return false;
#undef DO_
}

void MsgStoreBuyItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgStoreBuyItemInfo)
  // optional int64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->money(), output);
  }

  // optional int64 rmb = 2;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rmb(), output);
  }

  // repeated .MsgItem msg_item = 3;
  for (int i = 0; i < this->msg_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg_item(i), output);
  }

  // optional uint32 vip_time = 4;
  if (has_vip_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vip_time(), output);
  }

  // optional uint32 point = 5;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgStoreBuyItemInfo)
}

::google::protobuf::uint8* MsgStoreBuyItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgStoreBuyItemInfo)
  // optional int64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->money(), target);
  }

  // optional int64 rmb = 2;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rmb(), target);
  }

  // repeated .MsgItem msg_item = 3;
  for (int i = 0; i < this->msg_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg_item(i), target);
  }

  // optional uint32 vip_time = 4;
  if (has_vip_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vip_time(), target);
  }

  // optional uint32 point = 5;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgStoreBuyItemInfo)
  return target;
}

int MsgStoreBuyItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int64 rmb = 2;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rmb());
    }

    // optional uint32 vip_time = 4;
    if (has_vip_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_time());
    }

    // optional uint32 point = 5;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  // repeated .MsgItem msg_item = 3;
  total_size += 1 * this->msg_item_size();
  for (int i = 0; i < this->msg_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStoreBuyItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStoreBuyItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStoreBuyItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStoreBuyItemInfo::MergeFrom(const MsgStoreBuyItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_item_.MergeFrom(from.msg_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_vip_time()) {
      set_vip_time(from.vip_time());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStoreBuyItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStoreBuyItemInfo::CopyFrom(const MsgStoreBuyItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStoreBuyItemInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_item())) return false;
  return true;
}

void MsgStoreBuyItemInfo::Swap(MsgStoreBuyItemInfo* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    msg_item_.Swap(&other->msg_item_);
    std::swap(vip_time_, other->vip_time_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStoreBuyItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStoreBuyItemInfo_descriptor_;
  metadata.reflection = MsgStoreBuyItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAchievementReward::kAchievementIdFieldNumber;
const int MsgAchievementReward::kMoneyFieldNumber;
const int MsgAchievementReward::kRmbFieldNumber;
const int MsgAchievementReward::kMsgItemFieldNumber;
#endif  // !_MSC_VER

MsgAchievementReward::MsgAchievementReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAchievementReward)
}

void MsgAchievementReward::InitAsDefaultInstance() {
}

MsgAchievementReward::MsgAchievementReward(const MsgAchievementReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAchievementReward)
}

void MsgAchievementReward::SharedCtor() {
  _cached_size_ = 0;
  achievement_id_ = 0u;
  money_ = GOOGLE_LONGLONG(0);
  rmb_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAchievementReward::~MsgAchievementReward() {
  // @@protoc_insertion_point(destructor:MsgAchievementReward)
  SharedDtor();
}

void MsgAchievementReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAchievementReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAchievementReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAchievementReward_descriptor_;
}

const MsgAchievementReward& MsgAchievementReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgAchievementReward* MsgAchievementReward::default_instance_ = NULL;

MsgAchievementReward* MsgAchievementReward::New() const {
  return new MsgAchievementReward;
}

void MsgAchievementReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAchievementReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(money_, rmb_);
    achievement_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  msg_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAchievementReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAchievementReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
          set_has_achievement_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rmb;
        break;
      }

      // optional int64 rmb = 3;
      case 3: {
        if (tag == 24) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_item;
        break;
      }

      // repeated .MsgItem msg_item = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAchievementReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAchievementReward)
  return false;
#undef DO_
}

void MsgAchievementReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAchievementReward)
  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // optional int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // optional int64 rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rmb(), output);
  }

  // repeated .MsgItem msg_item = 4;
  for (int i = 0; i < this->msg_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msg_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAchievementReward)
}

::google::protobuf::uint8* MsgAchievementReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAchievementReward)
  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_id(), target);
  }

  // optional int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // optional int64 rmb = 3;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rmb(), target);
  }

  // repeated .MsgItem msg_item = 4;
  for (int i = 0; i < this->msg_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAchievementReward)
  return target;
}

int MsgAchievementReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 achievement_id = 1;
    if (has_achievement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_id());
    }

    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int64 rmb = 3;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rmb());
    }

  }
  // repeated .MsgItem msg_item = 4;
  total_size += 1 * this->msg_item_size();
  for (int i = 0; i < this->msg_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAchievementReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAchievementReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAchievementReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAchievementReward::MergeFrom(const MsgAchievementReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_item_.MergeFrom(from.msg_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement_id()) {
      set_achievement_id(from.achievement_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAchievementReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAchievementReward::CopyFrom(const MsgAchievementReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAchievementReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_item())) return false;
  return true;
}

void MsgAchievementReward::Swap(MsgAchievementReward* other) {
  if (other != this) {
    std::swap(achievement_id_, other->achievement_id_);
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    msg_item_.Swap(&other->msg_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAchievementReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAchievementReward_descriptor_;
  metadata.reflection = MsgAchievementReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBaseRoomPlayerInfo::kPidFieldNumber;
const int MsgBaseRoomPlayerInfo::kItemTipTidFieldNumber;
#endif  // !_MSC_VER

MsgBaseRoomPlayerInfo::MsgBaseRoomPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBaseRoomPlayerInfo)
}

void MsgBaseRoomPlayerInfo::InitAsDefaultInstance() {
}

MsgBaseRoomPlayerInfo::MsgBaseRoomPlayerInfo(const MsgBaseRoomPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBaseRoomPlayerInfo)
}

void MsgBaseRoomPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBaseRoomPlayerInfo::~MsgBaseRoomPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgBaseRoomPlayerInfo)
  SharedDtor();
}

void MsgBaseRoomPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBaseRoomPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBaseRoomPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBaseRoomPlayerInfo_descriptor_;
}

const MsgBaseRoomPlayerInfo& MsgBaseRoomPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgBaseRoomPlayerInfo* MsgBaseRoomPlayerInfo::default_instance_ = NULL;

MsgBaseRoomPlayerInfo* MsgBaseRoomPlayerInfo::New() const {
  return new MsgBaseRoomPlayerInfo;
}

void MsgBaseRoomPlayerInfo::Clear() {
  pid_ = GOOGLE_ULONGLONG(0);
  item_tip_tid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBaseRoomPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBaseRoomPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_tip_tid;
        break;
      }

      // repeated uint32 item_tip_tid = 2;
      case 2: {
        if (tag == 16) {
         parse_item_tip_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_item_tip_tid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_tip_tid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_tip_tid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBaseRoomPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBaseRoomPlayerInfo)
  return false;
#undef DO_
}

void MsgBaseRoomPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBaseRoomPlayerInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // repeated uint32 item_tip_tid = 2;
  for (int i = 0; i < this->item_tip_tid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->item_tip_tid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBaseRoomPlayerInfo)
}

::google::protobuf::uint8* MsgBaseRoomPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBaseRoomPlayerInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // repeated uint32 item_tip_tid = 2;
  for (int i = 0; i < this->item_tip_tid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->item_tip_tid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBaseRoomPlayerInfo)
  return target;
}

int MsgBaseRoomPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

  }
  // repeated uint32 item_tip_tid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_tip_tid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_tip_tid(i));
    }
    total_size += 1 * this->item_tip_tid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBaseRoomPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBaseRoomPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBaseRoomPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBaseRoomPlayerInfo::MergeFrom(const MsgBaseRoomPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_tip_tid_.MergeFrom(from.item_tip_tid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBaseRoomPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBaseRoomPlayerInfo::CopyFrom(const MsgBaseRoomPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBaseRoomPlayerInfo::IsInitialized() const {

  return true;
}

void MsgBaseRoomPlayerInfo::Swap(MsgBaseRoomPlayerInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    item_tip_tid_.Swap(&other->item_tip_tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBaseRoomPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBaseRoomPlayerInfo_descriptor_;
  metadata.reflection = MsgBaseRoomPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBaseRoomInfo::kBasePlayerInfoFieldNumber;
const int MsgBaseRoomInfo::kEnvelopeIdsFieldNumber;
const int MsgBaseRoomInfo::kSplitGiftIdsFieldNumber;
#endif  // !_MSC_VER

MsgBaseRoomInfo::MsgBaseRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBaseRoomInfo)
}

void MsgBaseRoomInfo::InitAsDefaultInstance() {
}

MsgBaseRoomInfo::MsgBaseRoomInfo(const MsgBaseRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBaseRoomInfo)
}

void MsgBaseRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBaseRoomInfo::~MsgBaseRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgBaseRoomInfo)
  SharedDtor();
}

void MsgBaseRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBaseRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBaseRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBaseRoomInfo_descriptor_;
}

const MsgBaseRoomInfo& MsgBaseRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgBaseRoomInfo* MsgBaseRoomInfo::default_instance_ = NULL;

MsgBaseRoomInfo* MsgBaseRoomInfo::New() const {
  return new MsgBaseRoomInfo;
}

void MsgBaseRoomInfo::Clear() {
  base_player_info_.Clear();
  envelope_ids_.Clear();
  split_gift_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBaseRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBaseRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgBaseRoomPlayerInfo base_player_info = 1;
      case 1: {
        if (tag == 10) {
         parse_base_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_base_player_info;
        if (input->ExpectTag(16)) goto parse_envelope_ids;
        break;
      }

      // repeated uint64 envelope_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_envelope_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_envelope_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_envelope_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_envelope_ids;
        if (input->ExpectTag(24)) goto parse_split_gift_ids;
        break;
      }

      // repeated uint64 split_gift_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_split_gift_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_split_gift_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_split_gift_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_split_gift_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBaseRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBaseRoomInfo)
  return false;
#undef DO_
}

void MsgBaseRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBaseRoomInfo)
  // repeated .MsgBaseRoomPlayerInfo base_player_info = 1;
  for (int i = 0; i < this->base_player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_player_info(i), output);
  }

  // repeated uint64 envelope_ids = 2;
  for (int i = 0; i < this->envelope_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->envelope_ids(i), output);
  }

  // repeated uint64 split_gift_ids = 3;
  for (int i = 0; i < this->split_gift_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->split_gift_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBaseRoomInfo)
}

::google::protobuf::uint8* MsgBaseRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBaseRoomInfo)
  // repeated .MsgBaseRoomPlayerInfo base_player_info = 1;
  for (int i = 0; i < this->base_player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_player_info(i), target);
  }

  // repeated uint64 envelope_ids = 2;
  for (int i = 0; i < this->envelope_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->envelope_ids(i), target);
  }

  // repeated uint64 split_gift_ids = 3;
  for (int i = 0; i < this->split_gift_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->split_gift_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBaseRoomInfo)
  return target;
}

int MsgBaseRoomInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MsgBaseRoomPlayerInfo base_player_info = 1;
  total_size += 1 * this->base_player_info_size();
  for (int i = 0; i < this->base_player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_player_info(i));
  }

  // repeated uint64 envelope_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->envelope_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->envelope_ids(i));
    }
    total_size += 1 * this->envelope_ids_size() + data_size;
  }

  // repeated uint64 split_gift_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->split_gift_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->split_gift_ids(i));
    }
    total_size += 1 * this->split_gift_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBaseRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBaseRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBaseRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBaseRoomInfo::MergeFrom(const MsgBaseRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_player_info_.MergeFrom(from.base_player_info_);
  envelope_ids_.MergeFrom(from.envelope_ids_);
  split_gift_ids_.MergeFrom(from.split_gift_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBaseRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBaseRoomInfo::CopyFrom(const MsgBaseRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBaseRoomInfo::IsInitialized() const {

  return true;
}

void MsgBaseRoomInfo::Swap(MsgBaseRoomInfo* other) {
  if (other != this) {
    base_player_info_.Swap(&other->base_player_info_);
    envelope_ids_.Swap(&other->envelope_ids_);
    split_gift_ids_.Swap(&other->split_gift_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBaseRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBaseRoomInfo_descriptor_;
  metadata.reflection = MsgBaseRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQuickUnlockIconInfo::kRmbFieldNumber;
const int MsgQuickUnlockIconInfo::kIdFieldNumber;
#endif  // !_MSC_VER

MsgQuickUnlockIconInfo::MsgQuickUnlockIconInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgQuickUnlockIconInfo)
}

void MsgQuickUnlockIconInfo::InitAsDefaultInstance() {
}

MsgQuickUnlockIconInfo::MsgQuickUnlockIconInfo(const MsgQuickUnlockIconInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgQuickUnlockIconInfo)
}

void MsgQuickUnlockIconInfo::SharedCtor() {
  _cached_size_ = 0;
  rmb_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQuickUnlockIconInfo::~MsgQuickUnlockIconInfo() {
  // @@protoc_insertion_point(destructor:MsgQuickUnlockIconInfo)
  SharedDtor();
}

void MsgQuickUnlockIconInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQuickUnlockIconInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQuickUnlockIconInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQuickUnlockIconInfo_descriptor_;
}

const MsgQuickUnlockIconInfo& MsgQuickUnlockIconInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgQuickUnlockIconInfo* MsgQuickUnlockIconInfo::default_instance_ = NULL;

MsgQuickUnlockIconInfo* MsgQuickUnlockIconInfo::New() const {
  return new MsgQuickUnlockIconInfo;
}

void MsgQuickUnlockIconInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgQuickUnlockIconInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rmb_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQuickUnlockIconInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgQuickUnlockIconInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rmb = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgQuickUnlockIconInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgQuickUnlockIconInfo)
  return false;
#undef DO_
}

void MsgQuickUnlockIconInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgQuickUnlockIconInfo)
  // optional uint64 rmb = 1;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rmb(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgQuickUnlockIconInfo)
}

::google::protobuf::uint8* MsgQuickUnlockIconInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgQuickUnlockIconInfo)
  // optional uint64 rmb = 1;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rmb(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgQuickUnlockIconInfo)
  return target;
}

int MsgQuickUnlockIconInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 rmb = 1;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rmb());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQuickUnlockIconInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQuickUnlockIconInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQuickUnlockIconInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQuickUnlockIconInfo::MergeFrom(const MsgQuickUnlockIconInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQuickUnlockIconInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQuickUnlockIconInfo::CopyFrom(const MsgQuickUnlockIconInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuickUnlockIconInfo::IsInitialized() const {

  return true;
}

void MsgQuickUnlockIconInfo::Swap(MsgQuickUnlockIconInfo* other) {
  if (other != this) {
    std::swap(rmb_, other->rmb_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQuickUnlockIconInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQuickUnlockIconInfo_descriptor_;
  metadata.reflection = MsgQuickUnlockIconInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnlockIconInfo::kCurrIconIdFieldNumber;
const int MsgUnlockIconInfo::kStartTimeFieldNumber;
#endif  // !_MSC_VER

MsgUnlockIconInfo::MsgUnlockIconInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUnlockIconInfo)
}

void MsgUnlockIconInfo::InitAsDefaultInstance() {
}

MsgUnlockIconInfo::MsgUnlockIconInfo(const MsgUnlockIconInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUnlockIconInfo)
}

void MsgUnlockIconInfo::SharedCtor() {
  _cached_size_ = 0;
  curr_icon_id_ = 0u;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnlockIconInfo::~MsgUnlockIconInfo() {
  // @@protoc_insertion_point(destructor:MsgUnlockIconInfo)
  SharedDtor();
}

void MsgUnlockIconInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUnlockIconInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUnlockIconInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnlockIconInfo_descriptor_;
}

const MsgUnlockIconInfo& MsgUnlockIconInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgUnlockIconInfo* MsgUnlockIconInfo::default_instance_ = NULL;

MsgUnlockIconInfo* MsgUnlockIconInfo::New() const {
  return new MsgUnlockIconInfo;
}

void MsgUnlockIconInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUnlockIconInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curr_icon_id_, start_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnlockIconInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUnlockIconInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curr_icon_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_icon_id_)));
          set_has_curr_icon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUnlockIconInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUnlockIconInfo)
  return false;
#undef DO_
}

void MsgUnlockIconInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUnlockIconInfo)
  // optional uint32 curr_icon_id = 1;
  if (has_curr_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curr_icon_id(), output);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUnlockIconInfo)
}

::google::protobuf::uint8* MsgUnlockIconInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUnlockIconInfo)
  // optional uint32 curr_icon_id = 1;
  if (has_curr_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curr_icon_id(), target);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUnlockIconInfo)
  return target;
}

int MsgUnlockIconInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curr_icon_id = 1;
    if (has_curr_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_icon_id());
    }

    // optional uint32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUnlockIconInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnlockIconInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnlockIconInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnlockIconInfo::MergeFrom(const MsgUnlockIconInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr_icon_id()) {
      set_curr_icon_id(from.curr_icon_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnlockIconInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnlockIconInfo::CopyFrom(const MsgUnlockIconInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnlockIconInfo::IsInitialized() const {

  return true;
}

void MsgUnlockIconInfo::Swap(MsgUnlockIconInfo* other) {
  if (other != this) {
    std::swap(curr_icon_id_, other->curr_icon_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnlockIconInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnlockIconInfo_descriptor_;
  metadata.reflection = MsgUnlockIconInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgActivateIconSet::kActivateIconSetFieldNumber;
#endif  // !_MSC_VER

MsgActivateIconSet::MsgActivateIconSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgActivateIconSet)
}

void MsgActivateIconSet::InitAsDefaultInstance() {
}

MsgActivateIconSet::MsgActivateIconSet(const MsgActivateIconSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgActivateIconSet)
}

void MsgActivateIconSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  activate_icon_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgActivateIconSet::~MsgActivateIconSet() {
  // @@protoc_insertion_point(destructor:MsgActivateIconSet)
  SharedDtor();
}

void MsgActivateIconSet::SharedDtor() {
  if (activate_icon_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activate_icon_set_;
  }
  if (this != default_instance_) {
  }
}

void MsgActivateIconSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgActivateIconSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgActivateIconSet_descriptor_;
}

const MsgActivateIconSet& MsgActivateIconSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgActivateIconSet* MsgActivateIconSet::default_instance_ = NULL;

MsgActivateIconSet* MsgActivateIconSet::New() const {
  return new MsgActivateIconSet;
}

void MsgActivateIconSet::Clear() {
  if (has_activate_icon_set()) {
    if (activate_icon_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      activate_icon_set_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgActivateIconSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgActivateIconSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes activate_icon_set = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_activate_icon_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgActivateIconSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgActivateIconSet)
  return false;
#undef DO_
}

void MsgActivateIconSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgActivateIconSet)
  // optional bytes activate_icon_set = 1;
  if (has_activate_icon_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->activate_icon_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgActivateIconSet)
}

::google::protobuf::uint8* MsgActivateIconSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgActivateIconSet)
  // optional bytes activate_icon_set = 1;
  if (has_activate_icon_set()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->activate_icon_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgActivateIconSet)
  return target;
}

int MsgActivateIconSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes activate_icon_set = 1;
    if (has_activate_icon_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->activate_icon_set());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgActivateIconSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgActivateIconSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgActivateIconSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgActivateIconSet::MergeFrom(const MsgActivateIconSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activate_icon_set()) {
      set_activate_icon_set(from.activate_icon_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgActivateIconSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActivateIconSet::CopyFrom(const MsgActivateIconSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActivateIconSet::IsInitialized() const {

  return true;
}

void MsgActivateIconSet::Swap(MsgActivateIconSet* other) {
  if (other != this) {
    std::swap(activate_icon_set_, other->activate_icon_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgActivateIconSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgActivateIconSet_descriptor_;
  metadata.reflection = MsgActivateIconSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnlockIconSet::kCurrIconIdFieldNumber;
const int MsgUnlockIconSet::kStartTimeFieldNumber;
const int MsgUnlockIconSet::kUnlockIconSetFieldNumber;
#endif  // !_MSC_VER

MsgUnlockIconSet::MsgUnlockIconSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUnlockIconSet)
}

void MsgUnlockIconSet::InitAsDefaultInstance() {
}

MsgUnlockIconSet::MsgUnlockIconSet(const MsgUnlockIconSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUnlockIconSet)
}

void MsgUnlockIconSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curr_icon_id_ = 0u;
  start_time_ = 0u;
  unlock_icon_set_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnlockIconSet::~MsgUnlockIconSet() {
  // @@protoc_insertion_point(destructor:MsgUnlockIconSet)
  SharedDtor();
}

void MsgUnlockIconSet::SharedDtor() {
  if (unlock_icon_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unlock_icon_set_;
  }
  if (this != default_instance_) {
  }
}

void MsgUnlockIconSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUnlockIconSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnlockIconSet_descriptor_;
}

const MsgUnlockIconSet& MsgUnlockIconSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgUnlockIconSet* MsgUnlockIconSet::default_instance_ = NULL;

MsgUnlockIconSet* MsgUnlockIconSet::New() const {
  return new MsgUnlockIconSet;
}

void MsgUnlockIconSet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUnlockIconSet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(curr_icon_id_, start_time_);
    if (has_unlock_icon_set()) {
      if (unlock_icon_set_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unlock_icon_set_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnlockIconSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUnlockIconSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curr_icon_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_icon_id_)));
          set_has_curr_icon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unlock_icon_set;
        break;
      }

      // optional bytes unlock_icon_set = 3;
      case 3: {
        if (tag == 26) {
         parse_unlock_icon_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unlock_icon_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUnlockIconSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUnlockIconSet)
  return false;
#undef DO_
}

void MsgUnlockIconSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUnlockIconSet)
  // optional uint32 curr_icon_id = 1;
  if (has_curr_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curr_icon_id(), output);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  // optional bytes unlock_icon_set = 3;
  if (has_unlock_icon_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->unlock_icon_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUnlockIconSet)
}

::google::protobuf::uint8* MsgUnlockIconSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUnlockIconSet)
  // optional uint32 curr_icon_id = 1;
  if (has_curr_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curr_icon_id(), target);
  }

  // optional uint32 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  // optional bytes unlock_icon_set = 3;
  if (has_unlock_icon_set()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->unlock_icon_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUnlockIconSet)
  return target;
}

int MsgUnlockIconSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curr_icon_id = 1;
    if (has_curr_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_icon_id());
    }

    // optional uint32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional bytes unlock_icon_set = 3;
    if (has_unlock_icon_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->unlock_icon_set());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUnlockIconSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnlockIconSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnlockIconSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnlockIconSet::MergeFrom(const MsgUnlockIconSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curr_icon_id()) {
      set_curr_icon_id(from.curr_icon_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_unlock_icon_set()) {
      set_unlock_icon_set(from.unlock_icon_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnlockIconSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnlockIconSet::CopyFrom(const MsgUnlockIconSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnlockIconSet::IsInitialized() const {

  return true;
}

void MsgUnlockIconSet::Swap(MsgUnlockIconSet* other) {
  if (other != this) {
    std::swap(curr_icon_id_, other->curr_icon_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(unlock_icon_set_, other->unlock_icon_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnlockIconSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnlockIconSet_descriptor_;
  metadata.reflection = MsgUnlockIconSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgIconSetProgressInfo::kIconProgressFieldNumber;
const int MsgIconSetProgressInfo::kTargetProgressFieldNumber;
#endif  // !_MSC_VER

MsgIconSetProgressInfo::MsgIconSetProgressInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgIconSetProgressInfo)
}

void MsgIconSetProgressInfo::InitAsDefaultInstance() {
}

MsgIconSetProgressInfo::MsgIconSetProgressInfo(const MsgIconSetProgressInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgIconSetProgressInfo)
}

void MsgIconSetProgressInfo::SharedCtor() {
  _cached_size_ = 0;
  icon_progress_ = 0u;
  target_progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgIconSetProgressInfo::~MsgIconSetProgressInfo() {
  // @@protoc_insertion_point(destructor:MsgIconSetProgressInfo)
  SharedDtor();
}

void MsgIconSetProgressInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgIconSetProgressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgIconSetProgressInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgIconSetProgressInfo_descriptor_;
}

const MsgIconSetProgressInfo& MsgIconSetProgressInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgIconSetProgressInfo* MsgIconSetProgressInfo::default_instance_ = NULL;

MsgIconSetProgressInfo* MsgIconSetProgressInfo::New() const {
  return new MsgIconSetProgressInfo;
}

void MsgIconSetProgressInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgIconSetProgressInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(icon_progress_, target_progress_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgIconSetProgressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgIconSetProgressInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 icon_progress = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_progress_)));
          set_has_icon_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_progress;
        break;
      }

      // optional uint32 target_progress = 2;
      case 2: {
        if (tag == 16) {
         parse_target_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_progress_)));
          set_has_target_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgIconSetProgressInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgIconSetProgressInfo)
  return false;
#undef DO_
}

void MsgIconSetProgressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgIconSetProgressInfo)
  // optional uint32 icon_progress = 1;
  if (has_icon_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->icon_progress(), output);
  }

  // optional uint32 target_progress = 2;
  if (has_target_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgIconSetProgressInfo)
}

::google::protobuf::uint8* MsgIconSetProgressInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgIconSetProgressInfo)
  // optional uint32 icon_progress = 1;
  if (has_icon_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->icon_progress(), target);
  }

  // optional uint32 target_progress = 2;
  if (has_target_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgIconSetProgressInfo)
  return target;
}

int MsgIconSetProgressInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 icon_progress = 1;
    if (has_icon_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon_progress());
    }

    // optional uint32 target_progress = 2;
    if (has_target_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgIconSetProgressInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgIconSetProgressInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgIconSetProgressInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgIconSetProgressInfo::MergeFrom(const MsgIconSetProgressInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon_progress()) {
      set_icon_progress(from.icon_progress());
    }
    if (from.has_target_progress()) {
      set_target_progress(from.target_progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgIconSetProgressInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgIconSetProgressInfo::CopyFrom(const MsgIconSetProgressInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIconSetProgressInfo::IsInitialized() const {

  return true;
}

void MsgIconSetProgressInfo::Swap(MsgIconSetProgressInfo* other) {
  if (other != this) {
    std::swap(icon_progress_, other->icon_progress_);
    std::swap(target_progress_, other->target_progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgIconSetProgressInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgIconSetProgressInfo_descriptor_;
  metadata.reflection = MsgIconSetProgressInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreatePrivateRoom::kConsumeIdFieldNumber;
const int MsgCreatePrivateRoom::kConsumeKindFieldNumber;
const int MsgCreatePrivateRoom::kRoomTypeFieldNumber;
const int MsgCreatePrivateRoom::kSpecialKindFieldNumber;
const int MsgCreatePrivateRoom::kScoreFieldNumber;
const int MsgCreatePrivateRoom::kGameVersioneFieldNumber;
const int MsgCreatePrivateRoom::kPayMentFieldNumber;
const int MsgCreatePrivateRoom::kPlayerNumberFieldNumber;
const int MsgCreatePrivateRoom::kTissueIdFieldNumber;
#endif  // !_MSC_VER

MsgCreatePrivateRoom::MsgCreatePrivateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCreatePrivateRoom)
}

void MsgCreatePrivateRoom::InitAsDefaultInstance() {
}

MsgCreatePrivateRoom::MsgCreatePrivateRoom(const MsgCreatePrivateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCreatePrivateRoom)
}

void MsgCreatePrivateRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  consume_id_ = 0u;
  consume_kind_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_kind_ = 0u;
  score_ = 0u;
  game_versione_ = 0u;
  pay_ment_ = 0;
  player_number_ = 0u;
  tissue_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreatePrivateRoom::~MsgCreatePrivateRoom() {
  // @@protoc_insertion_point(destructor:MsgCreatePrivateRoom)
  SharedDtor();
}

void MsgCreatePrivateRoom::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
  }
}

void MsgCreatePrivateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCreatePrivateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreatePrivateRoom_descriptor_;
}

const MsgCreatePrivateRoom& MsgCreatePrivateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgCreatePrivateRoom* MsgCreatePrivateRoom::default_instance_ = NULL;

MsgCreatePrivateRoom* MsgCreatePrivateRoom::New() const {
  return new MsgCreatePrivateRoom;
}

void MsgCreatePrivateRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCreatePrivateRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(consume_id_, consume_kind_);
    ZR_(special_kind_, pay_ment_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
    player_number_ = 0u;
  }
  tissue_id_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreatePrivateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCreatePrivateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 consume_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_consume_kind;
        break;
      }

      // optional .TGameConsumePay consume_kind = 2;
      case 2: {
        if (tag == 16) {
         parse_consume_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TGameConsumePay_IsValid(value)) {
            set_consume_kind(static_cast< ::TGameConsumePay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_type;
        break;
      }

      // optional string room_type = 3;
      case 3: {
        if (tag == 26) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_special_kind;
        break;
      }

      // optional uint32 special_kind = 4;
      case 4: {
        if (tag == 32) {
         parse_special_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_kind_)));
          set_has_special_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_versione;
        break;
      }

      // optional uint32 game_versione = 6;
      case 6: {
        if (tag == 48) {
         parse_game_versione:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_versione_)));
          set_has_game_versione();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pay_ment;
        break;
      }

      // optional .TPaymentMechanism pay_ment = 7;
      case 7: {
        if (tag == 56) {
         parse_pay_ment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TPaymentMechanism_IsValid(value)) {
            set_pay_ment(static_cast< ::TPaymentMechanism >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_player_number;
        break;
      }

      // optional uint32 player_number = 8;
      case 8: {
        if (tag == 64) {
         parse_player_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_number_)));
          set_has_player_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tissue_id;
        break;
      }

      // optional uint64 tissue_id = 9;
      case 9: {
        if (tag == 72) {
         parse_tissue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tissue_id_)));
          set_has_tissue_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCreatePrivateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCreatePrivateRoom)
  return false;
#undef DO_
}

void MsgCreatePrivateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCreatePrivateRoom)
  // optional uint32 consume_id = 1;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->consume_id(), output);
  }

  // optional .TGameConsumePay consume_kind = 2;
  if (has_consume_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->consume_kind(), output);
  }

  // optional string room_type = 3;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_type(), output);
  }

  // optional uint32 special_kind = 4;
  if (has_special_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->special_kind(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // optional uint32 game_versione = 6;
  if (has_game_versione()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_versione(), output);
  }

  // optional .TPaymentMechanism pay_ment = 7;
  if (has_pay_ment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pay_ment(), output);
  }

  // optional uint32 player_number = 8;
  if (has_player_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->player_number(), output);
  }

  // optional uint64 tissue_id = 9;
  if (has_tissue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->tissue_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCreatePrivateRoom)
}

::google::protobuf::uint8* MsgCreatePrivateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCreatePrivateRoom)
  // optional uint32 consume_id = 1;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->consume_id(), target);
  }

  // optional .TGameConsumePay consume_kind = 2;
  if (has_consume_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->consume_kind(), target);
  }

  // optional string room_type = 3;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_type(), target);
  }

  // optional uint32 special_kind = 4;
  if (has_special_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->special_kind(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // optional uint32 game_versione = 6;
  if (has_game_versione()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_versione(), target);
  }

  // optional .TPaymentMechanism pay_ment = 7;
  if (has_pay_ment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pay_ment(), target);
  }

  // optional uint32 player_number = 8;
  if (has_player_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->player_number(), target);
  }

  // optional uint64 tissue_id = 9;
  if (has_tissue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->tissue_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCreatePrivateRoom)
  return target;
}

int MsgCreatePrivateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 consume_id = 1;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // optional .TGameConsumePay consume_kind = 2;
    if (has_consume_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->consume_kind());
    }

    // optional string room_type = 3;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 special_kind = 4;
    if (has_special_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_kind());
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 game_versione = 6;
    if (has_game_versione()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_versione());
    }

    // optional .TPaymentMechanism pay_ment = 7;
    if (has_pay_ment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pay_ment());
    }

    // optional uint32 player_number = 8;
    if (has_player_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_number());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 tissue_id = 9;
    if (has_tissue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tissue_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCreatePrivateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreatePrivateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreatePrivateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreatePrivateRoom::MergeFrom(const MsgCreatePrivateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_consume_kind()) {
      set_consume_kind(from.consume_kind());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_special_kind()) {
      set_special_kind(from.special_kind());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_game_versione()) {
      set_game_versione(from.game_versione());
    }
    if (from.has_pay_ment()) {
      set_pay_ment(from.pay_ment());
    }
    if (from.has_player_number()) {
      set_player_number(from.player_number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tissue_id()) {
      set_tissue_id(from.tissue_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreatePrivateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreatePrivateRoom::CopyFrom(const MsgCreatePrivateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreatePrivateRoom::IsInitialized() const {

  return true;
}

void MsgCreatePrivateRoom::Swap(MsgCreatePrivateRoom* other) {
  if (other != this) {
    std::swap(consume_id_, other->consume_id_);
    std::swap(consume_kind_, other->consume_kind_);
    std::swap(room_type_, other->room_type_);
    std::swap(special_kind_, other->special_kind_);
    std::swap(score_, other->score_);
    std::swap(game_versione_, other->game_versione_);
    std::swap(pay_ment_, other->pay_ment_);
    std::swap(player_number_, other->player_number_);
    std::swap(tissue_id_, other->tissue_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreatePrivateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreatePrivateRoom_descriptor_;
  metadata.reflection = MsgCreatePrivateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgEnterPrivateRoom::kRoomIdFieldNumber;
const int MsgEnterPrivateRoom::kAppNameFieldNumber;
const int MsgEnterPrivateRoom::kGameVersioneFieldNumber;
#endif  // !_MSC_VER

MsgEnterPrivateRoom::MsgEnterPrivateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgEnterPrivateRoom)
}

void MsgEnterPrivateRoom::InitAsDefaultInstance() {
}

MsgEnterPrivateRoom::MsgEnterPrivateRoom(const MsgEnterPrivateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgEnterPrivateRoom)
}

void MsgEnterPrivateRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = GOOGLE_ULONGLONG(0);
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_versione_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterPrivateRoom::~MsgEnterPrivateRoom() {
  // @@protoc_insertion_point(destructor:MsgEnterPrivateRoom)
  SharedDtor();
}

void MsgEnterPrivateRoom::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgEnterPrivateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgEnterPrivateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterPrivateRoom_descriptor_;
}

const MsgEnterPrivateRoom& MsgEnterPrivateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgEnterPrivateRoom* MsgEnterPrivateRoom::default_instance_ = NULL;

MsgEnterPrivateRoom* MsgEnterPrivateRoom::New() const {
  return new MsgEnterPrivateRoom;
}

void MsgEnterPrivateRoom::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    room_id_ = GOOGLE_ULONGLONG(0);
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    game_versione_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterPrivateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgEnterPrivateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_name;
        break;
      }

      // optional string app_name = 2;
      case 2: {
        if (tag == 18) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_versione;
        break;
      }

      // optional uint32 game_versione = 3;
      case 3: {
        if (tag == 24) {
         parse_game_versione:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_versione_)));
          set_has_game_versione();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgEnterPrivateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgEnterPrivateRoom)
  return false;
#undef DO_
}

void MsgEnterPrivateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgEnterPrivateRoom)
  // optional uint64 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // optional string app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_name(), output);
  }

  // optional uint32 game_versione = 3;
  if (has_game_versione()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_versione(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgEnterPrivateRoom)
}

::google::protobuf::uint8* MsgEnterPrivateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgEnterPrivateRoom)
  // optional uint64 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->room_id(), target);
  }

  // optional string app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_name(), target);
  }

  // optional uint32 game_versione = 3;
  if (has_game_versione()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_versione(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgEnterPrivateRoom)
  return target;
}

int MsgEnterPrivateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional string app_name = 2;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional uint32 game_versione = 3;
    if (has_game_versione()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_versione());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgEnterPrivateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterPrivateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterPrivateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterPrivateRoom::MergeFrom(const MsgEnterPrivateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_game_versione()) {
      set_game_versione(from.game_versione());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterPrivateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterPrivateRoom::CopyFrom(const MsgEnterPrivateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterPrivateRoom::IsInitialized() const {

  return true;
}

void MsgEnterPrivateRoom::Swap(MsgEnterPrivateRoom* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(app_name_, other->app_name_);
    std::swap(game_versione_, other->game_versione_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterPrivateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterPrivateRoom_descriptor_;
  metadata.reflection = MsgEnterPrivateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCards::kSuitFieldNumber;
const int MsgCards::kIndexFieldNumber;
#endif  // !_MSC_VER

MsgCards::MsgCards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCards)
}

void MsgCards::InitAsDefaultInstance() {
}

MsgCards::MsgCards(const MsgCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCards)
}

void MsgCards::SharedCtor() {
  _cached_size_ = 0;
  suit_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCards::~MsgCards() {
  // @@protoc_insertion_point(destructor:MsgCards)
  SharedDtor();
}

void MsgCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCards_descriptor_;
}

const MsgCards& MsgCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgCards* MsgCards::default_instance_ = NULL;

MsgCards* MsgCards::New() const {
  return new MsgCards;
}

void MsgCards::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCards*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(suit_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TCardsType suit = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TCardsType_IsValid(value)) {
            set_suit(static_cast< ::TCardsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCards)
  return false;
#undef DO_
}

void MsgCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCards)
  // optional .TCardsType suit = 1;
  if (has_suit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->suit(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCards)
}

::google::protobuf::uint8* MsgCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCards)
  // optional .TCardsType suit = 1;
  if (has_suit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->suit(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCards)
  return target;
}

int MsgCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TCardsType suit = 1;
    if (has_suit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->suit());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCards::MergeFrom(const MsgCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suit()) {
      set_suit(from.suit());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCards::CopyFrom(const MsgCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCards::IsInitialized() const {

  return true;
}

void MsgCards::Swap(MsgCards* other) {
  if (other != this) {
    std::swap(suit_, other->suit_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCards_descriptor_;
  metadata.reflection = MsgCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGetEnvelope::kUniqueIdFieldNumber;
const int MsgGetEnvelope::kDecPlyNameFieldNumber;
const int MsgGetEnvelope::kSrcPlyNameFieldNumber;
const int MsgGetEnvelope::kMoneyFieldNumber;
const int MsgGetEnvelope::kCouponFieldNumber;
const int MsgGetEnvelope::kLeftCountFieldNumber;
const int MsgGetEnvelope::kDecPlyMoneyFieldNumber;
const int MsgGetEnvelope::kDecPlyCouponFieldNumber;
const int MsgGetEnvelope::kDecPlyIdFieldNumber;
#endif  // !_MSC_VER

MsgGetEnvelope::MsgGetEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGetEnvelope)
}

void MsgGetEnvelope::InitAsDefaultInstance() {
}

MsgGetEnvelope::MsgGetEnvelope(const MsgGetEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGetEnvelope)
}

void MsgGetEnvelope::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unique_id_ = GOOGLE_ULONGLONG(0);
  dec_ply_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_ply_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  money_ = GOOGLE_ULONGLONG(0);
  coupon_ = GOOGLE_ULONGLONG(0);
  left_count_ = 0u;
  dec_ply_money_ = GOOGLE_ULONGLONG(0);
  dec_ply_coupon_ = GOOGLE_ULONGLONG(0);
  dec_ply_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGetEnvelope::~MsgGetEnvelope() {
  // @@protoc_insertion_point(destructor:MsgGetEnvelope)
  SharedDtor();
}

void MsgGetEnvelope::SharedDtor() {
  if (dec_ply_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dec_ply_name_;
  }
  if (src_ply_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_ply_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgGetEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGetEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGetEnvelope_descriptor_;
}

const MsgGetEnvelope& MsgGetEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgGetEnvelope* MsgGetEnvelope::default_instance_ = NULL;

MsgGetEnvelope* MsgGetEnvelope::New() const {
  return new MsgGetEnvelope;
}

void MsgGetEnvelope::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGetEnvelope*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(money_, dec_ply_coupon_);
    unique_id_ = GOOGLE_ULONGLONG(0);
    if (has_dec_ply_name()) {
      if (dec_ply_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dec_ply_name_->clear();
      }
    }
    if (has_src_ply_name()) {
      if (src_ply_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        src_ply_name_->clear();
      }
    }
    left_count_ = 0u;
  }
  dec_ply_id_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGetEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGetEnvelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unique_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dec_ply_name;
        break;
      }

      // optional string dec_ply_name = 2;
      case 2: {
        if (tag == 18) {
         parse_dec_ply_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dec_ply_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dec_ply_name().data(), this->dec_ply_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dec_ply_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_src_ply_name;
        break;
      }

      // optional string src_ply_name = 3;
      case 3: {
        if (tag == 26) {
         parse_src_ply_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_ply_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_ply_name().data(), this->src_ply_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "src_ply_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional uint64 money = 4;
      case 4: {
        if (tag == 32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coupon;
        break;
      }

      // optional uint64 coupon = 5;
      case 5: {
        if (tag == 40) {
         parse_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &coupon_)));
          set_has_coupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_left_count;
        break;
      }

      // optional uint32 left_count = 6;
      case 6: {
        if (tag == 48) {
         parse_left_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_count_)));
          set_has_left_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dec_ply_money;
        break;
      }

      // optional uint64 dec_ply_money = 7;
      case 7: {
        if (tag == 56) {
         parse_dec_ply_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dec_ply_money_)));
          set_has_dec_ply_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dec_ply_coupon;
        break;
      }

      // optional uint64 dec_ply_coupon = 8;
      case 8: {
        if (tag == 64) {
         parse_dec_ply_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dec_ply_coupon_)));
          set_has_dec_ply_coupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dec_ply_id;
        break;
      }

      // optional uint64 dec_ply_id = 9;
      case 9: {
        if (tag == 72) {
         parse_dec_ply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dec_ply_id_)));
          set_has_dec_ply_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGetEnvelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGetEnvelope)
  return false;
#undef DO_
}

void MsgGetEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGetEnvelope)
  // optional uint64 unique_id = 1;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unique_id(), output);
  }

  // optional string dec_ply_name = 2;
  if (has_dec_ply_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dec_ply_name().data(), this->dec_ply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dec_ply_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dec_ply_name(), output);
  }

  // optional string src_ply_name = 3;
  if (has_src_ply_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ply_name().data(), this->src_ply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src_ply_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->src_ply_name(), output);
  }

  // optional uint64 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->money(), output);
  }

  // optional uint64 coupon = 5;
  if (has_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->coupon(), output);
  }

  // optional uint32 left_count = 6;
  if (has_left_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->left_count(), output);
  }

  // optional uint64 dec_ply_money = 7;
  if (has_dec_ply_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dec_ply_money(), output);
  }

  // optional uint64 dec_ply_coupon = 8;
  if (has_dec_ply_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dec_ply_coupon(), output);
  }

  // optional uint64 dec_ply_id = 9;
  if (has_dec_ply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->dec_ply_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGetEnvelope)
}

::google::protobuf::uint8* MsgGetEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGetEnvelope)
  // optional uint64 unique_id = 1;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unique_id(), target);
  }

  // optional string dec_ply_name = 2;
  if (has_dec_ply_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dec_ply_name().data(), this->dec_ply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dec_ply_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dec_ply_name(), target);
  }

  // optional string src_ply_name = 3;
  if (has_src_ply_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_ply_name().data(), this->src_ply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src_ply_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->src_ply_name(), target);
  }

  // optional uint64 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->money(), target);
  }

  // optional uint64 coupon = 5;
  if (has_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->coupon(), target);
  }

  // optional uint32 left_count = 6;
  if (has_left_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->left_count(), target);
  }

  // optional uint64 dec_ply_money = 7;
  if (has_dec_ply_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->dec_ply_money(), target);
  }

  // optional uint64 dec_ply_coupon = 8;
  if (has_dec_ply_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dec_ply_coupon(), target);
  }

  // optional uint64 dec_ply_id = 9;
  if (has_dec_ply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->dec_ply_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGetEnvelope)
  return target;
}

int MsgGetEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 unique_id = 1;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unique_id());
    }

    // optional string dec_ply_name = 2;
    if (has_dec_ply_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dec_ply_name());
    }

    // optional string src_ply_name = 3;
    if (has_src_ply_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_ply_name());
    }

    // optional uint64 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // optional uint64 coupon = 5;
    if (has_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->coupon());
    }

    // optional uint32 left_count = 6;
    if (has_left_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_count());
    }

    // optional uint64 dec_ply_money = 7;
    if (has_dec_ply_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dec_ply_money());
    }

    // optional uint64 dec_ply_coupon = 8;
    if (has_dec_ply_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dec_ply_coupon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 dec_ply_id = 9;
    if (has_dec_ply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dec_ply_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGetEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGetEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGetEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGetEnvelope::MergeFrom(const MsgGetEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_dec_ply_name()) {
      set_dec_ply_name(from.dec_ply_name());
    }
    if (from.has_src_ply_name()) {
      set_src_ply_name(from.src_ply_name());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_coupon()) {
      set_coupon(from.coupon());
    }
    if (from.has_left_count()) {
      set_left_count(from.left_count());
    }
    if (from.has_dec_ply_money()) {
      set_dec_ply_money(from.dec_ply_money());
    }
    if (from.has_dec_ply_coupon()) {
      set_dec_ply_coupon(from.dec_ply_coupon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dec_ply_id()) {
      set_dec_ply_id(from.dec_ply_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGetEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetEnvelope::CopyFrom(const MsgGetEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetEnvelope::IsInitialized() const {

  return true;
}

void MsgGetEnvelope::Swap(MsgGetEnvelope* other) {
  if (other != this) {
    std::swap(unique_id_, other->unique_id_);
    std::swap(dec_ply_name_, other->dec_ply_name_);
    std::swap(src_ply_name_, other->src_ply_name_);
    std::swap(money_, other->money_);
    std::swap(coupon_, other->coupon_);
    std::swap(left_count_, other->left_count_);
    std::swap(dec_ply_money_, other->dec_ply_money_);
    std::swap(dec_ply_coupon_, other->dec_ply_coupon_);
    std::swap(dec_ply_id_, other->dec_ply_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGetEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGetEnvelope_descriptor_;
  metadata.reflection = MsgGetEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUseSkill::kSkillTidFieldNumber;
const int MsgUseSkill::kItemInfoFieldNumber;
#endif  // !_MSC_VER

MsgUseSkill::MsgUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUseSkill)
}

void MsgUseSkill::InitAsDefaultInstance() {
}

MsgUseSkill::MsgUseSkill(const MsgUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUseSkill)
}

void MsgUseSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUseSkill::~MsgUseSkill() {
  // @@protoc_insertion_point(destructor:MsgUseSkill)
  SharedDtor();
}

void MsgUseSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUseSkill_descriptor_;
}

const MsgUseSkill& MsgUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgUseSkill* MsgUseSkill::default_instance_ = NULL;

MsgUseSkill* MsgUseSkill::New() const {
  return new MsgUseSkill;
}

void MsgUseSkill::Clear() {
  skill_tid_ = 0u;
  item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_tid_)));
          set_has_skill_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // repeated .MsgItem item_info = 2;
      case 2: {
        if (tag == 18) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUseSkill)
  return false;
#undef DO_
}

void MsgUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUseSkill)
  // optional uint32 skill_tid = 1;
  if (has_skill_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_tid(), output);
  }

  // repeated .MsgItem item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUseSkill)
}

::google::protobuf::uint8* MsgUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUseSkill)
  // optional uint32 skill_tid = 1;
  if (has_skill_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_tid(), target);
  }

  // repeated .MsgItem item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUseSkill)
  return target;
}

int MsgUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill_tid = 1;
    if (has_skill_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_tid());
    }

  }
  // repeated .MsgItem item_info = 2;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUseSkill::MergeFrom(const MsgUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_info_.MergeFrom(from.item_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_tid()) {
      set_skill_tid(from.skill_tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUseSkill::CopyFrom(const MsgUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseSkill::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_info())) return false;
  return true;
}

void MsgUseSkill::Swap(MsgUseSkill* other) {
  if (other != this) {
    std::swap(skill_tid_, other->skill_tid_);
    item_info_.Swap(&other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUseSkill_descriptor_;
  metadata.reflection = MsgUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordRoomInfo::kSpecialKindFieldNumber;
const int MsgRecordRoomInfo::kBankerFieldNumber;
const int MsgRecordRoomInfo::kScoreFieldNumber;
const int MsgRecordRoomInfo::kGameCountFieldNumber;
const int MsgRecordRoomInfo::kBottomCardFieldNumber;
#endif  // !_MSC_VER

MsgRecordRoomInfo::MsgRecordRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordRoomInfo)
}

void MsgRecordRoomInfo::InitAsDefaultInstance() {
}

MsgRecordRoomInfo::MsgRecordRoomInfo(const MsgRecordRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordRoomInfo)
}

void MsgRecordRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  special_kind_ = 0u;
  banker_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  game_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordRoomInfo::~MsgRecordRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgRecordRoomInfo)
  SharedDtor();
}

void MsgRecordRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordRoomInfo_descriptor_;
}

const MsgRecordRoomInfo& MsgRecordRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordRoomInfo* MsgRecordRoomInfo::default_instance_ = NULL;

MsgRecordRoomInfo* MsgRecordRoomInfo::New() const {
  return new MsgRecordRoomInfo;
}

void MsgRecordRoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecordRoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(banker_, score_);
    game_count_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bottom_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 special_kind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_kind_)));
          set_has_special_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_banker;
        break;
      }

      // optional uint64 banker = 2;
      case 2: {
        if (tag == 16) {
         parse_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 4;
      case 4: {
        if (tag == 32) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bottom_card;
        break;
      }

      // repeated uint32 bottom_card = 5;
      case 5: {
        if (tag == 40) {
         parse_bottom_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_bottom_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bottom_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bottom_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordRoomInfo)
  return false;
#undef DO_
}

void MsgRecordRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordRoomInfo)
  // optional uint32 special_kind = 1;
  if (has_special_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->special_kind(), output);
  }

  // optional uint64 banker = 2;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->banker(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 game_count = 4;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_count(), output);
  }

  // repeated uint32 bottom_card = 5;
  for (int i = 0; i < this->bottom_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->bottom_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordRoomInfo)
}

::google::protobuf::uint8* MsgRecordRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordRoomInfo)
  // optional uint32 special_kind = 1;
  if (has_special_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->special_kind(), target);
  }

  // optional uint64 banker = 2;
  if (has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->banker(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint32 game_count = 4;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_count(), target);
  }

  // repeated uint32 bottom_card = 5;
  for (int i = 0; i < this->bottom_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->bottom_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordRoomInfo)
  return target;
}

int MsgRecordRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 special_kind = 1;
    if (has_special_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_kind());
    }

    // optional uint64 banker = 2;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banker());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 game_count = 4;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

  }
  // repeated uint32 bottom_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->bottom_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bottom_card(i));
    }
    total_size += 1 * this->bottom_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordRoomInfo::MergeFrom(const MsgRecordRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_card_.MergeFrom(from.bottom_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_special_kind()) {
      set_special_kind(from.special_kind());
    }
    if (from.has_banker()) {
      set_banker(from.banker());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordRoomInfo::CopyFrom(const MsgRecordRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordRoomInfo::IsInitialized() const {

  return true;
}

void MsgRecordRoomInfo::Swap(MsgRecordRoomInfo* other) {
  if (other != this) {
    std::swap(special_kind_, other->special_kind_);
    std::swap(banker_, other->banker_);
    std::swap(score_, other->score_);
    std::swap(game_count_, other->game_count_);
    bottom_card_.Swap(&other->bottom_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordRoomInfo_descriptor_;
  metadata.reflection = MsgRecordRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordRoleInfo::kIdFieldNumber;
const int MsgRecordRoleInfo::kSeatFieldNumber;
const int MsgRecordRoleInfo::kUsenameFieldNumber;
const int MsgRecordRoleInfo::kScoreFieldNumber;
const int MsgRecordRoleInfo::kHandCardFieldNumber;
const int MsgRecordRoleInfo::kNickNameFieldNumber;
const int MsgRecordRoleInfo::kTeamTypeFieldNumber;
const int MsgRecordRoleInfo::kSeriesFieldNumber;
const int MsgRecordRoleInfo::kCurrentScoreFieldNumber;
#endif  // !_MSC_VER

MsgRecordRoleInfo::MsgRecordRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordRoleInfo)
}

void MsgRecordRoleInfo::InitAsDefaultInstance() {
}

MsgRecordRoleInfo::MsgRecordRoleInfo(const MsgRecordRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordRoleInfo)
}

void MsgRecordRoleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  seat_ = 0u;
  usename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = GOOGLE_LONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_type_ = 0u;
  series_ = 0u;
  current_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordRoleInfo::~MsgRecordRoleInfo() {
  // @@protoc_insertion_point(destructor:MsgRecordRoleInfo)
  SharedDtor();
}

void MsgRecordRoleInfo::SharedDtor() {
  if (usename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usename_;
  }
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgRecordRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordRoleInfo_descriptor_;
}

const MsgRecordRoleInfo& MsgRecordRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordRoleInfo* MsgRecordRoleInfo::default_instance_ = NULL;

MsgRecordRoleInfo* MsgRecordRoleInfo::New() const {
  return new MsgRecordRoleInfo;
}

void MsgRecordRoleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecordRoleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(score_, team_type_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_usename()) {
      if (usename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usename_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    series_ = 0u;
  }
  current_score_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hand_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // optional uint32 seat = 2;
      case 2: {
        if (tag == 16) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_usename;
        break;
      }

      // optional string usename = 3;
      case 3: {
        if (tag == 26) {
         parse_usename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usename().data(), this->usename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int64 score = 4;
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 5;
      case 5: {
        if (tag == 40) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hand_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        if (input->ExpectTag(50)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 6;
      case 6: {
        if (tag == 50) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Team_type;
        break;
      }

      // optional uint32 Team_type = 7;
      case 7: {
        if (tag == 56) {
         parse_Team_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_type_)));
          set_has_team_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_series;
        break;
      }

      // optional uint32 series = 8;
      case 8: {
        if (tag == 64) {
         parse_series:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_)));
          set_has_series();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_current_score;
        break;
      }

      // optional int64 current_score = 9;
      case 9: {
        if (tag == 72) {
         parse_current_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_score_)));
          set_has_current_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordRoleInfo)
  return false;
#undef DO_
}

void MsgRecordRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordRoleInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seat(), output);
  }

  // optional string usename = 3;
  if (has_usename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usename().data(), this->usename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->usename(), output);
  }

  // optional int64 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->score(), output);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hand_card(i), output);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nick_name(), output);
  }

  // optional uint32 Team_type = 7;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_type(), output);
  }

  // optional uint32 series = 8;
  if (has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series(), output);
  }

  // optional int64 current_score = 9;
  if (has_current_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->current_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordRoleInfo)
}

::google::protobuf::uint8* MsgRecordRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordRoleInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seat(), target);
  }

  // optional string usename = 3;
  if (has_usename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usename().data(), this->usename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->usename(), target);
  }

  // optional int64 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->score(), target);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hand_card(i), target);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nick_name(), target);
  }

  // optional uint32 Team_type = 7;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_type(), target);
  }

  // optional uint32 series = 8;
  if (has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series(), target);
  }

  // optional int64 current_score = 9;
  if (has_current_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->current_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordRoleInfo)
  return target;
}

int MsgRecordRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat());
    }

    // optional string usename = 3;
    if (has_usename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usename());
    }

    // optional int64 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional string nick_name = 6;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 Team_type = 7;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_type());
    }

    // optional uint32 series = 8;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 current_score = 9;
    if (has_current_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->current_score());
    }

  }
  // repeated uint32 hand_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordRoleInfo::MergeFrom(const MsgRecordRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_card_.MergeFrom(from.hand_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usename()) {
      set_usename(from.usename());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_series()) {
      set_series(from.series());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_current_score()) {
      set_current_score(from.current_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordRoleInfo::CopyFrom(const MsgRecordRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordRoleInfo::IsInitialized() const {

  return true;
}

void MsgRecordRoleInfo::Swap(MsgRecordRoleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(seat_, other->seat_);
    std::swap(usename_, other->usename_);
    std::swap(score_, other->score_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(team_type_, other->team_type_);
    std::swap(series_, other->series_);
    std::swap(current_score_, other->current_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordRoleInfo_descriptor_;
  metadata.reflection = MsgRecordRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordEvent::kEventIdFieldNumber;
const int MsgRecordEvent::kCountFieldNumber;
const int MsgRecordEvent::kScoreFieldNumber;
const int MsgRecordEvent::kScoreCountFieldNumber;
#endif  // !_MSC_VER

MsgRecordEvent::MsgRecordEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordEvent)
}

void MsgRecordEvent::InitAsDefaultInstance() {
}

MsgRecordEvent::MsgRecordEvent(const MsgRecordEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordEvent)
}

void MsgRecordEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordEvent::~MsgRecordEvent() {
  // @@protoc_insertion_point(destructor:MsgRecordEvent)
  SharedDtor();
}

void MsgRecordEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordEvent_descriptor_;
}

const MsgRecordEvent& MsgRecordEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordEvent* MsgRecordEvent::default_instance_ = NULL;

MsgRecordEvent* MsgRecordEvent::New() const {
  return new MsgRecordEvent;
}

void MsgRecordEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecordEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  score_.Clear();
  score_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // repeated int32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_score())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        if (input->ExpectTag(32)) goto parse_score_count;
        break;
      }

      // repeated uint32 score_count = 4;
      case 4: {
        if (tag == 32) {
         parse_score_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_score_count())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordEvent)
  return false;
#undef DO_
}

void MsgRecordEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated int32 score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->score(i), output);
  }

  // repeated uint32 score_count = 4;
  for (int i = 0; i < this->score_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->score_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordEvent)
}

::google::protobuf::uint8* MsgRecordEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated int32 score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->score(i), target);
  }

  // repeated uint32 score_count = 4;
  for (int i = 0; i < this->score_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->score_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordEvent)
  return target;
}

int MsgRecordEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated int32 score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated uint32 score_count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->score_count(i));
    }
    total_size += 1 * this->score_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordEvent::MergeFrom(const MsgRecordEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  score_count_.MergeFrom(from.score_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordEvent::CopyFrom(const MsgRecordEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordEvent::IsInitialized() const {

  return true;
}

void MsgRecordEvent::Swap(MsgRecordEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(count_, other->count_);
    score_.Swap(&other->score_);
    score_count_.Swap(&other->score_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordEvent_descriptor_;
  metadata.reflection = MsgRecordEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordShowDown::kIdFieldNumber;
const int MsgRecordShowDown::kScoreFieldNumber;
const int MsgRecordShowDown::kFixedscoreFieldNumber;
const int MsgRecordShowDown::kParam1FieldNumber;
const int MsgRecordShowDown::kParam2FieldNumber;
const int MsgRecordShowDown::kHucardFieldNumber;
const int MsgRecordShowDown::kEventFieldNumber;
const int MsgRecordShowDown::kMoneyFieldNumber;
const int MsgRecordShowDown::kParam3FieldNumber;
const int MsgRecordShowDown::kParam4FieldNumber;
const int MsgRecordShowDown::kParam5FieldNumber;
const int MsgRecordShowDown::kPlayIdFieldNumber;
const int MsgRecordShowDown::kHandCardFieldNumber;
const int MsgRecordShowDown::kWeaveCardFieldNumber;
const int MsgRecordShowDown::kHucardListFieldNumber;
#endif  // !_MSC_VER

MsgRecordShowDown::MsgRecordShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordShowDown)
}

void MsgRecordShowDown::InitAsDefaultInstance() {
}

MsgRecordShowDown::MsgRecordShowDown(const MsgRecordShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordShowDown)
}

void MsgRecordShowDown::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  fixedscore_ = GOOGLE_LONGLONG(0);
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  hucard_ = 0u;
  money_ = GOOGLE_LONGLONG(0);
  param3_ = GOOGLE_LONGLONG(0);
  param4_ = GOOGLE_LONGLONG(0);
  param5_ = GOOGLE_LONGLONG(0);
  play_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordShowDown::~MsgRecordShowDown() {
  // @@protoc_insertion_point(destructor:MsgRecordShowDown)
  SharedDtor();
}

void MsgRecordShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordShowDown_descriptor_;
}

const MsgRecordShowDown& MsgRecordShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordShowDown* MsgRecordShowDown::default_instance_ = NULL;

MsgRecordShowDown* MsgRecordShowDown::New() const {
  return new MsgRecordShowDown;
}

void MsgRecordShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecordShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(id_, param2_);
    hucard_ = 0u;
    money_ = GOOGLE_LONGLONG(0);
  }
  ZR_(param3_, play_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  event_.Clear();
  hand_card_.Clear();
  weave_card_.Clear();
  hucard_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fixedscore;
        break;
      }

      // optional int64 fixedscore = 3;
      case 3: {
        if (tag == 24) {
         parse_fixedscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fixedscore_)));
          set_has_fixedscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 4;
      case 4: {
        if (tag == 32) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 5;
      case 5: {
        if (tag == 40) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hucard;
        break;
      }

      // optional uint32 hucard = 6;
      case 6: {
        if (tag == 48) {
         parse_hucard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_event;
        break;
      }

      // repeated .MsgRecordEvent event = 7;
      case 7: {
        if (tag == 58) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_event;
        if (input->ExpectTag(64)) goto parse_money;
        break;
      }

      // optional int64 money = 8;
      case 8: {
        if (tag == 64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_param3;
        break;
      }

      // optional int64 param3 = 9;
      case 9: {
        if (tag == 72) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_param4;
        break;
      }

      // optional int64 param4 = 10;
      case 10: {
        if (tag == 80) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_param5;
        break;
      }

      // optional int64 param5 = 11;
      case 11: {
        if (tag == 88) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_play_id;
        break;
      }

      // optional int64 play_id = 12;
      case 12: {
        if (tag == 96) {
         parse_play_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 13;
      case 13: {
        if (tag == 104) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_hand_card())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hand_card;
        if (input->ExpectTag(114)) goto parse_weave_card;
        break;
      }

      // repeated .MsgRecordWeaveCard weave_card = 14;
      case 14: {
        if (tag == 114) {
         parse_weave_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weave_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_weave_card;
        if (input->ExpectTag(120)) goto parse_hucard_list;
        break;
      }

      // repeated uint32 hucard_list = 15;
      case 15: {
        if (tag == 120) {
         parse_hucard_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_hucard_list())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hucard_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_hucard_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordShowDown)
  return false;
#undef DO_
}

void MsgRecordShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordShowDown)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  // optional int64 fixedscore = 3;
  if (has_fixedscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fixedscore(), output);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param1(), output);
  }

  // optional int64 param2 = 5;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param2(), output);
  }

  // optional uint32 hucard = 6;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hucard(), output);
  }

  // repeated .MsgRecordEvent event = 7;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->event(i), output);
  }

  // optional int64 money = 8;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->money(), output);
  }

  // optional int64 param3 = 9;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->param3(), output);
  }

  // optional int64 param4 = 10;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->param4(), output);
  }

  // optional int64 param5 = 11;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->param5(), output);
  }

  // optional int64 play_id = 12;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->play_id(), output);
  }

  // repeated uint32 hand_card = 13;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->hand_card(i), output);
  }

  // repeated .MsgRecordWeaveCard weave_card = 14;
  for (int i = 0; i < this->weave_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->weave_card(i), output);
  }

  // repeated uint32 hucard_list = 15;
  for (int i = 0; i < this->hucard_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->hucard_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordShowDown)
}

::google::protobuf::uint8* MsgRecordShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordShowDown)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  // optional int64 fixedscore = 3;
  if (has_fixedscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fixedscore(), target);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param1(), target);
  }

  // optional int64 param2 = 5;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param2(), target);
  }

  // optional uint32 hucard = 6;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hucard(), target);
  }

  // repeated .MsgRecordEvent event = 7;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->event(i), target);
  }

  // optional int64 money = 8;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->money(), target);
  }

  // optional int64 param3 = 9;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->param3(), target);
  }

  // optional int64 param4 = 10;
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->param4(), target);
  }

  // optional int64 param5 = 11;
  if (has_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->param5(), target);
  }

  // optional int64 play_id = 12;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->play_id(), target);
  }

  // repeated uint32 hand_card = 13;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->hand_card(i), target);
  }

  // repeated .MsgRecordWeaveCard weave_card = 14;
  for (int i = 0; i < this->weave_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->weave_card(i), target);
  }

  // repeated uint32 hucard_list = 15;
  for (int i = 0; i < this->hucard_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->hucard_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordShowDown)
  return target;
}

int MsgRecordShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 fixedscore = 3;
    if (has_fixedscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fixedscore());
    }

    // optional int64 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

    // optional int64 param2 = 5;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

    // optional uint32 hucard = 6;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hucard());
    }

    // optional int64 money = 8;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 param3 = 9;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param3());
    }

    // optional int64 param4 = 10;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param4());
    }

    // optional int64 param5 = 11;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param5());
    }

    // optional int64 play_id = 12;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->play_id());
    }

  }
  // repeated .MsgRecordEvent event = 7;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  // repeated uint32 hand_card = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated .MsgRecordWeaveCard weave_card = 14;
  total_size += 1 * this->weave_card_size();
  for (int i = 0; i < this->weave_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weave_card(i));
  }

  // repeated uint32 hucard_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->hucard_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hucard_list(i));
    }
    total_size += 1 * this->hucard_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordShowDown::MergeFrom(const MsgRecordShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  hand_card_.MergeFrom(from.hand_card_);
  weave_card_.MergeFrom(from.weave_card_);
  hucard_list_.MergeFrom(from.hucard_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_fixedscore()) {
      set_fixedscore(from.fixedscore());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordShowDown::CopyFrom(const MsgRecordShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordShowDown::IsInitialized() const {

  return true;
}

void MsgRecordShowDown::Swap(MsgRecordShowDown* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(score_, other->score_);
    std::swap(fixedscore_, other->fixedscore_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(hucard_, other->hucard_);
    event_.Swap(&other->event_);
    std::swap(money_, other->money_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(play_id_, other->play_id_);
    hand_card_.Swap(&other->hand_card_);
    weave_card_.Swap(&other->weave_card_);
    hucard_list_.Swap(&other->hucard_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordShowDown_descriptor_;
  metadata.reflection = MsgRecordShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordWeaveCard::kCardFieldNumber;
const int MsgRecordWeaveCard::kWikFieldNumber;
const int MsgRecordWeaveCard::kBarkindFieldNumber;
const int MsgRecordWeaveCard::kMixCardFieldNumber;
#endif  // !_MSC_VER

MsgRecordWeaveCard::MsgRecordWeaveCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordWeaveCard)
}

void MsgRecordWeaveCard::InitAsDefaultInstance() {
}

MsgRecordWeaveCard::MsgRecordWeaveCard(const MsgRecordWeaveCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordWeaveCard)
}

void MsgRecordWeaveCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0u;
  wik_ = 0u;
  barkind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordWeaveCard::~MsgRecordWeaveCard() {
  // @@protoc_insertion_point(destructor:MsgRecordWeaveCard)
  SharedDtor();
}

void MsgRecordWeaveCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordWeaveCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordWeaveCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordWeaveCard_descriptor_;
}

const MsgRecordWeaveCard& MsgRecordWeaveCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordWeaveCard* MsgRecordWeaveCard::default_instance_ = NULL;

MsgRecordWeaveCard* MsgRecordWeaveCard::New() const {
  return new MsgRecordWeaveCard;
}

void MsgRecordWeaveCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecordWeaveCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(card_, wik_);
    barkind_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mix_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordWeaveCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordWeaveCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 2;
      case 2: {
        if (tag == 16) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_barkind;
        break;
      }

      // optional uint32 barkind = 3;
      case 3: {
        if (tag == 24) {
         parse_barkind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barkind_)));
          set_has_barkind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mix_card;
        break;
      }

      // repeated uint32 mix_card = 4;
      case 4: {
        if (tag == 32) {
         parse_mix_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_mix_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mix_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mix_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordWeaveCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordWeaveCard)
  return false;
#undef DO_
}

void MsgRecordWeaveCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordWeaveCard)
  // optional uint32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card(), output);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wik(), output);
  }

  // optional uint32 barkind = 3;
  if (has_barkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->barkind(), output);
  }

  // repeated uint32 mix_card = 4;
  for (int i = 0; i < this->mix_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->mix_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordWeaveCard)
}

::google::protobuf::uint8* MsgRecordWeaveCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordWeaveCard)
  // optional uint32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card(), target);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wik(), target);
  }

  // optional uint32 barkind = 3;
  if (has_barkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->barkind(), target);
  }

  // repeated uint32 mix_card = 4;
  for (int i = 0; i < this->mix_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->mix_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordWeaveCard)
  return target;
}

int MsgRecordWeaveCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 wik = 2;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 barkind = 3;
    if (has_barkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barkind());
    }

  }
  // repeated uint32 mix_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mix_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mix_card(i));
    }
    total_size += 1 * this->mix_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordWeaveCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordWeaveCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordWeaveCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordWeaveCard::MergeFrom(const MsgRecordWeaveCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  mix_card_.MergeFrom(from.mix_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_barkind()) {
      set_barkind(from.barkind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordWeaveCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordWeaveCard::CopyFrom(const MsgRecordWeaveCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordWeaveCard::IsInitialized() const {

  return true;
}

void MsgRecordWeaveCard::Swap(MsgRecordWeaveCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(wik_, other->wik_);
    std::swap(barkind_, other->barkind_);
    mix_card_.Swap(&other->mix_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordWeaveCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordWeaveCard_descriptor_;
  metadata.reflection = MsgRecordWeaveCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordIdList::kRecordIdListFieldNumber;
const int MsgRecordIdList::kFightIdFieldNumber;
#endif  // !_MSC_VER

MsgRecordIdList::MsgRecordIdList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordIdList)
}

void MsgRecordIdList::InitAsDefaultInstance() {
}

MsgRecordIdList::MsgRecordIdList(const MsgRecordIdList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordIdList)
}

void MsgRecordIdList::SharedCtor() {
  _cached_size_ = 0;
  fight_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordIdList::~MsgRecordIdList() {
  // @@protoc_insertion_point(destructor:MsgRecordIdList)
  SharedDtor();
}

void MsgRecordIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordIdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordIdList_descriptor_;
}

const MsgRecordIdList& MsgRecordIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordIdList* MsgRecordIdList::default_instance_ = NULL;

MsgRecordIdList* MsgRecordIdList::New() const {
  return new MsgRecordIdList;
}

void MsgRecordIdList::Clear() {
  fight_id_ = GOOGLE_ULONGLONG(0);
  record_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordIdList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 record_id_list = 1;
      case 1: {
        if (tag == 8) {
         parse_record_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_record_id_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_record_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_record_id_list;
        if (input->ExpectTag(16)) goto parse_fight_id;
        break;
      }

      // optional uint64 fight_id = 2;
      case 2: {
        if (tag == 16) {
         parse_fight_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_id_)));
          set_has_fight_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordIdList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordIdList)
  return false;
#undef DO_
}

void MsgRecordIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordIdList)
  // repeated uint64 record_id_list = 1;
  for (int i = 0; i < this->record_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->record_id_list(i), output);
  }

  // optional uint64 fight_id = 2;
  if (has_fight_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fight_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordIdList)
}

::google::protobuf::uint8* MsgRecordIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordIdList)
  // repeated uint64 record_id_list = 1;
  for (int i = 0; i < this->record_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->record_id_list(i), target);
  }

  // optional uint64 fight_id = 2;
  if (has_fight_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fight_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordIdList)
  return target;
}

int MsgRecordIdList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 fight_id = 2;
    if (has_fight_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_id());
    }

  }
  // repeated uint64 record_id_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->record_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->record_id_list(i));
    }
    total_size += 1 * this->record_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordIdList::MergeFrom(const MsgRecordIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_id_list_.MergeFrom(from.record_id_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fight_id()) {
      set_fight_id(from.fight_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordIdList::CopyFrom(const MsgRecordIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordIdList::IsInitialized() const {

  return true;
}

void MsgRecordIdList::Swap(MsgRecordIdList* other) {
  if (other != this) {
    record_id_list_.Swap(&other->record_id_list_);
    std::swap(fight_id_, other->fight_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordIdList_descriptor_;
  metadata.reflection = MsgRecordIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordNodeList::kCmdIdFieldNumber;
const int MsgRecordNodeList::kCardValueFieldNumber;
const int MsgRecordNodeList::kCardIndexFieldNumber;
const int MsgRecordNodeList::kActionIdFieldNumber;
const int MsgRecordNodeList::kActionWikFieldNumber;
const int MsgRecordNodeList::kTargetIdFieldNumber;
const int MsgRecordNodeList::kNodeSizeFieldNumber;
const int MsgRecordNodeList::kRoleDataFieldNumber;
const int MsgRecordNodeList::kRoomDataFieldNumber;
const int MsgRecordNodeList::kShowdownListFieldNumber;
const int MsgRecordNodeList::kNextNodeFieldNumber;
const int MsgRecordNodeList::kWinRoleFieldNumber;
const int MsgRecordNodeList::kLostRoleFieldNumber;
const int MsgRecordNodeList::kRoomRankingFieldNumber;
#endif  // !_MSC_VER

MsgRecordNodeList::MsgRecordNodeList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordNodeList)
}

void MsgRecordNodeList::InitAsDefaultInstance() {
  room_data_ = const_cast< ::MsgRecordRoomInfo*>(&::MsgRecordRoomInfo::default_instance());
  room_ranking_ = const_cast< ::MsgGDRankInfo*>(&::MsgGDRankInfo::default_instance());
}

MsgRecordNodeList::MsgRecordNodeList(const MsgRecordNodeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordNodeList)
}

void MsgRecordNodeList::SharedCtor() {
  _cached_size_ = 0;
  cmd_id_ = 0u;
  card_index_ = 0u;
  action_id_ = GOOGLE_ULONGLONG(0);
  action_wik_ = 0u;
  target_id_ = GOOGLE_ULONGLONG(0);
  node_size_ = 0u;
  room_data_ = NULL;
  room_ranking_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordNodeList::~MsgRecordNodeList() {
  // @@protoc_insertion_point(destructor:MsgRecordNodeList)
  SharedDtor();
}

void MsgRecordNodeList::SharedDtor() {
  if (this != default_instance_) {
    delete room_data_;
    delete room_ranking_;
  }
}

void MsgRecordNodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordNodeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordNodeList_descriptor_;
}

const MsgRecordNodeList& MsgRecordNodeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordNodeList* MsgRecordNodeList::default_instance_ = NULL;

MsgRecordNodeList* MsgRecordNodeList::New() const {
  return new MsgRecordNodeList;
}

void MsgRecordNodeList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecordNodeList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(cmd_id_, node_size_);
  }
  if (_has_bits_[8 / 32] & 8448) {
    if (has_room_data()) {
      if (room_data_ != NULL) room_data_->::MsgRecordRoomInfo::Clear();
    }
    if (has_room_ranking()) {
      if (room_ranking_ != NULL) room_ranking_->::MsgGDRankInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_value_.Clear();
  role_data_.Clear();
  showdown_list_.Clear();
  next_node_.Clear();
  win_role_.Clear();
  lost_role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordNodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordNodeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_id_)));
          set_has_cmd_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card_value;
        break;
      }

      // repeated uint32 card_value = 2;
      case 2: {
        if (tag == 16) {
         parse_card_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_card_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card_value;
        if (input->ExpectTag(24)) goto parse_card_index;
        break;
      }

      // optional uint32 card_index = 3;
      case 3: {
        if (tag == 24) {
         parse_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_index_)));
          set_has_card_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint64 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action_wik;
        break;
      }

      // optional uint32 action_wik = 5;
      case 5: {
        if (tag == 40) {
         parse_action_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_wik_)));
          set_has_action_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 6;
      case 6: {
        if (tag == 48) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_node_size;
        break;
      }

      // optional uint32 node_size = 7;
      case 7: {
        if (tag == 56) {
         parse_node_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_size_)));
          set_has_node_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_data;
        break;
      }

      // repeated .MsgRecordRoleInfo role_data = 8;
      case 8: {
        if (tag == 66) {
         parse_role_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_data;
        if (input->ExpectTag(74)) goto parse_room_data;
        break;
      }

      // optional .MsgRecordRoomInfo room_data = 9;
      case 9: {
        if (tag == 74) {
         parse_room_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_showdown_list;
        break;
      }

      // repeated .MsgRecordShowDown showdown_list = 10;
      case 10: {
        if (tag == 82) {
         parse_showdown_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showdown_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_showdown_list;
        if (input->ExpectTag(90)) goto parse_next_node;
        break;
      }

      // repeated .MsgRecordNodeList next_node = 11;
      case 11: {
        if (tag == 90) {
         parse_next_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_next_node;
        if (input->ExpectTag(98)) goto parse_win_role;
        break;
      }

      // repeated .MsgGDShowDownRole win_role = 12;
      case 12: {
        if (tag == 98) {
         parse_win_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_win_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_win_role;
        if (input->ExpectTag(106)) goto parse_lost_role;
        break;
      }

      // repeated .MsgGDShowDownRole lost_role = 13;
      case 13: {
        if (tag == 106) {
         parse_lost_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lost_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_lost_role;
        if (input->ExpectTag(114)) goto parse_room_ranking;
        break;
      }

      // optional .MsgGDRankInfo room_ranking = 14;
      case 14: {
        if (tag == 114) {
         parse_room_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_ranking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordNodeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordNodeList)
  return false;
#undef DO_
}

void MsgRecordNodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordNodeList)
  // optional uint32 cmd_id = 1;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_id(), output);
  }

  // repeated uint32 card_value = 2;
  for (int i = 0; i < this->card_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->card_value(i), output);
  }

  // optional uint32 card_index = 3;
  if (has_card_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card_index(), output);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->action_id(), output);
  }

  // optional uint32 action_wik = 5;
  if (has_action_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->action_wik(), output);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->target_id(), output);
  }

  // optional uint32 node_size = 7;
  if (has_node_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->node_size(), output);
  }

  // repeated .MsgRecordRoleInfo role_data = 8;
  for (int i = 0; i < this->role_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_data(i), output);
  }

  // optional .MsgRecordRoomInfo room_data = 9;
  if (has_room_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->room_data(), output);
  }

  // repeated .MsgRecordShowDown showdown_list = 10;
  for (int i = 0; i < this->showdown_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->showdown_list(i), output);
  }

  // repeated .MsgRecordNodeList next_node = 11;
  for (int i = 0; i < this->next_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->next_node(i), output);
  }

  // repeated .MsgGDShowDownRole win_role = 12;
  for (int i = 0; i < this->win_role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->win_role(i), output);
  }

  // repeated .MsgGDShowDownRole lost_role = 13;
  for (int i = 0; i < this->lost_role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->lost_role(i), output);
  }

  // optional .MsgGDRankInfo room_ranking = 14;
  if (has_room_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->room_ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordNodeList)
}

::google::protobuf::uint8* MsgRecordNodeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordNodeList)
  // optional uint32 cmd_id = 1;
  if (has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_id(), target);
  }

  // repeated uint32 card_value = 2;
  for (int i = 0; i < this->card_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->card_value(i), target);
  }

  // optional uint32 card_index = 3;
  if (has_card_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card_index(), target);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->action_id(), target);
  }

  // optional uint32 action_wik = 5;
  if (has_action_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->action_wik(), target);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->target_id(), target);
  }

  // optional uint32 node_size = 7;
  if (has_node_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->node_size(), target);
  }

  // repeated .MsgRecordRoleInfo role_data = 8;
  for (int i = 0; i < this->role_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_data(i), target);
  }

  // optional .MsgRecordRoomInfo room_data = 9;
  if (has_room_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->room_data(), target);
  }

  // repeated .MsgRecordShowDown showdown_list = 10;
  for (int i = 0; i < this->showdown_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->showdown_list(i), target);
  }

  // repeated .MsgRecordNodeList next_node = 11;
  for (int i = 0; i < this->next_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->next_node(i), target);
  }

  // repeated .MsgGDShowDownRole win_role = 12;
  for (int i = 0; i < this->win_role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->win_role(i), target);
  }

  // repeated .MsgGDShowDownRole lost_role = 13;
  for (int i = 0; i < this->lost_role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->lost_role(i), target);
  }

  // optional .MsgGDRankInfo room_ranking = 14;
  if (has_room_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->room_ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordNodeList)
  return target;
}

int MsgRecordNodeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd_id = 1;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_id());
    }

    // optional uint32 card_index = 3;
    if (has_card_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_index());
    }

    // optional uint64 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional uint32 action_wik = 5;
    if (has_action_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_wik());
    }

    // optional uint64 target_id = 6;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 node_size = 7;
    if (has_node_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgRecordRoomInfo room_data = 9;
    if (has_room_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_data());
    }

    // optional .MsgGDRankInfo room_ranking = 14;
    if (has_room_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_ranking());
    }

  }
  // repeated uint32 card_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_value(i));
    }
    total_size += 1 * this->card_value_size() + data_size;
  }

  // repeated .MsgRecordRoleInfo role_data = 8;
  total_size += 1 * this->role_data_size();
  for (int i = 0; i < this->role_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_data(i));
  }

  // repeated .MsgRecordShowDown showdown_list = 10;
  total_size += 1 * this->showdown_list_size();
  for (int i = 0; i < this->showdown_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showdown_list(i));
  }

  // repeated .MsgRecordNodeList next_node = 11;
  total_size += 1 * this->next_node_size();
  for (int i = 0; i < this->next_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_node(i));
  }

  // repeated .MsgGDShowDownRole win_role = 12;
  total_size += 1 * this->win_role_size();
  for (int i = 0; i < this->win_role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->win_role(i));
  }

  // repeated .MsgGDShowDownRole lost_role = 13;
  total_size += 1 * this->lost_role_size();
  for (int i = 0; i < this->lost_role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lost_role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordNodeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordNodeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordNodeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordNodeList::MergeFrom(const MsgRecordNodeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_value_.MergeFrom(from.card_value_);
  role_data_.MergeFrom(from.role_data_);
  showdown_list_.MergeFrom(from.showdown_list_);
  next_node_.MergeFrom(from.next_node_);
  win_role_.MergeFrom(from.win_role_);
  lost_role_.MergeFrom(from.lost_role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
    if (from.has_card_index()) {
      set_card_index(from.card_index());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_action_wik()) {
      set_action_wik(from.action_wik());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_node_size()) {
      set_node_size(from.node_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_data()) {
      mutable_room_data()->::MsgRecordRoomInfo::MergeFrom(from.room_data());
    }
    if (from.has_room_ranking()) {
      mutable_room_ranking()->::MsgGDRankInfo::MergeFrom(from.room_ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordNodeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordNodeList::CopyFrom(const MsgRecordNodeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordNodeList::IsInitialized() const {

  return true;
}

void MsgRecordNodeList::Swap(MsgRecordNodeList* other) {
  if (other != this) {
    std::swap(cmd_id_, other->cmd_id_);
    card_value_.Swap(&other->card_value_);
    std::swap(card_index_, other->card_index_);
    std::swap(action_id_, other->action_id_);
    std::swap(action_wik_, other->action_wik_);
    std::swap(target_id_, other->target_id_);
    std::swap(node_size_, other->node_size_);
    role_data_.Swap(&other->role_data_);
    std::swap(room_data_, other->room_data_);
    showdown_list_.Swap(&other->showdown_list_);
    next_node_.Swap(&other->next_node_);
    win_role_.Swap(&other->win_role_);
    lost_role_.Swap(&other->lost_role_);
    std::swap(room_ranking_, other->room_ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordNodeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordNodeList_descriptor_;
  metadata.reflection = MsgRecordNodeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordNodeCount::kRecordNodeListFieldNumber;
const int MsgRecordNodeCount::kGameCountFieldNumber;
const int MsgRecordNodeCount::kRecordIdFieldNumber;
const int MsgRecordNodeCount::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

MsgRecordNodeCount::MsgRecordNodeCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordNodeCount)
}

void MsgRecordNodeCount::InitAsDefaultInstance() {
  record_node_list_ = const_cast< ::MsgRecordNodeList*>(&::MsgRecordNodeList::default_instance());
}

MsgRecordNodeCount::MsgRecordNodeCount(const MsgRecordNodeCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordNodeCount)
}

void MsgRecordNodeCount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  record_node_list_ = NULL;
  game_count_ = 0u;
  record_id_ = GOOGLE_ULONGLONG(0);
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordNodeCount::~MsgRecordNodeCount() {
  // @@protoc_insertion_point(destructor:MsgRecordNodeCount)
  SharedDtor();
}

void MsgRecordNodeCount::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
    delete record_node_list_;
  }
}

void MsgRecordNodeCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordNodeCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordNodeCount_descriptor_;
}

const MsgRecordNodeCount& MsgRecordNodeCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordNodeCount* MsgRecordNodeCount::default_instance_ = NULL;

MsgRecordNodeCount* MsgRecordNodeCount::New() const {
  return new MsgRecordNodeCount;
}

void MsgRecordNodeCount::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_record_node_list()) {
      if (record_node_list_ != NULL) record_node_list_->::MsgRecordNodeList::Clear();
    }
    game_count_ = 0u;
    record_id_ = GOOGLE_ULONGLONG(0);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordNodeCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordNodeCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgRecordNodeList record_node_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record_node_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 2;
      case 2: {
        if (tag == 16) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_record_id;
        break;
      }

      // optional uint64 record_id = 3;
      case 3: {
        if (tag == 24) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room_type;
        break;
      }

      // optional string room_type = 4;
      case 4: {
        if (tag == 34) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordNodeCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordNodeCount)
  return false;
#undef DO_
}

void MsgRecordNodeCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordNodeCount)
  // optional .MsgRecordNodeList record_node_list = 1;
  if (has_record_node_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_node_list(), output);
  }

  // optional uint32 game_count = 2;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_count(), output);
  }

  // optional uint64 record_id = 3;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->record_id(), output);
  }

  // optional string room_type = 4;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordNodeCount)
}

::google::protobuf::uint8* MsgRecordNodeCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordNodeCount)
  // optional .MsgRecordNodeList record_node_list = 1;
  if (has_record_node_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_node_list(), target);
  }

  // optional uint32 game_count = 2;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_count(), target);
  }

  // optional uint64 record_id = 3;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->record_id(), target);
  }

  // optional string room_type = 4;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordNodeCount)
  return target;
}

int MsgRecordNodeCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgRecordNodeList record_node_list = 1;
    if (has_record_node_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_node_list());
    }

    // optional uint32 game_count = 2;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint64 record_id = 3;
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_id());
    }

    // optional string room_type = 4;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordNodeCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordNodeCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordNodeCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordNodeCount::MergeFrom(const MsgRecordNodeCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_node_list()) {
      mutable_record_node_list()->::MsgRecordNodeList::MergeFrom(from.record_node_list());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordNodeCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordNodeCount::CopyFrom(const MsgRecordNodeCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordNodeCount::IsInitialized() const {

  return true;
}

void MsgRecordNodeCount::Swap(MsgRecordNodeCount* other) {
  if (other != this) {
    std::swap(record_node_list_, other->record_node_list_);
    std::swap(game_count_, other->game_count_);
    std::swap(record_id_, other->record_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordNodeCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordNodeCount_descriptor_;
  metadata.reflection = MsgRecordNodeCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFightingRecord::kRoomTypeFieldNumber;
const int MsgFightingRecord::kRoomIdFieldNumber;
const int MsgFightingRecord::kTimeFieldNumber;
const int MsgFightingRecord::kContentFieldNumber;
const int MsgFightingRecord::kConsumeIdFieldNumber;
const int MsgFightingRecord::kRecordIdFieldNumber;
#endif  // !_MSC_VER

MsgFightingRecord::MsgFightingRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFightingRecord)
}

void MsgFightingRecord::InitAsDefaultInstance() {
}

MsgFightingRecord::MsgFightingRecord(const MsgFightingRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFightingRecord)
}

void MsgFightingRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consume_id_ = 0u;
  record_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFightingRecord::~MsgFightingRecord() {
  // @@protoc_insertion_point(destructor:MsgFightingRecord)
  SharedDtor();
}

void MsgFightingRecord::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MsgFightingRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFightingRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFightingRecord_descriptor_;
}

const MsgFightingRecord& MsgFightingRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgFightingRecord* MsgFightingRecord::default_instance_ = NULL;

MsgFightingRecord* MsgFightingRecord::New() const {
  return new MsgFightingRecord;
}

void MsgFightingRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgFightingRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(time_, record_id_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
    room_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFightingRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFightingRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consume_id;
        break;
      }

      // optional uint32 consume_id = 5;
      case 5: {
        if (tag == 40) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_record_id;
        break;
      }

      // optional uint64 record_id = 6;
      case 6: {
        if (tag == 48) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFightingRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFightingRecord)
  return false;
#undef DO_
}

void MsgFightingRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFightingRecord)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_type(), output);
  }

  // optional uint64 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional uint32 consume_id = 5;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume_id(), output);
  }

  // optional uint64 record_id = 6;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->record_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFightingRecord)
}

::google::protobuf::uint8* MsgFightingRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFightingRecord)
  // optional string room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_type(), target);
  }

  // optional uint64 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional uint32 consume_id = 5;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume_id(), target);
  }

  // optional uint64 record_id = 6;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->record_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFightingRecord)
  return target;
}

int MsgFightingRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint64 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 consume_id = 5;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // optional uint64 record_id = 6;
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFightingRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFightingRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFightingRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFightingRecord::MergeFrom(const MsgFightingRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFightingRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFightingRecord::CopyFrom(const MsgFightingRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFightingRecord::IsInitialized() const {

  return true;
}

void MsgFightingRecord::Swap(MsgFightingRecord* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(room_id_, other->room_id_);
    std::swap(time_, other->time_);
    std::swap(content_, other->content_);
    std::swap(consume_id_, other->consume_id_);
    std::swap(record_id_, other->record_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFightingRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFightingRecord_descriptor_;
  metadata.reflection = MsgFightingRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFightingRecordCount::kRecordlistFieldNumber;
const int MsgFightingRecordCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgFightingRecordCount::MsgFightingRecordCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFightingRecordCount)
}

void MsgFightingRecordCount::InitAsDefaultInstance() {
}

MsgFightingRecordCount::MsgFightingRecordCount(const MsgFightingRecordCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFightingRecordCount)
}

void MsgFightingRecordCount::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFightingRecordCount::~MsgFightingRecordCount() {
  // @@protoc_insertion_point(destructor:MsgFightingRecordCount)
  SharedDtor();
}

void MsgFightingRecordCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFightingRecordCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFightingRecordCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFightingRecordCount_descriptor_;
}

const MsgFightingRecordCount& MsgFightingRecordCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgFightingRecordCount* MsgFightingRecordCount::default_instance_ = NULL;

MsgFightingRecordCount* MsgFightingRecordCount::New() const {
  return new MsgFightingRecordCount;
}

void MsgFightingRecordCount::Clear() {
  count_ = 0u;
  recordlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFightingRecordCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFightingRecordCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgFightingRecord recordlist = 1;
      case 1: {
        if (tag == 10) {
         parse_recordlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_recordlist;
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFightingRecordCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFightingRecordCount)
  return false;
#undef DO_
}

void MsgFightingRecordCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFightingRecordCount)
  // repeated .MsgFightingRecord recordlist = 1;
  for (int i = 0; i < this->recordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordlist(i), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFightingRecordCount)
}

::google::protobuf::uint8* MsgFightingRecordCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFightingRecordCount)
  // repeated .MsgFightingRecord recordlist = 1;
  for (int i = 0; i < this->recordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordlist(i), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFightingRecordCount)
  return target;
}

int MsgFightingRecordCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated .MsgFightingRecord recordlist = 1;
  total_size += 1 * this->recordlist_size();
  for (int i = 0; i < this->recordlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFightingRecordCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFightingRecordCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFightingRecordCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFightingRecordCount::MergeFrom(const MsgFightingRecordCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordlist_.MergeFrom(from.recordlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFightingRecordCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFightingRecordCount::CopyFrom(const MsgFightingRecordCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFightingRecordCount::IsInitialized() const {

  return true;
}

void MsgFightingRecordCount::Swap(MsgFightingRecordCount* other) {
  if (other != this) {
    recordlist_.Swap(&other->recordlist_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFightingRecordCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFightingRecordCount_descriptor_;
  metadata.reflection = MsgFightingRecordCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordScoreDataList::kRecordScoreListFieldNumber;
#endif  // !_MSC_VER

MsgRecordScoreDataList::MsgRecordScoreDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordScoreDataList)
}

void MsgRecordScoreDataList::InitAsDefaultInstance() {
}

MsgRecordScoreDataList::MsgRecordScoreDataList(const MsgRecordScoreDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordScoreDataList)
}

void MsgRecordScoreDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordScoreDataList::~MsgRecordScoreDataList() {
  // @@protoc_insertion_point(destructor:MsgRecordScoreDataList)
  SharedDtor();
}

void MsgRecordScoreDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordScoreDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordScoreDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordScoreDataList_descriptor_;
}

const MsgRecordScoreDataList& MsgRecordScoreDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordScoreDataList* MsgRecordScoreDataList::default_instance_ = NULL;

MsgRecordScoreDataList* MsgRecordScoreDataList::New() const {
  return new MsgRecordScoreDataList;
}

void MsgRecordScoreDataList::Clear() {
  record_score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordScoreDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordScoreDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgRecordScoreCountList record_score_list = 1;
      case 1: {
        if (tag == 10) {
         parse_record_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_record_score_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordScoreDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordScoreDataList)
  return false;
#undef DO_
}

void MsgRecordScoreDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordScoreDataList)
  // repeated .MsgRecordScoreCountList record_score_list = 1;
  for (int i = 0; i < this->record_score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_score_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordScoreDataList)
}

::google::protobuf::uint8* MsgRecordScoreDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordScoreDataList)
  // repeated .MsgRecordScoreCountList record_score_list = 1;
  for (int i = 0; i < this->record_score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_score_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordScoreDataList)
  return target;
}

int MsgRecordScoreDataList::ByteSize() const {
  int total_size = 0;

  // repeated .MsgRecordScoreCountList record_score_list = 1;
  total_size += 1 * this->record_score_list_size();
  for (int i = 0; i < this->record_score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_score_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordScoreDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordScoreDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordScoreDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordScoreDataList::MergeFrom(const MsgRecordScoreDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_score_list_.MergeFrom(from.record_score_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordScoreDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordScoreDataList::CopyFrom(const MsgRecordScoreDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordScoreDataList::IsInitialized() const {

  return true;
}

void MsgRecordScoreDataList::Swap(MsgRecordScoreDataList* other) {
  if (other != this) {
    record_score_list_.Swap(&other->record_score_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordScoreDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordScoreDataList_descriptor_;
  metadata.reflection = MsgRecordScoreDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordScoreCountList::kScoreCountFieldNumber;
const int MsgRecordScoreCountList::kNameCountFieldNumber;
const int MsgRecordScoreCountList::kRecordIdFieldNumber;
#endif  // !_MSC_VER

MsgRecordScoreCountList::MsgRecordScoreCountList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordScoreCountList)
}

void MsgRecordScoreCountList::InitAsDefaultInstance() {
}

MsgRecordScoreCountList::MsgRecordScoreCountList(const MsgRecordScoreCountList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordScoreCountList)
}

void MsgRecordScoreCountList::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordScoreCountList::~MsgRecordScoreCountList() {
  // @@protoc_insertion_point(destructor:MsgRecordScoreCountList)
  SharedDtor();
}

void MsgRecordScoreCountList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordScoreCountList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordScoreCountList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordScoreCountList_descriptor_;
}

const MsgRecordScoreCountList& MsgRecordScoreCountList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordScoreCountList* MsgRecordScoreCountList::default_instance_ = NULL;

MsgRecordScoreCountList* MsgRecordScoreCountList::New() const {
  return new MsgRecordScoreCountList;
}

void MsgRecordScoreCountList::Clear() {
  record_id_ = GOOGLE_ULONGLONG(0);
  score_count_.Clear();
  name_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordScoreCountList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordScoreCountList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgRecordScoreCount score_count = 1;
      case 1: {
        if (tag == 10) {
         parse_score_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_score_count;
        if (input->ExpectTag(18)) goto parse_name_count;
        break;
      }

      // repeated .MsgRecordNameCount name_count = 2;
      case 2: {
        if (tag == 18) {
         parse_name_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_name_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name_count;
        if (input->ExpectTag(24)) goto parse_record_id;
        break;
      }

      // optional uint64 record_id = 3;
      case 3: {
        if (tag == 24) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordScoreCountList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordScoreCountList)
  return false;
#undef DO_
}

void MsgRecordScoreCountList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordScoreCountList)
  // repeated .MsgRecordScoreCount score_count = 1;
  for (int i = 0; i < this->score_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_count(i), output);
  }

  // repeated .MsgRecordNameCount name_count = 2;
  for (int i = 0; i < this->name_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name_count(i), output);
  }

  // optional uint64 record_id = 3;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->record_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordScoreCountList)
}

::google::protobuf::uint8* MsgRecordScoreCountList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordScoreCountList)
  // repeated .MsgRecordScoreCount score_count = 1;
  for (int i = 0; i < this->score_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score_count(i), target);
  }

  // repeated .MsgRecordNameCount name_count = 2;
  for (int i = 0; i < this->name_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name_count(i), target);
  }

  // optional uint64 record_id = 3;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->record_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordScoreCountList)
  return target;
}

int MsgRecordScoreCountList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 record_id = 3;
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_id());
    }

  }
  // repeated .MsgRecordScoreCount score_count = 1;
  total_size += 1 * this->score_count_size();
  for (int i = 0; i < this->score_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_count(i));
  }

  // repeated .MsgRecordNameCount name_count = 2;
  total_size += 1 * this->name_count_size();
  for (int i = 0; i < this->name_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->name_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordScoreCountList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordScoreCountList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordScoreCountList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordScoreCountList::MergeFrom(const MsgRecordScoreCountList& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_count_.MergeFrom(from.score_count_);
  name_count_.MergeFrom(from.name_count_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordScoreCountList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordScoreCountList::CopyFrom(const MsgRecordScoreCountList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordScoreCountList::IsInitialized() const {

  return true;
}

void MsgRecordScoreCountList::Swap(MsgRecordScoreCountList* other) {
  if (other != this) {
    score_count_.Swap(&other->score_count_);
    name_count_.Swap(&other->name_count_);
    std::swap(record_id_, other->record_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordScoreCountList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordScoreCountList_descriptor_;
  metadata.reflection = MsgRecordScoreCountList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordScoreCount::kScoreListFieldNumber;
#endif  // !_MSC_VER

MsgRecordScoreCount::MsgRecordScoreCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordScoreCount)
}

void MsgRecordScoreCount::InitAsDefaultInstance() {
}

MsgRecordScoreCount::MsgRecordScoreCount(const MsgRecordScoreCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordScoreCount)
}

void MsgRecordScoreCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordScoreCount::~MsgRecordScoreCount() {
  // @@protoc_insertion_point(destructor:MsgRecordScoreCount)
  SharedDtor();
}

void MsgRecordScoreCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordScoreCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordScoreCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordScoreCount_descriptor_;
}

const MsgRecordScoreCount& MsgRecordScoreCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordScoreCount* MsgRecordScoreCount::default_instance_ = NULL;

MsgRecordScoreCount* MsgRecordScoreCount::New() const {
  return new MsgRecordScoreCount;
}

void MsgRecordScoreCount::Clear() {
  score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordScoreCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordScoreCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgRecordScore score_list = 1;
      case 1: {
        if (tag == 10) {
         parse_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_score_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordScoreCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordScoreCount)
  return false;
#undef DO_
}

void MsgRecordScoreCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordScoreCount)
  // repeated .MsgRecordScore score_list = 1;
  for (int i = 0; i < this->score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordScoreCount)
}

::google::protobuf::uint8* MsgRecordScoreCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordScoreCount)
  // repeated .MsgRecordScore score_list = 1;
  for (int i = 0; i < this->score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordScoreCount)
  return target;
}

int MsgRecordScoreCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgRecordScore score_list = 1;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordScoreCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordScoreCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordScoreCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordScoreCount::MergeFrom(const MsgRecordScoreCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_list_.MergeFrom(from.score_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordScoreCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordScoreCount::CopyFrom(const MsgRecordScoreCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordScoreCount::IsInitialized() const {

  return true;
}

void MsgRecordScoreCount::Swap(MsgRecordScoreCount* other) {
  if (other != this) {
    score_list_.Swap(&other->score_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordScoreCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordScoreCount_descriptor_;
  metadata.reflection = MsgRecordScoreCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordNameCount::kNameListFieldNumber;
#endif  // !_MSC_VER

MsgRecordNameCount::MsgRecordNameCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordNameCount)
}

void MsgRecordNameCount::InitAsDefaultInstance() {
}

MsgRecordNameCount::MsgRecordNameCount(const MsgRecordNameCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordNameCount)
}

void MsgRecordNameCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordNameCount::~MsgRecordNameCount() {
  // @@protoc_insertion_point(destructor:MsgRecordNameCount)
  SharedDtor();
}

void MsgRecordNameCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordNameCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordNameCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordNameCount_descriptor_;
}

const MsgRecordNameCount& MsgRecordNameCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordNameCount* MsgRecordNameCount::default_instance_ = NULL;

MsgRecordNameCount* MsgRecordNameCount::New() const {
  return new MsgRecordNameCount;
}

void MsgRecordNameCount::Clear() {
  name_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordNameCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordNameCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgRecordName name_list = 1;
      case 1: {
        if (tag == 10) {
         parse_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_name_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_name_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordNameCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordNameCount)
  return false;
#undef DO_
}

void MsgRecordNameCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordNameCount)
  // repeated .MsgRecordName name_list = 1;
  for (int i = 0; i < this->name_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordNameCount)
}

::google::protobuf::uint8* MsgRecordNameCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordNameCount)
  // repeated .MsgRecordName name_list = 1;
  for (int i = 0; i < this->name_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordNameCount)
  return target;
}

int MsgRecordNameCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgRecordName name_list = 1;
  total_size += 1 * this->name_list_size();
  for (int i = 0; i < this->name_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->name_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordNameCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordNameCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordNameCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordNameCount::MergeFrom(const MsgRecordNameCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_list_.MergeFrom(from.name_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordNameCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordNameCount::CopyFrom(const MsgRecordNameCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordNameCount::IsInitialized() const {

  return true;
}

void MsgRecordNameCount::Swap(MsgRecordNameCount* other) {
  if (other != this) {
    name_list_.Swap(&other->name_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordNameCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordNameCount_descriptor_;
  metadata.reflection = MsgRecordNameCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordName::kNameFieldNumber;
const int MsgRecordName::kPidFieldNumber;
#endif  // !_MSC_VER

MsgRecordName::MsgRecordName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordName)
}

void MsgRecordName::InitAsDefaultInstance() {
}

MsgRecordName::MsgRecordName(const MsgRecordName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordName)
}

void MsgRecordName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordName::~MsgRecordName() {
  // @@protoc_insertion_point(destructor:MsgRecordName)
  SharedDtor();
}

void MsgRecordName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgRecordName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordName_descriptor_;
}

const MsgRecordName& MsgRecordName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordName* MsgRecordName::default_instance_ = NULL;

MsgRecordName* MsgRecordName::New() const {
  return new MsgRecordName;
}

void MsgRecordName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    pid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordName)
  return false;
#undef DO_
}

void MsgRecordName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordName)
}

::google::protobuf::uint8* MsgRecordName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordName)
  return target;
}

int MsgRecordName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordName::MergeFrom(const MsgRecordName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordName::CopyFrom(const MsgRecordName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordName::IsInitialized() const {

  return true;
}

void MsgRecordName::Swap(MsgRecordName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordName_descriptor_;
  metadata.reflection = MsgRecordName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRecordScore::kScoreFieldNumber;
const int MsgRecordScore::kPidFieldNumber;
#endif  // !_MSC_VER

MsgRecordScore::MsgRecordScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRecordScore)
}

void MsgRecordScore::InitAsDefaultInstance() {
}

MsgRecordScore::MsgRecordScore(const MsgRecordScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRecordScore)
}

void MsgRecordScore::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRecordScore::~MsgRecordScore() {
  // @@protoc_insertion_point(destructor:MsgRecordScore)
  SharedDtor();
}

void MsgRecordScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRecordScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRecordScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRecordScore_descriptor_;
}

const MsgRecordScore& MsgRecordScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRecordScore* MsgRecordScore::default_instance_ = NULL;

MsgRecordScore* MsgRecordScore::New() const {
  return new MsgRecordScore;
}

void MsgRecordScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRecordScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, pid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRecordScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRecordScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRecordScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRecordScore)
  return false;
#undef DO_
}

void MsgRecordScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRecordScore)
  // optional sint64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->score(), output);
  }

  // optional uint32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRecordScore)
}

::google::protobuf::uint8* MsgRecordScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRecordScore)
  // optional sint64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->score(), target);
  }

  // optional uint32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRecordScore)
  return target;
}

int MsgRecordScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->score());
    }

    // optional uint32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRecordScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRecordScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRecordScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRecordScore::MergeFrom(const MsgRecordScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRecordScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRecordScore::CopyFrom(const MsgRecordScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecordScore::IsInitialized() const {

  return true;
}

void MsgRecordScore::Swap(MsgRecordScore* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRecordScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRecordScore_descriptor_;
  metadata.reflection = MsgRecordScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDistanceCount::kDistanceListFieldNumber;
#endif  // !_MSC_VER

MsgDistanceCount::MsgDistanceCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDistanceCount)
}

void MsgDistanceCount::InitAsDefaultInstance() {
}

MsgDistanceCount::MsgDistanceCount(const MsgDistanceCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDistanceCount)
}

void MsgDistanceCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDistanceCount::~MsgDistanceCount() {
  // @@protoc_insertion_point(destructor:MsgDistanceCount)
  SharedDtor();
}

void MsgDistanceCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDistanceCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDistanceCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDistanceCount_descriptor_;
}

const MsgDistanceCount& MsgDistanceCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgDistanceCount* MsgDistanceCount::default_instance_ = NULL;

MsgDistanceCount* MsgDistanceCount::New() const {
  return new MsgDistanceCount;
}

void MsgDistanceCount::Clear() {
  distance_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDistanceCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDistanceCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgDistanceInfo distance_list = 1;
      case 1: {
        if (tag == 10) {
         parse_distance_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_distance_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_distance_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDistanceCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDistanceCount)
  return false;
#undef DO_
}

void MsgDistanceCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDistanceCount)
  // repeated .MsgDistanceInfo distance_list = 1;
  for (int i = 0; i < this->distance_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->distance_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDistanceCount)
}

::google::protobuf::uint8* MsgDistanceCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDistanceCount)
  // repeated .MsgDistanceInfo distance_list = 1;
  for (int i = 0; i < this->distance_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->distance_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDistanceCount)
  return target;
}

int MsgDistanceCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgDistanceInfo distance_list = 1;
  total_size += 1 * this->distance_list_size();
  for (int i = 0; i < this->distance_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->distance_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDistanceCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDistanceCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDistanceCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDistanceCount::MergeFrom(const MsgDistanceCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  distance_list_.MergeFrom(from.distance_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDistanceCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDistanceCount::CopyFrom(const MsgDistanceCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDistanceCount::IsInitialized() const {

  return true;
}

void MsgDistanceCount::Swap(MsgDistanceCount* other) {
  if (other != this) {
    distance_list_.Swap(&other->distance_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDistanceCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDistanceCount_descriptor_;
  metadata.reflection = MsgDistanceCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDistanceInfo::kPidFieldNumber;
const int MsgDistanceInfo::kDistanceXFieldNumber;
const int MsgDistanceInfo::kDistanceYFieldNumber;
#endif  // !_MSC_VER

MsgDistanceInfo::MsgDistanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDistanceInfo)
}

void MsgDistanceInfo::InitAsDefaultInstance() {
}

MsgDistanceInfo::MsgDistanceInfo(const MsgDistanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDistanceInfo)
}

void MsgDistanceInfo::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  distance_x_ = 0;
  distance_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDistanceInfo::~MsgDistanceInfo() {
  // @@protoc_insertion_point(destructor:MsgDistanceInfo)
  SharedDtor();
}

void MsgDistanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDistanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDistanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDistanceInfo_descriptor_;
}

const MsgDistanceInfo& MsgDistanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgDistanceInfo* MsgDistanceInfo::default_instance_ = NULL;

MsgDistanceInfo* MsgDistanceInfo::New() const {
  return new MsgDistanceInfo;
}

void MsgDistanceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDistanceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, distance_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDistanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDistanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_distance_x;
        break;
      }

      // optional double distance_x = 2;
      case 2: {
        if (tag == 17) {
         parse_distance_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_x_)));
          set_has_distance_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_distance_y;
        break;
      }

      // optional double distance_y = 3;
      case 3: {
        if (tag == 25) {
         parse_distance_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_y_)));
          set_has_distance_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDistanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDistanceInfo)
  return false;
#undef DO_
}

void MsgDistanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDistanceInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // optional double distance_x = 2;
  if (has_distance_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_x(), output);
  }

  // optional double distance_y = 3;
  if (has_distance_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->distance_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDistanceInfo)
}

::google::protobuf::uint8* MsgDistanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDistanceInfo)
  // optional uint64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // optional double distance_x = 2;
  if (has_distance_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_x(), target);
  }

  // optional double distance_y = 3;
  if (has_distance_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->distance_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDistanceInfo)
  return target;
}

int MsgDistanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional double distance_x = 2;
    if (has_distance_x()) {
      total_size += 1 + 8;
    }

    // optional double distance_y = 3;
    if (has_distance_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDistanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDistanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDistanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDistanceInfo::MergeFrom(const MsgDistanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_distance_x()) {
      set_distance_x(from.distance_x());
    }
    if (from.has_distance_y()) {
      set_distance_y(from.distance_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDistanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDistanceInfo::CopyFrom(const MsgDistanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDistanceInfo::IsInitialized() const {

  return true;
}

void MsgDistanceInfo::Swap(MsgDistanceInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(distance_x_, other->distance_x_);
    std::swap(distance_y_, other->distance_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDistanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDistanceInfo_descriptor_;
  metadata.reflection = MsgDistanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDShowDownRole::kRoleIdFieldNumber;
const int MsgGDShowDownRole::kGameCountFieldNumber;
const int MsgGDShowDownRole::kSeriesFieldNumber;
const int MsgGDShowDownRole::kScoreFieldNumber;
const int MsgGDShowDownRole::kCurrentScoreFieldNumber;
#endif  // !_MSC_VER

MsgGDShowDownRole::MsgGDShowDownRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDShowDownRole)
}

void MsgGDShowDownRole::InitAsDefaultInstance() {
}

MsgGDShowDownRole::MsgGDShowDownRole(const MsgGDShowDownRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDShowDownRole)
}

void MsgGDShowDownRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  series_ = 0u;
  score_ = 0;
  current_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDShowDownRole::~MsgGDShowDownRole() {
  // @@protoc_insertion_point(destructor:MsgGDShowDownRole)
  SharedDtor();
}

void MsgGDShowDownRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDShowDownRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDShowDownRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDShowDownRole_descriptor_;
}

const MsgGDShowDownRole& MsgGDShowDownRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgGDShowDownRole* MsgGDShowDownRole::default_instance_ = NULL;

MsgGDShowDownRole* MsgGDShowDownRole::New() const {
  return new MsgGDShowDownRole;
}

void MsgGDShowDownRole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGDShowDownRole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(role_id_, current_score_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDShowDownRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDShowDownRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 2;
      case 2: {
        if (tag == 16) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_series;
        break;
      }

      // optional uint32 series = 3;
      case 3: {
        if (tag == 24) {
         parse_series:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_)));
          set_has_series();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_current_score;
        break;
      }

      // optional int32 current_score = 5;
      case 5: {
        if (tag == 40) {
         parse_current_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_score_)));
          set_has_current_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDShowDownRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDShowDownRole)
  return false;
#undef DO_
}

void MsgGDShowDownRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDShowDownRole)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 game_count = 2;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_count(), output);
  }

  // optional uint32 series = 3;
  if (has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 current_score = 5;
  if (has_current_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDShowDownRole)
}

::google::protobuf::uint8* MsgGDShowDownRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDShowDownRole)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 game_count = 2;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_count(), target);
  }

  // optional uint32 series = 3;
  if (has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 current_score = 5;
  if (has_current_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDShowDownRole)
  return target;
}

int MsgGDShowDownRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 game_count = 2;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 series = 3;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 current_score = 5;
    if (has_current_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDShowDownRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDShowDownRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDShowDownRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDShowDownRole::MergeFrom(const MsgGDShowDownRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_series()) {
      set_series(from.series());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_current_score()) {
      set_current_score(from.current_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDShowDownRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDShowDownRole::CopyFrom(const MsgGDShowDownRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDShowDownRole::IsInitialized() const {

  return true;
}

void MsgGDShowDownRole::Swap(MsgGDShowDownRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(series_, other->series_);
    std::swap(score_, other->score_);
    std::swap(current_score_, other->current_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDShowDownRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDShowDownRole_descriptor_;
  metadata.reflection = MsgGDShowDownRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDRankInfo::kRankListFieldNumber;
#endif  // !_MSC_VER

MsgGDRankInfo::MsgGDRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDRankInfo)
}

void MsgGDRankInfo::InitAsDefaultInstance() {
}

MsgGDRankInfo::MsgGDRankInfo(const MsgGDRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDRankInfo)
}

void MsgGDRankInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDRankInfo::~MsgGDRankInfo() {
  // @@protoc_insertion_point(destructor:MsgGDRankInfo)
  SharedDtor();
}

void MsgGDRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDRankInfo_descriptor_;
}

const MsgGDRankInfo& MsgGDRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgGDRankInfo* MsgGDRankInfo::default_instance_ = NULL;

MsgGDRankInfo* MsgGDRankInfo::New() const {
  return new MsgGDRankInfo;
}

void MsgGDRankInfo::Clear() {
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 rank_list = 1;
      case 1: {
        if (tag == 8) {
         parse_rank_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_rank_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_rank_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_rank_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDRankInfo)
  return false;
#undef DO_
}

void MsgGDRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDRankInfo)
  // repeated uint64 rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDRankInfo)
}

::google::protobuf::uint8* MsgGDRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDRankInfo)
  // repeated uint64 rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDRankInfo)
  return target;
}

int MsgGDRankInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint64 rank_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rank_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->rank_list(i));
    }
    total_size += 1 * this->rank_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDRankInfo::MergeFrom(const MsgGDRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDRankInfo::CopyFrom(const MsgGDRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDRankInfo::IsInitialized() const {

  return true;
}

void MsgGDRankInfo::Swap(MsgGDRankInfo* other) {
  if (other != this) {
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDRankInfo_descriptor_;
  metadata.reflection = MsgGDRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSignIn::kDayFieldNumber;
const int MsgSignIn::kSignTagFieldNumber;
#endif  // !_MSC_VER

MsgSignIn::MsgSignIn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSignIn)
}

void MsgSignIn::InitAsDefaultInstance() {
}

MsgSignIn::MsgSignIn(const MsgSignIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSignIn)
}

void MsgSignIn::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  signtag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSignIn::~MsgSignIn() {
  // @@protoc_insertion_point(destructor:MsgSignIn)
  SharedDtor();
}

void MsgSignIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSignIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSignIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSignIn_descriptor_;
}

const MsgSignIn& MsgSignIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgSignIn* MsgSignIn::default_instance_ = NULL;

MsgSignIn* MsgSignIn::New() const {
  return new MsgSignIn;
}

void MsgSignIn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSignIn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(day_, signtag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSignIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SignTag;
        break;
      }

      // optional bool SignTag = 2;
      case 2: {
        if (tag == 16) {
         parse_SignTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signtag_)));
          set_has_signtag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSignIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSignIn)
  return false;
#undef DO_
}

void MsgSignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSignIn)
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // optional bool SignTag = 2;
  if (has_signtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->signtag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSignIn)
}

::google::protobuf::uint8* MsgSignIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSignIn)
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // optional bool SignTag = 2;
  if (has_signtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->signtag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSignIn)
  return target;
}

int MsgSignIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional bool SignTag = 2;
    if (has_signtag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSignIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSignIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSignIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSignIn::MergeFrom(const MsgSignIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_signtag()) {
      set_signtag(from.signtag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSignIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSignIn::CopyFrom(const MsgSignIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSignIn::IsInitialized() const {

  return true;
}

void MsgSignIn::Swap(MsgSignIn* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(signtag_, other->signtag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSignIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSignIn_descriptor_;
  metadata.reflection = MsgSignIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleState::kRoleIdFieldNumber;
const int MsgRoleState::kStateFieldNumber;
#endif  // !_MSC_VER

MsgRoleState::MsgRoleState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoleState)
}

void MsgRoleState::InitAsDefaultInstance() {
}

MsgRoleState::MsgRoleState(const MsgRoleState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoleState)
}

void MsgRoleState::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleState::~MsgRoleState() {
  // @@protoc_insertion_point(destructor:MsgRoleState)
  SharedDtor();
}

void MsgRoleState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRoleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleState_descriptor_;
}

const MsgRoleState& MsgRoleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRoleState* MsgRoleState::default_instance_ = NULL;

MsgRoleState* MsgRoleState::New() const {
  return new MsgRoleState;
}

void MsgRoleState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRoleState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoleState)
  return false;
#undef DO_
}

void MsgRoleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoleState)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoleState)
}

::google::protobuf::uint8* MsgRoleState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoleState)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoleState)
  return target;
}

int MsgRoleState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleState::MergeFrom(const MsgRoleState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleState::CopyFrom(const MsgRoleState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleState::IsInitialized() const {

  return true;
}

void MsgRoleState::Swap(MsgRoleState* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleState_descriptor_;
  metadata.reflection = MsgRoleState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleStateCount::kRoleStateFieldNumber;
#endif  // !_MSC_VER

MsgRoleStateCount::MsgRoleStateCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoleStateCount)
}

void MsgRoleStateCount::InitAsDefaultInstance() {
}

MsgRoleStateCount::MsgRoleStateCount(const MsgRoleStateCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoleStateCount)
}

void MsgRoleStateCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleStateCount::~MsgRoleStateCount() {
  // @@protoc_insertion_point(destructor:MsgRoleStateCount)
  SharedDtor();
}

void MsgRoleStateCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRoleStateCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoleStateCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleStateCount_descriptor_;
}

const MsgRoleStateCount& MsgRoleStateCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRoleStateCount* MsgRoleStateCount::default_instance_ = NULL;

MsgRoleStateCount* MsgRoleStateCount::New() const {
  return new MsgRoleStateCount;
}

void MsgRoleStateCount::Clear() {
  role_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleStateCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoleStateCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgRoleState role_state = 1;
      case 1: {
        if (tag == 10) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_role_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoleStateCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoleStateCount)
  return false;
#undef DO_
}

void MsgRoleStateCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoleStateCount)
  // repeated .MsgRoleState role_state = 1;
  for (int i = 0; i < this->role_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoleStateCount)
}

::google::protobuf::uint8* MsgRoleStateCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoleStateCount)
  // repeated .MsgRoleState role_state = 1;
  for (int i = 0; i < this->role_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoleStateCount)
  return target;
}

int MsgRoleStateCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgRoleState role_state = 1;
  total_size += 1 * this->role_state_size();
  for (int i = 0; i < this->role_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleStateCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleStateCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleStateCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleStateCount::MergeFrom(const MsgRoleStateCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_state_.MergeFrom(from.role_state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleStateCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleStateCount::CopyFrom(const MsgRoleStateCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleStateCount::IsInitialized() const {

  return true;
}

void MsgRoleStateCount::Swap(MsgRoleStateCount* other) {
  if (other != this) {
    role_state_.Swap(&other->role_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleStateCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleStateCount_descriptor_;
  metadata.reflection = MsgRoleStateCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleHost::kRoleIdFieldNumber;
const int MsgRoleHost::kHostIdFieldNumber;
#endif  // !_MSC_VER

MsgRoleHost::MsgRoleHost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoleHost)
}

void MsgRoleHost::InitAsDefaultInstance() {
}

MsgRoleHost::MsgRoleHost(const MsgRoleHost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoleHost)
}

void MsgRoleHost::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  host_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleHost::~MsgRoleHost() {
  // @@protoc_insertion_point(destructor:MsgRoleHost)
  SharedDtor();
}

void MsgRoleHost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRoleHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoleHost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleHost_descriptor_;
}

const MsgRoleHost& MsgRoleHost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRoleHost* MsgRoleHost::default_instance_ = NULL;

MsgRoleHost* MsgRoleHost::New() const {
  return new MsgRoleHost;
}

void MsgRoleHost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRoleHost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, host_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoleHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_host_id;
        break;
      }

      // optional uint32 host_id = 2;
      case 2: {
        if (tag == 16) {
         parse_host_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoleHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoleHost)
  return false;
#undef DO_
}

void MsgRoleHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoleHost)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 host_id = 2;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoleHost)
}

::google::protobuf::uint8* MsgRoleHost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoleHost)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 host_id = 2;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoleHost)
  return target;
}

int MsgRoleHost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 host_id = 2;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleHost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleHost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleHost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleHost::MergeFrom(const MsgRoleHost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleHost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleHost::CopyFrom(const MsgRoleHost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleHost::IsInitialized() const {

  return true;
}

void MsgRoleHost::Swap(MsgRoleHost* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(host_id_, other->host_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleHost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleHost_descriptor_;
  metadata.reflection = MsgRoleHost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleHostCount::kRoleStateFieldNumber;
const int MsgRoleHostCount::kHostListFieldNumber;
#endif  // !_MSC_VER

MsgRoleHostCount::MsgRoleHostCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoleHostCount)
}

void MsgRoleHostCount::InitAsDefaultInstance() {
}

MsgRoleHostCount::MsgRoleHostCount(const MsgRoleHostCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoleHostCount)
}

void MsgRoleHostCount::SharedCtor() {
  _cached_size_ = 0;
  role_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleHostCount::~MsgRoleHostCount() {
  // @@protoc_insertion_point(destructor:MsgRoleHostCount)
  SharedDtor();
}

void MsgRoleHostCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRoleHostCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoleHostCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleHostCount_descriptor_;
}

const MsgRoleHostCount& MsgRoleHostCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fpro_2eproto();
  return *default_instance_;
}

MsgRoleHostCount* MsgRoleHostCount::default_instance_ = NULL;

MsgRoleHostCount* MsgRoleHostCount::New() const {
  return new MsgRoleHostCount;
}

void MsgRoleHostCount::Clear() {
  role_state_ = 0u;
  host_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleHostCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoleHostCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_state_)));
          set_has_role_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_list;
        break;
      }

      // repeated .MsgRoleHost host_list = 2;
      case 2: {
        if (tag == 18) {
         parse_host_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoleHostCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoleHostCount)
  return false;
#undef DO_
}

void MsgRoleHostCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoleHostCount)
  // optional uint32 role_state = 1;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_state(), output);
  }

  // repeated .MsgRoleHost host_list = 2;
  for (int i = 0; i < this->host_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->host_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoleHostCount)
}

::google::protobuf::uint8* MsgRoleHostCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoleHostCount)
  // optional uint32 role_state = 1;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_state(), target);
  }

  // repeated .MsgRoleHost host_list = 2;
  for (int i = 0; i < this->host_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->host_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoleHostCount)
  return target;
}

int MsgRoleHostCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_state = 1;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_state());
    }

  }
  // repeated .MsgRoleHost host_list = 2;
  total_size += 1 * this->host_list_size();
  for (int i = 0; i < this->host_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->host_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleHostCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleHostCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleHostCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleHostCount::MergeFrom(const MsgRoleHostCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  host_list_.MergeFrom(from.host_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_state()) {
      set_role_state(from.role_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleHostCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleHostCount::CopyFrom(const MsgRoleHostCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleHostCount::IsInitialized() const {

  return true;
}

void MsgRoleHostCount::Swap(MsgRoleHostCount* other) {
  if (other != this) {
    std::swap(role_state_, other->role_state_);
    host_list_.Swap(&other->host_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleHostCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleHostCount_descriptor_;
  metadata.reflection = MsgRoleHostCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
