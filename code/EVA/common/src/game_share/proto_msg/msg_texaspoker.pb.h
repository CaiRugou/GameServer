// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_texaspoker.proto

#ifndef PROTOBUF_msg_5ftexaspoker_2eproto__INCLUDED
#define PROTOBUF_msg_5ftexaspoker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "public_pro.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

class MsgTexasPokerPlayerInfo;
class MsgTexasPokerRoomInfo;
class MsgRoleAction;
class MsgCallPour;
class MsgRaisePour;
class MsgRewardData;
class MsgRewardList;
class MsgResetCoins;
class MsgApplyGame;
class MsgCancelApply;
class MsgRequestQuit;

enum TPokerModle {
  POKER_NULL = 0,
  POKER_HIGT_CARD = 1,
  POKER_ONE_PAIR = 2,
  POKER_TWO_PAIRS = 3,
  POKER_THREE_KIND = 4,
  POKER_STRAIGHT = 5,
  POKER_FLUSH = 6,
  POKER_FULL_HOUSE = 7,
  POKER_FOUR_KIND = 8,
  POKER_STRAIGHT_FLUSH = 9,
  POKER_ROYAL_FLUSH = 10
};
bool TPokerModle_IsValid(int value);
const TPokerModle TPokerModle_MIN = POKER_NULL;
const TPokerModle TPokerModle_MAX = POKER_ROYAL_FLUSH;
const int TPokerModle_ARRAYSIZE = TPokerModle_MAX + 1;

const ::google::protobuf::EnumDescriptor* TPokerModle_descriptor();
inline const ::std::string& TPokerModle_Name(TPokerModle value) {
  return ::google::protobuf::internal::NameOfEnum(
    TPokerModle_descriptor(), value);
}
inline bool TPokerModle_Parse(
    const ::std::string& name, TPokerModle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TPokerModle>(
    TPokerModle_descriptor(), name, value);
}
enum TPokerRoleState {
  ROLE_NORMAL = 1,
  ROLE_MAKERS = 2,
  ROLE_LESS_POUR = 4,
  ROLE_BIG_POUR = 8,
  ROLE_ABANDON = 16,
  ROLE_BASEPOUR = 32,
  ROLE_INVALID = 64,
  ROLE_NEWROLE = 128
};
bool TPokerRoleState_IsValid(int value);
const TPokerRoleState TPokerRoleState_MIN = ROLE_NORMAL;
const TPokerRoleState TPokerRoleState_MAX = ROLE_NEWROLE;
const int TPokerRoleState_ARRAYSIZE = TPokerRoleState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TPokerRoleState_descriptor();
inline const ::std::string& TPokerRoleState_Name(TPokerRoleState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TPokerRoleState_descriptor(), value);
}
inline bool TPokerRoleState_Parse(
    const ::std::string& name, TPokerRoleState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TPokerRoleState>(
    TPokerRoleState_descriptor(), name, value);
}
enum TTexasPokerState {
  TexasPokerStateStartGame = 0,
  TexasPokerStateStartPerflop = 1,
  TexasPokerStateOneAction = 2,
  TexasPokerStateEndPerflop = 3,
  TexasPokerStateStartflop = 4,
  TexasPokerStateTwoAction = 5,
  TexasPokerStateEndFlop = 6,
  TexasPokerStateStartTurn = 7,
  TexasPokerStateThreeAction = 8,
  TexasPokerStateEndTurn = 9,
  TexasPokerStateStartRiver = 10,
  TexasPokerStateFourAction = 11,
  TexasPokerStateEndRiver = 12,
  TexasPokerStateShowdownInterim = 13,
  TexasPokerStateShowdown = 14,
  TeXasPokerStateCleanJunk = 15,
  TexasPokerStateCloseRoom = 16,
  TexasPokerStateOver = 17
};
bool TTexasPokerState_IsValid(int value);
const TTexasPokerState TTexasPokerState_MIN = TexasPokerStateStartGame;
const TTexasPokerState TTexasPokerState_MAX = TexasPokerStateOver;
const int TTexasPokerState_ARRAYSIZE = TTexasPokerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TTexasPokerState_descriptor();
inline const ::std::string& TTexasPokerState_Name(TTexasPokerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TTexasPokerState_descriptor(), value);
}
inline bool TTexasPokerState_Parse(
    const ::std::string& name, TTexasPokerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TTexasPokerState>(
    TTexasPokerState_descriptor(), name, value);
}
// ===================================================================

class MsgTexasPokerPlayerInfo : public ::google::protobuf::Message {
 public:
  MsgTexasPokerPlayerInfo();
  virtual ~MsgTexasPokerPlayerInfo();

  MsgTexasPokerPlayerInfo(const MsgTexasPokerPlayerInfo& from);

  inline MsgTexasPokerPlayerInfo& operator=(const MsgTexasPokerPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTexasPokerPlayerInfo& default_instance();

  void Swap(MsgTexasPokerPlayerInfo* other);

  // implements Message ----------------------------------------------

  MsgTexasPokerPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTexasPokerPlayerInfo& from);
  void MergeFrom(const MsgTexasPokerPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MsgPlayerInfo player_info = 1;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::MsgPlayerInfo& player_info() const;
  inline ::MsgPlayerInfo* mutable_player_info();
  inline ::MsgPlayerInfo* release_player_info();
  inline void set_allocated_player_info(::MsgPlayerInfo* player_info);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint64 pour = 3;
  inline bool has_pour() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 3;
  inline ::google::protobuf::uint64 pour() const;
  inline void set_pour(::google::protobuf::uint64 value);

  // optional uint64 coins = 4;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 4;
  inline ::google::protobuf::uint64 coins() const;
  inline void set_coins(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgTexasPokerPlayerInfo)
 private:
  inline void set_has_player_info();
  inline void clear_has_player_info();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_pour();
  inline void clear_has_pour();
  inline void set_has_coins();
  inline void clear_has_coins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MsgPlayerInfo* player_info_;
  ::google::protobuf::uint64 pour_;
  ::google::protobuf::uint64 coins_;
  ::google::protobuf::uint32 state_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgTexasPokerPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgTexasPokerRoomInfo : public ::google::protobuf::Message {
 public:
  MsgTexasPokerRoomInfo();
  virtual ~MsgTexasPokerRoomInfo();

  MsgTexasPokerRoomInfo(const MsgTexasPokerRoomInfo& from);

  inline MsgTexasPokerRoomInfo& operator=(const MsgTexasPokerRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTexasPokerRoomInfo& default_instance();

  void Swap(MsgTexasPokerRoomInfo* other);

  // implements Message ----------------------------------------------

  MsgTexasPokerRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgTexasPokerRoomInfo& from);
  void MergeFrom(const MsgTexasPokerRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TTexasPokerState room_state = 1;
  inline bool has_room_state() const;
  inline void clear_room_state();
  static const int kRoomStateFieldNumber = 1;
  inline ::TTexasPokerState room_state() const;
  inline void set_room_state(::TTexasPokerState value);

  // repeated .MsgTexasPokerPlayerInfo player_list = 2;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 2;
  inline const ::MsgTexasPokerPlayerInfo& player_list(int index) const;
  inline ::MsgTexasPokerPlayerInfo* mutable_player_list(int index);
  inline ::MsgTexasPokerPlayerInfo* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgTexasPokerPlayerInfo >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgTexasPokerPlayerInfo >*
      mutable_player_list();

  // repeated uint32 center_card = 3;
  inline int center_card_size() const;
  inline void clear_center_card();
  static const int kCenterCardFieldNumber = 3;
  inline ::google::protobuf::uint32 center_card(int index) const;
  inline void set_center_card(int index, ::google::protobuf::uint32 value);
  inline void add_center_card(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      center_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_center_card();

  // repeated uint32 self_card = 4;
  inline int self_card_size() const;
  inline void clear_self_card();
  static const int kSelfCardFieldNumber = 4;
  inline ::google::protobuf::uint32 self_card(int index) const;
  inline void set_self_card(int index, ::google::protobuf::uint32 value);
  inline void add_self_card(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      self_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_self_card();

  // optional uint64 run_time = 5;
  inline bool has_run_time() const;
  inline void clear_run_time();
  static const int kRunTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 run_time() const;
  inline void set_run_time(::google::protobuf::uint64 value);

  // optional uint64 total_pour = 6;
  inline bool has_total_pour() const;
  inline void clear_total_pour();
  static const int kTotalPourFieldNumber = 6;
  inline ::google::protobuf::uint64 total_pour() const;
  inline void set_total_pour(::google::protobuf::uint64 value);

  // repeated uint64 seats = 7;
  inline int seats_size() const;
  inline void clear_seats();
  static const int kSeatsFieldNumber = 7;
  inline ::google::protobuf::uint64 seats(int index) const;
  inline void set_seats(int index, ::google::protobuf::uint64 value);
  inline void add_seats(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      seats() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_seats();

  // optional uint64 action = 8;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 8;
  inline ::google::protobuf::uint64 action() const;
  inline void set_action(::google::protobuf::uint64 value);

  // optional uint64 largeCoins = 9;
  inline bool has_largecoins() const;
  inline void clear_largecoins();
  static const int kLargeCoinsFieldNumber = 9;
  inline ::google::protobuf::uint64 largecoins() const;
  inline void set_largecoins(::google::protobuf::uint64 value);

  // optional uint32 maker = 10;
  inline bool has_maker() const;
  inline void clear_maker();
  static const int kMakerFieldNumber = 10;
  inline ::google::protobuf::uint32 maker() const;
  inline void set_maker(::google::protobuf::uint32 value);

  // optional uint64 roomID = 11;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 11;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional .MsgBaseRoomInfo room_info = 12;
  inline bool has_room_info() const;
  inline void clear_room_info();
  static const int kRoomInfoFieldNumber = 12;
  inline const ::MsgBaseRoomInfo& room_info() const;
  inline ::MsgBaseRoomInfo* mutable_room_info();
  inline ::MsgBaseRoomInfo* release_room_info();
  inline void set_allocated_room_info(::MsgBaseRoomInfo* room_info);

  // @@protoc_insertion_point(class_scope:MsgTexasPokerRoomInfo)
 private:
  inline void set_has_room_state();
  inline void clear_has_room_state();
  inline void set_has_run_time();
  inline void clear_has_run_time();
  inline void set_has_total_pour();
  inline void clear_has_total_pour();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_largecoins();
  inline void clear_has_largecoins();
  inline void set_has_maker();
  inline void clear_has_maker();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_room_info();
  inline void clear_has_room_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgTexasPokerPlayerInfo > player_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > center_card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > self_card_;
  ::google::protobuf::uint64 run_time_;
  int room_state_;
  ::google::protobuf::uint32 maker_;
  ::google::protobuf::uint64 total_pour_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > seats_;
  ::google::protobuf::uint64 action_;
  ::google::protobuf::uint64 largecoins_;
  ::google::protobuf::uint64 roomid_;
  ::MsgBaseRoomInfo* room_info_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgTexasPokerRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class MsgRoleAction : public ::google::protobuf::Message {
 public:
  MsgRoleAction();
  virtual ~MsgRoleAction();

  MsgRoleAction(const MsgRoleAction& from);

  inline MsgRoleAction& operator=(const MsgRoleAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRoleAction& default_instance();

  void Swap(MsgRoleAction* other);

  // implements Message ----------------------------------------------

  MsgRoleAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRoleAction& from);
  void MergeFrom(const MsgRoleAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional .TTexasPokerState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::TTexasPokerState state() const;
  inline void set_state(::TTexasPokerState value);

  // @@protoc_insertion_point(class_scope:MsgRoleAction)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  int state_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgRoleAction* default_instance_;
};
// -------------------------------------------------------------------

class MsgCallPour : public ::google::protobuf::Message {
 public:
  MsgCallPour();
  virtual ~MsgCallPour();

  MsgCallPour(const MsgCallPour& from);

  inline MsgCallPour& operator=(const MsgCallPour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCallPour& default_instance();

  void Swap(MsgCallPour* other);

  // implements Message ----------------------------------------------

  MsgCallPour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCallPour& from);
  void MergeFrom(const MsgCallPour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint64 pour = 2;
  inline bool has_pour() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 2;
  inline ::google::protobuf::uint64 pour() const;
  inline void set_pour(::google::protobuf::uint64 value);

  // optional uint64 coins = 3;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 3;
  inline ::google::protobuf::uint64 coins() const;
  inline void set_coins(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgCallPour)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_pour();
  inline void clear_has_pour();
  inline void set_has_coins();
  inline void clear_has_coins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint64 pour_;
  ::google::protobuf::uint64 coins_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgCallPour* default_instance_;
};
// -------------------------------------------------------------------

class MsgRaisePour : public ::google::protobuf::Message {
 public:
  MsgRaisePour();
  virtual ~MsgRaisePour();

  MsgRaisePour(const MsgRaisePour& from);

  inline MsgRaisePour& operator=(const MsgRaisePour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRaisePour& default_instance();

  void Swap(MsgRaisePour* other);

  // implements Message ----------------------------------------------

  MsgRaisePour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRaisePour& from);
  void MergeFrom(const MsgRaisePour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint64 pour = 2;
  inline bool has_pour() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 2;
  inline ::google::protobuf::uint64 pour() const;
  inline void set_pour(::google::protobuf::uint64 value);

  // optional uint64 coins = 3;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 3;
  inline ::google::protobuf::uint64 coins() const;
  inline void set_coins(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgRaisePour)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_pour();
  inline void clear_has_pour();
  inline void set_has_coins();
  inline void clear_has_coins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint64 pour_;
  ::google::protobuf::uint64 coins_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgRaisePour* default_instance_;
};
// -------------------------------------------------------------------

class MsgRewardData : public ::google::protobuf::Message {
 public:
  MsgRewardData();
  virtual ~MsgRewardData();

  MsgRewardData(const MsgRewardData& from);

  inline MsgRewardData& operator=(const MsgRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRewardData& default_instance();

  void Swap(MsgRewardData* other);

  // implements Message ----------------------------------------------

  MsgRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRewardData& from);
  void MergeFrom(const MsgRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint64 reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline ::google::protobuf::uint64 reward() const;
  inline void set_reward(::google::protobuf::uint64 value);

  // optional uint64 coins = 3;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 3;
  inline ::google::protobuf::uint64 coins() const;
  inline void set_coins(::google::protobuf::uint64 value);

  // optional uint64 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // optional uint32 rankin = 5;
  inline bool has_rankin() const;
  inline void clear_rankin();
  static const int kRankinFieldNumber = 5;
  inline ::google::protobuf::uint32 rankin() const;
  inline void set_rankin(::google::protobuf::uint32 value);

  // repeated uint32 hand_card = 6;
  inline int hand_card_size() const;
  inline void clear_hand_card();
  static const int kHandCardFieldNumber = 6;
  inline ::google::protobuf::uint32 hand_card(int index) const;
  inline void set_hand_card(int index, ::google::protobuf::uint32 value);
  inline void add_hand_card(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hand_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hand_card();

  // @@protoc_insertion_point(class_scope:MsgRewardData)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_rankin();
  inline void clear_has_rankin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint64 reward_;
  ::google::protobuf::uint64 coins_;
  ::google::protobuf::uint64 money_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hand_card_;
  ::google::protobuf::uint32 rankin_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgRewardData* default_instance_;
};
// -------------------------------------------------------------------

class MsgRewardList : public ::google::protobuf::Message {
 public:
  MsgRewardList();
  virtual ~MsgRewardList();

  MsgRewardList(const MsgRewardList& from);

  inline MsgRewardList& operator=(const MsgRewardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRewardList& default_instance();

  void Swap(MsgRewardList* other);

  // implements Message ----------------------------------------------

  MsgRewardList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRewardList& from);
  void MergeFrom(const MsgRewardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgRewardData reward = 1;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::MsgRewardData& reward(int index) const;
  inline ::MsgRewardData* mutable_reward(int index);
  inline ::MsgRewardData* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgRewardData >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgRewardData >*
      mutable_reward();

  // repeated .MsgRewardData goback = 2;
  inline int goback_size() const;
  inline void clear_goback();
  static const int kGobackFieldNumber = 2;
  inline const ::MsgRewardData& goback(int index) const;
  inline ::MsgRewardData* mutable_goback(int index);
  inline ::MsgRewardData* add_goback();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgRewardData >&
      goback() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgRewardData >*
      mutable_goback();

  // optional bool isShow = 3;
  inline bool has_isshow() const;
  inline void clear_isshow();
  static const int kIsShowFieldNumber = 3;
  inline bool isshow() const;
  inline void set_isshow(bool value);

  // @@protoc_insertion_point(class_scope:MsgRewardList)
 private:
  inline void set_has_isshow();
  inline void clear_has_isshow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MsgRewardData > reward_;
  ::google::protobuf::RepeatedPtrField< ::MsgRewardData > goback_;
  bool isshow_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgRewardList* default_instance_;
};
// -------------------------------------------------------------------

class MsgResetCoins : public ::google::protobuf::Message {
 public:
  MsgResetCoins();
  virtual ~MsgResetCoins();

  MsgResetCoins(const MsgResetCoins& from);

  inline MsgResetCoins& operator=(const MsgResetCoins& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgResetCoins& default_instance();

  void Swap(MsgResetCoins* other);

  // implements Message ----------------------------------------------

  MsgResetCoins* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgResetCoins& from);
  void MergeFrom(const MsgResetCoins& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleid = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint64 coins = 2;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 2;
  inline ::google::protobuf::uint64 coins() const;
  inline void set_coins(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgResetCoins)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_coins();
  inline void clear_has_coins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint64 coins_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgResetCoins* default_instance_;
};
// -------------------------------------------------------------------

class MsgApplyGame : public ::google::protobuf::Message {
 public:
  MsgApplyGame();
  virtual ~MsgApplyGame();

  MsgApplyGame(const MsgApplyGame& from);

  inline MsgApplyGame& operator=(const MsgApplyGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgApplyGame& default_instance();

  void Swap(MsgApplyGame* other);

  // implements Message ----------------------------------------------

  MsgApplyGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgApplyGame& from);
  void MergeFrom(const MsgApplyGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_type = 1;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 1;
  inline const ::std::string& room_type() const;
  inline void set_room_type(const ::std::string& value);
  inline void set_room_type(const char* value);
  inline void set_room_type(const char* value, size_t size);
  inline ::std::string* mutable_room_type();
  inline ::std::string* release_room_type();
  inline void set_allocated_room_type(::std::string* room_type);

  // optional uint32 timeid = 2;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeidFieldNumber = 2;
  inline ::google::protobuf::uint32 timeid() const;
  inline void set_timeid(::google::protobuf::uint32 value);

  // optional uint64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgApplyGame)
 private:
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_timeid();
  inline void clear_has_timeid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_type_;
  ::google::protobuf::uint64 money_;
  ::google::protobuf::uint32 timeid_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgApplyGame* default_instance_;
};
// -------------------------------------------------------------------

class MsgCancelApply : public ::google::protobuf::Message {
 public:
  MsgCancelApply();
  virtual ~MsgCancelApply();

  MsgCancelApply(const MsgCancelApply& from);

  inline MsgCancelApply& operator=(const MsgCancelApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCancelApply& default_instance();

  void Swap(MsgCancelApply* other);

  // implements Message ----------------------------------------------

  MsgCancelApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCancelApply& from);
  void MergeFrom(const MsgCancelApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_type = 1;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 1;
  inline const ::std::string& room_type() const;
  inline void set_room_type(const ::std::string& value);
  inline void set_room_type(const char* value);
  inline void set_room_type(const char* value, size_t size);
  inline ::std::string* mutable_room_type();
  inline ::std::string* release_room_type();
  inline void set_allocated_room_type(::std::string* room_type);

  // optional uint32 timeid = 2;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeidFieldNumber = 2;
  inline ::google::protobuf::uint32 timeid() const;
  inline void set_timeid(::google::protobuf::uint32 value);

  // optional uint64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgCancelApply)
 private:
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_timeid();
  inline void clear_has_timeid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_type_;
  ::google::protobuf::uint64 money_;
  ::google::protobuf::uint32 timeid_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgCancelApply* default_instance_;
};
// -------------------------------------------------------------------

class MsgRequestQuit : public ::google::protobuf::Message {
 public:
  MsgRequestQuit();
  virtual ~MsgRequestQuit();

  MsgRequestQuit(const MsgRequestQuit& from);

  inline MsgRequestQuit& operator=(const MsgRequestQuit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRequestQuit& default_instance();

  void Swap(MsgRequestQuit* other);

  // implements Message ----------------------------------------------

  MsgRequestQuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRequestQuit& from);
  void MergeFrom(const MsgRequestQuit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::uint32 ranking() const;
  inline void set_ranking(::google::protobuf::uint32 value);

  // optional bool reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline bool reward() const;
  inline void set_reward(bool value);

  // @@protoc_insertion_point(class_scope:MsgRequestQuit)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ranking_;
  bool reward_;
  friend void  protobuf_AddDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_AssignDesc_msg_5ftexaspoker_2eproto();
  friend void protobuf_ShutdownFile_msg_5ftexaspoker_2eproto();

  void InitAsDefaultInstance();
  static MsgRequestQuit* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgTexasPokerPlayerInfo

// optional .MsgPlayerInfo player_info = 1;
inline bool MsgTexasPokerPlayerInfo::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTexasPokerPlayerInfo::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTexasPokerPlayerInfo::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTexasPokerPlayerInfo::clear_player_info() {
  if (player_info_ != NULL) player_info_->::MsgPlayerInfo::Clear();
  clear_has_player_info();
}
inline const ::MsgPlayerInfo& MsgTexasPokerPlayerInfo::player_info() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerPlayerInfo.player_info)
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::MsgPlayerInfo* MsgTexasPokerPlayerInfo::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::MsgPlayerInfo;
  // @@protoc_insertion_point(field_mutable:MsgTexasPokerPlayerInfo.player_info)
  return player_info_;
}
inline ::MsgPlayerInfo* MsgTexasPokerPlayerInfo::release_player_info() {
  clear_has_player_info();
  ::MsgPlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void MsgTexasPokerPlayerInfo::set_allocated_player_info(::MsgPlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTexasPokerPlayerInfo.player_info)
}

// optional uint32 state = 2;
inline bool MsgTexasPokerPlayerInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTexasPokerPlayerInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTexasPokerPlayerInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTexasPokerPlayerInfo::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 MsgTexasPokerPlayerInfo::state() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerPlayerInfo.state)
  return state_;
}
inline void MsgTexasPokerPlayerInfo::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerPlayerInfo.state)
}

// optional uint64 pour = 3;
inline bool MsgTexasPokerPlayerInfo::has_pour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTexasPokerPlayerInfo::set_has_pour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTexasPokerPlayerInfo::clear_has_pour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTexasPokerPlayerInfo::clear_pour() {
  pour_ = GOOGLE_ULONGLONG(0);
  clear_has_pour();
}
inline ::google::protobuf::uint64 MsgTexasPokerPlayerInfo::pour() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerPlayerInfo.pour)
  return pour_;
}
inline void MsgTexasPokerPlayerInfo::set_pour(::google::protobuf::uint64 value) {
  set_has_pour();
  pour_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerPlayerInfo.pour)
}

// optional uint64 coins = 4;
inline bool MsgTexasPokerPlayerInfo::has_coins() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTexasPokerPlayerInfo::set_has_coins() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTexasPokerPlayerInfo::clear_has_coins() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTexasPokerPlayerInfo::clear_coins() {
  coins_ = GOOGLE_ULONGLONG(0);
  clear_has_coins();
}
inline ::google::protobuf::uint64 MsgTexasPokerPlayerInfo::coins() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerPlayerInfo.coins)
  return coins_;
}
inline void MsgTexasPokerPlayerInfo::set_coins(::google::protobuf::uint64 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerPlayerInfo.coins)
}

// -------------------------------------------------------------------

// MsgTexasPokerRoomInfo

// optional .TTexasPokerState room_state = 1;
inline bool MsgTexasPokerRoomInfo::has_room_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_room_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTexasPokerRoomInfo::clear_has_room_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTexasPokerRoomInfo::clear_room_state() {
  room_state_ = 0;
  clear_has_room_state();
}
inline ::TTexasPokerState MsgTexasPokerRoomInfo::room_state() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.room_state)
  return static_cast< ::TTexasPokerState >(room_state_);
}
inline void MsgTexasPokerRoomInfo::set_room_state(::TTexasPokerState value) {
  assert(::TTexasPokerState_IsValid(value));
  set_has_room_state();
  room_state_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.room_state)
}

// repeated .MsgTexasPokerPlayerInfo player_list = 2;
inline int MsgTexasPokerRoomInfo::player_list_size() const {
  return player_list_.size();
}
inline void MsgTexasPokerRoomInfo::clear_player_list() {
  player_list_.Clear();
}
inline const ::MsgTexasPokerPlayerInfo& MsgTexasPokerRoomInfo::player_list(int index) const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.player_list)
  return player_list_.Get(index);
}
inline ::MsgTexasPokerPlayerInfo* MsgTexasPokerRoomInfo::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:MsgTexasPokerRoomInfo.player_list)
  return player_list_.Mutable(index);
}
inline ::MsgTexasPokerPlayerInfo* MsgTexasPokerRoomInfo::add_player_list() {
  // @@protoc_insertion_point(field_add:MsgTexasPokerRoomInfo.player_list)
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgTexasPokerPlayerInfo >&
MsgTexasPokerRoomInfo::player_list() const {
  // @@protoc_insertion_point(field_list:MsgTexasPokerRoomInfo.player_list)
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgTexasPokerPlayerInfo >*
MsgTexasPokerRoomInfo::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:MsgTexasPokerRoomInfo.player_list)
  return &player_list_;
}

// repeated uint32 center_card = 3;
inline int MsgTexasPokerRoomInfo::center_card_size() const {
  return center_card_.size();
}
inline void MsgTexasPokerRoomInfo::clear_center_card() {
  center_card_.Clear();
}
inline ::google::protobuf::uint32 MsgTexasPokerRoomInfo::center_card(int index) const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.center_card)
  return center_card_.Get(index);
}
inline void MsgTexasPokerRoomInfo::set_center_card(int index, ::google::protobuf::uint32 value) {
  center_card_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.center_card)
}
inline void MsgTexasPokerRoomInfo::add_center_card(::google::protobuf::uint32 value) {
  center_card_.Add(value);
  // @@protoc_insertion_point(field_add:MsgTexasPokerRoomInfo.center_card)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgTexasPokerRoomInfo::center_card() const {
  // @@protoc_insertion_point(field_list:MsgTexasPokerRoomInfo.center_card)
  return center_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgTexasPokerRoomInfo::mutable_center_card() {
  // @@protoc_insertion_point(field_mutable_list:MsgTexasPokerRoomInfo.center_card)
  return &center_card_;
}

// repeated uint32 self_card = 4;
inline int MsgTexasPokerRoomInfo::self_card_size() const {
  return self_card_.size();
}
inline void MsgTexasPokerRoomInfo::clear_self_card() {
  self_card_.Clear();
}
inline ::google::protobuf::uint32 MsgTexasPokerRoomInfo::self_card(int index) const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.self_card)
  return self_card_.Get(index);
}
inline void MsgTexasPokerRoomInfo::set_self_card(int index, ::google::protobuf::uint32 value) {
  self_card_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.self_card)
}
inline void MsgTexasPokerRoomInfo::add_self_card(::google::protobuf::uint32 value) {
  self_card_.Add(value);
  // @@protoc_insertion_point(field_add:MsgTexasPokerRoomInfo.self_card)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgTexasPokerRoomInfo::self_card() const {
  // @@protoc_insertion_point(field_list:MsgTexasPokerRoomInfo.self_card)
  return self_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgTexasPokerRoomInfo::mutable_self_card() {
  // @@protoc_insertion_point(field_mutable_list:MsgTexasPokerRoomInfo.self_card)
  return &self_card_;
}

// optional uint64 run_time = 5;
inline bool MsgTexasPokerRoomInfo::has_run_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_run_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgTexasPokerRoomInfo::clear_has_run_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgTexasPokerRoomInfo::clear_run_time() {
  run_time_ = GOOGLE_ULONGLONG(0);
  clear_has_run_time();
}
inline ::google::protobuf::uint64 MsgTexasPokerRoomInfo::run_time() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.run_time)
  return run_time_;
}
inline void MsgTexasPokerRoomInfo::set_run_time(::google::protobuf::uint64 value) {
  set_has_run_time();
  run_time_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.run_time)
}

// optional uint64 total_pour = 6;
inline bool MsgTexasPokerRoomInfo::has_total_pour() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_total_pour() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgTexasPokerRoomInfo::clear_has_total_pour() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgTexasPokerRoomInfo::clear_total_pour() {
  total_pour_ = GOOGLE_ULONGLONG(0);
  clear_has_total_pour();
}
inline ::google::protobuf::uint64 MsgTexasPokerRoomInfo::total_pour() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.total_pour)
  return total_pour_;
}
inline void MsgTexasPokerRoomInfo::set_total_pour(::google::protobuf::uint64 value) {
  set_has_total_pour();
  total_pour_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.total_pour)
}

// repeated uint64 seats = 7;
inline int MsgTexasPokerRoomInfo::seats_size() const {
  return seats_.size();
}
inline void MsgTexasPokerRoomInfo::clear_seats() {
  seats_.Clear();
}
inline ::google::protobuf::uint64 MsgTexasPokerRoomInfo::seats(int index) const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.seats)
  return seats_.Get(index);
}
inline void MsgTexasPokerRoomInfo::set_seats(int index, ::google::protobuf::uint64 value) {
  seats_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.seats)
}
inline void MsgTexasPokerRoomInfo::add_seats(::google::protobuf::uint64 value) {
  seats_.Add(value);
  // @@protoc_insertion_point(field_add:MsgTexasPokerRoomInfo.seats)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MsgTexasPokerRoomInfo::seats() const {
  // @@protoc_insertion_point(field_list:MsgTexasPokerRoomInfo.seats)
  return seats_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MsgTexasPokerRoomInfo::mutable_seats() {
  // @@protoc_insertion_point(field_mutable_list:MsgTexasPokerRoomInfo.seats)
  return &seats_;
}

// optional uint64 action = 8;
inline bool MsgTexasPokerRoomInfo::has_action() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_action() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgTexasPokerRoomInfo::clear_has_action() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgTexasPokerRoomInfo::clear_action() {
  action_ = GOOGLE_ULONGLONG(0);
  clear_has_action();
}
inline ::google::protobuf::uint64 MsgTexasPokerRoomInfo::action() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.action)
  return action_;
}
inline void MsgTexasPokerRoomInfo::set_action(::google::protobuf::uint64 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.action)
}

// optional uint64 largeCoins = 9;
inline bool MsgTexasPokerRoomInfo::has_largecoins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_largecoins() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgTexasPokerRoomInfo::clear_has_largecoins() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgTexasPokerRoomInfo::clear_largecoins() {
  largecoins_ = GOOGLE_ULONGLONG(0);
  clear_has_largecoins();
}
inline ::google::protobuf::uint64 MsgTexasPokerRoomInfo::largecoins() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.largeCoins)
  return largecoins_;
}
inline void MsgTexasPokerRoomInfo::set_largecoins(::google::protobuf::uint64 value) {
  set_has_largecoins();
  largecoins_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.largeCoins)
}

// optional uint32 maker = 10;
inline bool MsgTexasPokerRoomInfo::has_maker() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_maker() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgTexasPokerRoomInfo::clear_has_maker() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgTexasPokerRoomInfo::clear_maker() {
  maker_ = 0u;
  clear_has_maker();
}
inline ::google::protobuf::uint32 MsgTexasPokerRoomInfo::maker() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.maker)
  return maker_;
}
inline void MsgTexasPokerRoomInfo::set_maker(::google::protobuf::uint32 value) {
  set_has_maker();
  maker_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.maker)
}

// optional uint64 roomID = 11;
inline bool MsgTexasPokerRoomInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgTexasPokerRoomInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgTexasPokerRoomInfo::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 MsgTexasPokerRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.roomID)
  return roomid_;
}
inline void MsgTexasPokerRoomInfo::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:MsgTexasPokerRoomInfo.roomID)
}

// optional .MsgBaseRoomInfo room_info = 12;
inline bool MsgTexasPokerRoomInfo::has_room_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgTexasPokerRoomInfo::set_has_room_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgTexasPokerRoomInfo::clear_has_room_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgTexasPokerRoomInfo::clear_room_info() {
  if (room_info_ != NULL) room_info_->::MsgBaseRoomInfo::Clear();
  clear_has_room_info();
}
inline const ::MsgBaseRoomInfo& MsgTexasPokerRoomInfo::room_info() const {
  // @@protoc_insertion_point(field_get:MsgTexasPokerRoomInfo.room_info)
  return room_info_ != NULL ? *room_info_ : *default_instance_->room_info_;
}
inline ::MsgBaseRoomInfo* MsgTexasPokerRoomInfo::mutable_room_info() {
  set_has_room_info();
  if (room_info_ == NULL) room_info_ = new ::MsgBaseRoomInfo;
  // @@protoc_insertion_point(field_mutable:MsgTexasPokerRoomInfo.room_info)
  return room_info_;
}
inline ::MsgBaseRoomInfo* MsgTexasPokerRoomInfo::release_room_info() {
  clear_has_room_info();
  ::MsgBaseRoomInfo* temp = room_info_;
  room_info_ = NULL;
  return temp;
}
inline void MsgTexasPokerRoomInfo::set_allocated_room_info(::MsgBaseRoomInfo* room_info) {
  delete room_info_;
  room_info_ = room_info;
  if (room_info) {
    set_has_room_info();
  } else {
    clear_has_room_info();
  }
  // @@protoc_insertion_point(field_set_allocated:MsgTexasPokerRoomInfo.room_info)
}

// -------------------------------------------------------------------

// MsgRoleAction

// optional uint64 roleID = 1;
inline bool MsgRoleAction::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRoleAction::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRoleAction::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRoleAction::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgRoleAction::roleid() const {
  // @@protoc_insertion_point(field_get:MsgRoleAction.roleID)
  return roleid_;
}
inline void MsgRoleAction::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgRoleAction.roleID)
}

// optional .TTexasPokerState state = 2;
inline bool MsgRoleAction::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRoleAction::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRoleAction::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRoleAction::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::TTexasPokerState MsgRoleAction::state() const {
  // @@protoc_insertion_point(field_get:MsgRoleAction.state)
  return static_cast< ::TTexasPokerState >(state_);
}
inline void MsgRoleAction::set_state(::TTexasPokerState value) {
  assert(::TTexasPokerState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:MsgRoleAction.state)
}

// -------------------------------------------------------------------

// MsgCallPour

// optional uint64 roleid = 1;
inline bool MsgCallPour::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCallPour::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCallPour::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCallPour::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgCallPour::roleid() const {
  // @@protoc_insertion_point(field_get:MsgCallPour.roleid)
  return roleid_;
}
inline void MsgCallPour::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgCallPour.roleid)
}

// optional uint64 pour = 2;
inline bool MsgCallPour::has_pour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCallPour::set_has_pour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCallPour::clear_has_pour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCallPour::clear_pour() {
  pour_ = GOOGLE_ULONGLONG(0);
  clear_has_pour();
}
inline ::google::protobuf::uint64 MsgCallPour::pour() const {
  // @@protoc_insertion_point(field_get:MsgCallPour.pour)
  return pour_;
}
inline void MsgCallPour::set_pour(::google::protobuf::uint64 value) {
  set_has_pour();
  pour_ = value;
  // @@protoc_insertion_point(field_set:MsgCallPour.pour)
}

// optional uint64 coins = 3;
inline bool MsgCallPour::has_coins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCallPour::set_has_coins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCallPour::clear_has_coins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCallPour::clear_coins() {
  coins_ = GOOGLE_ULONGLONG(0);
  clear_has_coins();
}
inline ::google::protobuf::uint64 MsgCallPour::coins() const {
  // @@protoc_insertion_point(field_get:MsgCallPour.coins)
  return coins_;
}
inline void MsgCallPour::set_coins(::google::protobuf::uint64 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:MsgCallPour.coins)
}

// -------------------------------------------------------------------

// MsgRaisePour

// optional uint64 roleid = 1;
inline bool MsgRaisePour::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRaisePour::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRaisePour::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRaisePour::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgRaisePour::roleid() const {
  // @@protoc_insertion_point(field_get:MsgRaisePour.roleid)
  return roleid_;
}
inline void MsgRaisePour::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgRaisePour.roleid)
}

// optional uint64 pour = 2;
inline bool MsgRaisePour::has_pour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRaisePour::set_has_pour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRaisePour::clear_has_pour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRaisePour::clear_pour() {
  pour_ = GOOGLE_ULONGLONG(0);
  clear_has_pour();
}
inline ::google::protobuf::uint64 MsgRaisePour::pour() const {
  // @@protoc_insertion_point(field_get:MsgRaisePour.pour)
  return pour_;
}
inline void MsgRaisePour::set_pour(::google::protobuf::uint64 value) {
  set_has_pour();
  pour_ = value;
  // @@protoc_insertion_point(field_set:MsgRaisePour.pour)
}

// optional uint64 coins = 3;
inline bool MsgRaisePour::has_coins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRaisePour::set_has_coins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRaisePour::clear_has_coins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRaisePour::clear_coins() {
  coins_ = GOOGLE_ULONGLONG(0);
  clear_has_coins();
}
inline ::google::protobuf::uint64 MsgRaisePour::coins() const {
  // @@protoc_insertion_point(field_get:MsgRaisePour.coins)
  return coins_;
}
inline void MsgRaisePour::set_coins(::google::protobuf::uint64 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:MsgRaisePour.coins)
}

// -------------------------------------------------------------------

// MsgRewardData

// optional uint64 roleid = 1;
inline bool MsgRewardData::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRewardData::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRewardData::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRewardData::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgRewardData::roleid() const {
  // @@protoc_insertion_point(field_get:MsgRewardData.roleid)
  return roleid_;
}
inline void MsgRewardData::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgRewardData.roleid)
}

// optional uint64 reward = 2;
inline bool MsgRewardData::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRewardData::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRewardData::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRewardData::clear_reward() {
  reward_ = GOOGLE_ULONGLONG(0);
  clear_has_reward();
}
inline ::google::protobuf::uint64 MsgRewardData::reward() const {
  // @@protoc_insertion_point(field_get:MsgRewardData.reward)
  return reward_;
}
inline void MsgRewardData::set_reward(::google::protobuf::uint64 value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:MsgRewardData.reward)
}

// optional uint64 coins = 3;
inline bool MsgRewardData::has_coins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRewardData::set_has_coins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRewardData::clear_has_coins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRewardData::clear_coins() {
  coins_ = GOOGLE_ULONGLONG(0);
  clear_has_coins();
}
inline ::google::protobuf::uint64 MsgRewardData::coins() const {
  // @@protoc_insertion_point(field_get:MsgRewardData.coins)
  return coins_;
}
inline void MsgRewardData::set_coins(::google::protobuf::uint64 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:MsgRewardData.coins)
}

// optional uint64 money = 4;
inline bool MsgRewardData::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgRewardData::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgRewardData::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgRewardData::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 MsgRewardData::money() const {
  // @@protoc_insertion_point(field_get:MsgRewardData.money)
  return money_;
}
inline void MsgRewardData::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:MsgRewardData.money)
}

// optional uint32 rankin = 5;
inline bool MsgRewardData::has_rankin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgRewardData::set_has_rankin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgRewardData::clear_has_rankin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgRewardData::clear_rankin() {
  rankin_ = 0u;
  clear_has_rankin();
}
inline ::google::protobuf::uint32 MsgRewardData::rankin() const {
  // @@protoc_insertion_point(field_get:MsgRewardData.rankin)
  return rankin_;
}
inline void MsgRewardData::set_rankin(::google::protobuf::uint32 value) {
  set_has_rankin();
  rankin_ = value;
  // @@protoc_insertion_point(field_set:MsgRewardData.rankin)
}

// repeated uint32 hand_card = 6;
inline int MsgRewardData::hand_card_size() const {
  return hand_card_.size();
}
inline void MsgRewardData::clear_hand_card() {
  hand_card_.Clear();
}
inline ::google::protobuf::uint32 MsgRewardData::hand_card(int index) const {
  // @@protoc_insertion_point(field_get:MsgRewardData.hand_card)
  return hand_card_.Get(index);
}
inline void MsgRewardData::set_hand_card(int index, ::google::protobuf::uint32 value) {
  hand_card_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgRewardData.hand_card)
}
inline void MsgRewardData::add_hand_card(::google::protobuf::uint32 value) {
  hand_card_.Add(value);
  // @@protoc_insertion_point(field_add:MsgRewardData.hand_card)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgRewardData::hand_card() const {
  // @@protoc_insertion_point(field_list:MsgRewardData.hand_card)
  return hand_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgRewardData::mutable_hand_card() {
  // @@protoc_insertion_point(field_mutable_list:MsgRewardData.hand_card)
  return &hand_card_;
}

// -------------------------------------------------------------------

// MsgRewardList

// repeated .MsgRewardData reward = 1;
inline int MsgRewardList::reward_size() const {
  return reward_.size();
}
inline void MsgRewardList::clear_reward() {
  reward_.Clear();
}
inline const ::MsgRewardData& MsgRewardList::reward(int index) const {
  // @@protoc_insertion_point(field_get:MsgRewardList.reward)
  return reward_.Get(index);
}
inline ::MsgRewardData* MsgRewardList::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:MsgRewardList.reward)
  return reward_.Mutable(index);
}
inline ::MsgRewardData* MsgRewardList::add_reward() {
  // @@protoc_insertion_point(field_add:MsgRewardList.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgRewardData >&
MsgRewardList::reward() const {
  // @@protoc_insertion_point(field_list:MsgRewardList.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgRewardData >*
MsgRewardList::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:MsgRewardList.reward)
  return &reward_;
}

// repeated .MsgRewardData goback = 2;
inline int MsgRewardList::goback_size() const {
  return goback_.size();
}
inline void MsgRewardList::clear_goback() {
  goback_.Clear();
}
inline const ::MsgRewardData& MsgRewardList::goback(int index) const {
  // @@protoc_insertion_point(field_get:MsgRewardList.goback)
  return goback_.Get(index);
}
inline ::MsgRewardData* MsgRewardList::mutable_goback(int index) {
  // @@protoc_insertion_point(field_mutable:MsgRewardList.goback)
  return goback_.Mutable(index);
}
inline ::MsgRewardData* MsgRewardList::add_goback() {
  // @@protoc_insertion_point(field_add:MsgRewardList.goback)
  return goback_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgRewardData >&
MsgRewardList::goback() const {
  // @@protoc_insertion_point(field_list:MsgRewardList.goback)
  return goback_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgRewardData >*
MsgRewardList::mutable_goback() {
  // @@protoc_insertion_point(field_mutable_list:MsgRewardList.goback)
  return &goback_;
}

// optional bool isShow = 3;
inline bool MsgRewardList::has_isshow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRewardList::set_has_isshow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRewardList::clear_has_isshow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRewardList::clear_isshow() {
  isshow_ = false;
  clear_has_isshow();
}
inline bool MsgRewardList::isshow() const {
  // @@protoc_insertion_point(field_get:MsgRewardList.isShow)
  return isshow_;
}
inline void MsgRewardList::set_isshow(bool value) {
  set_has_isshow();
  isshow_ = value;
  // @@protoc_insertion_point(field_set:MsgRewardList.isShow)
}

// -------------------------------------------------------------------

// MsgResetCoins

// optional uint64 roleid = 1;
inline bool MsgResetCoins::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgResetCoins::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgResetCoins::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgResetCoins::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgResetCoins::roleid() const {
  // @@protoc_insertion_point(field_get:MsgResetCoins.roleid)
  return roleid_;
}
inline void MsgResetCoins::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:MsgResetCoins.roleid)
}

// optional uint64 coins = 2;
inline bool MsgResetCoins::has_coins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgResetCoins::set_has_coins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgResetCoins::clear_has_coins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgResetCoins::clear_coins() {
  coins_ = GOOGLE_ULONGLONG(0);
  clear_has_coins();
}
inline ::google::protobuf::uint64 MsgResetCoins::coins() const {
  // @@protoc_insertion_point(field_get:MsgResetCoins.coins)
  return coins_;
}
inline void MsgResetCoins::set_coins(::google::protobuf::uint64 value) {
  set_has_coins();
  coins_ = value;
  // @@protoc_insertion_point(field_set:MsgResetCoins.coins)
}

// -------------------------------------------------------------------

// MsgApplyGame

// optional string room_type = 1;
inline bool MsgApplyGame::has_room_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgApplyGame::set_has_room_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgApplyGame::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgApplyGame::clear_room_type() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_->clear();
  }
  clear_has_room_type();
}
inline const ::std::string& MsgApplyGame::room_type() const {
  // @@protoc_insertion_point(field_get:MsgApplyGame.room_type)
  return *room_type_;
}
inline void MsgApplyGame::set_room_type(const ::std::string& value) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(value);
  // @@protoc_insertion_point(field_set:MsgApplyGame.room_type)
}
inline void MsgApplyGame::set_room_type(const char* value) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgApplyGame.room_type)
}
inline void MsgApplyGame::set_room_type(const char* value, size_t size) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgApplyGame.room_type)
}
inline ::std::string* MsgApplyGame::mutable_room_type() {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgApplyGame.room_type)
  return room_type_;
}
inline ::std::string* MsgApplyGame::release_room_type() {
  clear_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_type_;
    room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgApplyGame::set_allocated_room_type(::std::string* room_type) {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (room_type) {
    set_has_room_type();
    room_type_ = room_type;
  } else {
    clear_has_room_type();
    room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgApplyGame.room_type)
}

// optional uint32 timeid = 2;
inline bool MsgApplyGame::has_timeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgApplyGame::set_has_timeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgApplyGame::clear_has_timeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgApplyGame::clear_timeid() {
  timeid_ = 0u;
  clear_has_timeid();
}
inline ::google::protobuf::uint32 MsgApplyGame::timeid() const {
  // @@protoc_insertion_point(field_get:MsgApplyGame.timeid)
  return timeid_;
}
inline void MsgApplyGame::set_timeid(::google::protobuf::uint32 value) {
  set_has_timeid();
  timeid_ = value;
  // @@protoc_insertion_point(field_set:MsgApplyGame.timeid)
}

// optional uint64 money = 3;
inline bool MsgApplyGame::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgApplyGame::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgApplyGame::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgApplyGame::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 MsgApplyGame::money() const {
  // @@protoc_insertion_point(field_get:MsgApplyGame.money)
  return money_;
}
inline void MsgApplyGame::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:MsgApplyGame.money)
}

// -------------------------------------------------------------------

// MsgCancelApply

// optional string room_type = 1;
inline bool MsgCancelApply::has_room_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCancelApply::set_has_room_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCancelApply::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCancelApply::clear_room_type() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_->clear();
  }
  clear_has_room_type();
}
inline const ::std::string& MsgCancelApply::room_type() const {
  // @@protoc_insertion_point(field_get:MsgCancelApply.room_type)
  return *room_type_;
}
inline void MsgCancelApply::set_room_type(const ::std::string& value) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(value);
  // @@protoc_insertion_point(field_set:MsgCancelApply.room_type)
}
inline void MsgCancelApply::set_room_type(const char* value) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgCancelApply.room_type)
}
inline void MsgCancelApply::set_room_type(const char* value, size_t size) {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  room_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgCancelApply.room_type)
}
inline ::std::string* MsgCancelApply::mutable_room_type() {
  set_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgCancelApply.room_type)
  return room_type_;
}
inline ::std::string* MsgCancelApply::release_room_type() {
  clear_has_room_type();
  if (room_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_type_;
    room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgCancelApply::set_allocated_room_type(::std::string* room_type) {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (room_type) {
    set_has_room_type();
    room_type_ = room_type;
  } else {
    clear_has_room_type();
    room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgCancelApply.room_type)
}

// optional uint32 timeid = 2;
inline bool MsgCancelApply::has_timeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCancelApply::set_has_timeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCancelApply::clear_has_timeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCancelApply::clear_timeid() {
  timeid_ = 0u;
  clear_has_timeid();
}
inline ::google::protobuf::uint32 MsgCancelApply::timeid() const {
  // @@protoc_insertion_point(field_get:MsgCancelApply.timeid)
  return timeid_;
}
inline void MsgCancelApply::set_timeid(::google::protobuf::uint32 value) {
  set_has_timeid();
  timeid_ = value;
  // @@protoc_insertion_point(field_set:MsgCancelApply.timeid)
}

// optional uint64 money = 3;
inline bool MsgCancelApply::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCancelApply::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCancelApply::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCancelApply::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 MsgCancelApply::money() const {
  // @@protoc_insertion_point(field_get:MsgCancelApply.money)
  return money_;
}
inline void MsgCancelApply::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:MsgCancelApply.money)
}

// -------------------------------------------------------------------

// MsgRequestQuit

// optional uint32 ranking = 1;
inline bool MsgRequestQuit::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRequestQuit::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRequestQuit::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRequestQuit::clear_ranking() {
  ranking_ = 0u;
  clear_has_ranking();
}
inline ::google::protobuf::uint32 MsgRequestQuit::ranking() const {
  // @@protoc_insertion_point(field_get:MsgRequestQuit.ranking)
  return ranking_;
}
inline void MsgRequestQuit::set_ranking(::google::protobuf::uint32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:MsgRequestQuit.ranking)
}

// optional bool reward = 2;
inline bool MsgRequestQuit::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRequestQuit::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRequestQuit::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRequestQuit::clear_reward() {
  reward_ = false;
  clear_has_reward();
}
inline bool MsgRequestQuit::reward() const {
  // @@protoc_insertion_point(field_get:MsgRequestQuit.reward)
  return reward_;
}
inline void MsgRequestQuit::set_reward(bool value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:MsgRequestQuit.reward)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TPokerModle> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TPokerModle>() {
  return ::TPokerModle_descriptor();
}
template <> struct is_proto_enum< ::TPokerRoleState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TPokerRoleState>() {
  return ::TPokerRoleState_descriptor();
}
template <> struct is_proto_enum< ::TTexasPokerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TTexasPokerState>() {
  return ::TTexasPokerState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5ftexaspoker_2eproto__INCLUDED
