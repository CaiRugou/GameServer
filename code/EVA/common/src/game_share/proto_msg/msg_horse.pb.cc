// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_horse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_horse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgHorseRoundBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorseRoundBetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHorsePlayerBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorsePlayerBetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSerialBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSerialBetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHorsePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorsePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHorsePlayerRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorsePlayerRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHorseRaceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorseRaceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHorseGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorseGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAllBetAndOddInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAllBetAndOddInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHorseShowPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorseShowPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHorseRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHorseRoomInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* THorseState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* THorseRoundBetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* THorseBetResultType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fhorse_2eproto() {
  protobuf_AddDesc_msg_5fhorse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_horse.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHorseRoundBetInfo_descriptor_ = file->message_type(0);
  static const int MsgHorseRoundBetInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoundBetInfo, horse_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoundBetInfo, bet_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoundBetInfo, bet_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoundBetInfo, bet_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoundBetInfo, bet_odd_),
  };
  MsgHorseRoundBetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorseRoundBetInfo_descriptor_,
      MsgHorseRoundBetInfo::default_instance_,
      MsgHorseRoundBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoundBetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoundBetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorseRoundBetInfo));
  MsgHorsePlayerBetInfo_descriptor_ = file->message_type(1);
  static const int MsgHorsePlayerBetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerBetInfo, ply_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerBetInfo, round_bet_list_),
  };
  MsgHorsePlayerBetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorsePlayerBetInfo_descriptor_,
      MsgHorsePlayerBetInfo::default_instance_,
      MsgHorsePlayerBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerBetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerBetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorsePlayerBetInfo));
  MsgSerialBetInfo_descriptor_ = file->message_type(2);
  static const int MsgSerialBetInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSerialBetInfo, single_result_list_),
  };
  MsgSerialBetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSerialBetInfo_descriptor_,
      MsgSerialBetInfo::default_instance_,
      MsgSerialBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSerialBetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSerialBetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSerialBetInfo));
  MsgHorsePlayerInfo_descriptor_ = file->message_type(3);
  static const int MsgHorsePlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerInfo, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerInfo, bet_result_list_),
  };
  MsgHorsePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorsePlayerInfo_descriptor_,
      MsgHorsePlayerInfo::default_instance_,
      MsgHorsePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorsePlayerInfo));
  MsgHorsePlayerRankInfo_descriptor_ = file->message_type(4);
  static const int MsgHorsePlayerRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerRankInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerRankInfo, bet_horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerRankInfo, win_round_),
  };
  MsgHorsePlayerRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorsePlayerRankInfo_descriptor_,
      MsgHorsePlayerRankInfo::default_instance_,
      MsgHorsePlayerRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorsePlayerRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorsePlayerRankInfo));
  MsgHorseRaceResult_descriptor_ = file->message_type(5);
  static const int MsgHorseRaceResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRaceResult, result_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRaceResult, random_int_),
  };
  MsgHorseRaceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorseRaceResult_descriptor_,
      MsgHorseRaceResult::default_instance_,
      MsgHorseRaceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRaceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRaceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorseRaceResult));
  MsgHorseGroup_descriptor_ = file->message_type(6);
  static const int MsgHorseGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseGroup, horse_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseGroup, put_bets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseGroup, last_rank_),
  };
  MsgHorseGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorseGroup_descriptor_,
      MsgHorseGroup::default_instance_,
      MsgHorseGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorseGroup));
  MsgAllBetAndOddInfo_descriptor_ = file->message_type(7);
  static const int MsgAllBetAndOddInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAllBetAndOddInfo, all_info_list_),
  };
  MsgAllBetAndOddInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAllBetAndOddInfo_descriptor_,
      MsgAllBetAndOddInfo::default_instance_,
      MsgAllBetAndOddInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAllBetAndOddInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAllBetAndOddInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAllBetAndOddInfo));
  MsgHorseShowPlayerInfo_descriptor_ = file->message_type(8);
  static const int MsgHorseShowPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseShowPlayerInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseShowPlayerInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseShowPlayerInfo, portrait_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseShowPlayerInfo, vip_level_),
  };
  MsgHorseShowPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorseShowPlayerInfo_descriptor_,
      MsgHorseShowPlayerInfo::default_instance_,
      MsgHorseShowPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseShowPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseShowPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorseShowPlayerInfo));
  MsgHorseRoomInfo_descriptor_ = file->message_type(9);
  static const int MsgHorseRoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, sur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, six_horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, show_player_list_),
  };
  MsgHorseRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHorseRoomInfo_descriptor_,
      MsgHorseRoomInfo::default_instance_,
      MsgHorseRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHorseRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHorseRoomInfo));
  THorseState_descriptor_ = file->enum_type(0);
  THorseRoundBetType_descriptor_ = file->enum_type(1);
  THorseBetResultType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fhorse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorseRoundBetInfo_descriptor_, &MsgHorseRoundBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorsePlayerBetInfo_descriptor_, &MsgHorsePlayerBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSerialBetInfo_descriptor_, &MsgSerialBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorsePlayerInfo_descriptor_, &MsgHorsePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorsePlayerRankInfo_descriptor_, &MsgHorsePlayerRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorseRaceResult_descriptor_, &MsgHorseRaceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorseGroup_descriptor_, &MsgHorseGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAllBetAndOddInfo_descriptor_, &MsgAllBetAndOddInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorseShowPlayerInfo_descriptor_, &MsgHorseShowPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHorseRoomInfo_descriptor_, &MsgHorseRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fhorse_2eproto() {
  delete MsgHorseRoundBetInfo::default_instance_;
  delete MsgHorseRoundBetInfo_reflection_;
  delete MsgHorsePlayerBetInfo::default_instance_;
  delete MsgHorsePlayerBetInfo_reflection_;
  delete MsgSerialBetInfo::default_instance_;
  delete MsgSerialBetInfo_reflection_;
  delete MsgHorsePlayerInfo::default_instance_;
  delete MsgHorsePlayerInfo_reflection_;
  delete MsgHorsePlayerRankInfo::default_instance_;
  delete MsgHorsePlayerRankInfo_reflection_;
  delete MsgHorseRaceResult::default_instance_;
  delete MsgHorseRaceResult_reflection_;
  delete MsgHorseGroup::default_instance_;
  delete MsgHorseGroup_reflection_;
  delete MsgAllBetAndOddInfo::default_instance_;
  delete MsgAllBetAndOddInfo_reflection_;
  delete MsgHorseShowPlayerInfo::default_instance_;
  delete MsgHorseShowPlayerInfo_reflection_;
  delete MsgHorseRoomInfo::default_instance_;
  delete MsgHorseRoomInfo_reflection_;
}

void protobuf_AddDesc_msg_5fhorse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017msg_horse.proto\032\020public_pro.proto\"\206\001\n\024"
    "MsgHorseRoundBetInfo\022\020\n\010horse_id\030\001 \001(\r\022\021"
    "\n\tbet_round\030\002 \001(\r\022%\n\010bet_type\030\003 \001(\0162\023.TH"
    "orseRoundBetType\022\021\n\tbet_money\030\004 \001(\004\022\017\n\007b"
    "et_odd\030\005 \001(\004\"Y\n\025MsgHorsePlayerBetInfo\022\021\n"
    "\tply_money\030\001 \001(\004\022-\n\016round_bet_list\030\002 \003(\013"
    "2\025.MsgHorseRoundBetInfo\"D\n\020MsgSerialBetI"
    "nfo\0220\n\022single_result_list\030\001 \003(\0162\024.THorse"
    "BetResultType\"e\n\022MsgHorsePlayerInfo\022#\n\013p"
    "layer_base\030\001 \001(\0132\016.MsgPlayerInfo\022*\n\017bet_"
    "result_list\030\002 \001(\0132\021.MsgSerialBetInfo\"S\n\026"
    "MsgHorsePlayerRankInfo\022\023\n\013player_name\030\001 "
    "\001(\t\022\021\n\tbet_horse\030\002 \001(\r\022\021\n\twin_round\030\003 \001("
    "\r\"=\n\022MsgHorseRaceResult\022\023\n\013result_list\030\001"
    " \003(\r\022\022\n\nrandom_int\030\002 \001(\r\"T\n\rMsgHorseGrou"
    "p\022\020\n\010horse_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010put"
    "_bets\030\003 \001(\004\022\021\n\tlast_rank\030\004 \001(\r\"C\n\023MsgAll"
    "BetAndOddInfo\022,\n\rall_info_list\030\001 \003(\0132\025.M"
    "sgHorseRoundBetInfo\"e\n\026MsgHorseShowPlaye"
    "rInfo\022\021\n\tplayer_id\030\001 \001(\004\022\020\n\010username\030\002 \001"
    "(\t\022\023\n\013portrait_id\030\003 \001(\r\022\021\n\tvip_level\030\004 \001"
    "(\r\"\243\002\n\020MsgHorseRoomInfo\022 \n\nroom_state\030\001 "
    "\001(\0162\014.THorseState\022\020\n\010sur_time\030\002 \001(\003\022!\n\004s"
    "elf\030\003 \001(\0132\023.MsgHorsePlayerInfo\022,\n\013player"
    "_list\030\004 \003(\0132\027.MsgHorsePlayerRankInfo\022!\n\t"
    "six_horse\030\005 \003(\0132\016.MsgHorseGroup\022\017\n\007room_"
    "id\030\006 \001(\004\022#\n\troom_info\030\007 \001(\0132\020.MsgBaseRoo"
    "mInfo\0221\n\020show_player_list\030\010 \003(\0132\027.MsgHor"
    "seShowPlayerInfo*<\n\013THorseState\022\027\n\023Horse"
    "StateStartPour\020\001\022\024\n\020HorseStateFinish\020\002*;"
    "\n\022THorseRoundBetType\022\n\n\006WinBet\020\001\022\014\n\010Plac"
    "eBet\020\002\022\013\n\007ShowBet\020\003*D\n\023THorseBetResultTy"
    "pe\022\r\n\tResultWin\020\001\022\016\n\nResultLose\020\002\022\016\n\nRes"
    "ultWait\020\003", 1329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_horse.proto", &protobuf_RegisterTypes);
  MsgHorseRoundBetInfo::default_instance_ = new MsgHorseRoundBetInfo();
  MsgHorsePlayerBetInfo::default_instance_ = new MsgHorsePlayerBetInfo();
  MsgSerialBetInfo::default_instance_ = new MsgSerialBetInfo();
  MsgHorsePlayerInfo::default_instance_ = new MsgHorsePlayerInfo();
  MsgHorsePlayerRankInfo::default_instance_ = new MsgHorsePlayerRankInfo();
  MsgHorseRaceResult::default_instance_ = new MsgHorseRaceResult();
  MsgHorseGroup::default_instance_ = new MsgHorseGroup();
  MsgAllBetAndOddInfo::default_instance_ = new MsgAllBetAndOddInfo();
  MsgHorseShowPlayerInfo::default_instance_ = new MsgHorseShowPlayerInfo();
  MsgHorseRoomInfo::default_instance_ = new MsgHorseRoomInfo();
  MsgHorseRoundBetInfo::default_instance_->InitAsDefaultInstance();
  MsgHorsePlayerBetInfo::default_instance_->InitAsDefaultInstance();
  MsgSerialBetInfo::default_instance_->InitAsDefaultInstance();
  MsgHorsePlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgHorsePlayerRankInfo::default_instance_->InitAsDefaultInstance();
  MsgHorseRaceResult::default_instance_->InitAsDefaultInstance();
  MsgHorseGroup::default_instance_->InitAsDefaultInstance();
  MsgAllBetAndOddInfo::default_instance_->InitAsDefaultInstance();
  MsgHorseShowPlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgHorseRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fhorse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fhorse_2eproto {
  StaticDescriptorInitializer_msg_5fhorse_2eproto() {
    protobuf_AddDesc_msg_5fhorse_2eproto();
  }
} static_descriptor_initializer_msg_5fhorse_2eproto_;
const ::google::protobuf::EnumDescriptor* THorseState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THorseState_descriptor_;
}
bool THorseState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* THorseRoundBetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THorseRoundBetType_descriptor_;
}
bool THorseRoundBetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* THorseBetResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THorseBetResultType_descriptor_;
}
bool THorseBetResultType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorseRoundBetInfo::kHorseIdFieldNumber;
const int MsgHorseRoundBetInfo::kBetRoundFieldNumber;
const int MsgHorseRoundBetInfo::kBetTypeFieldNumber;
const int MsgHorseRoundBetInfo::kBetMoneyFieldNumber;
const int MsgHorseRoundBetInfo::kBetOddFieldNumber;
#endif  // !_MSC_VER

MsgHorseRoundBetInfo::MsgHorseRoundBetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorseRoundBetInfo)
}

void MsgHorseRoundBetInfo::InitAsDefaultInstance() {
}

MsgHorseRoundBetInfo::MsgHorseRoundBetInfo(const MsgHorseRoundBetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorseRoundBetInfo)
}

void MsgHorseRoundBetInfo::SharedCtor() {
  _cached_size_ = 0;
  horse_id_ = 0u;
  bet_round_ = 0u;
  bet_type_ = 1;
  bet_money_ = GOOGLE_ULONGLONG(0);
  bet_odd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorseRoundBetInfo::~MsgHorseRoundBetInfo() {
  // @@protoc_insertion_point(destructor:MsgHorseRoundBetInfo)
  SharedDtor();
}

void MsgHorseRoundBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHorseRoundBetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorseRoundBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorseRoundBetInfo_descriptor_;
}

const MsgHorseRoundBetInfo& MsgHorseRoundBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorseRoundBetInfo* MsgHorseRoundBetInfo::default_instance_ = NULL;

MsgHorseRoundBetInfo* MsgHorseRoundBetInfo::New() const {
  return new MsgHorseRoundBetInfo;
}

void MsgHorseRoundBetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgHorseRoundBetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(horse_id_, bet_odd_);
    bet_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorseRoundBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorseRoundBetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 horse_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_id_)));
          set_has_horse_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet_round;
        break;
      }

      // optional uint32 bet_round = 2;
      case 2: {
        if (tag == 16) {
         parse_bet_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bet_round_)));
          set_has_bet_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bet_type;
        break;
      }

      // optional .THorseRoundBetType bet_type = 3;
      case 3: {
        if (tag == 24) {
         parse_bet_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::THorseRoundBetType_IsValid(value)) {
            set_bet_type(static_cast< ::THorseRoundBetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bet_money;
        break;
      }

      // optional uint64 bet_money = 4;
      case 4: {
        if (tag == 32) {
         parse_bet_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bet_money_)));
          set_has_bet_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bet_odd;
        break;
      }

      // optional uint64 bet_odd = 5;
      case 5: {
        if (tag == 40) {
         parse_bet_odd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bet_odd_)));
          set_has_bet_odd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorseRoundBetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorseRoundBetInfo)
  return false;
#undef DO_
}

void MsgHorseRoundBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorseRoundBetInfo)
  // optional uint32 horse_id = 1;
  if (has_horse_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->horse_id(), output);
  }

  // optional uint32 bet_round = 2;
  if (has_bet_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bet_round(), output);
  }

  // optional .THorseRoundBetType bet_type = 3;
  if (has_bet_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bet_type(), output);
  }

  // optional uint64 bet_money = 4;
  if (has_bet_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bet_money(), output);
  }

  // optional uint64 bet_odd = 5;
  if (has_bet_odd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bet_odd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorseRoundBetInfo)
}

::google::protobuf::uint8* MsgHorseRoundBetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorseRoundBetInfo)
  // optional uint32 horse_id = 1;
  if (has_horse_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->horse_id(), target);
  }

  // optional uint32 bet_round = 2;
  if (has_bet_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bet_round(), target);
  }

  // optional .THorseRoundBetType bet_type = 3;
  if (has_bet_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bet_type(), target);
  }

  // optional uint64 bet_money = 4;
  if (has_bet_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bet_money(), target);
  }

  // optional uint64 bet_odd = 5;
  if (has_bet_odd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bet_odd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorseRoundBetInfo)
  return target;
}

int MsgHorseRoundBetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 horse_id = 1;
    if (has_horse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse_id());
    }

    // optional uint32 bet_round = 2;
    if (has_bet_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bet_round());
    }

    // optional .THorseRoundBetType bet_type = 3;
    if (has_bet_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bet_type());
    }

    // optional uint64 bet_money = 4;
    if (has_bet_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bet_money());
    }

    // optional uint64 bet_odd = 5;
    if (has_bet_odd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bet_odd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorseRoundBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorseRoundBetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorseRoundBetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorseRoundBetInfo::MergeFrom(const MsgHorseRoundBetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horse_id()) {
      set_horse_id(from.horse_id());
    }
    if (from.has_bet_round()) {
      set_bet_round(from.bet_round());
    }
    if (from.has_bet_type()) {
      set_bet_type(from.bet_type());
    }
    if (from.has_bet_money()) {
      set_bet_money(from.bet_money());
    }
    if (from.has_bet_odd()) {
      set_bet_odd(from.bet_odd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorseRoundBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorseRoundBetInfo::CopyFrom(const MsgHorseRoundBetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorseRoundBetInfo::IsInitialized() const {

  return true;
}

void MsgHorseRoundBetInfo::Swap(MsgHorseRoundBetInfo* other) {
  if (other != this) {
    std::swap(horse_id_, other->horse_id_);
    std::swap(bet_round_, other->bet_round_);
    std::swap(bet_type_, other->bet_type_);
    std::swap(bet_money_, other->bet_money_);
    std::swap(bet_odd_, other->bet_odd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorseRoundBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorseRoundBetInfo_descriptor_;
  metadata.reflection = MsgHorseRoundBetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorsePlayerBetInfo::kPlyMoneyFieldNumber;
const int MsgHorsePlayerBetInfo::kRoundBetListFieldNumber;
#endif  // !_MSC_VER

MsgHorsePlayerBetInfo::MsgHorsePlayerBetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorsePlayerBetInfo)
}

void MsgHorsePlayerBetInfo::InitAsDefaultInstance() {
}

MsgHorsePlayerBetInfo::MsgHorsePlayerBetInfo(const MsgHorsePlayerBetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorsePlayerBetInfo)
}

void MsgHorsePlayerBetInfo::SharedCtor() {
  _cached_size_ = 0;
  ply_money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorsePlayerBetInfo::~MsgHorsePlayerBetInfo() {
  // @@protoc_insertion_point(destructor:MsgHorsePlayerBetInfo)
  SharedDtor();
}

void MsgHorsePlayerBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHorsePlayerBetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorsePlayerBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorsePlayerBetInfo_descriptor_;
}

const MsgHorsePlayerBetInfo& MsgHorsePlayerBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorsePlayerBetInfo* MsgHorsePlayerBetInfo::default_instance_ = NULL;

MsgHorsePlayerBetInfo* MsgHorsePlayerBetInfo::New() const {
  return new MsgHorsePlayerBetInfo;
}

void MsgHorsePlayerBetInfo::Clear() {
  ply_money_ = GOOGLE_ULONGLONG(0);
  round_bet_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorsePlayerBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorsePlayerBetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ply_money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ply_money_)));
          set_has_ply_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_round_bet_list;
        break;
      }

      // repeated .MsgHorseRoundBetInfo round_bet_list = 2;
      case 2: {
        if (tag == 18) {
         parse_round_bet_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_round_bet_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_round_bet_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorsePlayerBetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorsePlayerBetInfo)
  return false;
#undef DO_
}

void MsgHorsePlayerBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorsePlayerBetInfo)
  // optional uint64 ply_money = 1;
  if (has_ply_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ply_money(), output);
  }

  // repeated .MsgHorseRoundBetInfo round_bet_list = 2;
  for (int i = 0; i < this->round_bet_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->round_bet_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorsePlayerBetInfo)
}

::google::protobuf::uint8* MsgHorsePlayerBetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorsePlayerBetInfo)
  // optional uint64 ply_money = 1;
  if (has_ply_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ply_money(), target);
  }

  // repeated .MsgHorseRoundBetInfo round_bet_list = 2;
  for (int i = 0; i < this->round_bet_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->round_bet_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorsePlayerBetInfo)
  return target;
}

int MsgHorsePlayerBetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ply_money = 1;
    if (has_ply_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ply_money());
    }

  }
  // repeated .MsgHorseRoundBetInfo round_bet_list = 2;
  total_size += 1 * this->round_bet_list_size();
  for (int i = 0; i < this->round_bet_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->round_bet_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorsePlayerBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorsePlayerBetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorsePlayerBetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorsePlayerBetInfo::MergeFrom(const MsgHorsePlayerBetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  round_bet_list_.MergeFrom(from.round_bet_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ply_money()) {
      set_ply_money(from.ply_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorsePlayerBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorsePlayerBetInfo::CopyFrom(const MsgHorsePlayerBetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorsePlayerBetInfo::IsInitialized() const {

  return true;
}

void MsgHorsePlayerBetInfo::Swap(MsgHorsePlayerBetInfo* other) {
  if (other != this) {
    std::swap(ply_money_, other->ply_money_);
    round_bet_list_.Swap(&other->round_bet_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorsePlayerBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorsePlayerBetInfo_descriptor_;
  metadata.reflection = MsgHorsePlayerBetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSerialBetInfo::kSingleResultListFieldNumber;
#endif  // !_MSC_VER

MsgSerialBetInfo::MsgSerialBetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSerialBetInfo)
}

void MsgSerialBetInfo::InitAsDefaultInstance() {
}

MsgSerialBetInfo::MsgSerialBetInfo(const MsgSerialBetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSerialBetInfo)
}

void MsgSerialBetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSerialBetInfo::~MsgSerialBetInfo() {
  // @@protoc_insertion_point(destructor:MsgSerialBetInfo)
  SharedDtor();
}

void MsgSerialBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSerialBetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSerialBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSerialBetInfo_descriptor_;
}

const MsgSerialBetInfo& MsgSerialBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgSerialBetInfo* MsgSerialBetInfo::default_instance_ = NULL;

MsgSerialBetInfo* MsgSerialBetInfo::New() const {
  return new MsgSerialBetInfo;
}

void MsgSerialBetInfo::Clear() {
  single_result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSerialBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSerialBetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .THorseBetResultType single_result_list = 1;
      case 1: {
        if (tag == 8) {
         parse_single_result_list:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::THorseBetResultType_IsValid(value)) {
            add_single_result_list(static_cast< ::THorseBetResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::THorseBetResultType_IsValid,
                 this->mutable_single_result_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_single_result_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSerialBetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSerialBetInfo)
  return false;
#undef DO_
}

void MsgSerialBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSerialBetInfo)
  // repeated .THorseBetResultType single_result_list = 1;
  for (int i = 0; i < this->single_result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->single_result_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSerialBetInfo)
}

::google::protobuf::uint8* MsgSerialBetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSerialBetInfo)
  // repeated .THorseBetResultType single_result_list = 1;
  for (int i = 0; i < this->single_result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->single_result_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSerialBetInfo)
  return target;
}

int MsgSerialBetInfo::ByteSize() const {
  int total_size = 0;

  // repeated .THorseBetResultType single_result_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->single_result_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->single_result_list(i));
    }
    total_size += 1 * this->single_result_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSerialBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSerialBetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSerialBetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSerialBetInfo::MergeFrom(const MsgSerialBetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  single_result_list_.MergeFrom(from.single_result_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSerialBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSerialBetInfo::CopyFrom(const MsgSerialBetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSerialBetInfo::IsInitialized() const {

  return true;
}

void MsgSerialBetInfo::Swap(MsgSerialBetInfo* other) {
  if (other != this) {
    single_result_list_.Swap(&other->single_result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSerialBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSerialBetInfo_descriptor_;
  metadata.reflection = MsgSerialBetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorsePlayerInfo::kPlayerBaseFieldNumber;
const int MsgHorsePlayerInfo::kBetResultListFieldNumber;
#endif  // !_MSC_VER

MsgHorsePlayerInfo::MsgHorsePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorsePlayerInfo)
}

void MsgHorsePlayerInfo::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
  bet_result_list_ = const_cast< ::MsgSerialBetInfo*>(&::MsgSerialBetInfo::default_instance());
}

MsgHorsePlayerInfo::MsgHorsePlayerInfo(const MsgHorsePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorsePlayerInfo)
}

void MsgHorsePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  bet_result_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorsePlayerInfo::~MsgHorsePlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgHorsePlayerInfo)
  SharedDtor();
}

void MsgHorsePlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
    delete bet_result_list_;
  }
}

void MsgHorsePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorsePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorsePlayerInfo_descriptor_;
}

const MsgHorsePlayerInfo& MsgHorsePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorsePlayerInfo* MsgHorsePlayerInfo::default_instance_ = NULL;

MsgHorsePlayerInfo* MsgHorsePlayerInfo::New() const {
  return new MsgHorsePlayerInfo;
}

void MsgHorsePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
    if (has_bet_result_list()) {
      if (bet_result_list_ != NULL) bet_result_list_->::MsgSerialBetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorsePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorsePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bet_result_list;
        break;
      }

      // optional .MsgSerialBetInfo bet_result_list = 2;
      case 2: {
        if (tag == 18) {
         parse_bet_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet_result_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorsePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorsePlayerInfo)
  return false;
#undef DO_
}

void MsgHorsePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorsePlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional .MsgSerialBetInfo bet_result_list = 2;
  if (has_bet_result_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_result_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorsePlayerInfo)
}

::google::protobuf::uint8* MsgHorsePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorsePlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional .MsgSerialBetInfo bet_result_list = 2;
  if (has_bet_result_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_result_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorsePlayerInfo)
  return target;
}

int MsgHorsePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional .MsgSerialBetInfo bet_result_list = 2;
    if (has_bet_result_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet_result_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorsePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorsePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorsePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorsePlayerInfo::MergeFrom(const MsgHorsePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_bet_result_list()) {
      mutable_bet_result_list()->::MsgSerialBetInfo::MergeFrom(from.bet_result_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorsePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorsePlayerInfo::CopyFrom(const MsgHorsePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorsePlayerInfo::IsInitialized() const {

  return true;
}

void MsgHorsePlayerInfo::Swap(MsgHorsePlayerInfo* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(bet_result_list_, other->bet_result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorsePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorsePlayerInfo_descriptor_;
  metadata.reflection = MsgHorsePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorsePlayerRankInfo::kPlayerNameFieldNumber;
const int MsgHorsePlayerRankInfo::kBetHorseFieldNumber;
const int MsgHorsePlayerRankInfo::kWinRoundFieldNumber;
#endif  // !_MSC_VER

MsgHorsePlayerRankInfo::MsgHorsePlayerRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorsePlayerRankInfo)
}

void MsgHorsePlayerRankInfo::InitAsDefaultInstance() {
}

MsgHorsePlayerRankInfo::MsgHorsePlayerRankInfo(const MsgHorsePlayerRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorsePlayerRankInfo)
}

void MsgHorsePlayerRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bet_horse_ = 0u;
  win_round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorsePlayerRankInfo::~MsgHorsePlayerRankInfo() {
  // @@protoc_insertion_point(destructor:MsgHorsePlayerRankInfo)
  SharedDtor();
}

void MsgHorsePlayerRankInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void MsgHorsePlayerRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorsePlayerRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorsePlayerRankInfo_descriptor_;
}

const MsgHorsePlayerRankInfo& MsgHorsePlayerRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorsePlayerRankInfo* MsgHorsePlayerRankInfo::default_instance_ = NULL;

MsgHorsePlayerRankInfo* MsgHorsePlayerRankInfo::New() const {
  return new MsgHorsePlayerRankInfo;
}

void MsgHorsePlayerRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgHorsePlayerRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(bet_horse_, win_round_);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorsePlayerRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorsePlayerRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet_horse;
        break;
      }

      // optional uint32 bet_horse = 2;
      case 2: {
        if (tag == 16) {
         parse_bet_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bet_horse_)));
          set_has_bet_horse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win_round;
        break;
      }

      // optional uint32 win_round = 3;
      case 3: {
        if (tag == 24) {
         parse_win_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_round_)));
          set_has_win_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorsePlayerRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorsePlayerRankInfo)
  return false;
#undef DO_
}

void MsgHorsePlayerRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorsePlayerRankInfo)
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_name(), output);
  }

  // optional uint32 bet_horse = 2;
  if (has_bet_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bet_horse(), output);
  }

  // optional uint32 win_round = 3;
  if (has_win_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win_round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorsePlayerRankInfo)
}

::google::protobuf::uint8* MsgHorsePlayerRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorsePlayerRankInfo)
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // optional uint32 bet_horse = 2;
  if (has_bet_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bet_horse(), target);
  }

  // optional uint32 win_round = 3;
  if (has_win_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win_round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorsePlayerRankInfo)
  return target;
}

int MsgHorsePlayerRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string player_name = 1;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 bet_horse = 2;
    if (has_bet_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bet_horse());
    }

    // optional uint32 win_round = 3;
    if (has_win_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_round());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorsePlayerRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorsePlayerRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorsePlayerRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorsePlayerRankInfo::MergeFrom(const MsgHorsePlayerRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_bet_horse()) {
      set_bet_horse(from.bet_horse());
    }
    if (from.has_win_round()) {
      set_win_round(from.win_round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorsePlayerRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorsePlayerRankInfo::CopyFrom(const MsgHorsePlayerRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorsePlayerRankInfo::IsInitialized() const {

  return true;
}

void MsgHorsePlayerRankInfo::Swap(MsgHorsePlayerRankInfo* other) {
  if (other != this) {
    std::swap(player_name_, other->player_name_);
    std::swap(bet_horse_, other->bet_horse_);
    std::swap(win_round_, other->win_round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorsePlayerRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorsePlayerRankInfo_descriptor_;
  metadata.reflection = MsgHorsePlayerRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorseRaceResult::kResultListFieldNumber;
const int MsgHorseRaceResult::kRandomIntFieldNumber;
#endif  // !_MSC_VER

MsgHorseRaceResult::MsgHorseRaceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorseRaceResult)
}

void MsgHorseRaceResult::InitAsDefaultInstance() {
}

MsgHorseRaceResult::MsgHorseRaceResult(const MsgHorseRaceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorseRaceResult)
}

void MsgHorseRaceResult::SharedCtor() {
  _cached_size_ = 0;
  random_int_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorseRaceResult::~MsgHorseRaceResult() {
  // @@protoc_insertion_point(destructor:MsgHorseRaceResult)
  SharedDtor();
}

void MsgHorseRaceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHorseRaceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorseRaceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorseRaceResult_descriptor_;
}

const MsgHorseRaceResult& MsgHorseRaceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorseRaceResult* MsgHorseRaceResult::default_instance_ = NULL;

MsgHorseRaceResult* MsgHorseRaceResult::New() const {
  return new MsgHorseRaceResult;
}

void MsgHorseRaceResult::Clear() {
  random_int_ = 0u;
  result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorseRaceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorseRaceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 result_list = 1;
      case 1: {
        if (tag == 8) {
         parse_result_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_result_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_result_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_result_list;
        if (input->ExpectTag(16)) goto parse_random_int;
        break;
      }

      // optional uint32 random_int = 2;
      case 2: {
        if (tag == 16) {
         parse_random_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_int_)));
          set_has_random_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorseRaceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorseRaceResult)
  return false;
#undef DO_
}

void MsgHorseRaceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorseRaceResult)
  // repeated uint32 result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->result_list(i), output);
  }

  // optional uint32 random_int = 2;
  if (has_random_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->random_int(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorseRaceResult)
}

::google::protobuf::uint8* MsgHorseRaceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorseRaceResult)
  // repeated uint32 result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->result_list(i), target);
  }

  // optional uint32 random_int = 2;
  if (has_random_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->random_int(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorseRaceResult)
  return target;
}

int MsgHorseRaceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 random_int = 2;
    if (has_random_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_int());
    }

  }
  // repeated uint32 result_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->result_list(i));
    }
    total_size += 1 * this->result_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorseRaceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorseRaceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorseRaceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorseRaceResult::MergeFrom(const MsgHorseRaceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_random_int()) {
      set_random_int(from.random_int());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorseRaceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorseRaceResult::CopyFrom(const MsgHorseRaceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorseRaceResult::IsInitialized() const {

  return true;
}

void MsgHorseRaceResult::Swap(MsgHorseRaceResult* other) {
  if (other != this) {
    result_list_.Swap(&other->result_list_);
    std::swap(random_int_, other->random_int_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorseRaceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorseRaceResult_descriptor_;
  metadata.reflection = MsgHorseRaceResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorseGroup::kHorseIdFieldNumber;
const int MsgHorseGroup::kNameFieldNumber;
const int MsgHorseGroup::kPutBetsFieldNumber;
const int MsgHorseGroup::kLastRankFieldNumber;
#endif  // !_MSC_VER

MsgHorseGroup::MsgHorseGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorseGroup)
}

void MsgHorseGroup::InitAsDefaultInstance() {
}

MsgHorseGroup::MsgHorseGroup(const MsgHorseGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorseGroup)
}

void MsgHorseGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  horse_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  put_bets_ = GOOGLE_ULONGLONG(0);
  last_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorseGroup::~MsgHorseGroup() {
  // @@protoc_insertion_point(destructor:MsgHorseGroup)
  SharedDtor();
}

void MsgHorseGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgHorseGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorseGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorseGroup_descriptor_;
}

const MsgHorseGroup& MsgHorseGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorseGroup* MsgHorseGroup::default_instance_ = NULL;

MsgHorseGroup* MsgHorseGroup::New() const {
  return new MsgHorseGroup;
}

void MsgHorseGroup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgHorseGroup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(horse_id_, put_bets_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorseGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorseGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 horse_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_id_)));
          set_has_horse_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_put_bets;
        break;
      }

      // optional uint64 put_bets = 3;
      case 3: {
        if (tag == 24) {
         parse_put_bets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &put_bets_)));
          set_has_put_bets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_rank;
        break;
      }

      // optional uint32 last_rank = 4;
      case 4: {
        if (tag == 32) {
         parse_last_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_rank_)));
          set_has_last_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorseGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorseGroup)
  return false;
#undef DO_
}

void MsgHorseGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorseGroup)
  // optional uint32 horse_id = 1;
  if (has_horse_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->horse_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 put_bets = 3;
  if (has_put_bets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->put_bets(), output);
  }

  // optional uint32 last_rank = 4;
  if (has_last_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorseGroup)
}

::google::protobuf::uint8* MsgHorseGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorseGroup)
  // optional uint32 horse_id = 1;
  if (has_horse_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->horse_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 put_bets = 3;
  if (has_put_bets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->put_bets(), target);
  }

  // optional uint32 last_rank = 4;
  if (has_last_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorseGroup)
  return target;
}

int MsgHorseGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 horse_id = 1;
    if (has_horse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 put_bets = 3;
    if (has_put_bets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->put_bets());
    }

    // optional uint32 last_rank = 4;
    if (has_last_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorseGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorseGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorseGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorseGroup::MergeFrom(const MsgHorseGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horse_id()) {
      set_horse_id(from.horse_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_put_bets()) {
      set_put_bets(from.put_bets());
    }
    if (from.has_last_rank()) {
      set_last_rank(from.last_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorseGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorseGroup::CopyFrom(const MsgHorseGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorseGroup::IsInitialized() const {

  return true;
}

void MsgHorseGroup::Swap(MsgHorseGroup* other) {
  if (other != this) {
    std::swap(horse_id_, other->horse_id_);
    std::swap(name_, other->name_);
    std::swap(put_bets_, other->put_bets_);
    std::swap(last_rank_, other->last_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorseGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorseGroup_descriptor_;
  metadata.reflection = MsgHorseGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAllBetAndOddInfo::kAllInfoListFieldNumber;
#endif  // !_MSC_VER

MsgAllBetAndOddInfo::MsgAllBetAndOddInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAllBetAndOddInfo)
}

void MsgAllBetAndOddInfo::InitAsDefaultInstance() {
}

MsgAllBetAndOddInfo::MsgAllBetAndOddInfo(const MsgAllBetAndOddInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAllBetAndOddInfo)
}

void MsgAllBetAndOddInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAllBetAndOddInfo::~MsgAllBetAndOddInfo() {
  // @@protoc_insertion_point(destructor:MsgAllBetAndOddInfo)
  SharedDtor();
}

void MsgAllBetAndOddInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAllBetAndOddInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAllBetAndOddInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAllBetAndOddInfo_descriptor_;
}

const MsgAllBetAndOddInfo& MsgAllBetAndOddInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgAllBetAndOddInfo* MsgAllBetAndOddInfo::default_instance_ = NULL;

MsgAllBetAndOddInfo* MsgAllBetAndOddInfo::New() const {
  return new MsgAllBetAndOddInfo;
}

void MsgAllBetAndOddInfo::Clear() {
  all_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAllBetAndOddInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAllBetAndOddInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgHorseRoundBetInfo all_info_list = 1;
      case 1: {
        if (tag == 10) {
         parse_all_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_all_info_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAllBetAndOddInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAllBetAndOddInfo)
  return false;
#undef DO_
}

void MsgAllBetAndOddInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAllBetAndOddInfo)
  // repeated .MsgHorseRoundBetInfo all_info_list = 1;
  for (int i = 0; i < this->all_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAllBetAndOddInfo)
}

::google::protobuf::uint8* MsgAllBetAndOddInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAllBetAndOddInfo)
  // repeated .MsgHorseRoundBetInfo all_info_list = 1;
  for (int i = 0; i < this->all_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAllBetAndOddInfo)
  return target;
}

int MsgAllBetAndOddInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MsgHorseRoundBetInfo all_info_list = 1;
  total_size += 1 * this->all_info_list_size();
  for (int i = 0; i < this->all_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAllBetAndOddInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAllBetAndOddInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAllBetAndOddInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAllBetAndOddInfo::MergeFrom(const MsgAllBetAndOddInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_info_list_.MergeFrom(from.all_info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAllBetAndOddInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAllBetAndOddInfo::CopyFrom(const MsgAllBetAndOddInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAllBetAndOddInfo::IsInitialized() const {

  return true;
}

void MsgAllBetAndOddInfo::Swap(MsgAllBetAndOddInfo* other) {
  if (other != this) {
    all_info_list_.Swap(&other->all_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAllBetAndOddInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAllBetAndOddInfo_descriptor_;
  metadata.reflection = MsgAllBetAndOddInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorseShowPlayerInfo::kPlayerIdFieldNumber;
const int MsgHorseShowPlayerInfo::kUsernameFieldNumber;
const int MsgHorseShowPlayerInfo::kPortraitIdFieldNumber;
const int MsgHorseShowPlayerInfo::kVipLevelFieldNumber;
#endif  // !_MSC_VER

MsgHorseShowPlayerInfo::MsgHorseShowPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorseShowPlayerInfo)
}

void MsgHorseShowPlayerInfo::InitAsDefaultInstance() {
}

MsgHorseShowPlayerInfo::MsgHorseShowPlayerInfo(const MsgHorseShowPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorseShowPlayerInfo)
}

void MsgHorseShowPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_id_ = 0u;
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorseShowPlayerInfo::~MsgHorseShowPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgHorseShowPlayerInfo)
  SharedDtor();
}

void MsgHorseShowPlayerInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void MsgHorseShowPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorseShowPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorseShowPlayerInfo_descriptor_;
}

const MsgHorseShowPlayerInfo& MsgHorseShowPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorseShowPlayerInfo* MsgHorseShowPlayerInfo::default_instance_ = NULL;

MsgHorseShowPlayerInfo* MsgHorseShowPlayerInfo::New() const {
  return new MsgHorseShowPlayerInfo;
}

void MsgHorseShowPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgHorseShowPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(portrait_id_, vip_level_);
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorseShowPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorseShowPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portrait_id;
        break;
      }

      // optional uint32 portrait_id = 3;
      case 3: {
        if (tag == 24) {
         parse_portrait_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_id_)));
          set_has_portrait_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 4;
      case 4: {
        if (tag == 32) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorseShowPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorseShowPlayerInfo)
  return false;
#undef DO_
}

void MsgHorseShowPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorseShowPlayerInfo)
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional uint32 portrait_id = 3;
  if (has_portrait_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->portrait_id(), output);
  }

  // optional uint32 vip_level = 4;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorseShowPlayerInfo)
}

::google::protobuf::uint8* MsgHorseShowPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorseShowPlayerInfo)
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional uint32 portrait_id = 3;
  if (has_portrait_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->portrait_id(), target);
  }

  // optional uint32 vip_level = 4;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorseShowPlayerInfo)
  return target;
}

int MsgHorseShowPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 portrait_id = 3;
    if (has_portrait_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait_id());
    }

    // optional uint32 vip_level = 4;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorseShowPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorseShowPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorseShowPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorseShowPlayerInfo::MergeFrom(const MsgHorseShowPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_portrait_id()) {
      set_portrait_id(from.portrait_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorseShowPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorseShowPlayerInfo::CopyFrom(const MsgHorseShowPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorseShowPlayerInfo::IsInitialized() const {

  return true;
}

void MsgHorseShowPlayerInfo::Swap(MsgHorseShowPlayerInfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(username_, other->username_);
    std::swap(portrait_id_, other->portrait_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorseShowPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorseShowPlayerInfo_descriptor_;
  metadata.reflection = MsgHorseShowPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHorseRoomInfo::kRoomStateFieldNumber;
const int MsgHorseRoomInfo::kSurTimeFieldNumber;
const int MsgHorseRoomInfo::kSelfFieldNumber;
const int MsgHorseRoomInfo::kPlayerListFieldNumber;
const int MsgHorseRoomInfo::kSixHorseFieldNumber;
const int MsgHorseRoomInfo::kRoomIdFieldNumber;
const int MsgHorseRoomInfo::kRoomInfoFieldNumber;
const int MsgHorseRoomInfo::kShowPlayerListFieldNumber;
#endif  // !_MSC_VER

MsgHorseRoomInfo::MsgHorseRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHorseRoomInfo)
}

void MsgHorseRoomInfo::InitAsDefaultInstance() {
  self_ = const_cast< ::MsgHorsePlayerInfo*>(&::MsgHorsePlayerInfo::default_instance());
  room_info_ = const_cast< ::MsgBaseRoomInfo*>(&::MsgBaseRoomInfo::default_instance());
}

MsgHorseRoomInfo::MsgHorseRoomInfo(const MsgHorseRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHorseRoomInfo)
}

void MsgHorseRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 1;
  sur_time_ = GOOGLE_LONGLONG(0);
  self_ = NULL;
  room_id_ = GOOGLE_ULONGLONG(0);
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHorseRoomInfo::~MsgHorseRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgHorseRoomInfo)
  SharedDtor();
}

void MsgHorseRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
    delete room_info_;
  }
}

void MsgHorseRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHorseRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHorseRoomInfo_descriptor_;
}

const MsgHorseRoomInfo& MsgHorseRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhorse_2eproto();
  return *default_instance_;
}

MsgHorseRoomInfo* MsgHorseRoomInfo::default_instance_ = NULL;

MsgHorseRoomInfo* MsgHorseRoomInfo::New() const {
  return new MsgHorseRoomInfo;
}

void MsgHorseRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & 103) {
    room_state_ = 1;
    sur_time_ = GOOGLE_LONGLONG(0);
    if (has_self()) {
      if (self_ != NULL) self_->::MsgHorsePlayerInfo::Clear();
    }
    room_id_ = GOOGLE_ULONGLONG(0);
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::MsgBaseRoomInfo::Clear();
    }
  }
  player_list_.Clear();
  six_horse_.Clear();
  show_player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHorseRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHorseRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .THorseState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::THorseState_IsValid(value)) {
            set_room_state(static_cast< ::THorseState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sur_time;
        break;
      }

      // optional int64 sur_time = 2;
      case 2: {
        if (tag == 16) {
         parse_sur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sur_time_)));
          set_has_sur_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_self;
        break;
      }

      // optional .MsgHorsePlayerInfo self = 3;
      case 3: {
        if (tag == 26) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        break;
      }

      // repeated .MsgHorsePlayerRankInfo player_list = 4;
      case 4: {
        if (tag == 34) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_list;
        if (input->ExpectTag(42)) goto parse_six_horse;
        break;
      }

      // repeated .MsgHorseGroup six_horse = 5;
      case 5: {
        if (tag == 42) {
         parse_six_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_six_horse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_six_horse;
        if (input->ExpectTag(48)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 6;
      case 6: {
        if (tag == 48) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_room_info;
        break;
      }

      // optional .MsgBaseRoomInfo room_info = 7;
      case 7: {
        if (tag == 58) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_show_player_list;
        break;
      }

      // repeated .MsgHorseShowPlayerInfo show_player_list = 8;
      case 8: {
        if (tag == 66) {
         parse_show_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_show_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_show_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHorseRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHorseRoomInfo)
  return false;
#undef DO_
}

void MsgHorseRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHorseRoomInfo)
  // optional .THorseState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional int64 sur_time = 2;
  if (has_sur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sur_time(), output);
  }

  // optional .MsgHorsePlayerInfo self = 3;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->self(), output);
  }

  // repeated .MsgHorsePlayerRankInfo player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_list(i), output);
  }

  // repeated .MsgHorseGroup six_horse = 5;
  for (int i = 0; i < this->six_horse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->six_horse(i), output);
  }

  // optional uint64 room_id = 6;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->room_id(), output);
  }

  // optional .MsgBaseRoomInfo room_info = 7;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->room_info(), output);
  }

  // repeated .MsgHorseShowPlayerInfo show_player_list = 8;
  for (int i = 0; i < this->show_player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->show_player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgHorseRoomInfo)
}

::google::protobuf::uint8* MsgHorseRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHorseRoomInfo)
  // optional .THorseState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional int64 sur_time = 2;
  if (has_sur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sur_time(), target);
  }

  // optional .MsgHorsePlayerInfo self = 3;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->self(), target);
  }

  // repeated .MsgHorsePlayerRankInfo player_list = 4;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_list(i), target);
  }

  // repeated .MsgHorseGroup six_horse = 5;
  for (int i = 0; i < this->six_horse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->six_horse(i), target);
  }

  // optional uint64 room_id = 6;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->room_id(), target);
  }

  // optional .MsgBaseRoomInfo room_info = 7;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->room_info(), target);
  }

  // repeated .MsgHorseShowPlayerInfo show_player_list = 8;
  for (int i = 0; i < this->show_player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->show_player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgHorseRoomInfo)
  return target;
}

int MsgHorseRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .THorseState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional int64 sur_time = 2;
    if (has_sur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sur_time());
    }

    // optional .MsgHorsePlayerInfo self = 3;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }

    // optional uint64 room_id = 6;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional .MsgBaseRoomInfo room_info = 7;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  // repeated .MsgHorsePlayerRankInfo player_list = 4;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgHorseGroup six_horse = 5;
  total_size += 1 * this->six_horse_size();
  for (int i = 0; i < this->six_horse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->six_horse(i));
  }

  // repeated .MsgHorseShowPlayerInfo show_player_list = 8;
  total_size += 1 * this->show_player_list_size();
  for (int i = 0; i < this->show_player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->show_player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHorseRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHorseRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHorseRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHorseRoomInfo::MergeFrom(const MsgHorseRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  six_horse_.MergeFrom(from.six_horse_);
  show_player_list_.MergeFrom(from.show_player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_sur_time()) {
      set_sur_time(from.sur_time());
    }
    if (from.has_self()) {
      mutable_self()->::MsgHorsePlayerInfo::MergeFrom(from.self());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::MsgBaseRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHorseRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHorseRoomInfo::CopyFrom(const MsgHorseRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHorseRoomInfo::IsInitialized() const {

  return true;
}

void MsgHorseRoomInfo::Swap(MsgHorseRoomInfo* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(sur_time_, other->sur_time_);
    std::swap(self_, other->self_);
    player_list_.Swap(&other->player_list_);
    six_horse_.Swap(&other->six_horse_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_info_, other->room_info_);
    show_player_list_.Swap(&other->show_player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHorseRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHorseRoomInfo_descriptor_;
  metadata.reflection = MsgHorseRoomInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
