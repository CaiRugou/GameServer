// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_fish.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_fish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgFishGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFishGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFishHitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFishHitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFishHitResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFishHitResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFishPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFishPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFishRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFishRoomInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5ffish_2eproto() {
  protobuf_AddDesc_msg_5ffish_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_fish.proto");
  GOOGLE_CHECK(file != NULL);
  MsgFishGroup_descriptor_ = file->message_type(0);
  static const int MsgFishGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishGroup, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishGroup, client_id_str_),
  };
  MsgFishGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFishGroup_descriptor_,
      MsgFishGroup::default_instance_,
      MsgFishGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFishGroup));
  MsgFishHitInfo_descriptor_ = file->message_type(1);
  static const int MsgFishHitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitInfo, hit_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitInfo, gun_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitInfo, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitInfo, skill_id_),
  };
  MsgFishHitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFishHitInfo_descriptor_,
      MsgFishHitInfo::default_instance_,
      MsgFishHitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFishHitInfo));
  MsgFishHitResult_descriptor_ = file->message_type(2);
  static const int MsgFishHitResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, client_id_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, reward_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, reward_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, reward_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, reward_coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, ply_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, ply_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, ply_coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, item_list_),
  };
  MsgFishHitResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFishHitResult_descriptor_,
      MsgFishHitResult::default_instance_,
      MsgFishHitResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishHitResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFishHitResult));
  MsgFishPlayerInfo_descriptor_ = file->message_type(3);
  static const int MsgFishPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishPlayerInfo, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishPlayerInfo, energy_),
  };
  MsgFishPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFishPlayerInfo_descriptor_,
      MsgFishPlayerInfo::default_instance_,
      MsgFishPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFishPlayerInfo));
  MsgFishRoomInfo_descriptor_ = file->message_type(4);
  static const int MsgFishRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishRoomInfo, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishRoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishRoomInfo, room_info_),
  };
  MsgFishRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFishRoomInfo_descriptor_,
      MsgFishRoomInfo::default_instance_,
      MsgFishRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFishRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFishRoomInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5ffish_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFishGroup_descriptor_, &MsgFishGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFishHitInfo_descriptor_, &MsgFishHitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFishHitResult_descriptor_, &MsgFishHitResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFishPlayerInfo_descriptor_, &MsgFishPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFishRoomInfo_descriptor_, &MsgFishRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5ffish_2eproto() {
  delete MsgFishGroup::default_instance_;
  delete MsgFishGroup_reflection_;
  delete MsgFishHitInfo::default_instance_;
  delete MsgFishHitInfo_reflection_;
  delete MsgFishHitResult::default_instance_;
  delete MsgFishHitResult_reflection_;
  delete MsgFishPlayerInfo::default_instance_;
  delete MsgFishPlayerInfo_reflection_;
  delete MsgFishRoomInfo::default_instance_;
  delete MsgFishRoomInfo_reflection_;
}

void protobuf_AddDesc_msg_5ffish_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016msg_fish.proto\032\020public_pro.proto\"6\n\014Ms"
    "gFishGroup\022\017\n\007fish_id\030\001 \001(\r\022\025\n\rclient_id"
    "_str\030\002 \003(\t\"g\n\016MsgFishHitInfo\022 \n\thit_grou"
    "p\030\001 \003(\0132\r.MsgFishGroup\022\016\n\006gun_id\030\002 \001(\r\022\021"
    "\n\tbullet_id\030\003 \001(\r\022\020\n\010skill_id\030\004 \001(\r\"\351\001\n\020"
    "MsgFishHitResult\022\025\n\rclient_id_str\030\001 \001(\t\022"
    "\022\n\nbase_money\030\002 \001(\004\022\024\n\014reward_money\030\003 \001("
    "\004\022\022\n\nreward_rmb\030\004 \001(\004\022\024\n\014reward_skill\030\005 "
    "\001(\r\022\025\n\rreward_coupon\030\006 \001(\r\022\021\n\tply_money\030"
    "\007 \001(\004\022\017\n\007ply_rmb\030\010 \001(\004\022\022\n\nply_coupon\030\t \001"
    "(\004\022\033\n\titem_list\030\n \003(\0132\010.MsgItem\"H\n\021MsgFi"
    "shPlayerInfo\022#\n\013player_base\030\001 \001(\0132\016.MsgP"
    "layerInfo\022\016\n\006energy\030\002 \001(\004\"p\n\017MsgFishRoom"
    "Info\022\'\n\013player_list\030\001 \003(\0132\022.MsgFishPlaye"
    "rInfo\022\017\n\007room_id\030\002 \001(\004\022#\n\troom_info\030\003 \001("
    "\0132\020.MsgBaseRoomInfo", 619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_fish.proto", &protobuf_RegisterTypes);
  MsgFishGroup::default_instance_ = new MsgFishGroup();
  MsgFishHitInfo::default_instance_ = new MsgFishHitInfo();
  MsgFishHitResult::default_instance_ = new MsgFishHitResult();
  MsgFishPlayerInfo::default_instance_ = new MsgFishPlayerInfo();
  MsgFishRoomInfo::default_instance_ = new MsgFishRoomInfo();
  MsgFishGroup::default_instance_->InitAsDefaultInstance();
  MsgFishHitInfo::default_instance_->InitAsDefaultInstance();
  MsgFishHitResult::default_instance_->InitAsDefaultInstance();
  MsgFishPlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgFishRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5ffish_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5ffish_2eproto {
  StaticDescriptorInitializer_msg_5ffish_2eproto() {
    protobuf_AddDesc_msg_5ffish_2eproto();
  }
} static_descriptor_initializer_msg_5ffish_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgFishGroup::kFishIdFieldNumber;
const int MsgFishGroup::kClientIdStrFieldNumber;
#endif  // !_MSC_VER

MsgFishGroup::MsgFishGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFishGroup)
}

void MsgFishGroup::InitAsDefaultInstance() {
}

MsgFishGroup::MsgFishGroup(const MsgFishGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFishGroup)
}

void MsgFishGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fish_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFishGroup::~MsgFishGroup() {
  // @@protoc_insertion_point(destructor:MsgFishGroup)
  SharedDtor();
}

void MsgFishGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFishGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFishGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFishGroup_descriptor_;
}

const MsgFishGroup& MsgFishGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5ffish_2eproto();
  return *default_instance_;
}

MsgFishGroup* MsgFishGroup::default_instance_ = NULL;

MsgFishGroup* MsgFishGroup::New() const {
  return new MsgFishGroup;
}

void MsgFishGroup::Clear() {
  fish_id_ = 0u;
  client_id_str_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFishGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFishGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fish_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_id_str;
        break;
      }

      // repeated string client_id_str = 2;
      case 2: {
        if (tag == 18) {
         parse_client_id_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_client_id_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id_str(this->client_id_str_size() - 1).data(),
            this->client_id_str(this->client_id_str_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_id_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_id_str;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFishGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFishGroup)
  return false;
#undef DO_
}

void MsgFishGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFishGroup)
  // optional uint32 fish_id = 1;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fish_id(), output);
  }

  // repeated string client_id_str = 2;
  for (int i = 0; i < this->client_id_str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->client_id_str(i).data(), this->client_id_str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "client_id_str");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client_id_str(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFishGroup)
}

::google::protobuf::uint8* MsgFishGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFishGroup)
  // optional uint32 fish_id = 1;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fish_id(), target);
  }

  // repeated string client_id_str = 2;
  for (int i = 0; i < this->client_id_str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id_str(i).data(), this->client_id_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_id_str");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->client_id_str(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFishGroup)
  return target;
}

int MsgFishGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fish_id = 1;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_id());
    }

  }
  // repeated string client_id_str = 2;
  total_size += 1 * this->client_id_str_size();
  for (int i = 0; i < this->client_id_str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->client_id_str(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFishGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFishGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFishGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFishGroup::MergeFrom(const MsgFishGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  client_id_str_.MergeFrom(from.client_id_str_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFishGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFishGroup::CopyFrom(const MsgFishGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFishGroup::IsInitialized() const {

  return true;
}

void MsgFishGroup::Swap(MsgFishGroup* other) {
  if (other != this) {
    std::swap(fish_id_, other->fish_id_);
    client_id_str_.Swap(&other->client_id_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFishGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFishGroup_descriptor_;
  metadata.reflection = MsgFishGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFishHitInfo::kHitGroupFieldNumber;
const int MsgFishHitInfo::kGunIdFieldNumber;
const int MsgFishHitInfo::kBulletIdFieldNumber;
const int MsgFishHitInfo::kSkillIdFieldNumber;
#endif  // !_MSC_VER

MsgFishHitInfo::MsgFishHitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFishHitInfo)
}

void MsgFishHitInfo::InitAsDefaultInstance() {
}

MsgFishHitInfo::MsgFishHitInfo(const MsgFishHitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFishHitInfo)
}

void MsgFishHitInfo::SharedCtor() {
  _cached_size_ = 0;
  gun_id_ = 0u;
  bullet_id_ = 0u;
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFishHitInfo::~MsgFishHitInfo() {
  // @@protoc_insertion_point(destructor:MsgFishHitInfo)
  SharedDtor();
}

void MsgFishHitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFishHitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFishHitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFishHitInfo_descriptor_;
}

const MsgFishHitInfo& MsgFishHitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5ffish_2eproto();
  return *default_instance_;
}

MsgFishHitInfo* MsgFishHitInfo::default_instance_ = NULL;

MsgFishHitInfo* MsgFishHitInfo::New() const {
  return new MsgFishHitInfo;
}

void MsgFishHitInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgFishHitInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gun_id_, skill_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hit_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFishHitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFishHitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgFishGroup hit_group = 1;
      case 1: {
        if (tag == 10) {
         parse_hit_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hit_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hit_group;
        if (input->ExpectTag(16)) goto parse_gun_id;
        break;
      }

      // optional uint32 gun_id = 2;
      case 2: {
        if (tag == 16) {
         parse_gun_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gun_id_)));
          set_has_gun_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 3;
      case 3: {
        if (tag == 24) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 4;
      case 4: {
        if (tag == 32) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFishHitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFishHitInfo)
  return false;
#undef DO_
}

void MsgFishHitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFishHitInfo)
  // repeated .MsgFishGroup hit_group = 1;
  for (int i = 0; i < this->hit_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hit_group(i), output);
  }

  // optional uint32 gun_id = 2;
  if (has_gun_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gun_id(), output);
  }

  // optional uint32 bullet_id = 3;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bullet_id(), output);
  }

  // optional uint32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFishHitInfo)
}

::google::protobuf::uint8* MsgFishHitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFishHitInfo)
  // repeated .MsgFishGroup hit_group = 1;
  for (int i = 0; i < this->hit_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hit_group(i), target);
  }

  // optional uint32 gun_id = 2;
  if (has_gun_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gun_id(), target);
  }

  // optional uint32 bullet_id = 3;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bullet_id(), target);
  }

  // optional uint32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFishHitInfo)
  return target;
}

int MsgFishHitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 gun_id = 2;
    if (has_gun_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gun_id());
    }

    // optional uint32 bullet_id = 3;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional uint32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

  }
  // repeated .MsgFishGroup hit_group = 1;
  total_size += 1 * this->hit_group_size();
  for (int i = 0; i < this->hit_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hit_group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFishHitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFishHitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFishHitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFishHitInfo::MergeFrom(const MsgFishHitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hit_group_.MergeFrom(from.hit_group_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gun_id()) {
      set_gun_id(from.gun_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFishHitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFishHitInfo::CopyFrom(const MsgFishHitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFishHitInfo::IsInitialized() const {

  return true;
}

void MsgFishHitInfo::Swap(MsgFishHitInfo* other) {
  if (other != this) {
    hit_group_.Swap(&other->hit_group_);
    std::swap(gun_id_, other->gun_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFishHitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFishHitInfo_descriptor_;
  metadata.reflection = MsgFishHitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFishHitResult::kClientIdStrFieldNumber;
const int MsgFishHitResult::kBaseMoneyFieldNumber;
const int MsgFishHitResult::kRewardMoneyFieldNumber;
const int MsgFishHitResult::kRewardRmbFieldNumber;
const int MsgFishHitResult::kRewardSkillFieldNumber;
const int MsgFishHitResult::kRewardCouponFieldNumber;
const int MsgFishHitResult::kPlyMoneyFieldNumber;
const int MsgFishHitResult::kPlyRmbFieldNumber;
const int MsgFishHitResult::kPlyCouponFieldNumber;
const int MsgFishHitResult::kItemListFieldNumber;
#endif  // !_MSC_VER

MsgFishHitResult::MsgFishHitResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFishHitResult)
}

void MsgFishHitResult::InitAsDefaultInstance() {
}

MsgFishHitResult::MsgFishHitResult(const MsgFishHitResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFishHitResult)
}

void MsgFishHitResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_money_ = GOOGLE_ULONGLONG(0);
  reward_money_ = GOOGLE_ULONGLONG(0);
  reward_rmb_ = GOOGLE_ULONGLONG(0);
  reward_skill_ = 0u;
  reward_coupon_ = 0u;
  ply_money_ = GOOGLE_ULONGLONG(0);
  ply_rmb_ = GOOGLE_ULONGLONG(0);
  ply_coupon_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFishHitResult::~MsgFishHitResult() {
  // @@protoc_insertion_point(destructor:MsgFishHitResult)
  SharedDtor();
}

void MsgFishHitResult::SharedDtor() {
  if (client_id_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_str_;
  }
  if (this != default_instance_) {
  }
}

void MsgFishHitResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFishHitResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFishHitResult_descriptor_;
}

const MsgFishHitResult& MsgFishHitResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5ffish_2eproto();
  return *default_instance_;
}

MsgFishHitResult* MsgFishHitResult::default_instance_ = NULL;

MsgFishHitResult* MsgFishHitResult::New() const {
  return new MsgFishHitResult;
}

void MsgFishHitResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgFishHitResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(base_money_, ply_rmb_);
    if (has_client_id_str()) {
      if (client_id_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_id_str_->clear();
      }
    }
  }
  ply_coupon_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFishHitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFishHitResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_id_str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id_str().data(), this->client_id_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_id_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_base_money;
        break;
      }

      // optional uint64 base_money = 2;
      case 2: {
        if (tag == 16) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_money;
        break;
      }

      // optional uint64 reward_money = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_money_)));
          set_has_reward_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_rmb;
        break;
      }

      // optional uint64 reward_rmb = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_rmb_)));
          set_has_reward_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_skill;
        break;
      }

      // optional uint32 reward_skill = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_skill_)));
          set_has_reward_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reward_coupon;
        break;
      }

      // optional uint32 reward_coupon = 6;
      case 6: {
        if (tag == 48) {
         parse_reward_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_coupon_)));
          set_has_reward_coupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ply_money;
        break;
      }

      // optional uint64 ply_money = 7;
      case 7: {
        if (tag == 56) {
         parse_ply_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ply_money_)));
          set_has_ply_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ply_rmb;
        break;
      }

      // optional uint64 ply_rmb = 8;
      case 8: {
        if (tag == 64) {
         parse_ply_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ply_rmb_)));
          set_has_ply_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ply_coupon;
        break;
      }

      // optional uint64 ply_coupon = 9;
      case 9: {
        if (tag == 72) {
         parse_ply_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ply_coupon_)));
          set_has_ply_coupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_item_list;
        break;
      }

      // repeated .MsgItem item_list = 10;
      case 10: {
        if (tag == 82) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_item_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFishHitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFishHitResult)
  return false;
#undef DO_
}

void MsgFishHitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFishHitResult)
  // optional string client_id_str = 1;
  if (has_client_id_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id_str().data(), this->client_id_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_id_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id_str(), output);
  }

  // optional uint64 base_money = 2;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->base_money(), output);
  }

  // optional uint64 reward_money = 3;
  if (has_reward_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->reward_money(), output);
  }

  // optional uint64 reward_rmb = 4;
  if (has_reward_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->reward_rmb(), output);
  }

  // optional uint32 reward_skill = 5;
  if (has_reward_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reward_skill(), output);
  }

  // optional uint32 reward_coupon = 6;
  if (has_reward_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reward_coupon(), output);
  }

  // optional uint64 ply_money = 7;
  if (has_ply_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ply_money(), output);
  }

  // optional uint64 ply_rmb = 8;
  if (has_ply_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ply_rmb(), output);
  }

  // optional uint64 ply_coupon = 9;
  if (has_ply_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ply_coupon(), output);
  }

  // repeated .MsgItem item_list = 10;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFishHitResult)
}

::google::protobuf::uint8* MsgFishHitResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFishHitResult)
  // optional string client_id_str = 1;
  if (has_client_id_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id_str().data(), this->client_id_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_id_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id_str(), target);
  }

  // optional uint64 base_money = 2;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->base_money(), target);
  }

  // optional uint64 reward_money = 3;
  if (has_reward_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->reward_money(), target);
  }

  // optional uint64 reward_rmb = 4;
  if (has_reward_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->reward_rmb(), target);
  }

  // optional uint32 reward_skill = 5;
  if (has_reward_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reward_skill(), target);
  }

  // optional uint32 reward_coupon = 6;
  if (has_reward_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reward_coupon(), target);
  }

  // optional uint64 ply_money = 7;
  if (has_ply_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ply_money(), target);
  }

  // optional uint64 ply_rmb = 8;
  if (has_ply_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ply_rmb(), target);
  }

  // optional uint64 ply_coupon = 9;
  if (has_ply_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ply_coupon(), target);
  }

  // repeated .MsgItem item_list = 10;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFishHitResult)
  return target;
}

int MsgFishHitResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_id_str = 1;
    if (has_client_id_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id_str());
    }

    // optional uint64 base_money = 2;
    if (has_base_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_money());
    }

    // optional uint64 reward_money = 3;
    if (has_reward_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reward_money());
    }

    // optional uint64 reward_rmb = 4;
    if (has_reward_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reward_rmb());
    }

    // optional uint32 reward_skill = 5;
    if (has_reward_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_skill());
    }

    // optional uint32 reward_coupon = 6;
    if (has_reward_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_coupon());
    }

    // optional uint64 ply_money = 7;
    if (has_ply_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ply_money());
    }

    // optional uint64 ply_rmb = 8;
    if (has_ply_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ply_rmb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ply_coupon = 9;
    if (has_ply_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ply_coupon());
    }

  }
  // repeated .MsgItem item_list = 10;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFishHitResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFishHitResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFishHitResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFishHitResult::MergeFrom(const MsgFishHitResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id_str()) {
      set_client_id_str(from.client_id_str());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_reward_money()) {
      set_reward_money(from.reward_money());
    }
    if (from.has_reward_rmb()) {
      set_reward_rmb(from.reward_rmb());
    }
    if (from.has_reward_skill()) {
      set_reward_skill(from.reward_skill());
    }
    if (from.has_reward_coupon()) {
      set_reward_coupon(from.reward_coupon());
    }
    if (from.has_ply_money()) {
      set_ply_money(from.ply_money());
    }
    if (from.has_ply_rmb()) {
      set_ply_rmb(from.ply_rmb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ply_coupon()) {
      set_ply_coupon(from.ply_coupon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFishHitResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFishHitResult::CopyFrom(const MsgFishHitResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFishHitResult::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_list())) return false;
  return true;
}

void MsgFishHitResult::Swap(MsgFishHitResult* other) {
  if (other != this) {
    std::swap(client_id_str_, other->client_id_str_);
    std::swap(base_money_, other->base_money_);
    std::swap(reward_money_, other->reward_money_);
    std::swap(reward_rmb_, other->reward_rmb_);
    std::swap(reward_skill_, other->reward_skill_);
    std::swap(reward_coupon_, other->reward_coupon_);
    std::swap(ply_money_, other->ply_money_);
    std::swap(ply_rmb_, other->ply_rmb_);
    std::swap(ply_coupon_, other->ply_coupon_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFishHitResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFishHitResult_descriptor_;
  metadata.reflection = MsgFishHitResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFishPlayerInfo::kPlayerBaseFieldNumber;
const int MsgFishPlayerInfo::kEnergyFieldNumber;
#endif  // !_MSC_VER

MsgFishPlayerInfo::MsgFishPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFishPlayerInfo)
}

void MsgFishPlayerInfo::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgFishPlayerInfo::MsgFishPlayerInfo(const MsgFishPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFishPlayerInfo)
}

void MsgFishPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  energy_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFishPlayerInfo::~MsgFishPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgFishPlayerInfo)
  SharedDtor();
}

void MsgFishPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
  }
}

void MsgFishPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFishPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFishPlayerInfo_descriptor_;
}

const MsgFishPlayerInfo& MsgFishPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5ffish_2eproto();
  return *default_instance_;
}

MsgFishPlayerInfo* MsgFishPlayerInfo::default_instance_ = NULL;

MsgFishPlayerInfo* MsgFishPlayerInfo::New() const {
  return new MsgFishPlayerInfo;
}

void MsgFishPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
    energy_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFishPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFishPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_energy;
        break;
      }

      // optional uint64 energy = 2;
      case 2: {
        if (tag == 16) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFishPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFishPlayerInfo)
  return false;
#undef DO_
}

void MsgFishPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFishPlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional uint64 energy = 2;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->energy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFishPlayerInfo)
}

::google::protobuf::uint8* MsgFishPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFishPlayerInfo)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional uint64 energy = 2;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->energy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFishPlayerInfo)
  return target;
}

int MsgFishPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional uint64 energy = 2;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->energy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFishPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFishPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFishPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFishPlayerInfo::MergeFrom(const MsgFishPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFishPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFishPlayerInfo::CopyFrom(const MsgFishPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFishPlayerInfo::IsInitialized() const {

  return true;
}

void MsgFishPlayerInfo::Swap(MsgFishPlayerInfo* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(energy_, other->energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFishPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFishPlayerInfo_descriptor_;
  metadata.reflection = MsgFishPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFishRoomInfo::kPlayerListFieldNumber;
const int MsgFishRoomInfo::kRoomIdFieldNumber;
const int MsgFishRoomInfo::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

MsgFishRoomInfo::MsgFishRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFishRoomInfo)
}

void MsgFishRoomInfo::InitAsDefaultInstance() {
  room_info_ = const_cast< ::MsgBaseRoomInfo*>(&::MsgBaseRoomInfo::default_instance());
}

MsgFishRoomInfo::MsgFishRoomInfo(const MsgFishRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFishRoomInfo)
}

void MsgFishRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = GOOGLE_ULONGLONG(0);
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFishRoomInfo::~MsgFishRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgFishRoomInfo)
  SharedDtor();
}

void MsgFishRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete room_info_;
  }
}

void MsgFishRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFishRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFishRoomInfo_descriptor_;
}

const MsgFishRoomInfo& MsgFishRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5ffish_2eproto();
  return *default_instance_;
}

MsgFishRoomInfo* MsgFishRoomInfo::default_instance_ = NULL;

MsgFishRoomInfo* MsgFishRoomInfo::New() const {
  return new MsgFishRoomInfo;
}

void MsgFishRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    room_id_ = GOOGLE_ULONGLONG(0);
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::MsgBaseRoomInfo::Clear();
    }
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFishRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFishRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgFishPlayerInfo player_list = 1;
      case 1: {
        if (tag == 10) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_info;
        break;
      }

      // optional .MsgBaseRoomInfo room_info = 3;
      case 3: {
        if (tag == 26) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFishRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFishRoomInfo)
  return false;
#undef DO_
}

void MsgFishRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFishRoomInfo)
  // repeated .MsgFishPlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }

  // optional uint64 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  // optional .MsgBaseRoomInfo room_info = 3;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFishRoomInfo)
}

::google::protobuf::uint8* MsgFishRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFishRoomInfo)
  // repeated .MsgFishPlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }

  // optional uint64 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  // optional .MsgBaseRoomInfo room_info = 3;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFishRoomInfo)
  return target;
}

int MsgFishRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional .MsgBaseRoomInfo room_info = 3;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  // repeated .MsgFishPlayerInfo player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFishRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFishRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFishRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFishRoomInfo::MergeFrom(const MsgFishRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::MsgBaseRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFishRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFishRoomInfo::CopyFrom(const MsgFishRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFishRoomInfo::IsInitialized() const {

  return true;
}

void MsgFishRoomInfo::Swap(MsgFishRoomInfo* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_info_, other->room_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFishRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFishRoomInfo_descriptor_;
  metadata.reflection = MsgFishRoomInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
