// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_pinsanzhang.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_pinsanzhang.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgPSZPlayerAddPour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZPlayerAddPour_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerFollowPour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerFollowPour_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPinSanZhangPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPinSanZhangPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPSZAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPSZSPlayerCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZSPlayerCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPSZSHandCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZSHandCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPSZSComparePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZSComparePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPSZSComparePlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZSComparePlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCompareLoseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCompareLoseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPinSanZhangRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPinSanZhangRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPSZGameOverInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZGameOverInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPinSanZhangShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPinSanZhangShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPSZIntegralCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPSZIntegralCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TPinSanZhangState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPSZPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPSZPlayerWik_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPinSanZhangCT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fpinsanzhang_2eproto() {
  protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_pinsanzhang.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPSZPlayerAddPour_descriptor_ = file->message_type(0);
  static const int MsgPSZPlayerAddPour_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZPlayerAddPour, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZPlayerAddPour, value_),
  };
  MsgPSZPlayerAddPour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZPlayerAddPour_descriptor_,
      MsgPSZPlayerAddPour::default_instance_,
      MsgPSZPlayerAddPour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZPlayerAddPour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZPlayerAddPour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZPlayerAddPour));
  MsgPlayerFollowPour_descriptor_ = file->message_type(1);
  static const int MsgPlayerFollowPour_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerFollowPour, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerFollowPour, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerFollowPour, room_multi_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerFollowPour, player_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerFollowPour, room_multi_current_),
  };
  MsgPlayerFollowPour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerFollowPour_descriptor_,
      MsgPlayerFollowPour::default_instance_,
      MsgPlayerFollowPour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerFollowPour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerFollowPour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerFollowPour));
  MsgPinSanZhangPlayer_descriptor_ = file->message_type(2);
  static const int MsgPinSanZhangPlayer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, hand_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, overinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, compare_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, showdown_score_),
  };
  MsgPinSanZhangPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPinSanZhangPlayer_descriptor_,
      MsgPinSanZhangPlayer::default_instance_,
      MsgPinSanZhangPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPinSanZhangPlayer));
  MsgPSZAction_descriptor_ = file->message_type(3);
  static const int MsgPSZAction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, total_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, current_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, current_huihe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, action_wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, player_info_),
  };
  MsgPSZAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZAction_descriptor_,
      MsgPSZAction::default_instance_,
      MsgPSZAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZAction));
  MsgPSZSPlayerCardInfo_descriptor_ = file->message_type(4);
  static const int MsgPSZSPlayerCardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSPlayerCardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSPlayerCardInfo, card_info_),
  };
  MsgPSZSPlayerCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZSPlayerCardInfo_descriptor_,
      MsgPSZSPlayerCardInfo::default_instance_,
      MsgPSZSPlayerCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSPlayerCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSPlayerCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZSPlayerCardInfo));
  MsgPSZSHandCardInfo_descriptor_ = file->message_type(5);
  static const int MsgPSZSHandCardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSHandCardInfo, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSHandCardInfo, card_type_),
  };
  MsgPSZSHandCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZSHandCardInfo_descriptor_,
      MsgPSZSHandCardInfo::default_instance_,
      MsgPSZSHandCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSHandCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSHandCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZSHandCardInfo));
  MsgPSZSComparePlayerInfo_descriptor_ = file->message_type(6);
  static const int MsgPSZSComparePlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSComparePlayerInfo, id_),
  };
  MsgPSZSComparePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZSComparePlayerInfo_descriptor_,
      MsgPSZSComparePlayerInfo::default_instance_,
      MsgPSZSComparePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSComparePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSComparePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZSComparePlayerInfo));
  MsgPSZSComparePlayerResult_descriptor_ = file->message_type(7);
  static const int MsgPSZSComparePlayerResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSComparePlayerResult, loseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSComparePlayerResult, room_pour_),
  };
  MsgPSZSComparePlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZSComparePlayerResult_descriptor_,
      MsgPSZSComparePlayerResult::default_instance_,
      MsgPSZSComparePlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSComparePlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZSComparePlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZSComparePlayerResult));
  MsgCompareLoseInfo_descriptor_ = file->message_type(8);
  static const int MsgCompareLoseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompareLoseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompareLoseInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompareLoseInfo, pour_),
  };
  MsgCompareLoseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCompareLoseInfo_descriptor_,
      MsgCompareLoseInfo::default_instance_,
      MsgCompareLoseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompareLoseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompareLoseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCompareLoseInfo));
  MsgPinSanZhangRoom_descriptor_ = file->message_type(9);
  static const int MsgPinSanZhangRoom_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, bank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, private_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, role_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, relieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, room_pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, room_muliti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, room_total_muliti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, room_current_huihe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, wiki_),
  };
  MsgPinSanZhangRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPinSanZhangRoom_descriptor_,
      MsgPinSanZhangRoom::default_instance_,
      MsgPinSanZhangRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPinSanZhangRoom));
  MsgPSZGameOverInfo_descriptor_ = file->message_type(10);
  static const int MsgPSZGameOverInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZGameOverInfo, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZGameOverInfo, lose_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZGameOverInfo, socre_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZGameOverInfo, giveup_count_),
  };
  MsgPSZGameOverInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZGameOverInfo_descriptor_,
      MsgPSZGameOverInfo::default_instance_,
      MsgPSZGameOverInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZGameOverInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZGameOverInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZGameOverInfo));
  MsgPinSanZhangShowDown_descriptor_ = file->message_type(11);
  static const int MsgPinSanZhangShowDown_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, game_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, integral_list_),
  };
  MsgPinSanZhangShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPinSanZhangShowDown_descriptor_,
      MsgPinSanZhangShowDown::default_instance_,
      MsgPinSanZhangShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPinSanZhangShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPinSanZhangShowDown));
  MsgPSZIntegralCount_descriptor_ = file->message_type(12);
  static const int MsgPSZIntegralCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZIntegralCount, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZIntegralCount, count_),
  };
  MsgPSZIntegralCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPSZIntegralCount_descriptor_,
      MsgPSZIntegralCount::default_instance_,
      MsgPSZIntegralCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZIntegralCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPSZIntegralCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPSZIntegralCount));
  TPinSanZhangState_descriptor_ = file->enum_type(0);
  TPSZPlayerState_descriptor_ = file->enum_type(1);
  TPSZPlayerWik_descriptor_ = file->enum_type(2);
  TPinSanZhangCT_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fpinsanzhang_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZPlayerAddPour_descriptor_, &MsgPSZPlayerAddPour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerFollowPour_descriptor_, &MsgPlayerFollowPour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPinSanZhangPlayer_descriptor_, &MsgPinSanZhangPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZAction_descriptor_, &MsgPSZAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZSPlayerCardInfo_descriptor_, &MsgPSZSPlayerCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZSHandCardInfo_descriptor_, &MsgPSZSHandCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZSComparePlayerInfo_descriptor_, &MsgPSZSComparePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZSComparePlayerResult_descriptor_, &MsgPSZSComparePlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCompareLoseInfo_descriptor_, &MsgCompareLoseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPinSanZhangRoom_descriptor_, &MsgPinSanZhangRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZGameOverInfo_descriptor_, &MsgPSZGameOverInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPinSanZhangShowDown_descriptor_, &MsgPinSanZhangShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPSZIntegralCount_descriptor_, &MsgPSZIntegralCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fpinsanzhang_2eproto() {
  delete MsgPSZPlayerAddPour::default_instance_;
  delete MsgPSZPlayerAddPour_reflection_;
  delete MsgPlayerFollowPour::default_instance_;
  delete MsgPlayerFollowPour_reflection_;
  delete MsgPinSanZhangPlayer::default_instance_;
  delete MsgPinSanZhangPlayer_reflection_;
  delete MsgPSZAction::default_instance_;
  delete MsgPSZAction_reflection_;
  delete MsgPSZSPlayerCardInfo::default_instance_;
  delete MsgPSZSPlayerCardInfo_reflection_;
  delete MsgPSZSHandCardInfo::default_instance_;
  delete MsgPSZSHandCardInfo_reflection_;
  delete MsgPSZSComparePlayerInfo::default_instance_;
  delete MsgPSZSComparePlayerInfo_reflection_;
  delete MsgPSZSComparePlayerResult::default_instance_;
  delete MsgPSZSComparePlayerResult_reflection_;
  delete MsgCompareLoseInfo::default_instance_;
  delete MsgCompareLoseInfo_reflection_;
  delete MsgPinSanZhangRoom::default_instance_;
  delete MsgPinSanZhangRoom_reflection_;
  delete MsgPSZGameOverInfo::default_instance_;
  delete MsgPSZGameOverInfo_reflection_;
  delete MsgPinSanZhangShowDown::default_instance_;
  delete MsgPinSanZhangShowDown_reflection_;
  delete MsgPSZIntegralCount::default_instance_;
  delete MsgPSZIntegralCount_reflection_;
}

void protobuf_AddDesc_msg_5fpinsanzhang_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025msg_pinsanzhang.proto\032\020public_pro.prot"
    "o\"0\n\023MsgPSZPlayerAddPour\022\n\n\002id\030\001 \001(\004\022\r\n\005"
    "value\030\002 \001(\r\"|\n\023MsgPlayerFollowPour\022\n\n\002id"
    "\030\001 \001(\004\022\r\n\005value\030\002 \001(\r\022\030\n\020room_multi_tota"
    "l\030\003 \001(\r\022\024\n\014player_multi\030\004 \001(\r\022\032\n\022room_mu"
    "lti_current\030\005 \001(\r\"\223\002\n\024MsgPinSanZhangPlay"
    "er\022#\n\013player_base\030\001 \001(\0132\016.MsgPlayerInfo\022"
    "\r\n\005state\030\002 \001(\r\022\'\n\thand_info\030\003 \001(\0132\024.MsgP"
    "SZSHandCardInfo\022\r\n\005seats\030\004 \001(\r\022\r\n\005score\030"
    "\005 \001(\003\022\020\n\010multiple\030\006 \001(\r\022%\n\010overInfo\030\007 \001("
    "\0132\023.MsgPSZGameOverInfo\022/\n\014compare_info\030\010"
    " \003(\0132\031.MsgPSZSComparePlayerInfo\022\026\n\016showd"
    "own_score\030\t \001(\003\"\244\001\n\014MsgPSZAction\022\021\n\tacti"
    "on_id\030\001 \001(\004\022\023\n\013total_multi\030\002 \001(\r\022\025\n\rcurr"
    "ent_multi\030\003 \001(\r\022\025\n\rcurrent_huihe\030\004 \001(\r\022\022"
    "\n\naction_wik\030\005 \001(\r\022*\n\013player_info\030\006 \003(\0132"
    "\025.MsgPinSanZhangPlayer\"L\n\025MsgPSZSPlayerC"
    "ardInfo\022\n\n\002id\030\001 \001(\003\022\'\n\tcard_info\030\002 \001(\0132\024"
    ".MsgPSZSHandCardInfo\";\n\023MsgPSZSHandCardI"
    "nfo\022\021\n\tcard_list\030\001 \003(\r\022\021\n\tcard_type\030\002 \001("
    "\r\"&\n\030MsgPSZSComparePlayerInfo\022\n\n\002id\030\001 \001("
    "\004\"V\n\032MsgPSZSComparePlayerResult\022%\n\010losei"
    "nfo\030\001 \003(\0132\023.MsgCompareLoseInfo\022\021\n\troom_p"
    "our\030\002 \001(\r\"=\n\022MsgCompareLoseInfo\022\n\n\002id\030\001 "
    "\001(\004\022\r\n\005state\030\002 \001(\r\022\014\n\004pour\030\003 \001(\r\"\302\003\n\022Msg"
    "PinSanZhangRoom\022&\n\nroom_state\030\001 \001(\0162\022.TP"
    "inSanZhangState\022\022\n\nstate_time\030\002 \001(\r\022*\n\013p"
    "layer_list\030\003 \003(\0132\025.MsgPinSanZhangPlayer\022"
    "\017\n\007bank_id\030\004 \001(\004\022\017\n\007room_id\030\005 \001(\004\022\022\n\ngam"
    "e_count\030\006 \001(\r\022+\n\014private_room\030\007 \001(\0132\025.Ms"
    "gCreatePrivateRoom\022$\n\trole_host\030\010 \001(\0132\021."
    "MsgRoleHostCount\022&\n\nrole_state\030\t \001(\0132\022.M"
    "sgRoleStateCount\022\017\n\007relieve\030\n \001(\010\022\025\n\rroo"
    "m_pay_type\030\013 \001(\r\022\023\n\013room_muliti\030\014 \001(\r\022\031\n"
    "\021room_total_muliti\030\r \001(\r\022\032\n\022room_current"
    "_huihe\030\016 \001(\r\022\021\n\taction_id\030\017 \001(\004\022\014\n\004wiki\030"
    "\020 \001(\r\"d\n\022MsgPSZGameOverInfo\022\021\n\twin_count"
    "\030\001 \001(\r\022\022\n\nlose_count\030\002 \001(\r\022\021\n\tsocre_max\030"
    "\003 \001(\r\022\024\n\014giveup_count\030\004 \001(\r\"\363\001\n\026MsgPinSa"
    "nZhangShowDown\022&\n\nroom_state\030\001 \001(\0162\022.TPi"
    "nSanZhangState\022\022\n\nstate_time\030\002 \001(\r\022*\n\013pl"
    "ayer_list\030\003 \003(\0132\025.MsgPinSanZhangPlayer\022\017"
    "\n\007room_id\030\004 \001(\004\022\022\n\ngame_count\030\005 \001(\r\022\014\n\004t"
    "ime\030\006 \001(\r\022\021\n\tgame_over\030\007 \001(\010\022+\n\rintegral"
    "_list\030\010 \003(\0132\024.MsgPSZIntegralCount\"4\n\023Msg"
    "PSZIntegralCount\022\016\n\006roleid\030\001 \001(\004\022\r\n\005coun"
    "t\030\002 \001(\r*\333\002\n\021TPinSanZhangState\022\031\n\025TPinSan"
    "ZhangStateWait\020\000\022\036\n\032TPinSanZhangCheckSta"
    "rtGame\020\001\022\031\n\025TPinSanZhangStartGame\020\002\022\034\n\030T"
    "PinSanZhangSendHandCard\020\003\022\033\n\027TPinSanZhan"
    "gWaitAddPour\020\004\022\026\n\022TPinSanZhangAction\020\005\022\033"
    "\n\027TPinSanZhangCompareCard\020\006\022!\n\035TPinSanZh"
    "angCompareCardFinish\020\007\022\034\n\030TPinSanZhangWa"
    "itShowDown\020\010\022\035\n\031TPinSanZhangStateShowDow"
    "n\020\t\022 \n\034TPinSanZhangStateRelieveRoom\020\n*\377\002"
    "\n\017TPSZPlayerState\022\023\n\017STATE_PSZ_READY\020\001\022\025"
    "\n\021STATE_PSZ_NEWROLE\020\002\022\030\n\024STATE_PSZ_ROOM_"
    "OWNER\020\004\022\025\n\021STATE_PSZ_RELIEVE\020\010\022\023\n\017STATE_"
    "PSZ_LEAVE\020\020\022\023\n\017STATE_PSZ_LIMIT\020 \022\025\n\021STAT"
    "E_PSZ_OFFLINE\020@\022\023\n\016STATE_PSZ_BANK\020\200\001\022\026\n\021"
    "STATE_PSZ_TUOGUAN\020\200\002\022\034\n\027STATE_PSZ_CONTIN"
    "UE_GAME\020\200\004\022\035\n\030STATE_PSZ_ALREADYSEECARD\020\200"
    "\010\022\031\n\024STATE_PSZ_GIVEUPCARD\020\200\020\022\027\n\022STATE_PS"
    "Z_LOSEROLE\020\200 \022\026\n\021STATE_PSZ_WINROLE\020\200@\022\030\n"
    "\022STATE_PSZ_SHOWCARD\020\200\200\001*\300\001\n\rTPSZPlayerWi"
    "k\022\020\n\014PSZ_WIK_NULL\020\001\022\022\n\016PSZ_WIK_GIVEUP\020\002\022"
    "\023\n\017PSZ_WIK_COMPARE\020\004\022\023\n\017PSZ_WIK_ADDPOUR\020"
    "\010\022\026\n\022PSZ_WIK_FOLLOWPOUR\020\020\022\033\n\027PSZ_WIK_AUT"
    "O_FOLLOWPOUR\020 \022\024\n\020PSZ_WIK_SHOWCARD\020@\022\024\n\017"
    "PSZ_WIK_SEECARD\020\200\001*\272\001\n\016TPinSanZhangCT\022\017\n"
    "\013CT_PSZ_NULL\020\000\022\022\n\016CT_PSZ_ERSANWU\020\001\022\016\n\nCT"
    "_PSZ_ONE\020\002\022\020\n\014CT_PSZ_DUIZI\020\003\022\021\n\rCT_PSZ_S"
    "HUNZI\020\004\022\021\n\rCT_PSZ_JINHUA\020\005\022\022\n\016CT_PSZ_SHU"
    "NJIN\020\006\022\020\n\014CT_PSZ_BAOZI\020\007\022\025\n\021CT_PSZ_MAXIN"
    "VALID\020\010", 2967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_pinsanzhang.proto", &protobuf_RegisterTypes);
  MsgPSZPlayerAddPour::default_instance_ = new MsgPSZPlayerAddPour();
  MsgPlayerFollowPour::default_instance_ = new MsgPlayerFollowPour();
  MsgPinSanZhangPlayer::default_instance_ = new MsgPinSanZhangPlayer();
  MsgPSZAction::default_instance_ = new MsgPSZAction();
  MsgPSZSPlayerCardInfo::default_instance_ = new MsgPSZSPlayerCardInfo();
  MsgPSZSHandCardInfo::default_instance_ = new MsgPSZSHandCardInfo();
  MsgPSZSComparePlayerInfo::default_instance_ = new MsgPSZSComparePlayerInfo();
  MsgPSZSComparePlayerResult::default_instance_ = new MsgPSZSComparePlayerResult();
  MsgCompareLoseInfo::default_instance_ = new MsgCompareLoseInfo();
  MsgPinSanZhangRoom::default_instance_ = new MsgPinSanZhangRoom();
  MsgPSZGameOverInfo::default_instance_ = new MsgPSZGameOverInfo();
  MsgPinSanZhangShowDown::default_instance_ = new MsgPinSanZhangShowDown();
  MsgPSZIntegralCount::default_instance_ = new MsgPSZIntegralCount();
  MsgPSZPlayerAddPour::default_instance_->InitAsDefaultInstance();
  MsgPlayerFollowPour::default_instance_->InitAsDefaultInstance();
  MsgPinSanZhangPlayer::default_instance_->InitAsDefaultInstance();
  MsgPSZAction::default_instance_->InitAsDefaultInstance();
  MsgPSZSPlayerCardInfo::default_instance_->InitAsDefaultInstance();
  MsgPSZSHandCardInfo::default_instance_->InitAsDefaultInstance();
  MsgPSZSComparePlayerInfo::default_instance_->InitAsDefaultInstance();
  MsgPSZSComparePlayerResult::default_instance_->InitAsDefaultInstance();
  MsgCompareLoseInfo::default_instance_->InitAsDefaultInstance();
  MsgPinSanZhangRoom::default_instance_->InitAsDefaultInstance();
  MsgPSZGameOverInfo::default_instance_->InitAsDefaultInstance();
  MsgPinSanZhangShowDown::default_instance_->InitAsDefaultInstance();
  MsgPSZIntegralCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fpinsanzhang_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fpinsanzhang_2eproto {
  StaticDescriptorInitializer_msg_5fpinsanzhang_2eproto() {
    protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  }
} static_descriptor_initializer_msg_5fpinsanzhang_2eproto_;
const ::google::protobuf::EnumDescriptor* TPinSanZhangState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPinSanZhangState_descriptor_;
}
bool TPinSanZhangState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPSZPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPSZPlayerState_descriptor_;
}
bool TPSZPlayerState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPSZPlayerWik_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPSZPlayerWik_descriptor_;
}
bool TPSZPlayerWik_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPinSanZhangCT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPinSanZhangCT_descriptor_;
}
bool TPinSanZhangCT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZPlayerAddPour::kIdFieldNumber;
const int MsgPSZPlayerAddPour::kValueFieldNumber;
#endif  // !_MSC_VER

MsgPSZPlayerAddPour::MsgPSZPlayerAddPour()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZPlayerAddPour)
}

void MsgPSZPlayerAddPour::InitAsDefaultInstance() {
}

MsgPSZPlayerAddPour::MsgPSZPlayerAddPour(const MsgPSZPlayerAddPour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZPlayerAddPour)
}

void MsgPSZPlayerAddPour::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZPlayerAddPour::~MsgPSZPlayerAddPour() {
  // @@protoc_insertion_point(destructor:MsgPSZPlayerAddPour)
  SharedDtor();
}

void MsgPSZPlayerAddPour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPSZPlayerAddPour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZPlayerAddPour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZPlayerAddPour_descriptor_;
}

const MsgPSZPlayerAddPour& MsgPSZPlayerAddPour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZPlayerAddPour* MsgPSZPlayerAddPour::default_instance_ = NULL;

MsgPSZPlayerAddPour* MsgPSZPlayerAddPour::New() const {
  return new MsgPSZPlayerAddPour;
}

void MsgPSZPlayerAddPour::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPSZPlayerAddPour*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZPlayerAddPour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZPlayerAddPour)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZPlayerAddPour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZPlayerAddPour)
  return false;
#undef DO_
}

void MsgPSZPlayerAddPour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZPlayerAddPour)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZPlayerAddPour)
}

::google::protobuf::uint8* MsgPSZPlayerAddPour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZPlayerAddPour)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZPlayerAddPour)
  return target;
}

int MsgPSZPlayerAddPour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZPlayerAddPour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZPlayerAddPour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZPlayerAddPour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZPlayerAddPour::MergeFrom(const MsgPSZPlayerAddPour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZPlayerAddPour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZPlayerAddPour::CopyFrom(const MsgPSZPlayerAddPour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZPlayerAddPour::IsInitialized() const {

  return true;
}

void MsgPSZPlayerAddPour::Swap(MsgPSZPlayerAddPour* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZPlayerAddPour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZPlayerAddPour_descriptor_;
  metadata.reflection = MsgPSZPlayerAddPour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerFollowPour::kIdFieldNumber;
const int MsgPlayerFollowPour::kValueFieldNumber;
const int MsgPlayerFollowPour::kRoomMultiTotalFieldNumber;
const int MsgPlayerFollowPour::kPlayerMultiFieldNumber;
const int MsgPlayerFollowPour::kRoomMultiCurrentFieldNumber;
#endif  // !_MSC_VER

MsgPlayerFollowPour::MsgPlayerFollowPour()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPlayerFollowPour)
}

void MsgPlayerFollowPour::InitAsDefaultInstance() {
}

MsgPlayerFollowPour::MsgPlayerFollowPour(const MsgPlayerFollowPour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPlayerFollowPour)
}

void MsgPlayerFollowPour::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  room_multi_total_ = 0u;
  player_multi_ = 0u;
  room_multi_current_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerFollowPour::~MsgPlayerFollowPour() {
  // @@protoc_insertion_point(destructor:MsgPlayerFollowPour)
  SharedDtor();
}

void MsgPlayerFollowPour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerFollowPour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerFollowPour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerFollowPour_descriptor_;
}

const MsgPlayerFollowPour& MsgPlayerFollowPour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPlayerFollowPour* MsgPlayerFollowPour::default_instance_ = NULL;

MsgPlayerFollowPour* MsgPlayerFollowPour::New() const {
  return new MsgPlayerFollowPour;
}

void MsgPlayerFollowPour::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPlayerFollowPour*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, room_multi_current_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerFollowPour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPlayerFollowPour)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_multi_total;
        break;
      }

      // optional uint32 room_multi_total = 3;
      case 3: {
        if (tag == 24) {
         parse_room_multi_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_multi_total_)));
          set_has_room_multi_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_multi;
        break;
      }

      // optional uint32 player_multi = 4;
      case 4: {
        if (tag == 32) {
         parse_player_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_multi_)));
          set_has_player_multi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_multi_current;
        break;
      }

      // optional uint32 room_multi_current = 5;
      case 5: {
        if (tag == 40) {
         parse_room_multi_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_multi_current_)));
          set_has_room_multi_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPlayerFollowPour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPlayerFollowPour)
  return false;
#undef DO_
}

void MsgPlayerFollowPour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPlayerFollowPour)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 room_multi_total = 3;
  if (has_room_multi_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_multi_total(), output);
  }

  // optional uint32 player_multi = 4;
  if (has_player_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_multi(), output);
  }

  // optional uint32 room_multi_current = 5;
  if (has_room_multi_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->room_multi_current(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPlayerFollowPour)
}

::google::protobuf::uint8* MsgPlayerFollowPour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerFollowPour)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 room_multi_total = 3;
  if (has_room_multi_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_multi_total(), target);
  }

  // optional uint32 player_multi = 4;
  if (has_player_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_multi(), target);
  }

  // optional uint32 room_multi_current = 5;
  if (has_room_multi_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->room_multi_current(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerFollowPour)
  return target;
}

int MsgPlayerFollowPour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 room_multi_total = 3;
    if (has_room_multi_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_multi_total());
    }

    // optional uint32 player_multi = 4;
    if (has_player_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_multi());
    }

    // optional uint32 room_multi_current = 5;
    if (has_room_multi_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_multi_current());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerFollowPour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerFollowPour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerFollowPour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerFollowPour::MergeFrom(const MsgPlayerFollowPour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_room_multi_total()) {
      set_room_multi_total(from.room_multi_total());
    }
    if (from.has_player_multi()) {
      set_player_multi(from.player_multi());
    }
    if (from.has_room_multi_current()) {
      set_room_multi_current(from.room_multi_current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerFollowPour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerFollowPour::CopyFrom(const MsgPlayerFollowPour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerFollowPour::IsInitialized() const {

  return true;
}

void MsgPlayerFollowPour::Swap(MsgPlayerFollowPour* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(room_multi_total_, other->room_multi_total_);
    std::swap(player_multi_, other->player_multi_);
    std::swap(room_multi_current_, other->room_multi_current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerFollowPour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerFollowPour_descriptor_;
  metadata.reflection = MsgPlayerFollowPour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPinSanZhangPlayer::kPlayerBaseFieldNumber;
const int MsgPinSanZhangPlayer::kStateFieldNumber;
const int MsgPinSanZhangPlayer::kHandInfoFieldNumber;
const int MsgPinSanZhangPlayer::kSeatsFieldNumber;
const int MsgPinSanZhangPlayer::kScoreFieldNumber;
const int MsgPinSanZhangPlayer::kMultipleFieldNumber;
const int MsgPinSanZhangPlayer::kOverInfoFieldNumber;
const int MsgPinSanZhangPlayer::kCompareInfoFieldNumber;
const int MsgPinSanZhangPlayer::kShowdownScoreFieldNumber;
#endif  // !_MSC_VER

MsgPinSanZhangPlayer::MsgPinSanZhangPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPinSanZhangPlayer)
}

void MsgPinSanZhangPlayer::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
  hand_info_ = const_cast< ::MsgPSZSHandCardInfo*>(&::MsgPSZSHandCardInfo::default_instance());
  overinfo_ = const_cast< ::MsgPSZGameOverInfo*>(&::MsgPSZGameOverInfo::default_instance());
}

MsgPinSanZhangPlayer::MsgPinSanZhangPlayer(const MsgPinSanZhangPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPinSanZhangPlayer)
}

void MsgPinSanZhangPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  state_ = 0u;
  hand_info_ = NULL;
  seats_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  multiple_ = 0u;
  overinfo_ = NULL;
  showdown_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPinSanZhangPlayer::~MsgPinSanZhangPlayer() {
  // @@protoc_insertion_point(destructor:MsgPinSanZhangPlayer)
  SharedDtor();
}

void MsgPinSanZhangPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
    delete hand_info_;
    delete overinfo_;
  }
}

void MsgPinSanZhangPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPinSanZhangPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPinSanZhangPlayer_descriptor_;
}

const MsgPinSanZhangPlayer& MsgPinSanZhangPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPinSanZhangPlayer* MsgPinSanZhangPlayer::default_instance_ = NULL;

MsgPinSanZhangPlayer* MsgPinSanZhangPlayer::New() const {
  return new MsgPinSanZhangPlayer;
}

void MsgPinSanZhangPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPinSanZhangPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(state_, score_);
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
    if (has_hand_info()) {
      if (hand_info_ != NULL) hand_info_->::MsgPSZSHandCardInfo::Clear();
    }
    multiple_ = 0u;
    if (has_overinfo()) {
      if (overinfo_ != NULL) overinfo_->::MsgPSZGameOverInfo::Clear();
    }
  }
  showdown_score_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  compare_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPinSanZhangPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPinSanZhangPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hand_info;
        break;
      }

      // optional .MsgPSZSHandCardInfo hand_info = 3;
      case 3: {
        if (tag == 26) {
         parse_hand_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hand_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seats;
        break;
      }

      // optional uint32 seats = 4;
      case 4: {
        if (tag == 32) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
          set_has_seats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int64 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_multiple;
        break;
      }

      // optional uint32 multiple = 6;
      case 6: {
        if (tag == 48) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_overInfo;
        break;
      }

      // optional .MsgPSZGameOverInfo overInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_overInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_compare_info;
        break;
      }

      // repeated .MsgPSZSComparePlayerInfo compare_info = 8;
      case 8: {
        if (tag == 66) {
         parse_compare_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compare_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_compare_info;
        if (input->ExpectTag(72)) goto parse_showdown_score;
        break;
      }

      // optional int64 showdown_score = 9;
      case 9: {
        if (tag == 72) {
         parse_showdown_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &showdown_score_)));
          set_has_showdown_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPinSanZhangPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPinSanZhangPlayer)
  return false;
#undef DO_
}

void MsgPinSanZhangPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPinSanZhangPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional .MsgPSZSHandCardInfo hand_info = 3;
  if (has_hand_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hand_info(), output);
  }

  // optional uint32 seats = 4;
  if (has_seats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seats(), output);
  }

  // optional int64 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->score(), output);
  }

  // optional uint32 multiple = 6;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->multiple(), output);
  }

  // optional .MsgPSZGameOverInfo overInfo = 7;
  if (has_overinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->overinfo(), output);
  }

  // repeated .MsgPSZSComparePlayerInfo compare_info = 8;
  for (int i = 0; i < this->compare_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->compare_info(i), output);
  }

  // optional int64 showdown_score = 9;
  if (has_showdown_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->showdown_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPinSanZhangPlayer)
}

::google::protobuf::uint8* MsgPinSanZhangPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPinSanZhangPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional .MsgPSZSHandCardInfo hand_info = 3;
  if (has_hand_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hand_info(), target);
  }

  // optional uint32 seats = 4;
  if (has_seats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seats(), target);
  }

  // optional int64 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->score(), target);
  }

  // optional uint32 multiple = 6;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->multiple(), target);
  }

  // optional .MsgPSZGameOverInfo overInfo = 7;
  if (has_overinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->overinfo(), target);
  }

  // repeated .MsgPSZSComparePlayerInfo compare_info = 8;
  for (int i = 0; i < this->compare_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->compare_info(i), target);
  }

  // optional int64 showdown_score = 9;
  if (has_showdown_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->showdown_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPinSanZhangPlayer)
  return target;
}

int MsgPinSanZhangPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional .MsgPSZSHandCardInfo hand_info = 3;
    if (has_hand_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hand_info());
    }

    // optional uint32 seats = 4;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional int64 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional uint32 multiple = 6;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // optional .MsgPSZGameOverInfo overInfo = 7;
    if (has_overinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 showdown_score = 9;
    if (has_showdown_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->showdown_score());
    }

  }
  // repeated .MsgPSZSComparePlayerInfo compare_info = 8;
  total_size += 1 * this->compare_info_size();
  for (int i = 0; i < this->compare_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compare_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPinSanZhangPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPinSanZhangPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPinSanZhangPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPinSanZhangPlayer::MergeFrom(const MsgPinSanZhangPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  compare_info_.MergeFrom(from.compare_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_info()) {
      mutable_hand_info()->::MsgPSZSHandCardInfo::MergeFrom(from.hand_info());
    }
    if (from.has_seats()) {
      set_seats(from.seats());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_overinfo()) {
      mutable_overinfo()->::MsgPSZGameOverInfo::MergeFrom(from.overinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showdown_score()) {
      set_showdown_score(from.showdown_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPinSanZhangPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPinSanZhangPlayer::CopyFrom(const MsgPinSanZhangPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPinSanZhangPlayer::IsInitialized() const {

  return true;
}

void MsgPinSanZhangPlayer::Swap(MsgPinSanZhangPlayer* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(state_, other->state_);
    std::swap(hand_info_, other->hand_info_);
    std::swap(seats_, other->seats_);
    std::swap(score_, other->score_);
    std::swap(multiple_, other->multiple_);
    std::swap(overinfo_, other->overinfo_);
    compare_info_.Swap(&other->compare_info_);
    std::swap(showdown_score_, other->showdown_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPinSanZhangPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPinSanZhangPlayer_descriptor_;
  metadata.reflection = MsgPinSanZhangPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZAction::kActionIdFieldNumber;
const int MsgPSZAction::kTotalMultiFieldNumber;
const int MsgPSZAction::kCurrentMultiFieldNumber;
const int MsgPSZAction::kCurrentHuiheFieldNumber;
const int MsgPSZAction::kActionWikFieldNumber;
const int MsgPSZAction::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

MsgPSZAction::MsgPSZAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZAction)
}

void MsgPSZAction::InitAsDefaultInstance() {
}

MsgPSZAction::MsgPSZAction(const MsgPSZAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZAction)
}

void MsgPSZAction::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = GOOGLE_ULONGLONG(0);
  total_multi_ = 0u;
  current_multi_ = 0u;
  current_huihe_ = 0u;
  action_wik_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZAction::~MsgPSZAction() {
  // @@protoc_insertion_point(destructor:MsgPSZAction)
  SharedDtor();
}

void MsgPSZAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPSZAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZAction_descriptor_;
}

const MsgPSZAction& MsgPSZAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZAction* MsgPSZAction::default_instance_ = NULL;

MsgPSZAction* MsgPSZAction::New() const {
  return new MsgPSZAction;
}

void MsgPSZAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPSZAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(action_id_, action_wik_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 action_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_multi;
        break;
      }

      // optional uint32 total_multi = 2;
      case 2: {
        if (tag == 16) {
         parse_total_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_multi_)));
          set_has_total_multi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_multi;
        break;
      }

      // optional uint32 current_multi = 3;
      case 3: {
        if (tag == 24) {
         parse_current_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_multi_)));
          set_has_current_multi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_current_huihe;
        break;
      }

      // optional uint32 current_huihe = 4;
      case 4: {
        if (tag == 32) {
         parse_current_huihe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_huihe_)));
          set_has_current_huihe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action_wik;
        break;
      }

      // optional uint32 action_wik = 5;
      case 5: {
        if (tag == 40) {
         parse_action_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_wik_)));
          set_has_action_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_info;
        break;
      }

      // repeated .MsgPinSanZhangPlayer player_info = 6;
      case 6: {
        if (tag == 50) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZAction)
  return false;
#undef DO_
}

void MsgPSZAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZAction)
  // optional uint64 action_id = 1;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->action_id(), output);
  }

  // optional uint32 total_multi = 2;
  if (has_total_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_multi(), output);
  }

  // optional uint32 current_multi = 3;
  if (has_current_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_multi(), output);
  }

  // optional uint32 current_huihe = 4;
  if (has_current_huihe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_huihe(), output);
  }

  // optional uint32 action_wik = 5;
  if (has_action_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->action_wik(), output);
  }

  // repeated .MsgPinSanZhangPlayer player_info = 6;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->player_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZAction)
}

::google::protobuf::uint8* MsgPSZAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZAction)
  // optional uint64 action_id = 1;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->action_id(), target);
  }

  // optional uint32 total_multi = 2;
  if (has_total_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_multi(), target);
  }

  // optional uint32 current_multi = 3;
  if (has_current_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_multi(), target);
  }

  // optional uint32 current_huihe = 4;
  if (has_current_huihe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_huihe(), target);
  }

  // optional uint32 action_wik = 5;
  if (has_action_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->action_wik(), target);
  }

  // repeated .MsgPinSanZhangPlayer player_info = 6;
  for (int i = 0; i < this->player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->player_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZAction)
  return target;
}

int MsgPSZAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional uint32 total_multi = 2;
    if (has_total_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_multi());
    }

    // optional uint32 current_multi = 3;
    if (has_current_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_multi());
    }

    // optional uint32 current_huihe = 4;
    if (has_current_huihe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_huihe());
    }

    // optional uint32 action_wik = 5;
    if (has_action_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_wik());
    }

  }
  // repeated .MsgPinSanZhangPlayer player_info = 6;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZAction::MergeFrom(const MsgPSZAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_total_multi()) {
      set_total_multi(from.total_multi());
    }
    if (from.has_current_multi()) {
      set_current_multi(from.current_multi());
    }
    if (from.has_current_huihe()) {
      set_current_huihe(from.current_huihe());
    }
    if (from.has_action_wik()) {
      set_action_wik(from.action_wik());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZAction::CopyFrom(const MsgPSZAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZAction::IsInitialized() const {

  return true;
}

void MsgPSZAction::Swap(MsgPSZAction* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(total_multi_, other->total_multi_);
    std::swap(current_multi_, other->current_multi_);
    std::swap(current_huihe_, other->current_huihe_);
    std::swap(action_wik_, other->action_wik_);
    player_info_.Swap(&other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZAction_descriptor_;
  metadata.reflection = MsgPSZAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZSPlayerCardInfo::kIdFieldNumber;
const int MsgPSZSPlayerCardInfo::kCardInfoFieldNumber;
#endif  // !_MSC_VER

MsgPSZSPlayerCardInfo::MsgPSZSPlayerCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZSPlayerCardInfo)
}

void MsgPSZSPlayerCardInfo::InitAsDefaultInstance() {
  card_info_ = const_cast< ::MsgPSZSHandCardInfo*>(&::MsgPSZSHandCardInfo::default_instance());
}

MsgPSZSPlayerCardInfo::MsgPSZSPlayerCardInfo(const MsgPSZSPlayerCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZSPlayerCardInfo)
}

void MsgPSZSPlayerCardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  card_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZSPlayerCardInfo::~MsgPSZSPlayerCardInfo() {
  // @@protoc_insertion_point(destructor:MsgPSZSPlayerCardInfo)
  SharedDtor();
}

void MsgPSZSPlayerCardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete card_info_;
  }
}

void MsgPSZSPlayerCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZSPlayerCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZSPlayerCardInfo_descriptor_;
}

const MsgPSZSPlayerCardInfo& MsgPSZSPlayerCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZSPlayerCardInfo* MsgPSZSPlayerCardInfo::default_instance_ = NULL;

MsgPSZSPlayerCardInfo* MsgPSZSPlayerCardInfo::New() const {
  return new MsgPSZSPlayerCardInfo;
}

void MsgPSZSPlayerCardInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_card_info()) {
      if (card_info_ != NULL) card_info_->::MsgPSZSHandCardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZSPlayerCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZSPlayerCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_card_info;
        break;
      }

      // optional .MsgPSZSHandCardInfo card_info = 2;
      case 2: {
        if (tag == 18) {
         parse_card_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZSPlayerCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZSPlayerCardInfo)
  return false;
#undef DO_
}

void MsgPSZSPlayerCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZSPlayerCardInfo)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .MsgPSZSHandCardInfo card_info = 2;
  if (has_card_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZSPlayerCardInfo)
}

::google::protobuf::uint8* MsgPSZSPlayerCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZSPlayerCardInfo)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .MsgPSZSHandCardInfo card_info = 2;
  if (has_card_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZSPlayerCardInfo)
  return target;
}

int MsgPSZSPlayerCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .MsgPSZSHandCardInfo card_info = 2;
    if (has_card_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZSPlayerCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZSPlayerCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZSPlayerCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZSPlayerCardInfo::MergeFrom(const MsgPSZSPlayerCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_card_info()) {
      mutable_card_info()->::MsgPSZSHandCardInfo::MergeFrom(from.card_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZSPlayerCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZSPlayerCardInfo::CopyFrom(const MsgPSZSPlayerCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZSPlayerCardInfo::IsInitialized() const {

  return true;
}

void MsgPSZSPlayerCardInfo::Swap(MsgPSZSPlayerCardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(card_info_, other->card_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZSPlayerCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZSPlayerCardInfo_descriptor_;
  metadata.reflection = MsgPSZSPlayerCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZSHandCardInfo::kCardListFieldNumber;
const int MsgPSZSHandCardInfo::kCardTypeFieldNumber;
#endif  // !_MSC_VER

MsgPSZSHandCardInfo::MsgPSZSHandCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZSHandCardInfo)
}

void MsgPSZSHandCardInfo::InitAsDefaultInstance() {
}

MsgPSZSHandCardInfo::MsgPSZSHandCardInfo(const MsgPSZSHandCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZSHandCardInfo)
}

void MsgPSZSHandCardInfo::SharedCtor() {
  _cached_size_ = 0;
  card_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZSHandCardInfo::~MsgPSZSHandCardInfo() {
  // @@protoc_insertion_point(destructor:MsgPSZSHandCardInfo)
  SharedDtor();
}

void MsgPSZSHandCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPSZSHandCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZSHandCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZSHandCardInfo_descriptor_;
}

const MsgPSZSHandCardInfo& MsgPSZSHandCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZSHandCardInfo* MsgPSZSHandCardInfo::default_instance_ = NULL;

MsgPSZSHandCardInfo* MsgPSZSHandCardInfo::New() const {
  return new MsgPSZSHandCardInfo;
}

void MsgPSZSHandCardInfo::Clear() {
  card_type_ = 0u;
  card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZSHandCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZSHandCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_list = 1;
      case 1: {
        if (tag == 8) {
         parse_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_card_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_card_list;
        if (input->ExpectTag(16)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 2;
      case 2: {
        if (tag == 16) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZSHandCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZSHandCardInfo)
  return false;
#undef DO_
}

void MsgPSZSHandCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZSHandCardInfo)
  // repeated uint32 card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->card_list(i), output);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZSHandCardInfo)
}

::google::protobuf::uint8* MsgPSZSHandCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZSHandCardInfo)
  // repeated uint32 card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->card_list(i), target);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZSHandCardInfo)
  return target;
}

int MsgPSZSHandCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 card_type = 2;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

  }
  // repeated uint32 card_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_list(i));
    }
    total_size += 1 * this->card_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZSHandCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZSHandCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZSHandCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZSHandCardInfo::MergeFrom(const MsgPSZSHandCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZSHandCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZSHandCardInfo::CopyFrom(const MsgPSZSHandCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZSHandCardInfo::IsInitialized() const {

  return true;
}

void MsgPSZSHandCardInfo::Swap(MsgPSZSHandCardInfo* other) {
  if (other != this) {
    card_list_.Swap(&other->card_list_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZSHandCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZSHandCardInfo_descriptor_;
  metadata.reflection = MsgPSZSHandCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZSComparePlayerInfo::kIdFieldNumber;
#endif  // !_MSC_VER

MsgPSZSComparePlayerInfo::MsgPSZSComparePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZSComparePlayerInfo)
}

void MsgPSZSComparePlayerInfo::InitAsDefaultInstance() {
}

MsgPSZSComparePlayerInfo::MsgPSZSComparePlayerInfo(const MsgPSZSComparePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZSComparePlayerInfo)
}

void MsgPSZSComparePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZSComparePlayerInfo::~MsgPSZSComparePlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgPSZSComparePlayerInfo)
  SharedDtor();
}

void MsgPSZSComparePlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPSZSComparePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZSComparePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZSComparePlayerInfo_descriptor_;
}

const MsgPSZSComparePlayerInfo& MsgPSZSComparePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZSComparePlayerInfo* MsgPSZSComparePlayerInfo::default_instance_ = NULL;

MsgPSZSComparePlayerInfo* MsgPSZSComparePlayerInfo::New() const {
  return new MsgPSZSComparePlayerInfo;
}

void MsgPSZSComparePlayerInfo::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZSComparePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZSComparePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZSComparePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZSComparePlayerInfo)
  return false;
#undef DO_
}

void MsgPSZSComparePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZSComparePlayerInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZSComparePlayerInfo)
}

::google::protobuf::uint8* MsgPSZSComparePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZSComparePlayerInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZSComparePlayerInfo)
  return target;
}

int MsgPSZSComparePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZSComparePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZSComparePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZSComparePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZSComparePlayerInfo::MergeFrom(const MsgPSZSComparePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZSComparePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZSComparePlayerInfo::CopyFrom(const MsgPSZSComparePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZSComparePlayerInfo::IsInitialized() const {

  return true;
}

void MsgPSZSComparePlayerInfo::Swap(MsgPSZSComparePlayerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZSComparePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZSComparePlayerInfo_descriptor_;
  metadata.reflection = MsgPSZSComparePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZSComparePlayerResult::kLoseinfoFieldNumber;
const int MsgPSZSComparePlayerResult::kRoomPourFieldNumber;
#endif  // !_MSC_VER

MsgPSZSComparePlayerResult::MsgPSZSComparePlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZSComparePlayerResult)
}

void MsgPSZSComparePlayerResult::InitAsDefaultInstance() {
}

MsgPSZSComparePlayerResult::MsgPSZSComparePlayerResult(const MsgPSZSComparePlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZSComparePlayerResult)
}

void MsgPSZSComparePlayerResult::SharedCtor() {
  _cached_size_ = 0;
  room_pour_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZSComparePlayerResult::~MsgPSZSComparePlayerResult() {
  // @@protoc_insertion_point(destructor:MsgPSZSComparePlayerResult)
  SharedDtor();
}

void MsgPSZSComparePlayerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPSZSComparePlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZSComparePlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZSComparePlayerResult_descriptor_;
}

const MsgPSZSComparePlayerResult& MsgPSZSComparePlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZSComparePlayerResult* MsgPSZSComparePlayerResult::default_instance_ = NULL;

MsgPSZSComparePlayerResult* MsgPSZSComparePlayerResult::New() const {
  return new MsgPSZSComparePlayerResult;
}

void MsgPSZSComparePlayerResult::Clear() {
  room_pour_ = 0u;
  loseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZSComparePlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZSComparePlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgCompareLoseInfo loseinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_loseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loseinfo;
        if (input->ExpectTag(16)) goto parse_room_pour;
        break;
      }

      // optional uint32 room_pour = 2;
      case 2: {
        if (tag == 16) {
         parse_room_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_pour_)));
          set_has_room_pour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZSComparePlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZSComparePlayerResult)
  return false;
#undef DO_
}

void MsgPSZSComparePlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZSComparePlayerResult)
  // repeated .MsgCompareLoseInfo loseinfo = 1;
  for (int i = 0; i < this->loseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loseinfo(i), output);
  }

  // optional uint32 room_pour = 2;
  if (has_room_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_pour(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZSComparePlayerResult)
}

::google::protobuf::uint8* MsgPSZSComparePlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZSComparePlayerResult)
  // repeated .MsgCompareLoseInfo loseinfo = 1;
  for (int i = 0; i < this->loseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loseinfo(i), target);
  }

  // optional uint32 room_pour = 2;
  if (has_room_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_pour(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZSComparePlayerResult)
  return target;
}

int MsgPSZSComparePlayerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 room_pour = 2;
    if (has_room_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_pour());
    }

  }
  // repeated .MsgCompareLoseInfo loseinfo = 1;
  total_size += 1 * this->loseinfo_size();
  for (int i = 0; i < this->loseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loseinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZSComparePlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZSComparePlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZSComparePlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZSComparePlayerResult::MergeFrom(const MsgPSZSComparePlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  loseinfo_.MergeFrom(from.loseinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_room_pour()) {
      set_room_pour(from.room_pour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZSComparePlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZSComparePlayerResult::CopyFrom(const MsgPSZSComparePlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZSComparePlayerResult::IsInitialized() const {

  return true;
}

void MsgPSZSComparePlayerResult::Swap(MsgPSZSComparePlayerResult* other) {
  if (other != this) {
    loseinfo_.Swap(&other->loseinfo_);
    std::swap(room_pour_, other->room_pour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZSComparePlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZSComparePlayerResult_descriptor_;
  metadata.reflection = MsgPSZSComparePlayerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCompareLoseInfo::kIdFieldNumber;
const int MsgCompareLoseInfo::kStateFieldNumber;
const int MsgCompareLoseInfo::kPourFieldNumber;
#endif  // !_MSC_VER

MsgCompareLoseInfo::MsgCompareLoseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCompareLoseInfo)
}

void MsgCompareLoseInfo::InitAsDefaultInstance() {
}

MsgCompareLoseInfo::MsgCompareLoseInfo(const MsgCompareLoseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCompareLoseInfo)
}

void MsgCompareLoseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  pour_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCompareLoseInfo::~MsgCompareLoseInfo() {
  // @@protoc_insertion_point(destructor:MsgCompareLoseInfo)
  SharedDtor();
}

void MsgCompareLoseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCompareLoseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCompareLoseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCompareLoseInfo_descriptor_;
}

const MsgCompareLoseInfo& MsgCompareLoseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgCompareLoseInfo* MsgCompareLoseInfo::default_instance_ = NULL;

MsgCompareLoseInfo* MsgCompareLoseInfo::New() const {
  return new MsgCompareLoseInfo;
}

void MsgCompareLoseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCompareLoseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, pour_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCompareLoseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCompareLoseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pour;
        break;
      }

      // optional uint32 pour = 3;
      case 3: {
        if (tag == 24) {
         parse_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pour_)));
          set_has_pour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCompareLoseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCompareLoseInfo)
  return false;
#undef DO_
}

void MsgCompareLoseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCompareLoseInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 pour = 3;
  if (has_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pour(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCompareLoseInfo)
}

::google::protobuf::uint8* MsgCompareLoseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCompareLoseInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 pour = 3;
  if (has_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pour(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCompareLoseInfo)
  return target;
}

int MsgCompareLoseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 pour = 3;
    if (has_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pour());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCompareLoseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCompareLoseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCompareLoseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCompareLoseInfo::MergeFrom(const MsgCompareLoseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_pour()) {
      set_pour(from.pour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCompareLoseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCompareLoseInfo::CopyFrom(const MsgCompareLoseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCompareLoseInfo::IsInitialized() const {

  return true;
}

void MsgCompareLoseInfo::Swap(MsgCompareLoseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(pour_, other->pour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCompareLoseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCompareLoseInfo_descriptor_;
  metadata.reflection = MsgCompareLoseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPinSanZhangRoom::kRoomStateFieldNumber;
const int MsgPinSanZhangRoom::kStateTimeFieldNumber;
const int MsgPinSanZhangRoom::kPlayerListFieldNumber;
const int MsgPinSanZhangRoom::kBankIdFieldNumber;
const int MsgPinSanZhangRoom::kRoomIdFieldNumber;
const int MsgPinSanZhangRoom::kGameCountFieldNumber;
const int MsgPinSanZhangRoom::kPrivateRoomFieldNumber;
const int MsgPinSanZhangRoom::kRoleHostFieldNumber;
const int MsgPinSanZhangRoom::kRoleStateFieldNumber;
const int MsgPinSanZhangRoom::kRelieveFieldNumber;
const int MsgPinSanZhangRoom::kRoomPayTypeFieldNumber;
const int MsgPinSanZhangRoom::kRoomMulitiFieldNumber;
const int MsgPinSanZhangRoom::kRoomTotalMulitiFieldNumber;
const int MsgPinSanZhangRoom::kRoomCurrentHuiheFieldNumber;
const int MsgPinSanZhangRoom::kActionIdFieldNumber;
const int MsgPinSanZhangRoom::kWikiFieldNumber;
#endif  // !_MSC_VER

MsgPinSanZhangRoom::MsgPinSanZhangRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPinSanZhangRoom)
}

void MsgPinSanZhangRoom::InitAsDefaultInstance() {
  private_room_ = const_cast< ::MsgCreatePrivateRoom*>(&::MsgCreatePrivateRoom::default_instance());
  role_host_ = const_cast< ::MsgRoleHostCount*>(&::MsgRoleHostCount::default_instance());
  role_state_ = const_cast< ::MsgRoleStateCount*>(&::MsgRoleStateCount::default_instance());
}

MsgPinSanZhangRoom::MsgPinSanZhangRoom(const MsgPinSanZhangRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPinSanZhangRoom)
}

void MsgPinSanZhangRoom::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  bank_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  private_room_ = NULL;
  role_host_ = NULL;
  role_state_ = NULL;
  relieve_ = false;
  room_pay_type_ = 0u;
  room_muliti_ = 0u;
  room_total_muliti_ = 0u;
  room_current_huihe_ = 0u;
  action_id_ = GOOGLE_ULONGLONG(0);
  wiki_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPinSanZhangRoom::~MsgPinSanZhangRoom() {
  // @@protoc_insertion_point(destructor:MsgPinSanZhangRoom)
  SharedDtor();
}

void MsgPinSanZhangRoom::SharedDtor() {
  if (this != default_instance_) {
    delete private_room_;
    delete role_host_;
    delete role_state_;
  }
}

void MsgPinSanZhangRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPinSanZhangRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPinSanZhangRoom_descriptor_;
}

const MsgPinSanZhangRoom& MsgPinSanZhangRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPinSanZhangRoom* MsgPinSanZhangRoom::default_instance_ = NULL;

MsgPinSanZhangRoom* MsgPinSanZhangRoom::New() const {
  return new MsgPinSanZhangRoom;
}

void MsgPinSanZhangRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPinSanZhangRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(room_state_, state_time_);
    ZR_(bank_id_, room_id_);
    game_count_ = 0u;
    if (has_private_room()) {
      if (private_room_ != NULL) private_room_->::MsgCreatePrivateRoom::Clear();
    }
    if (has_role_host()) {
      if (role_host_ != NULL) role_host_->::MsgRoleHostCount::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(room_pay_type_, wiki_);
    if (has_role_state()) {
      if (role_state_ != NULL) role_state_->::MsgRoleStateCount::Clear();
    }
    relieve_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPinSanZhangRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPinSanZhangRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TPinSanZhangState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TPinSanZhangState_IsValid(value)) {
            set_room_state(static_cast< ::TPinSanZhangState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgPinSanZhangPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_bank_id;
        break;
      }

      // optional uint64 bank_id = 4;
      case 4: {
        if (tag == 32) {
         parse_bank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_id_)));
          set_has_bank_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 5;
      case 5: {
        if (tag == 40) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 6;
      case 6: {
        if (tag == 48) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_private_room;
        break;
      }

      // optional .MsgCreatePrivateRoom private_room = 7;
      case 7: {
        if (tag == 58) {
         parse_private_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_host;
        break;
      }

      // optional .MsgRoleHostCount role_host = 8;
      case 8: {
        if (tag == 66) {
         parse_role_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_role_state;
        break;
      }

      // optional .MsgRoleStateCount role_state = 9;
      case 9: {
        if (tag == 74) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_relieve;
        break;
      }

      // optional bool relieve = 10;
      case 10: {
        if (tag == 80) {
         parse_relieve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relieve_)));
          set_has_relieve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_room_pay_type;
        break;
      }

      // optional uint32 room_pay_type = 11;
      case 11: {
        if (tag == 88) {
         parse_room_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_pay_type_)));
          set_has_room_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_room_muliti;
        break;
      }

      // optional uint32 room_muliti = 12;
      case 12: {
        if (tag == 96) {
         parse_room_muliti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_muliti_)));
          set_has_room_muliti();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_room_total_muliti;
        break;
      }

      // optional uint32 room_total_muliti = 13;
      case 13: {
        if (tag == 104) {
         parse_room_total_muliti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_total_muliti_)));
          set_has_room_total_muliti();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_room_current_huihe;
        break;
      }

      // optional uint32 room_current_huihe = 14;
      case 14: {
        if (tag == 112) {
         parse_room_current_huihe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_current_huihe_)));
          set_has_room_current_huihe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_action_id;
        break;
      }

      // optional uint64 action_id = 15;
      case 15: {
        if (tag == 120) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_wiki;
        break;
      }

      // optional uint32 wiki = 16;
      case 16: {
        if (tag == 128) {
         parse_wiki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiki_)));
          set_has_wiki();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPinSanZhangRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPinSanZhangRoom)
  return false;
#undef DO_
}

void MsgPinSanZhangRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPinSanZhangRoom)
  // optional .TPinSanZhangState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgPinSanZhangPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 bank_id = 4;
  if (has_bank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bank_id(), output);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_id(), output);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_count(), output);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->private_room(), output);
  }

  // optional .MsgRoleHostCount role_host = 8;
  if (has_role_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_host(), output);
  }

  // optional .MsgRoleStateCount role_state = 9;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_state(), output);
  }

  // optional bool relieve = 10;
  if (has_relieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->relieve(), output);
  }

  // optional uint32 room_pay_type = 11;
  if (has_room_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->room_pay_type(), output);
  }

  // optional uint32 room_muliti = 12;
  if (has_room_muliti()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->room_muliti(), output);
  }

  // optional uint32 room_total_muliti = 13;
  if (has_room_total_muliti()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->room_total_muliti(), output);
  }

  // optional uint32 room_current_huihe = 14;
  if (has_room_current_huihe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->room_current_huihe(), output);
  }

  // optional uint64 action_id = 15;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->action_id(), output);
  }

  // optional uint32 wiki = 16;
  if (has_wiki()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->wiki(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPinSanZhangRoom)
}

::google::protobuf::uint8* MsgPinSanZhangRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPinSanZhangRoom)
  // optional .TPinSanZhangState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgPinSanZhangPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 bank_id = 4;
  if (has_bank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bank_id(), target);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_id(), target);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_count(), target);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->private_room(), target);
  }

  // optional .MsgRoleHostCount role_host = 8;
  if (has_role_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_host(), target);
  }

  // optional .MsgRoleStateCount role_state = 9;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_state(), target);
  }

  // optional bool relieve = 10;
  if (has_relieve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->relieve(), target);
  }

  // optional uint32 room_pay_type = 11;
  if (has_room_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->room_pay_type(), target);
  }

  // optional uint32 room_muliti = 12;
  if (has_room_muliti()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->room_muliti(), target);
  }

  // optional uint32 room_total_muliti = 13;
  if (has_room_total_muliti()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->room_total_muliti(), target);
  }

  // optional uint32 room_current_huihe = 14;
  if (has_room_current_huihe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->room_current_huihe(), target);
  }

  // optional uint64 action_id = 15;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->action_id(), target);
  }

  // optional uint32 wiki = 16;
  if (has_wiki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->wiki(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPinSanZhangRoom)
  return target;
}

int MsgPinSanZhangRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TPinSanZhangState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 bank_id = 4;
    if (has_bank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_id());
    }

    // optional uint64 room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 6;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional .MsgCreatePrivateRoom private_room = 7;
    if (has_private_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_room());
    }

    // optional .MsgRoleHostCount role_host = 8;
    if (has_role_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_host());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgRoleStateCount role_state = 9;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_state());
    }

    // optional bool relieve = 10;
    if (has_relieve()) {
      total_size += 1 + 1;
    }

    // optional uint32 room_pay_type = 11;
    if (has_room_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_pay_type());
    }

    // optional uint32 room_muliti = 12;
    if (has_room_muliti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_muliti());
    }

    // optional uint32 room_total_muliti = 13;
    if (has_room_total_muliti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_total_muliti());
    }

    // optional uint32 room_current_huihe = 14;
    if (has_room_current_huihe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_current_huihe());
    }

    // optional uint64 action_id = 15;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional uint32 wiki = 16;
    if (has_wiki()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wiki());
    }

  }
  // repeated .MsgPinSanZhangPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPinSanZhangRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPinSanZhangRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPinSanZhangRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPinSanZhangRoom::MergeFrom(const MsgPinSanZhangRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_bank_id()) {
      set_bank_id(from.bank_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_private_room()) {
      mutable_private_room()->::MsgCreatePrivateRoom::MergeFrom(from.private_room());
    }
    if (from.has_role_host()) {
      mutable_role_host()->::MsgRoleHostCount::MergeFrom(from.role_host());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_state()) {
      mutable_role_state()->::MsgRoleStateCount::MergeFrom(from.role_state());
    }
    if (from.has_relieve()) {
      set_relieve(from.relieve());
    }
    if (from.has_room_pay_type()) {
      set_room_pay_type(from.room_pay_type());
    }
    if (from.has_room_muliti()) {
      set_room_muliti(from.room_muliti());
    }
    if (from.has_room_total_muliti()) {
      set_room_total_muliti(from.room_total_muliti());
    }
    if (from.has_room_current_huihe()) {
      set_room_current_huihe(from.room_current_huihe());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_wiki()) {
      set_wiki(from.wiki());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPinSanZhangRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPinSanZhangRoom::CopyFrom(const MsgPinSanZhangRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPinSanZhangRoom::IsInitialized() const {

  return true;
}

void MsgPinSanZhangRoom::Swap(MsgPinSanZhangRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(bank_id_, other->bank_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(private_room_, other->private_room_);
    std::swap(role_host_, other->role_host_);
    std::swap(role_state_, other->role_state_);
    std::swap(relieve_, other->relieve_);
    std::swap(room_pay_type_, other->room_pay_type_);
    std::swap(room_muliti_, other->room_muliti_);
    std::swap(room_total_muliti_, other->room_total_muliti_);
    std::swap(room_current_huihe_, other->room_current_huihe_);
    std::swap(action_id_, other->action_id_);
    std::swap(wiki_, other->wiki_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPinSanZhangRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPinSanZhangRoom_descriptor_;
  metadata.reflection = MsgPinSanZhangRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZGameOverInfo::kWinCountFieldNumber;
const int MsgPSZGameOverInfo::kLoseCountFieldNumber;
const int MsgPSZGameOverInfo::kSocreMaxFieldNumber;
const int MsgPSZGameOverInfo::kGiveupCountFieldNumber;
#endif  // !_MSC_VER

MsgPSZGameOverInfo::MsgPSZGameOverInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZGameOverInfo)
}

void MsgPSZGameOverInfo::InitAsDefaultInstance() {
}

MsgPSZGameOverInfo::MsgPSZGameOverInfo(const MsgPSZGameOverInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZGameOverInfo)
}

void MsgPSZGameOverInfo::SharedCtor() {
  _cached_size_ = 0;
  win_count_ = 0u;
  lose_count_ = 0u;
  socre_max_ = 0u;
  giveup_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZGameOverInfo::~MsgPSZGameOverInfo() {
  // @@protoc_insertion_point(destructor:MsgPSZGameOverInfo)
  SharedDtor();
}

void MsgPSZGameOverInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPSZGameOverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZGameOverInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZGameOverInfo_descriptor_;
}

const MsgPSZGameOverInfo& MsgPSZGameOverInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZGameOverInfo* MsgPSZGameOverInfo::default_instance_ = NULL;

MsgPSZGameOverInfo* MsgPSZGameOverInfo::New() const {
  return new MsgPSZGameOverInfo;
}

void MsgPSZGameOverInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPSZGameOverInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(win_count_, giveup_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZGameOverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZGameOverInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 win_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lose_count;
        break;
      }

      // optional uint32 lose_count = 2;
      case 2: {
        if (tag == 16) {
         parse_lose_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_count_)));
          set_has_lose_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_socre_max;
        break;
      }

      // optional uint32 socre_max = 3;
      case 3: {
        if (tag == 24) {
         parse_socre_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socre_max_)));
          set_has_socre_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_giveup_count;
        break;
      }

      // optional uint32 giveup_count = 4;
      case 4: {
        if (tag == 32) {
         parse_giveup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giveup_count_)));
          set_has_giveup_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZGameOverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZGameOverInfo)
  return false;
#undef DO_
}

void MsgPSZGameOverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZGameOverInfo)
  // optional uint32 win_count = 1;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->win_count(), output);
  }

  // optional uint32 lose_count = 2;
  if (has_lose_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lose_count(), output);
  }

  // optional uint32 socre_max = 3;
  if (has_socre_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->socre_max(), output);
  }

  // optional uint32 giveup_count = 4;
  if (has_giveup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->giveup_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZGameOverInfo)
}

::google::protobuf::uint8* MsgPSZGameOverInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZGameOverInfo)
  // optional uint32 win_count = 1;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->win_count(), target);
  }

  // optional uint32 lose_count = 2;
  if (has_lose_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lose_count(), target);
  }

  // optional uint32 socre_max = 3;
  if (has_socre_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->socre_max(), target);
  }

  // optional uint32 giveup_count = 4;
  if (has_giveup_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->giveup_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZGameOverInfo)
  return target;
}

int MsgPSZGameOverInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 win_count = 1;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional uint32 lose_count = 2;
    if (has_lose_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_count());
    }

    // optional uint32 socre_max = 3;
    if (has_socre_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socre_max());
    }

    // optional uint32 giveup_count = 4;
    if (has_giveup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giveup_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZGameOverInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZGameOverInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZGameOverInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZGameOverInfo::MergeFrom(const MsgPSZGameOverInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_lose_count()) {
      set_lose_count(from.lose_count());
    }
    if (from.has_socre_max()) {
      set_socre_max(from.socre_max());
    }
    if (from.has_giveup_count()) {
      set_giveup_count(from.giveup_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZGameOverInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZGameOverInfo::CopyFrom(const MsgPSZGameOverInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZGameOverInfo::IsInitialized() const {

  return true;
}

void MsgPSZGameOverInfo::Swap(MsgPSZGameOverInfo* other) {
  if (other != this) {
    std::swap(win_count_, other->win_count_);
    std::swap(lose_count_, other->lose_count_);
    std::swap(socre_max_, other->socre_max_);
    std::swap(giveup_count_, other->giveup_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZGameOverInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZGameOverInfo_descriptor_;
  metadata.reflection = MsgPSZGameOverInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPinSanZhangShowDown::kRoomStateFieldNumber;
const int MsgPinSanZhangShowDown::kStateTimeFieldNumber;
const int MsgPinSanZhangShowDown::kPlayerListFieldNumber;
const int MsgPinSanZhangShowDown::kRoomIdFieldNumber;
const int MsgPinSanZhangShowDown::kGameCountFieldNumber;
const int MsgPinSanZhangShowDown::kTimeFieldNumber;
const int MsgPinSanZhangShowDown::kGameOverFieldNumber;
const int MsgPinSanZhangShowDown::kIntegralListFieldNumber;
#endif  // !_MSC_VER

MsgPinSanZhangShowDown::MsgPinSanZhangShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPinSanZhangShowDown)
}

void MsgPinSanZhangShowDown::InitAsDefaultInstance() {
}

MsgPinSanZhangShowDown::MsgPinSanZhangShowDown(const MsgPinSanZhangShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPinSanZhangShowDown)
}

void MsgPinSanZhangShowDown::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  time_ = 0u;
  game_over_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPinSanZhangShowDown::~MsgPinSanZhangShowDown() {
  // @@protoc_insertion_point(destructor:MsgPinSanZhangShowDown)
  SharedDtor();
}

void MsgPinSanZhangShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPinSanZhangShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPinSanZhangShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPinSanZhangShowDown_descriptor_;
}

const MsgPinSanZhangShowDown& MsgPinSanZhangShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPinSanZhangShowDown* MsgPinSanZhangShowDown::default_instance_ = NULL;

MsgPinSanZhangShowDown* MsgPinSanZhangShowDown::New() const {
  return new MsgPinSanZhangShowDown;
}

void MsgPinSanZhangShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPinSanZhangShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(room_state_, state_time_);
    ZR_(room_id_, time_);
    game_over_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  integral_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPinSanZhangShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPinSanZhangShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TPinSanZhangState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TPinSanZhangState_IsValid(value)) {
            set_room_state(static_cast< ::TPinSanZhangState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgPinSanZhangPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 5;
      case 5: {
        if (tag == 40) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_game_over;
        break;
      }

      // optional bool game_over = 7;
      case 7: {
        if (tag == 56) {
         parse_game_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_over_)));
          set_has_game_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_integral_list;
        break;
      }

      // repeated .MsgPSZIntegralCount integral_list = 8;
      case 8: {
        if (tag == 66) {
         parse_integral_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_integral_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPinSanZhangShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPinSanZhangShowDown)
  return false;
#undef DO_
}

void MsgPinSanZhangShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPinSanZhangShowDown)
  // optional .TPinSanZhangState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgPinSanZhangPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->room_id(), output);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_count(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional bool game_over = 7;
  if (has_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->game_over(), output);
  }

  // repeated .MsgPSZIntegralCount integral_list = 8;
  for (int i = 0; i < this->integral_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->integral_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPinSanZhangShowDown)
}

::google::protobuf::uint8* MsgPinSanZhangShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPinSanZhangShowDown)
  // optional .TPinSanZhangState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgPinSanZhangPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_count(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional bool game_over = 7;
  if (has_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->game_over(), target);
  }

  // repeated .MsgPSZIntegralCount integral_list = 8;
  for (int i = 0; i < this->integral_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->integral_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPinSanZhangShowDown)
  return target;
}

int MsgPinSanZhangShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TPinSanZhangState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 5;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool game_over = 7;
    if (has_game_over()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MsgPinSanZhangPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgPSZIntegralCount integral_list = 8;
  total_size += 1 * this->integral_list_size();
  for (int i = 0; i < this->integral_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPinSanZhangShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPinSanZhangShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPinSanZhangShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPinSanZhangShowDown::MergeFrom(const MsgPinSanZhangShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  integral_list_.MergeFrom(from.integral_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_game_over()) {
      set_game_over(from.game_over());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPinSanZhangShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPinSanZhangShowDown::CopyFrom(const MsgPinSanZhangShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPinSanZhangShowDown::IsInitialized() const {

  return true;
}

void MsgPinSanZhangShowDown::Swap(MsgPinSanZhangShowDown* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(time_, other->time_);
    std::swap(game_over_, other->game_over_);
    integral_list_.Swap(&other->integral_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPinSanZhangShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPinSanZhangShowDown_descriptor_;
  metadata.reflection = MsgPinSanZhangShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPSZIntegralCount::kRoleidFieldNumber;
const int MsgPSZIntegralCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgPSZIntegralCount::MsgPSZIntegralCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPSZIntegralCount)
}

void MsgPSZIntegralCount::InitAsDefaultInstance() {
}

MsgPSZIntegralCount::MsgPSZIntegralCount(const MsgPSZIntegralCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPSZIntegralCount)
}

void MsgPSZIntegralCount::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPSZIntegralCount::~MsgPSZIntegralCount() {
  // @@protoc_insertion_point(destructor:MsgPSZIntegralCount)
  SharedDtor();
}

void MsgPSZIntegralCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPSZIntegralCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPSZIntegralCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPSZIntegralCount_descriptor_;
}

const MsgPSZIntegralCount& MsgPSZIntegralCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fpinsanzhang_2eproto();
  return *default_instance_;
}

MsgPSZIntegralCount* MsgPSZIntegralCount::default_instance_ = NULL;

MsgPSZIntegralCount* MsgPSZIntegralCount::New() const {
  return new MsgPSZIntegralCount;
}

void MsgPSZIntegralCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgPSZIntegralCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPSZIntegralCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPSZIntegralCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPSZIntegralCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPSZIntegralCount)
  return false;
#undef DO_
}

void MsgPSZIntegralCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPSZIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPSZIntegralCount)
}

::google::protobuf::uint8* MsgPSZIntegralCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPSZIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPSZIntegralCount)
  return target;
}

int MsgPSZIntegralCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPSZIntegralCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPSZIntegralCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPSZIntegralCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPSZIntegralCount::MergeFrom(const MsgPSZIntegralCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPSZIntegralCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPSZIntegralCount::CopyFrom(const MsgPSZIntegralCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPSZIntegralCount::IsInitialized() const {

  return true;
}

void MsgPSZIntegralCount::Swap(MsgPSZIntegralCount* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPSZIntegralCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPSZIntegralCount_descriptor_;
  metadata.reflection = MsgPSZIntegralCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
