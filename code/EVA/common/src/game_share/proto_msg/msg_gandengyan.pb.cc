// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_gandengyan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_gandengyan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgGanDengYanPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGanDengYanPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGanDengYanShowHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGanDengYanShowHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGanDengYanHandCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGanDengYanHandCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGanDengYanRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGanDengYanRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDYGameOverInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDYGameOverInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGanDengYanShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGanDengYanShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDYRoleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDYRoleState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDYRoleHost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDYRoleHost_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDYRoleHostCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDYRoleHostCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDYRoleStateCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDYRoleStateCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TGanDengYanState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGanDengYanPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGanDengYanDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGanDengYanCT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fgandengyan_2eproto() {
  protobuf_AddDesc_msg_5fgandengyan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_gandengyan.proto");
  GOOGLE_CHECK(file != NULL);
  MsgGanDengYanPlayer_descriptor_ = file->message_type(0);
  static const int MsgGanDengYanPlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, hand_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, showndown_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, overinfo_),
  };
  MsgGanDengYanPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGanDengYanPlayer_descriptor_,
      MsgGanDengYanPlayer::default_instance_,
      MsgGanDengYanPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGanDengYanPlayer));
  MsgGanDengYanShowHandCard_descriptor_ = file->message_type(1);
  static const int MsgGanDengYanShowHandCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowHandCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowHandCard, hand_info_),
  };
  MsgGanDengYanShowHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGanDengYanShowHandCard_descriptor_,
      MsgGanDengYanShowHandCard::default_instance_,
      MsgGanDengYanShowHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGanDengYanShowHandCard));
  MsgGanDengYanHandCardInfo_descriptor_ = file->message_type(2);
  static const int MsgGanDengYanHandCardInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, out_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, out_result_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, cur_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, cur_poolcard_),
  };
  MsgGanDengYanHandCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGanDengYanHandCardInfo_descriptor_,
      MsgGanDengYanHandCardInfo::default_instance_,
      MsgGanDengYanHandCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanHandCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGanDengYanHandCardInfo));
  MsgGanDengYanRoom_descriptor_ = file->message_type(3);
  static const int MsgGanDengYanRoom_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, bank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, private_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, role_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, relieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, cur_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, cur_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, cur_poolcard_),
  };
  MsgGanDengYanRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGanDengYanRoom_descriptor_,
      MsgGanDengYanRoom::default_instance_,
      MsgGanDengYanRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGanDengYanRoom));
  MsgGDYGameOverInfo_descriptor_ = file->message_type(4);
  static const int MsgGDYGameOverInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYGameOverInfo, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYGameOverInfo, lose_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYGameOverInfo, bank_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYGameOverInfo, win_max_score_),
  };
  MsgGDYGameOverInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDYGameOverInfo_descriptor_,
      MsgGDYGameOverInfo::default_instance_,
      MsgGDYGameOverInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYGameOverInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYGameOverInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDYGameOverInfo));
  MsgGanDengYanShowDown_descriptor_ = file->message_type(5);
  static const int MsgGanDengYanShowDown_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, game_over_),
  };
  MsgGanDengYanShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGanDengYanShowDown_descriptor_,
      MsgGanDengYanShowDown::default_instance_,
      MsgGanDengYanShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGanDengYanShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGanDengYanShowDown));
  MsgGDYRoleState_descriptor_ = file->message_type(6);
  static const int MsgGDYRoleState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleState, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleState, state_),
  };
  MsgGDYRoleState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDYRoleState_descriptor_,
      MsgGDYRoleState::default_instance_,
      MsgGDYRoleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDYRoleState));
  MsgGDYRoleHost_descriptor_ = file->message_type(7);
  static const int MsgGDYRoleHost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHost, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHost, host_id_),
  };
  MsgGDYRoleHost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDYRoleHost_descriptor_,
      MsgGDYRoleHost::default_instance_,
      MsgGDYRoleHost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDYRoleHost));
  MsgGDYRoleHostCount_descriptor_ = file->message_type(8);
  static const int MsgGDYRoleHostCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHostCount, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHostCount, host_list_),
  };
  MsgGDYRoleHostCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDYRoleHostCount_descriptor_,
      MsgGDYRoleHostCount::default_instance_,
      MsgGDYRoleHostCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHostCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleHostCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDYRoleHostCount));
  MsgGDYRoleStateCount_descriptor_ = file->message_type(9);
  static const int MsgGDYRoleStateCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleStateCount, role_state_),
  };
  MsgGDYRoleStateCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDYRoleStateCount_descriptor_,
      MsgGDYRoleStateCount::default_instance_,
      MsgGDYRoleStateCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleStateCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDYRoleStateCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDYRoleStateCount));
  TGanDengYanState_descriptor_ = file->enum_type(0);
  TGanDengYanPlayerState_descriptor_ = file->enum_type(1);
  TGanDengYanDirection_descriptor_ = file->enum_type(2);
  TGanDengYanCT_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fgandengyan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGanDengYanPlayer_descriptor_, &MsgGanDengYanPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGanDengYanShowHandCard_descriptor_, &MsgGanDengYanShowHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGanDengYanHandCardInfo_descriptor_, &MsgGanDengYanHandCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGanDengYanRoom_descriptor_, &MsgGanDengYanRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDYGameOverInfo_descriptor_, &MsgGDYGameOverInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGanDengYanShowDown_descriptor_, &MsgGanDengYanShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDYRoleState_descriptor_, &MsgGDYRoleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDYRoleHost_descriptor_, &MsgGDYRoleHost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDYRoleHostCount_descriptor_, &MsgGDYRoleHostCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDYRoleStateCount_descriptor_, &MsgGDYRoleStateCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fgandengyan_2eproto() {
  delete MsgGanDengYanPlayer::default_instance_;
  delete MsgGanDengYanPlayer_reflection_;
  delete MsgGanDengYanShowHandCard::default_instance_;
  delete MsgGanDengYanShowHandCard_reflection_;
  delete MsgGanDengYanHandCardInfo::default_instance_;
  delete MsgGanDengYanHandCardInfo_reflection_;
  delete MsgGanDengYanRoom::default_instance_;
  delete MsgGanDengYanRoom_reflection_;
  delete MsgGDYGameOverInfo::default_instance_;
  delete MsgGDYGameOverInfo_reflection_;
  delete MsgGanDengYanShowDown::default_instance_;
  delete MsgGanDengYanShowDown_reflection_;
  delete MsgGDYRoleState::default_instance_;
  delete MsgGDYRoleState_reflection_;
  delete MsgGDYRoleHost::default_instance_;
  delete MsgGDYRoleHost_reflection_;
  delete MsgGDYRoleHostCount::default_instance_;
  delete MsgGDYRoleHostCount_reflection_;
  delete MsgGDYRoleStateCount::default_instance_;
  delete MsgGDYRoleStateCount_reflection_;
}

void protobuf_AddDesc_msg_5fgandengyan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024msg_gandengyan.proto\032\020public_pro.proto"
    "\"\352\001\n\023MsgGanDengYanPlayer\022#\n\013player_base\030"
    "\001 \001(\0132\016.MsgPlayerInfo\022\r\n\005state\030\002 \001(\r\022\022\n\n"
    "hand_count\030\003 \001(\r\022-\n\thand_info\030\004 \001(\0132\032.Ms"
    "gGanDengYanHandCardInfo\022\r\n\005seats\030\005 \001(\r\022\r"
    "\n\005score\030\006 \001(\003\022\027\n\017showndown_score\030\007 \001(\003\022%"
    "\n\010OverInfo\030\010 \001(\0132\023.MsgGDYGameOverInfo\"V\n"
    "\031MsgGanDengYanShowHandCard\022\n\n\002id\030\001 \001(\004\022-"
    "\n\thand_info\030\002 \001(\0132\032.MsgGanDengYanHandCar"
    "dInfo\"\225\001\n\031MsgGanDengYanHandCardInfo\022\021\n\tc"
    "ard_list\030\001 \003(\r\022\021\n\tcard_type\030\002 \001(\r\022\020\n\010out"
    "_list\030\003 \003(\r\022\027\n\017out_result_list\030\004 \003(\r\022\021\n\t"
    "cur_times\030\005 \001(\r\022\024\n\014cur_poolcard\030\006 \001(\r\"\375\002"
    "\n\021MsgGanDengYanRoom\022%\n\nroom_state\030\001 \001(\0162"
    "\021.TGanDengYanState\022\022\n\nstate_time\030\002 \001(\r\022)"
    "\n\013player_list\030\003 \003(\0132\024.MsgGanDengYanPlaye"
    "r\022\017\n\007bank_id\030\004 \001(\004\022\017\n\007room_id\030\005 \001(\004\022\022\n\ng"
    "ame_count\030\006 \001(\r\022+\n\014private_room\030\007 \001(\0132\025."
    "MsgCreatePrivateRoom\022\'\n\trole_host\030\010 \001(\0132"
    "\024.MsgGDYRoleHostCount\022)\n\nrole_state\030\t \001("
    "\0132\025.MsgGDYRoleStateCount\022\017\n\007relieve\030\n \001("
    "\010\022\021\n\tcur_round\030\013 \001(\r\022\021\n\tcur_times\030\014 \001(\r\022"
    "\024\n\014cur_poolcard\030\r \001(\r\"f\n\022MsgGDYGameOverI"
    "nfo\022\021\n\twin_count\030\001 \001(\r\022\022\n\nlose_count\030\002 \001"
    "(\r\022\022\n\nbank_count\030\003 \001(\r\022\025\n\rwin_max_score\030"
    "\004 \001(\r\"\303\001\n\025MsgGanDengYanShowDown\022%\n\nroom_"
    "state\030\001 \001(\0162\021.TGanDengYanState\022\022\n\nstate_"
    "time\030\002 \001(\r\022)\n\013player_list\030\003 \003(\0132\024.MsgGan"
    "DengYanPlayer\022\017\n\007room_id\030\004 \001(\004\022\022\n\ngame_c"
    "ount\030\005 \001(\r\022\014\n\004time\030\006 \001(\r\022\021\n\tgame_over\030\007 "
    "\001(\010\"1\n\017MsgGDYRoleState\022\017\n\007role_id\030\001 \001(\004\022"
    "\r\n\005state\030\002 \001(\r\"2\n\016MsgGDYRoleHost\022\017\n\007role"
    "_id\030\001 \001(\004\022\017\n\007host_id\030\002 \001(\r\"M\n\023MsgGDYRole"
    "HostCount\022\022\n\nrole_state\030\001 \001(\r\022\"\n\thost_li"
    "st\030\002 \003(\0132\017.MsgGDYRoleHost\"<\n\024MsgGDYRoleS"
    "tateCount\022$\n\nrole_state\030\001 \003(\0132\020.MsgGDYRo"
    "leState*\372\001\n\020TGanDengYanState\022\030\n\024TGanDeng"
    "YanStateWait\020\000\022\035\n\031TGanDengYanCheckStartG"
    "ame\020\001\022\030\n\024TGanDengYanStartGame\020\002\022\033\n\027TGanD"
    "engYanSendHandCard\020\003\022\033\n\027TGanDengYanState"
    "OutCard\020\004\022\032\n\026TGanDengYanStateMoCard\020\005\022\034\n"
    "\030TGanDengYanStateShowDown\020\006\022\037\n\033TGanDengY"
    "anStateRelieveRoom\020\007*\311\002\n\026TGanDengYanPlay"
    "erState\022\023\n\017STATE_GDY_READY\020\001\022\025\n\021STATE_GD"
    "Y_NEWROLE\020\002\022\030\n\024STATE_GDY_ROOM_OWNER\020\004\022\025\n"
    "\021STATE_GDY_RELIEVE\020\010\022\023\n\017STATE_GDY_LEAVE\020"
    "\020\022\023\n\017STATE_GDY_LIMIT\020 \022\025\n\021STATE_GDY_OFFL"
    "INE\020@\022\023\n\016STATE_GDY_BANK\020\200\001\022\026\n\021STATE_GDY_"
    "TUOGUAN\020\200\002\022\026\n\021STATE_GDY_OUTCARD\020\200\004\022\025\n\020ST"
    "ATE_GDY_MOCARD\020\200\010\022\027\n\022STATE_GDY_PASSCARD\020"
    "\200\020\022\034\n\027STATE_GDY_CONTINUE_GAME\020\200 *\267\001\n\024TGa"
    "nDengYanDirection\022\031\n\025GANDENGYAN_DIREC_NU"
    "LL\020\000\022\030\n\024GANDENGYAN_DIREC_ONE\020\001\022\030\n\024GANDEN"
    "GYAN_DIREC_TWO\020\002\022\032\n\026GANDENGYAN_DIREC_THR"
    "EE\020\003\022\031\n\025GANDENGYAN_DIREC_FOUR\020\004\022\031\n\025GANDE"
    "NGYAN_DIREC_FIVE\020\005*\260\001\n\rTGanDengYanCT\022\023\n\017"
    "CT_GDY_DANZHANG\020\000\022\020\n\014CT_GDY_DUIZI\020\001\022\022\n\016C"
    "T_GDY_LIANDUI\020\002\022\023\n\017CT_GDY_SANZHANG\020\003\022\021\n\r"
    "CT_GDY_SHUNZI\020\004\022\021\n\rCT_GDY_ZHADAN\020\005\022\022\n\016CT"
    "_GDY_WANGZHA\020\006\022\025\n\021CT_GDY_MAXINVALID\020\007", 2397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_gandengyan.proto", &protobuf_RegisterTypes);
  MsgGanDengYanPlayer::default_instance_ = new MsgGanDengYanPlayer();
  MsgGanDengYanShowHandCard::default_instance_ = new MsgGanDengYanShowHandCard();
  MsgGanDengYanHandCardInfo::default_instance_ = new MsgGanDengYanHandCardInfo();
  MsgGanDengYanRoom::default_instance_ = new MsgGanDengYanRoom();
  MsgGDYGameOverInfo::default_instance_ = new MsgGDYGameOverInfo();
  MsgGanDengYanShowDown::default_instance_ = new MsgGanDengYanShowDown();
  MsgGDYRoleState::default_instance_ = new MsgGDYRoleState();
  MsgGDYRoleHost::default_instance_ = new MsgGDYRoleHost();
  MsgGDYRoleHostCount::default_instance_ = new MsgGDYRoleHostCount();
  MsgGDYRoleStateCount::default_instance_ = new MsgGDYRoleStateCount();
  MsgGanDengYanPlayer::default_instance_->InitAsDefaultInstance();
  MsgGanDengYanShowHandCard::default_instance_->InitAsDefaultInstance();
  MsgGanDengYanHandCardInfo::default_instance_->InitAsDefaultInstance();
  MsgGanDengYanRoom::default_instance_->InitAsDefaultInstance();
  MsgGDYGameOverInfo::default_instance_->InitAsDefaultInstance();
  MsgGanDengYanShowDown::default_instance_->InitAsDefaultInstance();
  MsgGDYRoleState::default_instance_->InitAsDefaultInstance();
  MsgGDYRoleHost::default_instance_->InitAsDefaultInstance();
  MsgGDYRoleHostCount::default_instance_->InitAsDefaultInstance();
  MsgGDYRoleStateCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fgandengyan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fgandengyan_2eproto {
  StaticDescriptorInitializer_msg_5fgandengyan_2eproto() {
    protobuf_AddDesc_msg_5fgandengyan_2eproto();
  }
} static_descriptor_initializer_msg_5fgandengyan_2eproto_;
const ::google::protobuf::EnumDescriptor* TGanDengYanState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGanDengYanState_descriptor_;
}
bool TGanDengYanState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGanDengYanPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGanDengYanPlayerState_descriptor_;
}
bool TGanDengYanPlayerState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGanDengYanDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGanDengYanDirection_descriptor_;
}
bool TGanDengYanDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGanDengYanCT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGanDengYanCT_descriptor_;
}
bool TGanDengYanCT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGanDengYanPlayer::kPlayerBaseFieldNumber;
const int MsgGanDengYanPlayer::kStateFieldNumber;
const int MsgGanDengYanPlayer::kHandCountFieldNumber;
const int MsgGanDengYanPlayer::kHandInfoFieldNumber;
const int MsgGanDengYanPlayer::kSeatsFieldNumber;
const int MsgGanDengYanPlayer::kScoreFieldNumber;
const int MsgGanDengYanPlayer::kShowndownScoreFieldNumber;
const int MsgGanDengYanPlayer::kOverInfoFieldNumber;
#endif  // !_MSC_VER

MsgGanDengYanPlayer::MsgGanDengYanPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGanDengYanPlayer)
}

void MsgGanDengYanPlayer::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
  hand_info_ = const_cast< ::MsgGanDengYanHandCardInfo*>(&::MsgGanDengYanHandCardInfo::default_instance());
  overinfo_ = const_cast< ::MsgGDYGameOverInfo*>(&::MsgGDYGameOverInfo::default_instance());
}

MsgGanDengYanPlayer::MsgGanDengYanPlayer(const MsgGanDengYanPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGanDengYanPlayer)
}

void MsgGanDengYanPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  state_ = 0u;
  hand_count_ = 0u;
  hand_info_ = NULL;
  seats_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  showndown_score_ = GOOGLE_LONGLONG(0);
  overinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGanDengYanPlayer::~MsgGanDengYanPlayer() {
  // @@protoc_insertion_point(destructor:MsgGanDengYanPlayer)
  SharedDtor();
}

void MsgGanDengYanPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
    delete hand_info_;
    delete overinfo_;
  }
}

void MsgGanDengYanPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGanDengYanPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGanDengYanPlayer_descriptor_;
}

const MsgGanDengYanPlayer& MsgGanDengYanPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGanDengYanPlayer* MsgGanDengYanPlayer::default_instance_ = NULL;

MsgGanDengYanPlayer* MsgGanDengYanPlayer::New() const {
  return new MsgGanDengYanPlayer;
}

void MsgGanDengYanPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGanDengYanPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, hand_count_);
    ZR_(score_, showndown_score_);
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
    if (has_hand_info()) {
      if (hand_info_ != NULL) hand_info_->::MsgGanDengYanHandCardInfo::Clear();
    }
    seats_ = 0u;
    if (has_overinfo()) {
      if (overinfo_ != NULL) overinfo_->::MsgGDYGameOverInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGanDengYanPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGanDengYanPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hand_info;
        break;
      }

      // optional .MsgGanDengYanHandCardInfo hand_info = 4;
      case 4: {
        if (tag == 34) {
         parse_hand_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hand_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seats;
        break;
      }

      // optional uint32 seats = 5;
      case 5: {
        if (tag == 40) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
          set_has_seats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int64 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_showndown_score;
        break;
      }

      // optional int64 showndown_score = 7;
      case 7: {
        if (tag == 56) {
         parse_showndown_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &showndown_score_)));
          set_has_showndown_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OverInfo;
        break;
      }

      // optional .MsgGDYGameOverInfo OverInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_OverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGanDengYanPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGanDengYanPlayer)
  return false;
#undef DO_
}

void MsgGanDengYanPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGanDengYanPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_count(), output);
  }

  // optional .MsgGanDengYanHandCardInfo hand_info = 4;
  if (has_hand_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hand_info(), output);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seats(), output);
  }

  // optional int64 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->score(), output);
  }

  // optional int64 showndown_score = 7;
  if (has_showndown_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->showndown_score(), output);
  }

  // optional .MsgGDYGameOverInfo OverInfo = 8;
  if (has_overinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->overinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGanDengYanPlayer)
}

::google::protobuf::uint8* MsgGanDengYanPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGanDengYanPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_count(), target);
  }

  // optional .MsgGanDengYanHandCardInfo hand_info = 4;
  if (has_hand_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hand_info(), target);
  }

  // optional uint32 seats = 5;
  if (has_seats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seats(), target);
  }

  // optional int64 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->score(), target);
  }

  // optional int64 showndown_score = 7;
  if (has_showndown_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->showndown_score(), target);
  }

  // optional .MsgGDYGameOverInfo OverInfo = 8;
  if (has_overinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->overinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGanDengYanPlayer)
  return target;
}

int MsgGanDengYanPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 hand_count = 3;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional .MsgGanDengYanHandCardInfo hand_info = 4;
    if (has_hand_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hand_info());
    }

    // optional uint32 seats = 5;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional int64 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 showndown_score = 7;
    if (has_showndown_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->showndown_score());
    }

    // optional .MsgGDYGameOverInfo OverInfo = 8;
    if (has_overinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGanDengYanPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGanDengYanPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGanDengYanPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGanDengYanPlayer::MergeFrom(const MsgGanDengYanPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_hand_info()) {
      mutable_hand_info()->::MsgGanDengYanHandCardInfo::MergeFrom(from.hand_info());
    }
    if (from.has_seats()) {
      set_seats(from.seats());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_showndown_score()) {
      set_showndown_score(from.showndown_score());
    }
    if (from.has_overinfo()) {
      mutable_overinfo()->::MsgGDYGameOverInfo::MergeFrom(from.overinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGanDengYanPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGanDengYanPlayer::CopyFrom(const MsgGanDengYanPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGanDengYanPlayer::IsInitialized() const {

  return true;
}

void MsgGanDengYanPlayer::Swap(MsgGanDengYanPlayer* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(state_, other->state_);
    std::swap(hand_count_, other->hand_count_);
    std::swap(hand_info_, other->hand_info_);
    std::swap(seats_, other->seats_);
    std::swap(score_, other->score_);
    std::swap(showndown_score_, other->showndown_score_);
    std::swap(overinfo_, other->overinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGanDengYanPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGanDengYanPlayer_descriptor_;
  metadata.reflection = MsgGanDengYanPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGanDengYanShowHandCard::kIdFieldNumber;
const int MsgGanDengYanShowHandCard::kHandInfoFieldNumber;
#endif  // !_MSC_VER

MsgGanDengYanShowHandCard::MsgGanDengYanShowHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGanDengYanShowHandCard)
}

void MsgGanDengYanShowHandCard::InitAsDefaultInstance() {
  hand_info_ = const_cast< ::MsgGanDengYanHandCardInfo*>(&::MsgGanDengYanHandCardInfo::default_instance());
}

MsgGanDengYanShowHandCard::MsgGanDengYanShowHandCard(const MsgGanDengYanShowHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGanDengYanShowHandCard)
}

void MsgGanDengYanShowHandCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  hand_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGanDengYanShowHandCard::~MsgGanDengYanShowHandCard() {
  // @@protoc_insertion_point(destructor:MsgGanDengYanShowHandCard)
  SharedDtor();
}

void MsgGanDengYanShowHandCard::SharedDtor() {
  if (this != default_instance_) {
    delete hand_info_;
  }
}

void MsgGanDengYanShowHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGanDengYanShowHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGanDengYanShowHandCard_descriptor_;
}

const MsgGanDengYanShowHandCard& MsgGanDengYanShowHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGanDengYanShowHandCard* MsgGanDengYanShowHandCard::default_instance_ = NULL;

MsgGanDengYanShowHandCard* MsgGanDengYanShowHandCard::New() const {
  return new MsgGanDengYanShowHandCard;
}

void MsgGanDengYanShowHandCard::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_hand_info()) {
      if (hand_info_ != NULL) hand_info_->::MsgGanDengYanHandCardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGanDengYanShowHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGanDengYanShowHandCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hand_info;
        break;
      }

      // optional .MsgGanDengYanHandCardInfo hand_info = 2;
      case 2: {
        if (tag == 18) {
         parse_hand_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hand_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGanDengYanShowHandCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGanDengYanShowHandCard)
  return false;
#undef DO_
}

void MsgGanDengYanShowHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGanDengYanShowHandCard)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .MsgGanDengYanHandCardInfo hand_info = 2;
  if (has_hand_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hand_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGanDengYanShowHandCard)
}

::google::protobuf::uint8* MsgGanDengYanShowHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGanDengYanShowHandCard)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .MsgGanDengYanHandCardInfo hand_info = 2;
  if (has_hand_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hand_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGanDengYanShowHandCard)
  return target;
}

int MsgGanDengYanShowHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .MsgGanDengYanHandCardInfo hand_info = 2;
    if (has_hand_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hand_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGanDengYanShowHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGanDengYanShowHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGanDengYanShowHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGanDengYanShowHandCard::MergeFrom(const MsgGanDengYanShowHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hand_info()) {
      mutable_hand_info()->::MsgGanDengYanHandCardInfo::MergeFrom(from.hand_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGanDengYanShowHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGanDengYanShowHandCard::CopyFrom(const MsgGanDengYanShowHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGanDengYanShowHandCard::IsInitialized() const {

  return true;
}

void MsgGanDengYanShowHandCard::Swap(MsgGanDengYanShowHandCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hand_info_, other->hand_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGanDengYanShowHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGanDengYanShowHandCard_descriptor_;
  metadata.reflection = MsgGanDengYanShowHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGanDengYanHandCardInfo::kCardListFieldNumber;
const int MsgGanDengYanHandCardInfo::kCardTypeFieldNumber;
const int MsgGanDengYanHandCardInfo::kOutListFieldNumber;
const int MsgGanDengYanHandCardInfo::kOutResultListFieldNumber;
const int MsgGanDengYanHandCardInfo::kCurTimesFieldNumber;
const int MsgGanDengYanHandCardInfo::kCurPoolcardFieldNumber;
#endif  // !_MSC_VER

MsgGanDengYanHandCardInfo::MsgGanDengYanHandCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGanDengYanHandCardInfo)
}

void MsgGanDengYanHandCardInfo::InitAsDefaultInstance() {
}

MsgGanDengYanHandCardInfo::MsgGanDengYanHandCardInfo(const MsgGanDengYanHandCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGanDengYanHandCardInfo)
}

void MsgGanDengYanHandCardInfo::SharedCtor() {
  _cached_size_ = 0;
  card_type_ = 0u;
  cur_times_ = 0u;
  cur_poolcard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGanDengYanHandCardInfo::~MsgGanDengYanHandCardInfo() {
  // @@protoc_insertion_point(destructor:MsgGanDengYanHandCardInfo)
  SharedDtor();
}

void MsgGanDengYanHandCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGanDengYanHandCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGanDengYanHandCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGanDengYanHandCardInfo_descriptor_;
}

const MsgGanDengYanHandCardInfo& MsgGanDengYanHandCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGanDengYanHandCardInfo* MsgGanDengYanHandCardInfo::default_instance_ = NULL;

MsgGanDengYanHandCardInfo* MsgGanDengYanHandCardInfo::New() const {
  return new MsgGanDengYanHandCardInfo;
}

void MsgGanDengYanHandCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGanDengYanHandCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 50) {
    ZR_(card_type_, cur_times_);
    cur_poolcard_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_list_.Clear();
  out_list_.Clear();
  out_result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGanDengYanHandCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGanDengYanHandCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_list = 1;
      case 1: {
        if (tag == 8) {
         parse_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_card_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_card_list;
        if (input->ExpectTag(16)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 2;
      case 2: {
        if (tag == 16) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_out_list;
        break;
      }

      // repeated uint32 out_list = 3;
      case 3: {
        if (tag == 24) {
         parse_out_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_out_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_out_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_out_list;
        if (input->ExpectTag(32)) goto parse_out_result_list;
        break;
      }

      // repeated uint32 out_result_list = 4;
      case 4: {
        if (tag == 32) {
         parse_out_result_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_out_result_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_out_result_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_out_result_list;
        if (input->ExpectTag(40)) goto parse_cur_times;
        break;
      }

      // optional uint32 cur_times = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_times_)));
          set_has_cur_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_poolcard;
        break;
      }

      // optional uint32 cur_poolcard = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_poolcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_poolcard_)));
          set_has_cur_poolcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGanDengYanHandCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGanDengYanHandCardInfo)
  return false;
#undef DO_
}

void MsgGanDengYanHandCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGanDengYanHandCardInfo)
  // repeated uint32 card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->card_list(i), output);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_type(), output);
  }

  // repeated uint32 out_list = 3;
  for (int i = 0; i < this->out_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->out_list(i), output);
  }

  // repeated uint32 out_result_list = 4;
  for (int i = 0; i < this->out_result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->out_result_list(i), output);
  }

  // optional uint32 cur_times = 5;
  if (has_cur_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_times(), output);
  }

  // optional uint32 cur_poolcard = 6;
  if (has_cur_poolcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_poolcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGanDengYanHandCardInfo)
}

::google::protobuf::uint8* MsgGanDengYanHandCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGanDengYanHandCardInfo)
  // repeated uint32 card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->card_list(i), target);
  }

  // optional uint32 card_type = 2;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_type(), target);
  }

  // repeated uint32 out_list = 3;
  for (int i = 0; i < this->out_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->out_list(i), target);
  }

  // repeated uint32 out_result_list = 4;
  for (int i = 0; i < this->out_result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->out_result_list(i), target);
  }

  // optional uint32 cur_times = 5;
  if (has_cur_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_times(), target);
  }

  // optional uint32 cur_poolcard = 6;
  if (has_cur_poolcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_poolcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGanDengYanHandCardInfo)
  return target;
}

int MsgGanDengYanHandCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 card_type = 2;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

    // optional uint32 cur_times = 5;
    if (has_cur_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_times());
    }

    // optional uint32 cur_poolcard = 6;
    if (has_cur_poolcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_poolcard());
    }

  }
  // repeated uint32 card_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_list(i));
    }
    total_size += 1 * this->card_list_size() + data_size;
  }

  // repeated uint32 out_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->out_list(i));
    }
    total_size += 1 * this->out_list_size() + data_size;
  }

  // repeated uint32 out_result_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_result_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->out_result_list(i));
    }
    total_size += 1 * this->out_result_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGanDengYanHandCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGanDengYanHandCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGanDengYanHandCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGanDengYanHandCardInfo::MergeFrom(const MsgGanDengYanHandCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
  out_list_.MergeFrom(from.out_list_);
  out_result_list_.MergeFrom(from.out_result_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_cur_times()) {
      set_cur_times(from.cur_times());
    }
    if (from.has_cur_poolcard()) {
      set_cur_poolcard(from.cur_poolcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGanDengYanHandCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGanDengYanHandCardInfo::CopyFrom(const MsgGanDengYanHandCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGanDengYanHandCardInfo::IsInitialized() const {

  return true;
}

void MsgGanDengYanHandCardInfo::Swap(MsgGanDengYanHandCardInfo* other) {
  if (other != this) {
    card_list_.Swap(&other->card_list_);
    std::swap(card_type_, other->card_type_);
    out_list_.Swap(&other->out_list_);
    out_result_list_.Swap(&other->out_result_list_);
    std::swap(cur_times_, other->cur_times_);
    std::swap(cur_poolcard_, other->cur_poolcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGanDengYanHandCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGanDengYanHandCardInfo_descriptor_;
  metadata.reflection = MsgGanDengYanHandCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGanDengYanRoom::kRoomStateFieldNumber;
const int MsgGanDengYanRoom::kStateTimeFieldNumber;
const int MsgGanDengYanRoom::kPlayerListFieldNumber;
const int MsgGanDengYanRoom::kBankIdFieldNumber;
const int MsgGanDengYanRoom::kRoomIdFieldNumber;
const int MsgGanDengYanRoom::kGameCountFieldNumber;
const int MsgGanDengYanRoom::kPrivateRoomFieldNumber;
const int MsgGanDengYanRoom::kRoleHostFieldNumber;
const int MsgGanDengYanRoom::kRoleStateFieldNumber;
const int MsgGanDengYanRoom::kRelieveFieldNumber;
const int MsgGanDengYanRoom::kCurRoundFieldNumber;
const int MsgGanDengYanRoom::kCurTimesFieldNumber;
const int MsgGanDengYanRoom::kCurPoolcardFieldNumber;
#endif  // !_MSC_VER

MsgGanDengYanRoom::MsgGanDengYanRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGanDengYanRoom)
}

void MsgGanDengYanRoom::InitAsDefaultInstance() {
  private_room_ = const_cast< ::MsgCreatePrivateRoom*>(&::MsgCreatePrivateRoom::default_instance());
  role_host_ = const_cast< ::MsgGDYRoleHostCount*>(&::MsgGDYRoleHostCount::default_instance());
  role_state_ = const_cast< ::MsgGDYRoleStateCount*>(&::MsgGDYRoleStateCount::default_instance());
}

MsgGanDengYanRoom::MsgGanDengYanRoom(const MsgGanDengYanRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGanDengYanRoom)
}

void MsgGanDengYanRoom::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  bank_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  private_room_ = NULL;
  role_host_ = NULL;
  role_state_ = NULL;
  relieve_ = false;
  cur_round_ = 0u;
  cur_times_ = 0u;
  cur_poolcard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGanDengYanRoom::~MsgGanDengYanRoom() {
  // @@protoc_insertion_point(destructor:MsgGanDengYanRoom)
  SharedDtor();
}

void MsgGanDengYanRoom::SharedDtor() {
  if (this != default_instance_) {
    delete private_room_;
    delete role_host_;
    delete role_state_;
  }
}

void MsgGanDengYanRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGanDengYanRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGanDengYanRoom_descriptor_;
}

const MsgGanDengYanRoom& MsgGanDengYanRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGanDengYanRoom* MsgGanDengYanRoom::default_instance_ = NULL;

MsgGanDengYanRoom* MsgGanDengYanRoom::New() const {
  return new MsgGanDengYanRoom;
}

void MsgGanDengYanRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGanDengYanRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(room_state_, state_time_);
    ZR_(bank_id_, room_id_);
    game_count_ = 0u;
    if (has_private_room()) {
      if (private_room_ != NULL) private_room_->::MsgCreatePrivateRoom::Clear();
    }
    if (has_role_host()) {
      if (role_host_ != NULL) role_host_->::MsgGDYRoleHostCount::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(cur_round_, cur_poolcard_);
    if (has_role_state()) {
      if (role_state_ != NULL) role_state_->::MsgGDYRoleStateCount::Clear();
    }
    relieve_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGanDengYanRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGanDengYanRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TGanDengYanState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TGanDengYanState_IsValid(value)) {
            set_room_state(static_cast< ::TGanDengYanState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgGanDengYanPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_bank_id;
        break;
      }

      // optional uint64 bank_id = 4;
      case 4: {
        if (tag == 32) {
         parse_bank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_id_)));
          set_has_bank_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 5;
      case 5: {
        if (tag == 40) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 6;
      case 6: {
        if (tag == 48) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_private_room;
        break;
      }

      // optional .MsgCreatePrivateRoom private_room = 7;
      case 7: {
        if (tag == 58) {
         parse_private_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_host;
        break;
      }

      // optional .MsgGDYRoleHostCount role_host = 8;
      case 8: {
        if (tag == 66) {
         parse_role_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_role_state;
        break;
      }

      // optional .MsgGDYRoleStateCount role_state = 9;
      case 9: {
        if (tag == 74) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_relieve;
        break;
      }

      // optional bool relieve = 10;
      case 10: {
        if (tag == 80) {
         parse_relieve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relieve_)));
          set_has_relieve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cur_round;
        break;
      }

      // optional uint32 cur_round = 11;
      case 11: {
        if (tag == 88) {
         parse_cur_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_round_)));
          set_has_cur_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cur_times;
        break;
      }

      // optional uint32 cur_times = 12;
      case 12: {
        if (tag == 96) {
         parse_cur_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_times_)));
          set_has_cur_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cur_poolcard;
        break;
      }

      // optional uint32 cur_poolcard = 13;
      case 13: {
        if (tag == 104) {
         parse_cur_poolcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_poolcard_)));
          set_has_cur_poolcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGanDengYanRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGanDengYanRoom)
  return false;
#undef DO_
}

void MsgGanDengYanRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGanDengYanRoom)
  // optional .TGanDengYanState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgGanDengYanPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 bank_id = 4;
  if (has_bank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bank_id(), output);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_id(), output);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_count(), output);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->private_room(), output);
  }

  // optional .MsgGDYRoleHostCount role_host = 8;
  if (has_role_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_host(), output);
  }

  // optional .MsgGDYRoleStateCount role_state = 9;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_state(), output);
  }

  // optional bool relieve = 10;
  if (has_relieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->relieve(), output);
  }

  // optional uint32 cur_round = 11;
  if (has_cur_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cur_round(), output);
  }

  // optional uint32 cur_times = 12;
  if (has_cur_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cur_times(), output);
  }

  // optional uint32 cur_poolcard = 13;
  if (has_cur_poolcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cur_poolcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGanDengYanRoom)
}

::google::protobuf::uint8* MsgGanDengYanRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGanDengYanRoom)
  // optional .TGanDengYanState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgGanDengYanPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 bank_id = 4;
  if (has_bank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bank_id(), target);
  }

  // optional uint64 room_id = 5;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_id(), target);
  }

  // optional uint32 game_count = 6;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_count(), target);
  }

  // optional .MsgCreatePrivateRoom private_room = 7;
  if (has_private_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->private_room(), target);
  }

  // optional .MsgGDYRoleHostCount role_host = 8;
  if (has_role_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_host(), target);
  }

  // optional .MsgGDYRoleStateCount role_state = 9;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_state(), target);
  }

  // optional bool relieve = 10;
  if (has_relieve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->relieve(), target);
  }

  // optional uint32 cur_round = 11;
  if (has_cur_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cur_round(), target);
  }

  // optional uint32 cur_times = 12;
  if (has_cur_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cur_times(), target);
  }

  // optional uint32 cur_poolcard = 13;
  if (has_cur_poolcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cur_poolcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGanDengYanRoom)
  return target;
}

int MsgGanDengYanRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TGanDengYanState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 bank_id = 4;
    if (has_bank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_id());
    }

    // optional uint64 room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 6;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional .MsgCreatePrivateRoom private_room = 7;
    if (has_private_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_room());
    }

    // optional .MsgGDYRoleHostCount role_host = 8;
    if (has_role_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_host());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgGDYRoleStateCount role_state = 9;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_state());
    }

    // optional bool relieve = 10;
    if (has_relieve()) {
      total_size += 1 + 1;
    }

    // optional uint32 cur_round = 11;
    if (has_cur_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_round());
    }

    // optional uint32 cur_times = 12;
    if (has_cur_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_times());
    }

    // optional uint32 cur_poolcard = 13;
    if (has_cur_poolcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_poolcard());
    }

  }
  // repeated .MsgGanDengYanPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGanDengYanRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGanDengYanRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGanDengYanRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGanDengYanRoom::MergeFrom(const MsgGanDengYanRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_bank_id()) {
      set_bank_id(from.bank_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_private_room()) {
      mutable_private_room()->::MsgCreatePrivateRoom::MergeFrom(from.private_room());
    }
    if (from.has_role_host()) {
      mutable_role_host()->::MsgGDYRoleHostCount::MergeFrom(from.role_host());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_state()) {
      mutable_role_state()->::MsgGDYRoleStateCount::MergeFrom(from.role_state());
    }
    if (from.has_relieve()) {
      set_relieve(from.relieve());
    }
    if (from.has_cur_round()) {
      set_cur_round(from.cur_round());
    }
    if (from.has_cur_times()) {
      set_cur_times(from.cur_times());
    }
    if (from.has_cur_poolcard()) {
      set_cur_poolcard(from.cur_poolcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGanDengYanRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGanDengYanRoom::CopyFrom(const MsgGanDengYanRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGanDengYanRoom::IsInitialized() const {

  return true;
}

void MsgGanDengYanRoom::Swap(MsgGanDengYanRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(bank_id_, other->bank_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(private_room_, other->private_room_);
    std::swap(role_host_, other->role_host_);
    std::swap(role_state_, other->role_state_);
    std::swap(relieve_, other->relieve_);
    std::swap(cur_round_, other->cur_round_);
    std::swap(cur_times_, other->cur_times_);
    std::swap(cur_poolcard_, other->cur_poolcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGanDengYanRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGanDengYanRoom_descriptor_;
  metadata.reflection = MsgGanDengYanRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDYGameOverInfo::kWinCountFieldNumber;
const int MsgGDYGameOverInfo::kLoseCountFieldNumber;
const int MsgGDYGameOverInfo::kBankCountFieldNumber;
const int MsgGDYGameOverInfo::kWinMaxScoreFieldNumber;
#endif  // !_MSC_VER

MsgGDYGameOverInfo::MsgGDYGameOverInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDYGameOverInfo)
}

void MsgGDYGameOverInfo::InitAsDefaultInstance() {
}

MsgGDYGameOverInfo::MsgGDYGameOverInfo(const MsgGDYGameOverInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDYGameOverInfo)
}

void MsgGDYGameOverInfo::SharedCtor() {
  _cached_size_ = 0;
  win_count_ = 0u;
  lose_count_ = 0u;
  bank_count_ = 0u;
  win_max_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDYGameOverInfo::~MsgGDYGameOverInfo() {
  // @@protoc_insertion_point(destructor:MsgGDYGameOverInfo)
  SharedDtor();
}

void MsgGDYGameOverInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDYGameOverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDYGameOverInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDYGameOverInfo_descriptor_;
}

const MsgGDYGameOverInfo& MsgGDYGameOverInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGDYGameOverInfo* MsgGDYGameOverInfo::default_instance_ = NULL;

MsgGDYGameOverInfo* MsgGDYGameOverInfo::New() const {
  return new MsgGDYGameOverInfo;
}

void MsgGDYGameOverInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGDYGameOverInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(win_count_, win_max_score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDYGameOverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDYGameOverInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 win_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lose_count;
        break;
      }

      // optional uint32 lose_count = 2;
      case 2: {
        if (tag == 16) {
         parse_lose_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_count_)));
          set_has_lose_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bank_count;
        break;
      }

      // optional uint32 bank_count = 3;
      case 3: {
        if (tag == 24) {
         parse_bank_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bank_count_)));
          set_has_bank_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_win_max_score;
        break;
      }

      // optional uint32 win_max_score = 4;
      case 4: {
        if (tag == 32) {
         parse_win_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_max_score_)));
          set_has_win_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDYGameOverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDYGameOverInfo)
  return false;
#undef DO_
}

void MsgGDYGameOverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDYGameOverInfo)
  // optional uint32 win_count = 1;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->win_count(), output);
  }

  // optional uint32 lose_count = 2;
  if (has_lose_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lose_count(), output);
  }

  // optional uint32 bank_count = 3;
  if (has_bank_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bank_count(), output);
  }

  // optional uint32 win_max_score = 4;
  if (has_win_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win_max_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDYGameOverInfo)
}

::google::protobuf::uint8* MsgGDYGameOverInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDYGameOverInfo)
  // optional uint32 win_count = 1;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->win_count(), target);
  }

  // optional uint32 lose_count = 2;
  if (has_lose_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lose_count(), target);
  }

  // optional uint32 bank_count = 3;
  if (has_bank_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bank_count(), target);
  }

  // optional uint32 win_max_score = 4;
  if (has_win_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win_max_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDYGameOverInfo)
  return target;
}

int MsgGDYGameOverInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 win_count = 1;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional uint32 lose_count = 2;
    if (has_lose_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_count());
    }

    // optional uint32 bank_count = 3;
    if (has_bank_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bank_count());
    }

    // optional uint32 win_max_score = 4;
    if (has_win_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_max_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDYGameOverInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDYGameOverInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDYGameOverInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDYGameOverInfo::MergeFrom(const MsgGDYGameOverInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_lose_count()) {
      set_lose_count(from.lose_count());
    }
    if (from.has_bank_count()) {
      set_bank_count(from.bank_count());
    }
    if (from.has_win_max_score()) {
      set_win_max_score(from.win_max_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDYGameOverInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDYGameOverInfo::CopyFrom(const MsgGDYGameOverInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDYGameOverInfo::IsInitialized() const {

  return true;
}

void MsgGDYGameOverInfo::Swap(MsgGDYGameOverInfo* other) {
  if (other != this) {
    std::swap(win_count_, other->win_count_);
    std::swap(lose_count_, other->lose_count_);
    std::swap(bank_count_, other->bank_count_);
    std::swap(win_max_score_, other->win_max_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDYGameOverInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDYGameOverInfo_descriptor_;
  metadata.reflection = MsgGDYGameOverInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGanDengYanShowDown::kRoomStateFieldNumber;
const int MsgGanDengYanShowDown::kStateTimeFieldNumber;
const int MsgGanDengYanShowDown::kPlayerListFieldNumber;
const int MsgGanDengYanShowDown::kRoomIdFieldNumber;
const int MsgGanDengYanShowDown::kGameCountFieldNumber;
const int MsgGanDengYanShowDown::kTimeFieldNumber;
const int MsgGanDengYanShowDown::kGameOverFieldNumber;
#endif  // !_MSC_VER

MsgGanDengYanShowDown::MsgGanDengYanShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGanDengYanShowDown)
}

void MsgGanDengYanShowDown::InitAsDefaultInstance() {
}

MsgGanDengYanShowDown::MsgGanDengYanShowDown(const MsgGanDengYanShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGanDengYanShowDown)
}

void MsgGanDengYanShowDown::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  time_ = 0u;
  game_over_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGanDengYanShowDown::~MsgGanDengYanShowDown() {
  // @@protoc_insertion_point(destructor:MsgGanDengYanShowDown)
  SharedDtor();
}

void MsgGanDengYanShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGanDengYanShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGanDengYanShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGanDengYanShowDown_descriptor_;
}

const MsgGanDengYanShowDown& MsgGanDengYanShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGanDengYanShowDown* MsgGanDengYanShowDown::default_instance_ = NULL;

MsgGanDengYanShowDown* MsgGanDengYanShowDown::New() const {
  return new MsgGanDengYanShowDown;
}

void MsgGanDengYanShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGanDengYanShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(room_state_, state_time_);
    ZR_(room_id_, game_over_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGanDengYanShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGanDengYanShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TGanDengYanState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TGanDengYanState_IsValid(value)) {
            set_room_state(static_cast< ::TGanDengYanState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgGanDengYanPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 5;
      case 5: {
        if (tag == 40) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_game_over;
        break;
      }

      // optional bool game_over = 7;
      case 7: {
        if (tag == 56) {
         parse_game_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_over_)));
          set_has_game_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGanDengYanShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGanDengYanShowDown)
  return false;
#undef DO_
}

void MsgGanDengYanShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGanDengYanShowDown)
  // optional .TGanDengYanState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgGanDengYanPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->room_id(), output);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_count(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional bool game_over = 7;
  if (has_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->game_over(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGanDengYanShowDown)
}

::google::protobuf::uint8* MsgGanDengYanShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGanDengYanShowDown)
  // optional .TGanDengYanState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgGanDengYanPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_count = 5;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_count(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional bool game_over = 7;
  if (has_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->game_over(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGanDengYanShowDown)
  return target;
}

int MsgGanDengYanShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TGanDengYanState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional uint32 game_count = 5;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool game_over = 7;
    if (has_game_over()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MsgGanDengYanPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGanDengYanShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGanDengYanShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGanDengYanShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGanDengYanShowDown::MergeFrom(const MsgGanDengYanShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_game_over()) {
      set_game_over(from.game_over());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGanDengYanShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGanDengYanShowDown::CopyFrom(const MsgGanDengYanShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGanDengYanShowDown::IsInitialized() const {

  return true;
}

void MsgGanDengYanShowDown::Swap(MsgGanDengYanShowDown* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(time_, other->time_);
    std::swap(game_over_, other->game_over_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGanDengYanShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGanDengYanShowDown_descriptor_;
  metadata.reflection = MsgGanDengYanShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDYRoleState::kRoleIdFieldNumber;
const int MsgGDYRoleState::kStateFieldNumber;
#endif  // !_MSC_VER

MsgGDYRoleState::MsgGDYRoleState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDYRoleState)
}

void MsgGDYRoleState::InitAsDefaultInstance() {
}

MsgGDYRoleState::MsgGDYRoleState(const MsgGDYRoleState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDYRoleState)
}

void MsgGDYRoleState::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDYRoleState::~MsgGDYRoleState() {
  // @@protoc_insertion_point(destructor:MsgGDYRoleState)
  SharedDtor();
}

void MsgGDYRoleState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDYRoleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDYRoleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDYRoleState_descriptor_;
}

const MsgGDYRoleState& MsgGDYRoleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGDYRoleState* MsgGDYRoleState::default_instance_ = NULL;

MsgGDYRoleState* MsgGDYRoleState::New() const {
  return new MsgGDYRoleState;
}

void MsgGDYRoleState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGDYRoleState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDYRoleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDYRoleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDYRoleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDYRoleState)
  return false;
#undef DO_
}

void MsgGDYRoleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDYRoleState)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDYRoleState)
}

::google::protobuf::uint8* MsgGDYRoleState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDYRoleState)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDYRoleState)
  return target;
}

int MsgGDYRoleState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDYRoleState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDYRoleState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDYRoleState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDYRoleState::MergeFrom(const MsgGDYRoleState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDYRoleState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDYRoleState::CopyFrom(const MsgGDYRoleState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDYRoleState::IsInitialized() const {

  return true;
}

void MsgGDYRoleState::Swap(MsgGDYRoleState* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDYRoleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDYRoleState_descriptor_;
  metadata.reflection = MsgGDYRoleState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDYRoleHost::kRoleIdFieldNumber;
const int MsgGDYRoleHost::kHostIdFieldNumber;
#endif  // !_MSC_VER

MsgGDYRoleHost::MsgGDYRoleHost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDYRoleHost)
}

void MsgGDYRoleHost::InitAsDefaultInstance() {
}

MsgGDYRoleHost::MsgGDYRoleHost(const MsgGDYRoleHost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDYRoleHost)
}

void MsgGDYRoleHost::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  host_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDYRoleHost::~MsgGDYRoleHost() {
  // @@protoc_insertion_point(destructor:MsgGDYRoleHost)
  SharedDtor();
}

void MsgGDYRoleHost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDYRoleHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDYRoleHost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDYRoleHost_descriptor_;
}

const MsgGDYRoleHost& MsgGDYRoleHost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGDYRoleHost* MsgGDYRoleHost::default_instance_ = NULL;

MsgGDYRoleHost* MsgGDYRoleHost::New() const {
  return new MsgGDYRoleHost;
}

void MsgGDYRoleHost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGDYRoleHost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, host_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDYRoleHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDYRoleHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_host_id;
        break;
      }

      // optional uint32 host_id = 2;
      case 2: {
        if (tag == 16) {
         parse_host_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDYRoleHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDYRoleHost)
  return false;
#undef DO_
}

void MsgGDYRoleHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDYRoleHost)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 host_id = 2;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDYRoleHost)
}

::google::protobuf::uint8* MsgGDYRoleHost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDYRoleHost)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 host_id = 2;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDYRoleHost)
  return target;
}

int MsgGDYRoleHost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 host_id = 2;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDYRoleHost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDYRoleHost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDYRoleHost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDYRoleHost::MergeFrom(const MsgGDYRoleHost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDYRoleHost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDYRoleHost::CopyFrom(const MsgGDYRoleHost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDYRoleHost::IsInitialized() const {

  return true;
}

void MsgGDYRoleHost::Swap(MsgGDYRoleHost* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(host_id_, other->host_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDYRoleHost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDYRoleHost_descriptor_;
  metadata.reflection = MsgGDYRoleHost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDYRoleHostCount::kRoleStateFieldNumber;
const int MsgGDYRoleHostCount::kHostListFieldNumber;
#endif  // !_MSC_VER

MsgGDYRoleHostCount::MsgGDYRoleHostCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDYRoleHostCount)
}

void MsgGDYRoleHostCount::InitAsDefaultInstance() {
}

MsgGDYRoleHostCount::MsgGDYRoleHostCount(const MsgGDYRoleHostCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDYRoleHostCount)
}

void MsgGDYRoleHostCount::SharedCtor() {
  _cached_size_ = 0;
  role_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDYRoleHostCount::~MsgGDYRoleHostCount() {
  // @@protoc_insertion_point(destructor:MsgGDYRoleHostCount)
  SharedDtor();
}

void MsgGDYRoleHostCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDYRoleHostCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDYRoleHostCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDYRoleHostCount_descriptor_;
}

const MsgGDYRoleHostCount& MsgGDYRoleHostCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGDYRoleHostCount* MsgGDYRoleHostCount::default_instance_ = NULL;

MsgGDYRoleHostCount* MsgGDYRoleHostCount::New() const {
  return new MsgGDYRoleHostCount;
}

void MsgGDYRoleHostCount::Clear() {
  role_state_ = 0u;
  host_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDYRoleHostCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDYRoleHostCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_state_)));
          set_has_role_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_list;
        break;
      }

      // repeated .MsgGDYRoleHost host_list = 2;
      case 2: {
        if (tag == 18) {
         parse_host_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDYRoleHostCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDYRoleHostCount)
  return false;
#undef DO_
}

void MsgGDYRoleHostCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDYRoleHostCount)
  // optional uint32 role_state = 1;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_state(), output);
  }

  // repeated .MsgGDYRoleHost host_list = 2;
  for (int i = 0; i < this->host_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->host_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDYRoleHostCount)
}

::google::protobuf::uint8* MsgGDYRoleHostCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDYRoleHostCount)
  // optional uint32 role_state = 1;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_state(), target);
  }

  // repeated .MsgGDYRoleHost host_list = 2;
  for (int i = 0; i < this->host_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->host_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDYRoleHostCount)
  return target;
}

int MsgGDYRoleHostCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_state = 1;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_state());
    }

  }
  // repeated .MsgGDYRoleHost host_list = 2;
  total_size += 1 * this->host_list_size();
  for (int i = 0; i < this->host_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->host_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDYRoleHostCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDYRoleHostCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDYRoleHostCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDYRoleHostCount::MergeFrom(const MsgGDYRoleHostCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  host_list_.MergeFrom(from.host_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_state()) {
      set_role_state(from.role_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDYRoleHostCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDYRoleHostCount::CopyFrom(const MsgGDYRoleHostCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDYRoleHostCount::IsInitialized() const {

  return true;
}

void MsgGDYRoleHostCount::Swap(MsgGDYRoleHostCount* other) {
  if (other != this) {
    std::swap(role_state_, other->role_state_);
    host_list_.Swap(&other->host_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDYRoleHostCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDYRoleHostCount_descriptor_;
  metadata.reflection = MsgGDYRoleHostCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDYRoleStateCount::kRoleStateFieldNumber;
#endif  // !_MSC_VER

MsgGDYRoleStateCount::MsgGDYRoleStateCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDYRoleStateCount)
}

void MsgGDYRoleStateCount::InitAsDefaultInstance() {
}

MsgGDYRoleStateCount::MsgGDYRoleStateCount(const MsgGDYRoleStateCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDYRoleStateCount)
}

void MsgGDYRoleStateCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDYRoleStateCount::~MsgGDYRoleStateCount() {
  // @@protoc_insertion_point(destructor:MsgGDYRoleStateCount)
  SharedDtor();
}

void MsgGDYRoleStateCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDYRoleStateCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDYRoleStateCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDYRoleStateCount_descriptor_;
}

const MsgGDYRoleStateCount& MsgGDYRoleStateCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgandengyan_2eproto();
  return *default_instance_;
}

MsgGDYRoleStateCount* MsgGDYRoleStateCount::default_instance_ = NULL;

MsgGDYRoleStateCount* MsgGDYRoleStateCount::New() const {
  return new MsgGDYRoleStateCount;
}

void MsgGDYRoleStateCount::Clear() {
  role_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDYRoleStateCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDYRoleStateCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgGDYRoleState role_state = 1;
      case 1: {
        if (tag == 10) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_role_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDYRoleStateCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDYRoleStateCount)
  return false;
#undef DO_
}

void MsgGDYRoleStateCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDYRoleStateCount)
  // repeated .MsgGDYRoleState role_state = 1;
  for (int i = 0; i < this->role_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDYRoleStateCount)
}

::google::protobuf::uint8* MsgGDYRoleStateCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDYRoleStateCount)
  // repeated .MsgGDYRoleState role_state = 1;
  for (int i = 0; i < this->role_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDYRoleStateCount)
  return target;
}

int MsgGDYRoleStateCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgGDYRoleState role_state = 1;
  total_size += 1 * this->role_state_size();
  for (int i = 0; i < this->role_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDYRoleStateCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDYRoleStateCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDYRoleStateCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDYRoleStateCount::MergeFrom(const MsgGDYRoleStateCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_state_.MergeFrom(from.role_state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDYRoleStateCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDYRoleStateCount::CopyFrom(const MsgGDYRoleStateCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDYRoleStateCount::IsInitialized() const {

  return true;
}

void MsgGDYRoleStateCount::Swap(MsgGDYRoleStateCount* other) {
  if (other != this) {
    role_state_.Swap(&other->role_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDYRoleStateCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDYRoleStateCount_descriptor_;
  metadata.reflection = MsgGDYRoleStateCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
