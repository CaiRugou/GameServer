// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_data_center.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_data_center.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAccountInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fdata_5fcenter_2eproto() {
  protobuf_AddDesc_msg_5fdata_5fcenter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_data_center.proto");
  GOOGLE_CHECK(file != NULL);
  MsgAccountInfo_descriptor_ = file->message_type(0);
  static const int MsgAccountInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccountInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccountInfo, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccountInfo, average_buy_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccountInfo, average_prices_),
  };
  MsgAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAccountInfo_descriptor_,
      MsgAccountInfo::default_instance_,
      MsgAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAccountInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fdata_5fcenter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAccountInfo_descriptor_, &MsgAccountInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fdata_5fcenter_2eproto() {
  delete MsgAccountInfo::default_instance_;
  delete MsgAccountInfo_reflection_;
}

void protobuf_AddDesc_msg_5fdata_5fcenter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025msg_data_center.proto\"g\n\016MsgAccountInf"
    "o\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006weight\030\002 \001(\r\022\031\n"
    "\021average_buy_money\030\003 \001(\004\022\026\n\016average_pric"
    "es\030\004 \001(\004", 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_data_center.proto", &protobuf_RegisterTypes);
  MsgAccountInfo::default_instance_ = new MsgAccountInfo();
  MsgAccountInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fdata_5fcenter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fdata_5fcenter_2eproto {
  StaticDescriptorInitializer_msg_5fdata_5fcenter_2eproto() {
    protobuf_AddDesc_msg_5fdata_5fcenter_2eproto();
  }
} static_descriptor_initializer_msg_5fdata_5fcenter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgAccountInfo::kAccountIdFieldNumber;
const int MsgAccountInfo::kWeightFieldNumber;
const int MsgAccountInfo::kAverageBuyMoneyFieldNumber;
const int MsgAccountInfo::kAveragePricesFieldNumber;
#endif  // !_MSC_VER

MsgAccountInfo::MsgAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAccountInfo)
}

void MsgAccountInfo::InitAsDefaultInstance() {
}

MsgAccountInfo::MsgAccountInfo(const MsgAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAccountInfo)
}

void MsgAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  weight_ = 0u;
  average_buy_money_ = GOOGLE_ULONGLONG(0);
  average_prices_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAccountInfo::~MsgAccountInfo() {
  // @@protoc_insertion_point(destructor:MsgAccountInfo)
  SharedDtor();
}

void MsgAccountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAccountInfo_descriptor_;
}

const MsgAccountInfo& MsgAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fdata_5fcenter_2eproto();
  return *default_instance_;
}

MsgAccountInfo* MsgAccountInfo::default_instance_ = NULL;

MsgAccountInfo* MsgAccountInfo::New() const {
  return new MsgAccountInfo;
}

void MsgAccountInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAccountInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, average_prices_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_average_buy_money;
        break;
      }

      // optional uint64 average_buy_money = 3;
      case 3: {
        if (tag == 24) {
         parse_average_buy_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &average_buy_money_)));
          set_has_average_buy_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_average_prices;
        break;
      }

      // optional uint64 average_prices = 4;
      case 4: {
        if (tag == 32) {
         parse_average_prices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &average_prices_)));
          set_has_average_prices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAccountInfo)
  return false;
#undef DO_
}

void MsgAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAccountInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  // optional uint64 average_buy_money = 3;
  if (has_average_buy_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->average_buy_money(), output);
  }

  // optional uint64 average_prices = 4;
  if (has_average_prices()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->average_prices(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAccountInfo)
}

::google::protobuf::uint8* MsgAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAccountInfo)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  // optional uint64 average_buy_money = 3;
  if (has_average_buy_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->average_buy_money(), target);
  }

  // optional uint64 average_prices = 4;
  if (has_average_prices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->average_prices(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAccountInfo)
  return target;
}

int MsgAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // optional uint64 average_buy_money = 3;
    if (has_average_buy_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->average_buy_money());
    }

    // optional uint64 average_prices = 4;
    if (has_average_prices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->average_prices());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAccountInfo::MergeFrom(const MsgAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_average_buy_money()) {
      set_average_buy_money(from.average_buy_money());
    }
    if (from.has_average_prices()) {
      set_average_prices(from.average_prices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAccountInfo::CopyFrom(const MsgAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAccountInfo::IsInitialized() const {

  return true;
}

void MsgAccountInfo::Swap(MsgAccountInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(weight_, other->weight_);
    std::swap(average_buy_money_, other->average_buy_money_);
    std::swap(average_prices_, other->average_prices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAccountInfo_descriptor_;
  metadata.reflection = MsgAccountInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
