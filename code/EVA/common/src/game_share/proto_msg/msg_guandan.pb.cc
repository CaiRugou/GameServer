// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_guandan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_guandan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgGDPlayerMSGInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDPlayerMSGInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuanDanPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuanDanPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGiftCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGiftCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDissRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDissRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuanDanRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuanDanRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuandanGiftRoleCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuandanGiftRoleCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuanDanLevelUpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuanDanLevelUpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuandanRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuandanRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGiftRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGiftRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGiftRoleCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGiftRoleCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgActon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgActon_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShowDownRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShowDownRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuanDanSDMSGInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuanDanSDMSGInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuanDanShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuanDanShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGDIntegralCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGDIntegralCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGuanDanResistGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGuanDanResistGift_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TGuanDanRoleState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGuanDanGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TShowDownState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGuanDanState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGuanDanCT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fguandan_2eproto() {
  protobuf_AddDesc_msg_5fguandan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_guandan.proto");
  GOOGLE_CHECK(file != NULL);
  MsgGDPlayerMSGInfo_descriptor_ = file->message_type(0);
  static const int MsgGDPlayerMSGInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDPlayerMSGInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDPlayerMSGInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDPlayerMSGInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDPlayerMSGInfo, giveup_time_),
  };
  MsgGDPlayerMSGInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDPlayerMSGInfo_descriptor_,
      MsgGDPlayerMSGInfo::default_instance_,
      MsgGDPlayerMSGInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDPlayerMSGInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDPlayerMSGInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDPlayerMSGInfo));
  MsgGuanDanPlayer_descriptor_ = file->message_type(1);
  static const int MsgGuanDanPlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, player_msg_info_),
  };
  MsgGuanDanPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuanDanPlayer_descriptor_,
      MsgGuanDanPlayer::default_instance_,
      MsgGuanDanPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuanDanPlayer));
  MsgGiftCardInfo_descriptor_ = file->message_type(2);
  static const int MsgGiftCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftCardInfo, scr_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftCardInfo, tar_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftCardInfo, send_card_),
  };
  MsgGiftCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGiftCardInfo_descriptor_,
      MsgGiftCardInfo::default_instance_,
      MsgGiftCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGiftCardInfo));
  MsgDissRoomInfo_descriptor_ = file->message_type(3);
  static const int MsgDissRoomInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDissRoomInfo, apply_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDissRoomInfo, agree_role_list_),
  };
  MsgDissRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDissRoomInfo_descriptor_,
      MsgDissRoomInfo::default_instance_,
      MsgDissRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDissRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDissRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDissRoomInfo));
  MsgGuanDanRanking_descriptor_ = file->message_type(4);
  static const int MsgGuanDanRanking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanRanking, rank_list_),
  };
  MsgGuanDanRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuanDanRanking_descriptor_,
      MsgGuanDanRanking::default_instance_,
      MsgGuanDanRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuanDanRanking));
  MsgGuandanGiftRoleCardInfo_descriptor_ = file->message_type(5);
  static const int MsgGuandanGiftRoleCardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanGiftRoleCardInfo, gift_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanGiftRoleCardInfo, gift_card_),
  };
  MsgGuandanGiftRoleCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuandanGiftRoleCardInfo_descriptor_,
      MsgGuandanGiftRoleCardInfo::default_instance_,
      MsgGuandanGiftRoleCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanGiftRoleCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanGiftRoleCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuandanGiftRoleCardInfo));
  MsgGuanDanLevelUpInfo_descriptor_ = file->message_type(6);
  static const int MsgGuanDanLevelUpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanLevelUpInfo, myself_levelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanLevelUpInfo, other_leveup_),
  };
  MsgGuanDanLevelUpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuanDanLevelUpInfo_descriptor_,
      MsgGuanDanLevelUpInfo::default_instance_,
      MsgGuanDanLevelUpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanLevelUpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanLevelUpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuanDanLevelUpInfo));
  MsgGuandanRoom_descriptor_ = file->message_type(7);
  static const int MsgGuandanRoom_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, gift_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, jiefeng_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, last_out_card_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, cost_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, gift_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, diss_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, series_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_special_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, send_gift_rolecard_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, recv_gift_rolecard_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, room_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, out_card_nums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, level_up_info_),
  };
  MsgGuandanRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuandanRoom_descriptor_,
      MsgGuandanRoom::default_instance_,
      MsgGuandanRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuandanRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuandanRoom));
  MsgCardInfo_descriptor_ = file->message_type(8);
  static const int MsgCardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardInfo, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardInfo, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardInfo, card_),
  };
  MsgCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCardInfo_descriptor_,
      MsgCardInfo::default_instance_,
      MsgCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCardInfo));
  MsgGiftRoleInfo_descriptor_ = file->message_type(9);
  static const int MsgGiftRoleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleInfo, is_complete_),
  };
  MsgGiftRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGiftRoleInfo_descriptor_,
      MsgGiftRoleInfo::default_instance_,
      MsgGiftRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGiftRoleInfo));
  MsgGiftRoleCount_descriptor_ = file->message_type(10);
  static const int MsgGiftRoleCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleCount, send_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleCount, recv_info_),
  };
  MsgGiftRoleCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGiftRoleCount_descriptor_,
      MsgGiftRoleCount::default_instance_,
      MsgGiftRoleCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiftRoleCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGiftRoleCount));
  MsgActon_descriptor_ = file->message_type(11);
  static const int MsgActon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, new_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, old_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, check_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, jf_role_id_),
  };
  MsgActon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgActon_descriptor_,
      MsgActon::default_instance_,
      MsgActon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgActon));
  MsgUserOutCard_descriptor_ = file->message_type(12);
  static const int MsgUserOutCard_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, old_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, new_actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, out_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, auto_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, check_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, can_outcard_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, teammate_hand_card_),
  };
  MsgUserOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserOutCard_descriptor_,
      MsgUserOutCard::default_instance_,
      MsgUserOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserOutCard));
  MsgShowDownRole_descriptor_ = file->message_type(13);
  static const int MsgShowDownRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownRole, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownRole, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownRole, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownRole, current_score_),
  };
  MsgShowDownRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShowDownRole_descriptor_,
      MsgShowDownRole::default_instance_,
      MsgShowDownRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShowDownRole));
  MsgGuanDanSDMSGInfo_descriptor_ = file->message_type(14);
  static const int MsgGuanDanSDMSGInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, win_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, per_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, stro_opp_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, win_stre_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, new_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, master_score_),
  };
  MsgGuanDanSDMSGInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuanDanSDMSGInfo_descriptor_,
      MsgGuanDanSDMSGInfo::default_instance_,
      MsgGuanDanSDMSGInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanSDMSGInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuanDanSDMSGInfo));
  MsgGuanDanShowDown_descriptor_ = file->message_type(15);
  static const int MsgGuanDanShowDown_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, win_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, lost_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, series_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, state_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, one_game_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, room_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, series_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, three_times_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, relieve_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, over_endseries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, integral_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, msg_info_),
  };
  MsgGuanDanShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuanDanShowDown_descriptor_,
      MsgGuanDanShowDown::default_instance_,
      MsgGuanDanShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuanDanShowDown));
  MsgGDIntegralCount_descriptor_ = file->message_type(16);
  static const int MsgGDIntegralCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDIntegralCount, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDIntegralCount, count_),
  };
  MsgGDIntegralCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGDIntegralCount_descriptor_,
      MsgGDIntegralCount::default_instance_,
      MsgGDIntegralCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDIntegralCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGDIntegralCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGDIntegralCount));
  MsgGuanDanResistGift_descriptor_ = file->message_type(17);
  static const int MsgGuanDanResistGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanResistGift, kingcard_role_list_),
  };
  MsgGuanDanResistGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGuanDanResistGift_descriptor_,
      MsgGuanDanResistGift::default_instance_,
      MsgGuanDanResistGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanResistGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGuanDanResistGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGuanDanResistGift));
  TGuanDanRoleState_descriptor_ = file->enum_type(0);
  TGuanDanGameState_descriptor_ = file->enum_type(1);
  TShowDownState_descriptor_ = file->enum_type(2);
  TGuanDanState_descriptor_ = file->enum_type(3);
  TGuanDanCT_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fguandan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDPlayerMSGInfo_descriptor_, &MsgGDPlayerMSGInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuanDanPlayer_descriptor_, &MsgGuanDanPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGiftCardInfo_descriptor_, &MsgGiftCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDissRoomInfo_descriptor_, &MsgDissRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuanDanRanking_descriptor_, &MsgGuanDanRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuandanGiftRoleCardInfo_descriptor_, &MsgGuandanGiftRoleCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuanDanLevelUpInfo_descriptor_, &MsgGuanDanLevelUpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuandanRoom_descriptor_, &MsgGuandanRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCardInfo_descriptor_, &MsgCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGiftRoleInfo_descriptor_, &MsgGiftRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGiftRoleCount_descriptor_, &MsgGiftRoleCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgActon_descriptor_, &MsgActon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserOutCard_descriptor_, &MsgUserOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShowDownRole_descriptor_, &MsgShowDownRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuanDanSDMSGInfo_descriptor_, &MsgGuanDanSDMSGInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuanDanShowDown_descriptor_, &MsgGuanDanShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGDIntegralCount_descriptor_, &MsgGDIntegralCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGuanDanResistGift_descriptor_, &MsgGuanDanResistGift::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fguandan_2eproto() {
  delete MsgGDPlayerMSGInfo::default_instance_;
  delete MsgGDPlayerMSGInfo_reflection_;
  delete MsgGuanDanPlayer::default_instance_;
  delete MsgGuanDanPlayer_reflection_;
  delete MsgGiftCardInfo::default_instance_;
  delete MsgGiftCardInfo_reflection_;
  delete MsgDissRoomInfo::default_instance_;
  delete MsgDissRoomInfo_reflection_;
  delete MsgGuanDanRanking::default_instance_;
  delete MsgGuanDanRanking_reflection_;
  delete MsgGuandanGiftRoleCardInfo::default_instance_;
  delete MsgGuandanGiftRoleCardInfo_reflection_;
  delete MsgGuanDanLevelUpInfo::default_instance_;
  delete MsgGuanDanLevelUpInfo_reflection_;
  delete MsgGuandanRoom::default_instance_;
  delete MsgGuandanRoom_reflection_;
  delete MsgCardInfo::default_instance_;
  delete MsgCardInfo_reflection_;
  delete MsgGiftRoleInfo::default_instance_;
  delete MsgGiftRoleInfo_reflection_;
  delete MsgGiftRoleCount::default_instance_;
  delete MsgGiftRoleCount_reflection_;
  delete MsgActon::default_instance_;
  delete MsgActon_reflection_;
  delete MsgUserOutCard::default_instance_;
  delete MsgUserOutCard_reflection_;
  delete MsgShowDownRole::default_instance_;
  delete MsgShowDownRole_reflection_;
  delete MsgGuanDanSDMSGInfo::default_instance_;
  delete MsgGuanDanSDMSGInfo_reflection_;
  delete MsgGuanDanShowDown::default_instance_;
  delete MsgGuanDanShowDown_reflection_;
  delete MsgGDIntegralCount::default_instance_;
  delete MsgGDIntegralCount_reflection_;
  delete MsgGuanDanResistGift::default_instance_;
  delete MsgGuanDanResistGift_reflection_;
}

void protobuf_AddDesc_msg_5fguandan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021msg_guandan.proto\032\020public_pro.proto\"T\n"
    "\022MsgGDPlayerMSGInfo\022\014\n\004rank\030\001 \001(\r\022\014\n\004sta"
    "r\030\002 \001(\005\022\r\n\005score\030\003 \001(\r\022\023\n\013giveup_time\030\004 "
    "\001(\005\"\304\001\n\020MsgGuanDanPlayer\022#\n\013player_base\030"
    "\001 \001(\0132\016.MsgPlayerInfo\022\r\n\005state\030\002 \001(\r\022\022\n\n"
    "hand_count\030\003 \001(\r\022\r\n\005seats\030\004 \001(\r\022\016\n\006serie"
    "s\030\005 \001(\r\022\r\n\005score\030\006 \001(\005\022\014\n\004team\030\007 \001(\r\022,\n\017"
    "player_msg_info\030\010 \001(\0132\023.MsgGDPlayerMSGIn"
    "fo\"\\\n\017MsgGiftCardInfo\022\023\n\013scr_role_id\030\001 \001"
    "(\004\022\023\n\013tar_role_id\030\002 \001(\004\022\037\n\tsend_card\030\003 \001"
    "(\0132\014.MsgCardInfo\"A\n\017MsgDissRoomInfo\022\025\n\ra"
    "pply_role_id\030\001 \001(\004\022\027\n\017agree_role_list\030\002 "
    "\003(\004\"&\n\021MsgGuanDanRanking\022\021\n\trank_list\030\001 "
    "\003(\004\"B\n\032MsgGuandanGiftRoleCardInfo\022\021\n\tgif"
    "t_role\030\001 \001(\004\022\021\n\tgift_card\030\002 \001(\r\"E\n\025MsgGu"
    "anDanLevelUpInfo\022\026\n\016myself_levelup\030\001 \001(\r"
    "\022\024\n\014other_leveup\030\002 \001(\r\"\246\006\n\016MsgGuandanRoo"
    "m\022\"\n\nroom_state\030\001 \001(\0162\016.TGuanDanState\022\022\n"
    "\nstate_time\030\002 \001(\r\022&\n\013player_list\030\003 \003(\0132\021"
    ".MsgGuanDanPlayer\022\021\n\taction_id\030\004 \001(\004\022\037\n\t"
    "hand_card\030\005 \003(\0132\014.MsgCardInfo\022\016\n\006series\030"
    "\006 \001(\r\022\017\n\007room_id\030\007 \001(\004\022#\n\tgift_card\030\010 \001("
    "\0132\020.MsgGiftCardInfo\022\022\n\njiefeng_id\030\t \001(\004\022"
    "+\n\022last_out_card_info\030\n \001(\0132\017.MsgUserOut"
    "Card\022\013\n\003wik\030\013 \001(\r\022\022\n\ngame_count\030\014 \001(\r\022\017\n"
    "\007cost_id\030\r \001(\r\022)\n\016gift_role_info\030\016 \001(\0132\021"
    ".MsgGiftRoleCount\022(\n\016diss_room_info\030\017 \001("
    "\0132\020.MsgDissRoomInfo\022\026\n\016series_role_id\030\020 "
    "\001(\004\022\031\n\021room_special_kind\030\021 \001(\r\022(\n\014room_r"
    "anking\030\022 \001(\0132\022.MsgGuanDanRanking\022\021\n\troom"
    "_type\030\023 \001(\t\022\025\n\rroom_pay_type\030\024 \001(\r\022<\n\027se"
    "nd_gift_rolecard_info\030\025 \003(\0132\033.MsgGuandan"
    "GiftRoleCardInfo\022<\n\027recv_gift_rolecard_i"
    "nfo\030\026 \003(\0132\033.MsgGuandanGiftRoleCardInfo\022\025"
    "\n\rroom_run_time\030\027 \001(\r\022\022\n\nroom_param\030\030 \001("
    "\r\022\025\n\rout_card_nums\030\031 \001(\r\022-\n\rlevel_up_inf"
    "o\030\032 \003(\0132\026.MsgGuanDanLevelUpInfo\"G\n\013MsgCa"
    "rdInfo\022\013\n\003row\030\001 \001(\r\022\016\n\006column\030\002 \001(\r\022\r\n\005i"
    "ndex\030\003 \001(\r\022\014\n\004card\030\004 \001(\r\"7\n\017MsgGiftRoleI"
    "nfo\022\017\n\007role_id\030\001 \001(\004\022\023\n\013is_complete\030\002 \001("
    "\r\"\\\n\020MsgGiftRoleCount\022#\n\tsend_info\030\001 \003(\013"
    "2\020.MsgGiftRoleInfo\022#\n\trecv_info\030\002 \003(\0132\020."
    "MsgGiftRoleInfo\"\213\001\n\010MsgActon\022\024\n\014new_acti"
    "onid\030\001 \001(\004\022\024\n\014old_actionid\030\002 \001(\004\022\037\n\thand"
    "_card\030\003 \003(\0132\014.MsgCardInfo\022\013\n\003wik\030\004 \001(\r\022\021"
    "\n\tcheck_sum\030\005 \001(\r\022\022\n\njf_role_id\030\006 \001(\004\"\370\001"
    "\n\016MsgUserOutCard\022\024\n\014old_actionid\030\001 \001(\004\022\024"
    "\n\014new_actionid\030\002 \001(\004\022\036\n\010out_card\030\003 \003(\0132\014"
    ".MsgCardInfo\022\020\n\010out_kind\030\004 \001(\r\022\022\n\nhand_c"
    "ount\030\005 \001(\r\022\021\n\tauto_card\030\006 \001(\010\022\013\n\003wik\030\007 \001"
    "(\r\022\021\n\tcheck_sum\030\010 \001(\r\022\027\n\017can_outcard_num"
    "\030\t \001(\r\022(\n\022teammate_hand_card\030\n \003(\0132\014.Msg"
    "CardInfo\"l\n\017MsgShowDownRole\022\017\n\007role_id\030\001"
    " \001(\004\022\022\n\ngame_count\030\002 \001(\r\022\016\n\006series\030\003 \001(\r"
    "\022\r\n\005score\030\004 \001(\005\022\025\n\rcurrent_score\030\005 \001(\005\"\243"
    "\001\n\023MsgGuanDanSDMSGInfo\022\017\n\007machine\030\001 \001(\005\022"
    "\020\n\010win_lost\030\002 \001(\005\022\021\n\tper_score\030\003 \001(\005\022\026\n\016"
    "stro_opp_score\030\004 \001(\005\022\026\n\016win_stre_score\030\005"
    " \001(\005\022\020\n\010new_rank\030\006 \001(\005\022\024\n\014master_score\030\007"
    " \001(\001\"\363\003\n\022MsgGuanDanShowDown\022\016\n\006series\030\001 "
    "\001(\r\022\"\n\010win_role\030\002 \003(\0132\020.MsgShowDownRole\022"
    "#\n\tlost_role\030\003 \003(\0132\020.MsgShowDownRole\022\022\n\n"
    "game_count\030\004 \001(\r\022\026\n\016series_role_id\030\005 \001(\004"
    "\022\021\n\tmax_score\030\006 \001(\003\022\014\n\004time\030\007 \001(\r\022\017\n\007roo"
    "m_id\030\010 \001(\004\022\"\n\nroom_state\030\t \001(\0162\016.TGuanDa"
    "nState\022\022\n\nstate_time\030\n \001(\r\022\025\n\rone_game_o"
    "ver\030\013 \001(\005\022(\n\014room_ranking\030\014 \001(\0132\022.MsgGua"
    "nDanRanking\022\022\n\nseries_inc\030\r \001(\r\022\026\n\016three"
    "_times_up\030\016 \001(\005\022\025\n\rrelieve_state\030\017 \001(\005\022\026"
    "\n\016over_endseries\030\020 \001(\005\022*\n\rintegral_list\030"
    "\021 \003(\0132\023.MsgGDIntegralCount\022&\n\010msg_info\030\022"
    " \001(\0132\024.MsgGuanDanSDMSGInfo\"3\n\022MsgGDInteg"
    "ralCount\022\016\n\006roleid\030\001 \001(\004\022\r\n\005count\030\002 \001(\r\""
    "2\n\024MsgGuanDanResistGift\022\032\n\022kingcard_role"
    "_list\030\001 \003(\004*\236\003\n\021TGuanDanRoleState\022\027\n\023STA"
    "TE_GUANDAN_READY\020\001\022\027\n\023STATE_GUANDAN_TRUS"
    "T\020\002\022\031\n\025STATE_GUANDAN_NEWROLE\020\004\022\027\n\023STATE_"
    "GUANDAN_SLEEP\020\010\022\031\n\025STATE_GUANDAN_JINGONG"
    "\020\020\022\032\n\026STATE_GUANDAN_HUANGONG\020 \022\034\n\030STATE_"
    "GUANDAN_APPLY_DISS\020@\022\036\n\031STATE_GUANDAN_RO"
    "OM_MASTER\020\200\001\022\030\n\023STATE_GUANDAN_LIMIT\020\200\002\022 "
    "\n\033STATE_GUANDAN_CONTINUE_GAME\020\200\004\022\033\n\026STAT"
    "E_GUANDAN_AUTOPASS\020\200\010\022\032\n\025STATE_GUANDAN_O"
    "FFLINE\020\200\020\022\032\n\025STATE_GUANDAN_MACHINE\020\200 \022\035\n"
    "\030STATE_GUANDAN_MSG_GIVEUP\020\200@*5\n\021TGuanDan"
    "GameState\022 \n\034STATE_GUANDAN_FIRST_OUT_CAR"
    "D\020\001*X\n\016TShowDownState\022\027\n\023TShowDown_Shuan"
    "gXia\020\001\022\024\n\020TShowDown_DanXia\020\002\022\027\n\023TShowDow"
    "n_DuiMenXia\020\003*\225\003\n\rTGuanDanState\022\025\n\021TGuan"
    "DanStateWait\020\000\022\037\n\033TGuanDanStateCheckStar"
    "tGame\020\001\022\032\n\026TGuanDanStateStartGame\020\002\022\036\n\032T"
    "GuanDanStateSendFirstCard\020\003\022\031\n\025TGuanDanS"
    "tateSendGift\020\004\022\037\n\033TGuanDanStateSendGiftF"
    "inish\020\005\022\031\n\025TGuanDanStateRecvGift\020\006\022\037\n\033TG"
    "uanDanStateRecvGiftFinish\020\007\022\027\n\023TGuanDanS"
    "tateAction\020\010\022\030\n\024TGuanDanStateOutCard\020\t\022\031"
    "\n\025TGuanDanStateShowDown\020\n\022\024\n\020TGuanDanSta"
    "teEnd\020\013\022\034\n\030TGuandanStateRelieveRoom\020\014\022\026\n"
    "\022TGuandanStateTrust\020\r*\326\002\n\nTGuanDanCT\022\014\n\010"
    "CT_ERROR\020\000\022\r\n\tCT_SINGLE\020\001\022\r\n\tCT_DOUBLE\020\002"
    "\022\021\n\rCT_THREE_TIAO\020\003\022\016\n\nCT_SHUN_ZI\020\004\022\014\n\010C"
    "T_HU_LU\020\005\022\017\n\013CT_GANG_BAN\020\006\022\025\n\021CT_LIANG_L"
    "IAN_DUI\020\007\022\024\n\020CT_SI_ZHANG_BOMB\020\010\022\024\n\020CT_WU"
    "_ZHANG_BOMB\020\t\022\024\n\020CT_TONG_HUA_SHUN\020\n\022\025\n\021C"
    "T_LIU_ZHANG_BOMB\020\013\022\024\n\020CT_QI_ZHANG_BOMB\020\014"
    "\022\024\n\020CT_BA_ZHANG_BOMB\020\r\022\025\n\021CT_JIU_ZHANG_B"
    "OMB\020\016\022\025\n\021CT_SHI_ZHANG_BOMB\020\017\022\020\n\014CT_FOUR_"
    "KING\020\020", 4286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_guandan.proto", &protobuf_RegisterTypes);
  MsgGDPlayerMSGInfo::default_instance_ = new MsgGDPlayerMSGInfo();
  MsgGuanDanPlayer::default_instance_ = new MsgGuanDanPlayer();
  MsgGiftCardInfo::default_instance_ = new MsgGiftCardInfo();
  MsgDissRoomInfo::default_instance_ = new MsgDissRoomInfo();
  MsgGuanDanRanking::default_instance_ = new MsgGuanDanRanking();
  MsgGuandanGiftRoleCardInfo::default_instance_ = new MsgGuandanGiftRoleCardInfo();
  MsgGuanDanLevelUpInfo::default_instance_ = new MsgGuanDanLevelUpInfo();
  MsgGuandanRoom::default_instance_ = new MsgGuandanRoom();
  MsgCardInfo::default_instance_ = new MsgCardInfo();
  MsgGiftRoleInfo::default_instance_ = new MsgGiftRoleInfo();
  MsgGiftRoleCount::default_instance_ = new MsgGiftRoleCount();
  MsgActon::default_instance_ = new MsgActon();
  MsgUserOutCard::default_instance_ = new MsgUserOutCard();
  MsgShowDownRole::default_instance_ = new MsgShowDownRole();
  MsgGuanDanSDMSGInfo::default_instance_ = new MsgGuanDanSDMSGInfo();
  MsgGuanDanShowDown::default_instance_ = new MsgGuanDanShowDown();
  MsgGDIntegralCount::default_instance_ = new MsgGDIntegralCount();
  MsgGuanDanResistGift::default_instance_ = new MsgGuanDanResistGift();
  MsgGDPlayerMSGInfo::default_instance_->InitAsDefaultInstance();
  MsgGuanDanPlayer::default_instance_->InitAsDefaultInstance();
  MsgGiftCardInfo::default_instance_->InitAsDefaultInstance();
  MsgDissRoomInfo::default_instance_->InitAsDefaultInstance();
  MsgGuanDanRanking::default_instance_->InitAsDefaultInstance();
  MsgGuandanGiftRoleCardInfo::default_instance_->InitAsDefaultInstance();
  MsgGuanDanLevelUpInfo::default_instance_->InitAsDefaultInstance();
  MsgGuandanRoom::default_instance_->InitAsDefaultInstance();
  MsgCardInfo::default_instance_->InitAsDefaultInstance();
  MsgGiftRoleInfo::default_instance_->InitAsDefaultInstance();
  MsgGiftRoleCount::default_instance_->InitAsDefaultInstance();
  MsgActon::default_instance_->InitAsDefaultInstance();
  MsgUserOutCard::default_instance_->InitAsDefaultInstance();
  MsgShowDownRole::default_instance_->InitAsDefaultInstance();
  MsgGuanDanSDMSGInfo::default_instance_->InitAsDefaultInstance();
  MsgGuanDanShowDown::default_instance_->InitAsDefaultInstance();
  MsgGDIntegralCount::default_instance_->InitAsDefaultInstance();
  MsgGuanDanResistGift::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fguandan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fguandan_2eproto {
  StaticDescriptorInitializer_msg_5fguandan_2eproto() {
    protobuf_AddDesc_msg_5fguandan_2eproto();
  }
} static_descriptor_initializer_msg_5fguandan_2eproto_;
const ::google::protobuf::EnumDescriptor* TGuanDanRoleState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuanDanRoleState_descriptor_;
}
bool TGuanDanRoleState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGuanDanGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuanDanGameState_descriptor_;
}
bool TGuanDanGameState_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TShowDownState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TShowDownState_descriptor_;
}
bool TShowDownState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGuanDanState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuanDanState_descriptor_;
}
bool TGuanDanState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGuanDanCT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuanDanCT_descriptor_;
}
bool TGuanDanCT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDPlayerMSGInfo::kRankFieldNumber;
const int MsgGDPlayerMSGInfo::kStarFieldNumber;
const int MsgGDPlayerMSGInfo::kScoreFieldNumber;
const int MsgGDPlayerMSGInfo::kGiveupTimeFieldNumber;
#endif  // !_MSC_VER

MsgGDPlayerMSGInfo::MsgGDPlayerMSGInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDPlayerMSGInfo)
}

void MsgGDPlayerMSGInfo::InitAsDefaultInstance() {
}

MsgGDPlayerMSGInfo::MsgGDPlayerMSGInfo(const MsgGDPlayerMSGInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDPlayerMSGInfo)
}

void MsgGDPlayerMSGInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  star_ = 0;
  score_ = 0u;
  giveup_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDPlayerMSGInfo::~MsgGDPlayerMSGInfo() {
  // @@protoc_insertion_point(destructor:MsgGDPlayerMSGInfo)
  SharedDtor();
}

void MsgGDPlayerMSGInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDPlayerMSGInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDPlayerMSGInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDPlayerMSGInfo_descriptor_;
}

const MsgGDPlayerMSGInfo& MsgGDPlayerMSGInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGDPlayerMSGInfo* MsgGDPlayerMSGInfo::default_instance_ = NULL;

MsgGDPlayerMSGInfo* MsgGDPlayerMSGInfo::New() const {
  return new MsgGDPlayerMSGInfo;
}

void MsgGDPlayerMSGInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGDPlayerMSGInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rank_, giveup_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDPlayerMSGInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDPlayerMSGInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_giveup_time;
        break;
      }

      // optional int32 giveup_time = 4;
      case 4: {
        if (tag == 32) {
         parse_giveup_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giveup_time_)));
          set_has_giveup_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDPlayerMSGInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDPlayerMSGInfo)
  return false;
#undef DO_
}

void MsgGDPlayerMSGInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDPlayerMSGInfo)
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional int32 giveup_time = 4;
  if (has_giveup_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->giveup_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDPlayerMSGInfo)
}

::google::protobuf::uint8* MsgGDPlayerMSGInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDPlayerMSGInfo)
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional int32 giveup_time = 4;
  if (has_giveup_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->giveup_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDPlayerMSGInfo)
  return target;
}

int MsgGDPlayerMSGInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional int32 giveup_time = 4;
    if (has_giveup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giveup_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDPlayerMSGInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDPlayerMSGInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDPlayerMSGInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDPlayerMSGInfo::MergeFrom(const MsgGDPlayerMSGInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_giveup_time()) {
      set_giveup_time(from.giveup_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDPlayerMSGInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDPlayerMSGInfo::CopyFrom(const MsgGDPlayerMSGInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDPlayerMSGInfo::IsInitialized() const {

  return true;
}

void MsgGDPlayerMSGInfo::Swap(MsgGDPlayerMSGInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(star_, other->star_);
    std::swap(score_, other->score_);
    std::swap(giveup_time_, other->giveup_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDPlayerMSGInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDPlayerMSGInfo_descriptor_;
  metadata.reflection = MsgGDPlayerMSGInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuanDanPlayer::kPlayerBaseFieldNumber;
const int MsgGuanDanPlayer::kStateFieldNumber;
const int MsgGuanDanPlayer::kHandCountFieldNumber;
const int MsgGuanDanPlayer::kSeatsFieldNumber;
const int MsgGuanDanPlayer::kSeriesFieldNumber;
const int MsgGuanDanPlayer::kScoreFieldNumber;
const int MsgGuanDanPlayer::kTeamFieldNumber;
const int MsgGuanDanPlayer::kPlayerMsgInfoFieldNumber;
#endif  // !_MSC_VER

MsgGuanDanPlayer::MsgGuanDanPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuanDanPlayer)
}

void MsgGuanDanPlayer::InitAsDefaultInstance() {
  player_base_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
  player_msg_info_ = const_cast< ::MsgGDPlayerMSGInfo*>(&::MsgGDPlayerMSGInfo::default_instance());
}

MsgGuanDanPlayer::MsgGuanDanPlayer(const MsgGuanDanPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuanDanPlayer)
}

void MsgGuanDanPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_base_ = NULL;
  state_ = 0u;
  hand_count_ = 0u;
  seats_ = 0u;
  series_ = 0u;
  score_ = 0;
  team_ = 0u;
  player_msg_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuanDanPlayer::~MsgGuanDanPlayer() {
  // @@protoc_insertion_point(destructor:MsgGuanDanPlayer)
  SharedDtor();
}

void MsgGuanDanPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_base_;
    delete player_msg_info_;
  }
}

void MsgGuanDanPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuanDanPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuanDanPlayer_descriptor_;
}

const MsgGuanDanPlayer& MsgGuanDanPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuanDanPlayer* MsgGuanDanPlayer::default_instance_ = NULL;

MsgGuanDanPlayer* MsgGuanDanPlayer::New() const {
  return new MsgGuanDanPlayer;
}

void MsgGuanDanPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGuanDanPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, team_);
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::MsgPlayerInfo::Clear();
    }
    if (has_player_msg_info()) {
      if (player_msg_info_ != NULL) player_msg_info_->::MsgGDPlayerMSGInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuanDanPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuanDanPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seats;
        break;
      }

      // optional uint32 seats = 4;
      case 4: {
        if (tag == 32) {
         parse_seats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seats_)));
          set_has_seats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_series;
        break;
      }

      // optional uint32 series = 5;
      case 5: {
        if (tag == 40) {
         parse_series:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_)));
          set_has_series();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int32 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_team;
        break;
      }

      // optional uint32 team = 7;
      case 7: {
        if (tag == 56) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_player_msg_info;
        break;
      }

      // optional .MsgGDPlayerMSGInfo player_msg_info = 8;
      case 8: {
        if (tag == 66) {
         parse_player_msg_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_msg_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuanDanPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuanDanPlayer)
  return false;
#undef DO_
}

void MsgGuanDanPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuanDanPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_base(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_count(), output);
  }

  // optional uint32 seats = 4;
  if (has_seats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seats(), output);
  }

  // optional uint32 series = 5;
  if (has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->series(), output);
  }

  // optional int32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // optional uint32 team = 7;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team(), output);
  }

  // optional .MsgGDPlayerMSGInfo player_msg_info = 8;
  if (has_player_msg_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->player_msg_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuanDanPlayer)
}

::google::protobuf::uint8* MsgGuanDanPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuanDanPlayer)
  // optional .MsgPlayerInfo player_base = 1;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_base(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 hand_count = 3;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_count(), target);
  }

  // optional uint32 seats = 4;
  if (has_seats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seats(), target);
  }

  // optional uint32 series = 5;
  if (has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->series(), target);
  }

  // optional int32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // optional uint32 team = 7;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team(), target);
  }

  // optional .MsgGDPlayerMSGInfo player_msg_info = 8;
  if (has_player_msg_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->player_msg_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuanDanPlayer)
  return target;
}

int MsgGuanDanPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_base = 1;
    if (has_player_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_base());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 hand_count = 3;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional uint32 seats = 4;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seats());
    }

    // optional uint32 series = 5;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series());
    }

    // optional int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint32 team = 7;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional .MsgGDPlayerMSGInfo player_msg_info = 8;
    if (has_player_msg_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_msg_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuanDanPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuanDanPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuanDanPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuanDanPlayer::MergeFrom(const MsgGuanDanPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_base()) {
      mutable_player_base()->::MsgPlayerInfo::MergeFrom(from.player_base());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_seats()) {
      set_seats(from.seats());
    }
    if (from.has_series()) {
      set_series(from.series());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_player_msg_info()) {
      mutable_player_msg_info()->::MsgGDPlayerMSGInfo::MergeFrom(from.player_msg_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuanDanPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuanDanPlayer::CopyFrom(const MsgGuanDanPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuanDanPlayer::IsInitialized() const {

  return true;
}

void MsgGuanDanPlayer::Swap(MsgGuanDanPlayer* other) {
  if (other != this) {
    std::swap(player_base_, other->player_base_);
    std::swap(state_, other->state_);
    std::swap(hand_count_, other->hand_count_);
    std::swap(seats_, other->seats_);
    std::swap(series_, other->series_);
    std::swap(score_, other->score_);
    std::swap(team_, other->team_);
    std::swap(player_msg_info_, other->player_msg_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuanDanPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuanDanPlayer_descriptor_;
  metadata.reflection = MsgGuanDanPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGiftCardInfo::kScrRoleIdFieldNumber;
const int MsgGiftCardInfo::kTarRoleIdFieldNumber;
const int MsgGiftCardInfo::kSendCardFieldNumber;
#endif  // !_MSC_VER

MsgGiftCardInfo::MsgGiftCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGiftCardInfo)
}

void MsgGiftCardInfo::InitAsDefaultInstance() {
  send_card_ = const_cast< ::MsgCardInfo*>(&::MsgCardInfo::default_instance());
}

MsgGiftCardInfo::MsgGiftCardInfo(const MsgGiftCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGiftCardInfo)
}

void MsgGiftCardInfo::SharedCtor() {
  _cached_size_ = 0;
  scr_role_id_ = GOOGLE_ULONGLONG(0);
  tar_role_id_ = GOOGLE_ULONGLONG(0);
  send_card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGiftCardInfo::~MsgGiftCardInfo() {
  // @@protoc_insertion_point(destructor:MsgGiftCardInfo)
  SharedDtor();
}

void MsgGiftCardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete send_card_;
  }
}

void MsgGiftCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGiftCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGiftCardInfo_descriptor_;
}

const MsgGiftCardInfo& MsgGiftCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGiftCardInfo* MsgGiftCardInfo::default_instance_ = NULL;

MsgGiftCardInfo* MsgGiftCardInfo::New() const {
  return new MsgGiftCardInfo;
}

void MsgGiftCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGiftCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(scr_role_id_, tar_role_id_);
    if (has_send_card()) {
      if (send_card_ != NULL) send_card_->::MsgCardInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGiftCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGiftCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scr_role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scr_role_id_)));
          set_has_scr_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_id;
        break;
      }

      // optional uint64 tar_role_id = 2;
      case 2: {
        if (tag == 16) {
         parse_tar_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tar_role_id_)));
          set_has_tar_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_send_card;
        break;
      }

      // optional .MsgCardInfo send_card = 3;
      case 3: {
        if (tag == 26) {
         parse_send_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGiftCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGiftCardInfo)
  return false;
#undef DO_
}

void MsgGiftCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGiftCardInfo)
  // optional uint64 scr_role_id = 1;
  if (has_scr_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scr_role_id(), output);
  }

  // optional uint64 tar_role_id = 2;
  if (has_tar_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tar_role_id(), output);
  }

  // optional .MsgCardInfo send_card = 3;
  if (has_send_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->send_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGiftCardInfo)
}

::google::protobuf::uint8* MsgGiftCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGiftCardInfo)
  // optional uint64 scr_role_id = 1;
  if (has_scr_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scr_role_id(), target);
  }

  // optional uint64 tar_role_id = 2;
  if (has_tar_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tar_role_id(), target);
  }

  // optional .MsgCardInfo send_card = 3;
  if (has_send_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->send_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGiftCardInfo)
  return target;
}

int MsgGiftCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 scr_role_id = 1;
    if (has_scr_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scr_role_id());
    }

    // optional uint64 tar_role_id = 2;
    if (has_tar_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tar_role_id());
    }

    // optional .MsgCardInfo send_card = 3;
    if (has_send_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGiftCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGiftCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGiftCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGiftCardInfo::MergeFrom(const MsgGiftCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scr_role_id()) {
      set_scr_role_id(from.scr_role_id());
    }
    if (from.has_tar_role_id()) {
      set_tar_role_id(from.tar_role_id());
    }
    if (from.has_send_card()) {
      mutable_send_card()->::MsgCardInfo::MergeFrom(from.send_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGiftCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGiftCardInfo::CopyFrom(const MsgGiftCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGiftCardInfo::IsInitialized() const {

  return true;
}

void MsgGiftCardInfo::Swap(MsgGiftCardInfo* other) {
  if (other != this) {
    std::swap(scr_role_id_, other->scr_role_id_);
    std::swap(tar_role_id_, other->tar_role_id_);
    std::swap(send_card_, other->send_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGiftCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGiftCardInfo_descriptor_;
  metadata.reflection = MsgGiftCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDissRoomInfo::kApplyRoleIdFieldNumber;
const int MsgDissRoomInfo::kAgreeRoleListFieldNumber;
#endif  // !_MSC_VER

MsgDissRoomInfo::MsgDissRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDissRoomInfo)
}

void MsgDissRoomInfo::InitAsDefaultInstance() {
}

MsgDissRoomInfo::MsgDissRoomInfo(const MsgDissRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDissRoomInfo)
}

void MsgDissRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  apply_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDissRoomInfo::~MsgDissRoomInfo() {
  // @@protoc_insertion_point(destructor:MsgDissRoomInfo)
  SharedDtor();
}

void MsgDissRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDissRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDissRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDissRoomInfo_descriptor_;
}

const MsgDissRoomInfo& MsgDissRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgDissRoomInfo* MsgDissRoomInfo::default_instance_ = NULL;

MsgDissRoomInfo* MsgDissRoomInfo::New() const {
  return new MsgDissRoomInfo;
}

void MsgDissRoomInfo::Clear() {
  apply_role_id_ = GOOGLE_ULONGLONG(0);
  agree_role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDissRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDissRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apply_role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_role_id_)));
          set_has_apply_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agree_role_list;
        break;
      }

      // repeated uint64 agree_role_list = 2;
      case 2: {
        if (tag == 16) {
         parse_agree_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_agree_role_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_agree_role_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agree_role_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDissRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDissRoomInfo)
  return false;
#undef DO_
}

void MsgDissRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDissRoomInfo)
  // optional uint64 apply_role_id = 1;
  if (has_apply_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apply_role_id(), output);
  }

  // repeated uint64 agree_role_list = 2;
  for (int i = 0; i < this->agree_role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->agree_role_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDissRoomInfo)
}

::google::protobuf::uint8* MsgDissRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDissRoomInfo)
  // optional uint64 apply_role_id = 1;
  if (has_apply_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apply_role_id(), target);
  }

  // repeated uint64 agree_role_list = 2;
  for (int i = 0; i < this->agree_role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->agree_role_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDissRoomInfo)
  return target;
}

int MsgDissRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apply_role_id = 1;
    if (has_apply_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_role_id());
    }

  }
  // repeated uint64 agree_role_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->agree_role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->agree_role_list(i));
    }
    total_size += 1 * this->agree_role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDissRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDissRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDissRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDissRoomInfo::MergeFrom(const MsgDissRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  agree_role_list_.MergeFrom(from.agree_role_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_role_id()) {
      set_apply_role_id(from.apply_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDissRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDissRoomInfo::CopyFrom(const MsgDissRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDissRoomInfo::IsInitialized() const {

  return true;
}

void MsgDissRoomInfo::Swap(MsgDissRoomInfo* other) {
  if (other != this) {
    std::swap(apply_role_id_, other->apply_role_id_);
    agree_role_list_.Swap(&other->agree_role_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDissRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDissRoomInfo_descriptor_;
  metadata.reflection = MsgDissRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuanDanRanking::kRankListFieldNumber;
#endif  // !_MSC_VER

MsgGuanDanRanking::MsgGuanDanRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuanDanRanking)
}

void MsgGuanDanRanking::InitAsDefaultInstance() {
}

MsgGuanDanRanking::MsgGuanDanRanking(const MsgGuanDanRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuanDanRanking)
}

void MsgGuanDanRanking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuanDanRanking::~MsgGuanDanRanking() {
  // @@protoc_insertion_point(destructor:MsgGuanDanRanking)
  SharedDtor();
}

void MsgGuanDanRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGuanDanRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuanDanRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuanDanRanking_descriptor_;
}

const MsgGuanDanRanking& MsgGuanDanRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuanDanRanking* MsgGuanDanRanking::default_instance_ = NULL;

MsgGuanDanRanking* MsgGuanDanRanking::New() const {
  return new MsgGuanDanRanking;
}

void MsgGuanDanRanking::Clear() {
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuanDanRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuanDanRanking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 rank_list = 1;
      case 1: {
        if (tag == 8) {
         parse_rank_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_rank_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_rank_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_rank_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuanDanRanking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuanDanRanking)
  return false;
#undef DO_
}

void MsgGuanDanRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuanDanRanking)
  // repeated uint64 rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuanDanRanking)
}

::google::protobuf::uint8* MsgGuanDanRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuanDanRanking)
  // repeated uint64 rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuanDanRanking)
  return target;
}

int MsgGuanDanRanking::ByteSize() const {
  int total_size = 0;

  // repeated uint64 rank_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rank_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->rank_list(i));
    }
    total_size += 1 * this->rank_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuanDanRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuanDanRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuanDanRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuanDanRanking::MergeFrom(const MsgGuanDanRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuanDanRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuanDanRanking::CopyFrom(const MsgGuanDanRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuanDanRanking::IsInitialized() const {

  return true;
}

void MsgGuanDanRanking::Swap(MsgGuanDanRanking* other) {
  if (other != this) {
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuanDanRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuanDanRanking_descriptor_;
  metadata.reflection = MsgGuanDanRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuandanGiftRoleCardInfo::kGiftRoleFieldNumber;
const int MsgGuandanGiftRoleCardInfo::kGiftCardFieldNumber;
#endif  // !_MSC_VER

MsgGuandanGiftRoleCardInfo::MsgGuandanGiftRoleCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuandanGiftRoleCardInfo)
}

void MsgGuandanGiftRoleCardInfo::InitAsDefaultInstance() {
}

MsgGuandanGiftRoleCardInfo::MsgGuandanGiftRoleCardInfo(const MsgGuandanGiftRoleCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuandanGiftRoleCardInfo)
}

void MsgGuandanGiftRoleCardInfo::SharedCtor() {
  _cached_size_ = 0;
  gift_role_ = GOOGLE_ULONGLONG(0);
  gift_card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuandanGiftRoleCardInfo::~MsgGuandanGiftRoleCardInfo() {
  // @@protoc_insertion_point(destructor:MsgGuandanGiftRoleCardInfo)
  SharedDtor();
}

void MsgGuandanGiftRoleCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGuandanGiftRoleCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuandanGiftRoleCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuandanGiftRoleCardInfo_descriptor_;
}

const MsgGuandanGiftRoleCardInfo& MsgGuandanGiftRoleCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuandanGiftRoleCardInfo* MsgGuandanGiftRoleCardInfo::default_instance_ = NULL;

MsgGuandanGiftRoleCardInfo* MsgGuandanGiftRoleCardInfo::New() const {
  return new MsgGuandanGiftRoleCardInfo;
}

void MsgGuandanGiftRoleCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGuandanGiftRoleCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gift_role_, gift_card_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuandanGiftRoleCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuandanGiftRoleCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gift_role = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gift_role_)));
          set_has_gift_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gift_card;
        break;
      }

      // optional uint32 gift_card = 2;
      case 2: {
        if (tag == 16) {
         parse_gift_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_card_)));
          set_has_gift_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuandanGiftRoleCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuandanGiftRoleCardInfo)
  return false;
#undef DO_
}

void MsgGuandanGiftRoleCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuandanGiftRoleCardInfo)
  // optional uint64 gift_role = 1;
  if (has_gift_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gift_role(), output);
  }

  // optional uint32 gift_card = 2;
  if (has_gift_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gift_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuandanGiftRoleCardInfo)
}

::google::protobuf::uint8* MsgGuandanGiftRoleCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuandanGiftRoleCardInfo)
  // optional uint64 gift_role = 1;
  if (has_gift_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gift_role(), target);
  }

  // optional uint32 gift_card = 2;
  if (has_gift_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gift_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuandanGiftRoleCardInfo)
  return target;
}

int MsgGuandanGiftRoleCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 gift_role = 1;
    if (has_gift_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gift_role());
    }

    // optional uint32 gift_card = 2;
    if (has_gift_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuandanGiftRoleCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuandanGiftRoleCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuandanGiftRoleCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuandanGiftRoleCardInfo::MergeFrom(const MsgGuandanGiftRoleCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_role()) {
      set_gift_role(from.gift_role());
    }
    if (from.has_gift_card()) {
      set_gift_card(from.gift_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuandanGiftRoleCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuandanGiftRoleCardInfo::CopyFrom(const MsgGuandanGiftRoleCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuandanGiftRoleCardInfo::IsInitialized() const {

  return true;
}

void MsgGuandanGiftRoleCardInfo::Swap(MsgGuandanGiftRoleCardInfo* other) {
  if (other != this) {
    std::swap(gift_role_, other->gift_role_);
    std::swap(gift_card_, other->gift_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuandanGiftRoleCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuandanGiftRoleCardInfo_descriptor_;
  metadata.reflection = MsgGuandanGiftRoleCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuanDanLevelUpInfo::kMyselfLevelupFieldNumber;
const int MsgGuanDanLevelUpInfo::kOtherLeveupFieldNumber;
#endif  // !_MSC_VER

MsgGuanDanLevelUpInfo::MsgGuanDanLevelUpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuanDanLevelUpInfo)
}

void MsgGuanDanLevelUpInfo::InitAsDefaultInstance() {
}

MsgGuanDanLevelUpInfo::MsgGuanDanLevelUpInfo(const MsgGuanDanLevelUpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuanDanLevelUpInfo)
}

void MsgGuanDanLevelUpInfo::SharedCtor() {
  _cached_size_ = 0;
  myself_levelup_ = 0u;
  other_leveup_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuanDanLevelUpInfo::~MsgGuanDanLevelUpInfo() {
  // @@protoc_insertion_point(destructor:MsgGuanDanLevelUpInfo)
  SharedDtor();
}

void MsgGuanDanLevelUpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGuanDanLevelUpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuanDanLevelUpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuanDanLevelUpInfo_descriptor_;
}

const MsgGuanDanLevelUpInfo& MsgGuanDanLevelUpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuanDanLevelUpInfo* MsgGuanDanLevelUpInfo::default_instance_ = NULL;

MsgGuanDanLevelUpInfo* MsgGuanDanLevelUpInfo::New() const {
  return new MsgGuanDanLevelUpInfo;
}

void MsgGuanDanLevelUpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGuanDanLevelUpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myself_levelup_, other_leveup_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuanDanLevelUpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuanDanLevelUpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 myself_levelup = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myself_levelup_)));
          set_has_myself_levelup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_other_leveup;
        break;
      }

      // optional uint32 other_leveup = 2;
      case 2: {
        if (tag == 16) {
         parse_other_leveup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_leveup_)));
          set_has_other_leveup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuanDanLevelUpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuanDanLevelUpInfo)
  return false;
#undef DO_
}

void MsgGuanDanLevelUpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuanDanLevelUpInfo)
  // optional uint32 myself_levelup = 1;
  if (has_myself_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myself_levelup(), output);
  }

  // optional uint32 other_leveup = 2;
  if (has_other_leveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->other_leveup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuanDanLevelUpInfo)
}

::google::protobuf::uint8* MsgGuanDanLevelUpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuanDanLevelUpInfo)
  // optional uint32 myself_levelup = 1;
  if (has_myself_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myself_levelup(), target);
  }

  // optional uint32 other_leveup = 2;
  if (has_other_leveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->other_leveup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuanDanLevelUpInfo)
  return target;
}

int MsgGuanDanLevelUpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 myself_levelup = 1;
    if (has_myself_levelup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myself_levelup());
    }

    // optional uint32 other_leveup = 2;
    if (has_other_leveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_leveup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuanDanLevelUpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuanDanLevelUpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuanDanLevelUpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuanDanLevelUpInfo::MergeFrom(const MsgGuanDanLevelUpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myself_levelup()) {
      set_myself_levelup(from.myself_levelup());
    }
    if (from.has_other_leveup()) {
      set_other_leveup(from.other_leveup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuanDanLevelUpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuanDanLevelUpInfo::CopyFrom(const MsgGuanDanLevelUpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuanDanLevelUpInfo::IsInitialized() const {

  return true;
}

void MsgGuanDanLevelUpInfo::Swap(MsgGuanDanLevelUpInfo* other) {
  if (other != this) {
    std::swap(myself_levelup_, other->myself_levelup_);
    std::swap(other_leveup_, other->other_leveup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuanDanLevelUpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuanDanLevelUpInfo_descriptor_;
  metadata.reflection = MsgGuanDanLevelUpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuandanRoom::kRoomStateFieldNumber;
const int MsgGuandanRoom::kStateTimeFieldNumber;
const int MsgGuandanRoom::kPlayerListFieldNumber;
const int MsgGuandanRoom::kActionIdFieldNumber;
const int MsgGuandanRoom::kHandCardFieldNumber;
const int MsgGuandanRoom::kSeriesFieldNumber;
const int MsgGuandanRoom::kRoomIdFieldNumber;
const int MsgGuandanRoom::kGiftCardFieldNumber;
const int MsgGuandanRoom::kJiefengIdFieldNumber;
const int MsgGuandanRoom::kLastOutCardInfoFieldNumber;
const int MsgGuandanRoom::kWikFieldNumber;
const int MsgGuandanRoom::kGameCountFieldNumber;
const int MsgGuandanRoom::kCostIdFieldNumber;
const int MsgGuandanRoom::kGiftRoleInfoFieldNumber;
const int MsgGuandanRoom::kDissRoomInfoFieldNumber;
const int MsgGuandanRoom::kSeriesRoleIdFieldNumber;
const int MsgGuandanRoom::kRoomSpecialKindFieldNumber;
const int MsgGuandanRoom::kRoomRankingFieldNumber;
const int MsgGuandanRoom::kRoomTypeFieldNumber;
const int MsgGuandanRoom::kRoomPayTypeFieldNumber;
const int MsgGuandanRoom::kSendGiftRolecardInfoFieldNumber;
const int MsgGuandanRoom::kRecvGiftRolecardInfoFieldNumber;
const int MsgGuandanRoom::kRoomRunTimeFieldNumber;
const int MsgGuandanRoom::kRoomParamFieldNumber;
const int MsgGuandanRoom::kOutCardNumsFieldNumber;
const int MsgGuandanRoom::kLevelUpInfoFieldNumber;
#endif  // !_MSC_VER

MsgGuandanRoom::MsgGuandanRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuandanRoom)
}

void MsgGuandanRoom::InitAsDefaultInstance() {
  gift_card_ = const_cast< ::MsgGiftCardInfo*>(&::MsgGiftCardInfo::default_instance());
  last_out_card_info_ = const_cast< ::MsgUserOutCard*>(&::MsgUserOutCard::default_instance());
  gift_role_info_ = const_cast< ::MsgGiftRoleCount*>(&::MsgGiftRoleCount::default_instance());
  diss_room_info_ = const_cast< ::MsgDissRoomInfo*>(&::MsgDissRoomInfo::default_instance());
  room_ranking_ = const_cast< ::MsgGuanDanRanking*>(&::MsgGuanDanRanking::default_instance());
}

MsgGuandanRoom::MsgGuandanRoom(const MsgGuandanRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuandanRoom)
}

void MsgGuandanRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_state_ = 0;
  state_time_ = 0u;
  action_id_ = GOOGLE_ULONGLONG(0);
  series_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  gift_card_ = NULL;
  jiefeng_id_ = GOOGLE_ULONGLONG(0);
  last_out_card_info_ = NULL;
  wik_ = 0u;
  game_count_ = 0u;
  cost_id_ = 0u;
  gift_role_info_ = NULL;
  diss_room_info_ = NULL;
  series_role_id_ = GOOGLE_ULONGLONG(0);
  room_special_kind_ = 0u;
  room_ranking_ = NULL;
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_pay_type_ = 0u;
  room_run_time_ = 0u;
  room_param_ = 0u;
  out_card_nums_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuandanRoom::~MsgGuandanRoom() {
  // @@protoc_insertion_point(destructor:MsgGuandanRoom)
  SharedDtor();
}

void MsgGuandanRoom::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
    delete gift_card_;
    delete last_out_card_info_;
    delete gift_role_info_;
    delete diss_room_info_;
    delete room_ranking_;
  }
}

void MsgGuandanRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuandanRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuandanRoom_descriptor_;
}

const MsgGuandanRoom& MsgGuandanRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuandanRoom* MsgGuandanRoom::default_instance_ = NULL;

MsgGuandanRoom* MsgGuandanRoom::New() const {
  return new MsgGuandanRoom;
}

void MsgGuandanRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGuandanRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 235) {
    ZR_(room_state_, state_time_);
    action_id_ = GOOGLE_ULONGLONG(0);
    series_ = 0u;
    room_id_ = GOOGLE_ULONGLONG(0);
    if (has_gift_card()) {
      if (gift_card_ != NULL) gift_card_->::MsgGiftCardInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(wik_, jiefeng_id_);
    ZR_(game_count_, cost_id_);
    if (has_last_out_card_info()) {
      if (last_out_card_info_ != NULL) last_out_card_info_->::MsgUserOutCard::Clear();
    }
    if (has_gift_role_info()) {
      if (gift_role_info_ != NULL) gift_role_info_->::MsgGiftRoleCount::Clear();
    }
    if (has_diss_room_info()) {
      if (diss_room_info_ != NULL) diss_room_info_->::MsgDissRoomInfo::Clear();
    }
    series_role_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & 13565952) {
    ZR_(room_special_kind_, room_pay_type_);
    ZR_(room_run_time_, room_param_);
    if (has_room_ranking()) {
      if (room_ranking_ != NULL) room_ranking_->::MsgGuanDanRanking::Clear();
    }
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
  }
  out_card_nums_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  hand_card_.Clear();
  send_gift_rolecard_info_.Clear();
  recv_gift_rolecard_info_.Clear();
  level_up_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuandanRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuandanRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TGuanDanState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TGuanDanState_IsValid(value)) {
            set_room_state(static_cast< ::TGuanDanState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 2;
      case 2: {
        if (tag == 16) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        break;
      }

      // repeated .MsgGuanDanPlayer player_list = 3;
      case 3: {
        if (tag == 26) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_list;
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint64 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hand_card;
        break;
      }

      // repeated .MsgCardInfo hand_card = 5;
      case 5: {
        if (tag == 42) {
         parse_hand_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hand_card;
        if (input->ExpectTag(48)) goto parse_series;
        break;
      }

      // optional uint32 series = 6;
      case 6: {
        if (tag == 48) {
         parse_series:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_)));
          set_has_series();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 7;
      case 7: {
        if (tag == 56) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gift_card;
        break;
      }

      // optional .MsgGiftCardInfo gift_card = 8;
      case 8: {
        if (tag == 66) {
         parse_gift_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gift_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_jiefeng_id;
        break;
      }

      // optional uint64 jiefeng_id = 9;
      case 9: {
        if (tag == 72) {
         parse_jiefeng_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jiefeng_id_)));
          set_has_jiefeng_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_last_out_card_info;
        break;
      }

      // optional .MsgUserOutCard last_out_card_info = 10;
      case 10: {
        if (tag == 82) {
         parse_last_out_card_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_out_card_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 11;
      case 11: {
        if (tag == 88) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 12;
      case 12: {
        if (tag == 96) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cost_id;
        break;
      }

      // optional uint32 cost_id = 13;
      case 13: {
        if (tag == 104) {
         parse_cost_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_id_)));
          set_has_cost_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_gift_role_info;
        break;
      }

      // optional .MsgGiftRoleCount gift_role_info = 14;
      case 14: {
        if (tag == 114) {
         parse_gift_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gift_role_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_diss_room_info;
        break;
      }

      // optional .MsgDissRoomInfo diss_room_info = 15;
      case 15: {
        if (tag == 122) {
         parse_diss_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diss_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_series_role_id;
        break;
      }

      // optional uint64 series_role_id = 16;
      case 16: {
        if (tag == 128) {
         parse_series_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &series_role_id_)));
          set_has_series_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_room_special_kind;
        break;
      }

      // optional uint32 room_special_kind = 17;
      case 17: {
        if (tag == 136) {
         parse_room_special_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_special_kind_)));
          set_has_room_special_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_room_ranking;
        break;
      }

      // optional .MsgGuanDanRanking room_ranking = 18;
      case 18: {
        if (tag == 146) {
         parse_room_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_ranking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_room_type;
        break;
      }

      // optional string room_type = 19;
      case 19: {
        if (tag == 154) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_room_pay_type;
        break;
      }

      // optional uint32 room_pay_type = 20;
      case 20: {
        if (tag == 160) {
         parse_room_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_pay_type_)));
          set_has_room_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_send_gift_rolecard_info;
        break;
      }

      // repeated .MsgGuandanGiftRoleCardInfo send_gift_rolecard_info = 21;
      case 21: {
        if (tag == 170) {
         parse_send_gift_rolecard_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_send_gift_rolecard_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_send_gift_rolecard_info;
        if (input->ExpectTag(178)) goto parse_recv_gift_rolecard_info;
        break;
      }

      // repeated .MsgGuandanGiftRoleCardInfo recv_gift_rolecard_info = 22;
      case 22: {
        if (tag == 178) {
         parse_recv_gift_rolecard_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recv_gift_rolecard_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_recv_gift_rolecard_info;
        if (input->ExpectTag(184)) goto parse_room_run_time;
        break;
      }

      // optional uint32 room_run_time = 23;
      case 23: {
        if (tag == 184) {
         parse_room_run_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_run_time_)));
          set_has_room_run_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_room_param;
        break;
      }

      // optional uint32 room_param = 24;
      case 24: {
        if (tag == 192) {
         parse_room_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_param_)));
          set_has_room_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_out_card_nums;
        break;
      }

      // optional uint32 out_card_nums = 25;
      case 25: {
        if (tag == 200) {
         parse_out_card_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_card_nums_)));
          set_has_out_card_nums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_level_up_info;
        break;
      }

      // repeated .MsgGuanDanLevelUpInfo level_up_info = 26;
      case 26: {
        if (tag == 210) {
         parse_level_up_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_up_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_level_up_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuandanRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuandanRoom)
  return false;
#undef DO_
}

void MsgGuandanRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuandanRoom)
  // optional .TGuanDanState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_time(), output);
  }

  // repeated .MsgGuanDanPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_list(i), output);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->action_id(), output);
  }

  // repeated .MsgCardInfo hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hand_card(i), output);
  }

  // optional uint32 series = 6;
  if (has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->series(), output);
  }

  // optional uint64 room_id = 7;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->room_id(), output);
  }

  // optional .MsgGiftCardInfo gift_card = 8;
  if (has_gift_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gift_card(), output);
  }

  // optional uint64 jiefeng_id = 9;
  if (has_jiefeng_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->jiefeng_id(), output);
  }

  // optional .MsgUserOutCard last_out_card_info = 10;
  if (has_last_out_card_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->last_out_card_info(), output);
  }

  // optional uint32 wik = 11;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wik(), output);
  }

  // optional uint32 game_count = 12;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->game_count(), output);
  }

  // optional uint32 cost_id = 13;
  if (has_cost_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cost_id(), output);
  }

  // optional .MsgGiftRoleCount gift_role_info = 14;
  if (has_gift_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->gift_role_info(), output);
  }

  // optional .MsgDissRoomInfo diss_room_info = 15;
  if (has_diss_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->diss_room_info(), output);
  }

  // optional uint64 series_role_id = 16;
  if (has_series_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->series_role_id(), output);
  }

  // optional uint32 room_special_kind = 17;
  if (has_room_special_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->room_special_kind(), output);
  }

  // optional .MsgGuanDanRanking room_ranking = 18;
  if (has_room_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->room_ranking(), output);
  }

  // optional string room_type = 19;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->room_type(), output);
  }

  // optional uint32 room_pay_type = 20;
  if (has_room_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->room_pay_type(), output);
  }

  // repeated .MsgGuandanGiftRoleCardInfo send_gift_rolecard_info = 21;
  for (int i = 0; i < this->send_gift_rolecard_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->send_gift_rolecard_info(i), output);
  }

  // repeated .MsgGuandanGiftRoleCardInfo recv_gift_rolecard_info = 22;
  for (int i = 0; i < this->recv_gift_rolecard_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->recv_gift_rolecard_info(i), output);
  }

  // optional uint32 room_run_time = 23;
  if (has_room_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->room_run_time(), output);
  }

  // optional uint32 room_param = 24;
  if (has_room_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->room_param(), output);
  }

  // optional uint32 out_card_nums = 25;
  if (has_out_card_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->out_card_nums(), output);
  }

  // repeated .MsgGuanDanLevelUpInfo level_up_info = 26;
  for (int i = 0; i < this->level_up_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->level_up_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuandanRoom)
}

::google::protobuf::uint8* MsgGuandanRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuandanRoom)
  // optional .TGuanDanState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // optional uint32 state_time = 2;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_time(), target);
  }

  // repeated .MsgGuanDanPlayer player_list = 3;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_list(i), target);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->action_id(), target);
  }

  // repeated .MsgCardInfo hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hand_card(i), target);
  }

  // optional uint32 series = 6;
  if (has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->series(), target);
  }

  // optional uint64 room_id = 7;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->room_id(), target);
  }

  // optional .MsgGiftCardInfo gift_card = 8;
  if (has_gift_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gift_card(), target);
  }

  // optional uint64 jiefeng_id = 9;
  if (has_jiefeng_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->jiefeng_id(), target);
  }

  // optional .MsgUserOutCard last_out_card_info = 10;
  if (has_last_out_card_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->last_out_card_info(), target);
  }

  // optional uint32 wik = 11;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wik(), target);
  }

  // optional uint32 game_count = 12;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->game_count(), target);
  }

  // optional uint32 cost_id = 13;
  if (has_cost_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cost_id(), target);
  }

  // optional .MsgGiftRoleCount gift_role_info = 14;
  if (has_gift_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->gift_role_info(), target);
  }

  // optional .MsgDissRoomInfo diss_room_info = 15;
  if (has_diss_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->diss_room_info(), target);
  }

  // optional uint64 series_role_id = 16;
  if (has_series_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->series_role_id(), target);
  }

  // optional uint32 room_special_kind = 17;
  if (has_room_special_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->room_special_kind(), target);
  }

  // optional .MsgGuanDanRanking room_ranking = 18;
  if (has_room_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->room_ranking(), target);
  }

  // optional string room_type = 19;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->room_type(), target);
  }

  // optional uint32 room_pay_type = 20;
  if (has_room_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->room_pay_type(), target);
  }

  // repeated .MsgGuandanGiftRoleCardInfo send_gift_rolecard_info = 21;
  for (int i = 0; i < this->send_gift_rolecard_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->send_gift_rolecard_info(i), target);
  }

  // repeated .MsgGuandanGiftRoleCardInfo recv_gift_rolecard_info = 22;
  for (int i = 0; i < this->recv_gift_rolecard_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->recv_gift_rolecard_info(i), target);
  }

  // optional uint32 room_run_time = 23;
  if (has_room_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->room_run_time(), target);
  }

  // optional uint32 room_param = 24;
  if (has_room_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->room_param(), target);
  }

  // optional uint32 out_card_nums = 25;
  if (has_out_card_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->out_card_nums(), target);
  }

  // repeated .MsgGuanDanLevelUpInfo level_up_info = 26;
  for (int i = 0; i < this->level_up_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->level_up_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuandanRoom)
  return target;
}

int MsgGuandanRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TGuanDanState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 2;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional uint64 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional uint32 series = 6;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series());
    }

    // optional uint64 room_id = 7;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional .MsgGiftCardInfo gift_card = 8;
    if (has_gift_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gift_card());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 jiefeng_id = 9;
    if (has_jiefeng_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jiefeng_id());
    }

    // optional .MsgUserOutCard last_out_card_info = 10;
    if (has_last_out_card_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_out_card_info());
    }

    // optional uint32 wik = 11;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 game_count = 12;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 cost_id = 13;
    if (has_cost_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_id());
    }

    // optional .MsgGiftRoleCount gift_role_info = 14;
    if (has_gift_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gift_role_info());
    }

    // optional .MsgDissRoomInfo diss_room_info = 15;
    if (has_diss_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diss_room_info());
    }

    // optional uint64 series_role_id = 16;
    if (has_series_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->series_role_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 room_special_kind = 17;
    if (has_room_special_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_special_kind());
    }

    // optional .MsgGuanDanRanking room_ranking = 18;
    if (has_room_ranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_ranking());
    }

    // optional string room_type = 19;
    if (has_room_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 room_pay_type = 20;
    if (has_room_pay_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_pay_type());
    }

    // optional uint32 room_run_time = 23;
    if (has_room_run_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_run_time());
    }

    // optional uint32 room_param = 24;
    if (has_room_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_param());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 out_card_nums = 25;
    if (has_out_card_nums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_card_nums());
    }

  }
  // repeated .MsgGuanDanPlayer player_list = 3;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated .MsgCardInfo hand_card = 5;
  total_size += 1 * this->hand_card_size();
  for (int i = 0; i < this->hand_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_card(i));
  }

  // repeated .MsgGuandanGiftRoleCardInfo send_gift_rolecard_info = 21;
  total_size += 2 * this->send_gift_rolecard_info_size();
  for (int i = 0; i < this->send_gift_rolecard_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->send_gift_rolecard_info(i));
  }

  // repeated .MsgGuandanGiftRoleCardInfo recv_gift_rolecard_info = 22;
  total_size += 2 * this->recv_gift_rolecard_info_size();
  for (int i = 0; i < this->recv_gift_rolecard_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recv_gift_rolecard_info(i));
  }

  // repeated .MsgGuanDanLevelUpInfo level_up_info = 26;
  total_size += 2 * this->level_up_info_size();
  for (int i = 0; i < this->level_up_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_up_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuandanRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuandanRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuandanRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuandanRoom::MergeFrom(const MsgGuandanRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  hand_card_.MergeFrom(from.hand_card_);
  send_gift_rolecard_info_.MergeFrom(from.send_gift_rolecard_info_);
  recv_gift_rolecard_info_.MergeFrom(from.recv_gift_rolecard_info_);
  level_up_info_.MergeFrom(from.level_up_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_series()) {
      set_series(from.series());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_gift_card()) {
      mutable_gift_card()->::MsgGiftCardInfo::MergeFrom(from.gift_card());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jiefeng_id()) {
      set_jiefeng_id(from.jiefeng_id());
    }
    if (from.has_last_out_card_info()) {
      mutable_last_out_card_info()->::MsgUserOutCard::MergeFrom(from.last_out_card_info());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_cost_id()) {
      set_cost_id(from.cost_id());
    }
    if (from.has_gift_role_info()) {
      mutable_gift_role_info()->::MsgGiftRoleCount::MergeFrom(from.gift_role_info());
    }
    if (from.has_diss_room_info()) {
      mutable_diss_room_info()->::MsgDissRoomInfo::MergeFrom(from.diss_room_info());
    }
    if (from.has_series_role_id()) {
      set_series_role_id(from.series_role_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_room_special_kind()) {
      set_room_special_kind(from.room_special_kind());
    }
    if (from.has_room_ranking()) {
      mutable_room_ranking()->::MsgGuanDanRanking::MergeFrom(from.room_ranking());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_room_pay_type()) {
      set_room_pay_type(from.room_pay_type());
    }
    if (from.has_room_run_time()) {
      set_room_run_time(from.room_run_time());
    }
    if (from.has_room_param()) {
      set_room_param(from.room_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_out_card_nums()) {
      set_out_card_nums(from.out_card_nums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuandanRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuandanRoom::CopyFrom(const MsgGuandanRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuandanRoom::IsInitialized() const {

  return true;
}

void MsgGuandanRoom::Swap(MsgGuandanRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    player_list_.Swap(&other->player_list_);
    std::swap(action_id_, other->action_id_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(series_, other->series_);
    std::swap(room_id_, other->room_id_);
    std::swap(gift_card_, other->gift_card_);
    std::swap(jiefeng_id_, other->jiefeng_id_);
    std::swap(last_out_card_info_, other->last_out_card_info_);
    std::swap(wik_, other->wik_);
    std::swap(game_count_, other->game_count_);
    std::swap(cost_id_, other->cost_id_);
    std::swap(gift_role_info_, other->gift_role_info_);
    std::swap(diss_room_info_, other->diss_room_info_);
    std::swap(series_role_id_, other->series_role_id_);
    std::swap(room_special_kind_, other->room_special_kind_);
    std::swap(room_ranking_, other->room_ranking_);
    std::swap(room_type_, other->room_type_);
    std::swap(room_pay_type_, other->room_pay_type_);
    send_gift_rolecard_info_.Swap(&other->send_gift_rolecard_info_);
    recv_gift_rolecard_info_.Swap(&other->recv_gift_rolecard_info_);
    std::swap(room_run_time_, other->room_run_time_);
    std::swap(room_param_, other->room_param_);
    std::swap(out_card_nums_, other->out_card_nums_);
    level_up_info_.Swap(&other->level_up_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuandanRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuandanRoom_descriptor_;
  metadata.reflection = MsgGuandanRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCardInfo::kRowFieldNumber;
const int MsgCardInfo::kColumnFieldNumber;
const int MsgCardInfo::kIndexFieldNumber;
const int MsgCardInfo::kCardFieldNumber;
#endif  // !_MSC_VER

MsgCardInfo::MsgCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCardInfo)
}

void MsgCardInfo::InitAsDefaultInstance() {
}

MsgCardInfo::MsgCardInfo(const MsgCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCardInfo)
}

void MsgCardInfo::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0u;
  column_ = 0u;
  index_ = 0u;
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCardInfo::~MsgCardInfo() {
  // @@protoc_insertion_point(destructor:MsgCardInfo)
  SharedDtor();
}

void MsgCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCardInfo_descriptor_;
}

const MsgCardInfo& MsgCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgCardInfo* MsgCardInfo::default_instance_ = NULL;

MsgCardInfo* MsgCardInfo::New() const {
  return new MsgCardInfo;
}

void MsgCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(row_, card_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 row = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column;
        break;
      }

      // optional uint32 column = 2;
      case 2: {
        if (tag == 16) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_card;
        break;
      }

      // optional uint32 card = 4;
      case 4: {
        if (tag == 32) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCardInfo)
  return false;
#undef DO_
}

void MsgCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCardInfo)
  // optional uint32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->row(), output);
  }

  // optional uint32 column = 2;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->column(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 card = 4;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCardInfo)
}

::google::protobuf::uint8* MsgCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCardInfo)
  // optional uint32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->row(), target);
  }

  // optional uint32 column = 2;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->column(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 card = 4;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCardInfo)
  return target;
}

int MsgCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

    // optional uint32 column = 2;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 card = 4;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCardInfo::MergeFrom(const MsgCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCardInfo::CopyFrom(const MsgCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCardInfo::IsInitialized() const {

  return true;
}

void MsgCardInfo::Swap(MsgCardInfo* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(column_, other->column_);
    std::swap(index_, other->index_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCardInfo_descriptor_;
  metadata.reflection = MsgCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGiftRoleInfo::kRoleIdFieldNumber;
const int MsgGiftRoleInfo::kIsCompleteFieldNumber;
#endif  // !_MSC_VER

MsgGiftRoleInfo::MsgGiftRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGiftRoleInfo)
}

void MsgGiftRoleInfo::InitAsDefaultInstance() {
}

MsgGiftRoleInfo::MsgGiftRoleInfo(const MsgGiftRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGiftRoleInfo)
}

void MsgGiftRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  is_complete_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGiftRoleInfo::~MsgGiftRoleInfo() {
  // @@protoc_insertion_point(destructor:MsgGiftRoleInfo)
  SharedDtor();
}

void MsgGiftRoleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGiftRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGiftRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGiftRoleInfo_descriptor_;
}

const MsgGiftRoleInfo& MsgGiftRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGiftRoleInfo* MsgGiftRoleInfo::default_instance_ = NULL;

MsgGiftRoleInfo* MsgGiftRoleInfo::New() const {
  return new MsgGiftRoleInfo;
}

void MsgGiftRoleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGiftRoleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, is_complete_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGiftRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGiftRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_complete;
        break;
      }

      // optional uint32 is_complete = 2;
      case 2: {
        if (tag == 16) {
         parse_is_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_complete_)));
          set_has_is_complete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGiftRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGiftRoleInfo)
  return false;
#undef DO_
}

void MsgGiftRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGiftRoleInfo)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 is_complete = 2;
  if (has_is_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_complete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGiftRoleInfo)
}

::google::protobuf::uint8* MsgGiftRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGiftRoleInfo)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 is_complete = 2;
  if (has_is_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_complete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGiftRoleInfo)
  return target;
}

int MsgGiftRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 is_complete = 2;
    if (has_is_complete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_complete());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGiftRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGiftRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGiftRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGiftRoleInfo::MergeFrom(const MsgGiftRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_is_complete()) {
      set_is_complete(from.is_complete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGiftRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGiftRoleInfo::CopyFrom(const MsgGiftRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGiftRoleInfo::IsInitialized() const {

  return true;
}

void MsgGiftRoleInfo::Swap(MsgGiftRoleInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(is_complete_, other->is_complete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGiftRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGiftRoleInfo_descriptor_;
  metadata.reflection = MsgGiftRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGiftRoleCount::kSendInfoFieldNumber;
const int MsgGiftRoleCount::kRecvInfoFieldNumber;
#endif  // !_MSC_VER

MsgGiftRoleCount::MsgGiftRoleCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGiftRoleCount)
}

void MsgGiftRoleCount::InitAsDefaultInstance() {
}

MsgGiftRoleCount::MsgGiftRoleCount(const MsgGiftRoleCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGiftRoleCount)
}

void MsgGiftRoleCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGiftRoleCount::~MsgGiftRoleCount() {
  // @@protoc_insertion_point(destructor:MsgGiftRoleCount)
  SharedDtor();
}

void MsgGiftRoleCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGiftRoleCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGiftRoleCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGiftRoleCount_descriptor_;
}

const MsgGiftRoleCount& MsgGiftRoleCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGiftRoleCount* MsgGiftRoleCount::default_instance_ = NULL;

MsgGiftRoleCount* MsgGiftRoleCount::New() const {
  return new MsgGiftRoleCount;
}

void MsgGiftRoleCount::Clear() {
  send_info_.Clear();
  recv_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGiftRoleCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGiftRoleCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgGiftRoleInfo send_info = 1;
      case 1: {
        if (tag == 10) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_send_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_send_info;
        if (input->ExpectTag(18)) goto parse_recv_info;
        break;
      }

      // repeated .MsgGiftRoleInfo recv_info = 2;
      case 2: {
        if (tag == 18) {
         parse_recv_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recv_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recv_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGiftRoleCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGiftRoleCount)
  return false;
#undef DO_
}

void MsgGiftRoleCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGiftRoleCount)
  // repeated .MsgGiftRoleInfo send_info = 1;
  for (int i = 0; i < this->send_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->send_info(i), output);
  }

  // repeated .MsgGiftRoleInfo recv_info = 2;
  for (int i = 0; i < this->recv_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recv_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGiftRoleCount)
}

::google::protobuf::uint8* MsgGiftRoleCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGiftRoleCount)
  // repeated .MsgGiftRoleInfo send_info = 1;
  for (int i = 0; i < this->send_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->send_info(i), target);
  }

  // repeated .MsgGiftRoleInfo recv_info = 2;
  for (int i = 0; i < this->recv_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recv_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGiftRoleCount)
  return target;
}

int MsgGiftRoleCount::ByteSize() const {
  int total_size = 0;

  // repeated .MsgGiftRoleInfo send_info = 1;
  total_size += 1 * this->send_info_size();
  for (int i = 0; i < this->send_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->send_info(i));
  }

  // repeated .MsgGiftRoleInfo recv_info = 2;
  total_size += 1 * this->recv_info_size();
  for (int i = 0; i < this->recv_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recv_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGiftRoleCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGiftRoleCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGiftRoleCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGiftRoleCount::MergeFrom(const MsgGiftRoleCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  send_info_.MergeFrom(from.send_info_);
  recv_info_.MergeFrom(from.recv_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGiftRoleCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGiftRoleCount::CopyFrom(const MsgGiftRoleCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGiftRoleCount::IsInitialized() const {

  return true;
}

void MsgGiftRoleCount::Swap(MsgGiftRoleCount* other) {
  if (other != this) {
    send_info_.Swap(&other->send_info_);
    recv_info_.Swap(&other->recv_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGiftRoleCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGiftRoleCount_descriptor_;
  metadata.reflection = MsgGiftRoleCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgActon::kNewActionidFieldNumber;
const int MsgActon::kOldActionidFieldNumber;
const int MsgActon::kHandCardFieldNumber;
const int MsgActon::kWikFieldNumber;
const int MsgActon::kCheckSumFieldNumber;
const int MsgActon::kJfRoleIdFieldNumber;
#endif  // !_MSC_VER

MsgActon::MsgActon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgActon)
}

void MsgActon::InitAsDefaultInstance() {
}

MsgActon::MsgActon(const MsgActon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgActon)
}

void MsgActon::SharedCtor() {
  _cached_size_ = 0;
  new_actionid_ = GOOGLE_ULONGLONG(0);
  old_actionid_ = GOOGLE_ULONGLONG(0);
  wik_ = 0u;
  check_sum_ = 0u;
  jf_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgActon::~MsgActon() {
  // @@protoc_insertion_point(destructor:MsgActon)
  SharedDtor();
}

void MsgActon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgActon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgActon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgActon_descriptor_;
}

const MsgActon& MsgActon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgActon* MsgActon::default_instance_ = NULL;

MsgActon* MsgActon::New() const {
  return new MsgActon;
}

void MsgActon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgActon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(new_actionid_, old_actionid_);
    ZR_(wik_, jf_role_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hand_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgActon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgActon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 new_actionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_actionid_)));
          set_has_new_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_old_actionid;
        break;
      }

      // optional uint64 old_actionid = 2;
      case 2: {
        if (tag == 16) {
         parse_old_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_actionid_)));
          set_has_old_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hand_card;
        break;
      }

      // repeated .MsgCardInfo hand_card = 3;
      case 3: {
        if (tag == 26) {
         parse_hand_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hand_card;
        if (input->ExpectTag(32)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 4;
      case 4: {
        if (tag == 32) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_check_sum;
        break;
      }

      // optional uint32 check_sum = 5;
      case 5: {
        if (tag == 40) {
         parse_check_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_sum_)));
          set_has_check_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_jf_role_id;
        break;
      }

      // optional uint64 jf_role_id = 6;
      case 6: {
        if (tag == 48) {
         parse_jf_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jf_role_id_)));
          set_has_jf_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgActon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgActon)
  return false;
#undef DO_
}

void MsgActon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgActon)
  // optional uint64 new_actionid = 1;
  if (has_new_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->new_actionid(), output);
  }

  // optional uint64 old_actionid = 2;
  if (has_old_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->old_actionid(), output);
  }

  // repeated .MsgCardInfo hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hand_card(i), output);
  }

  // optional uint32 wik = 4;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wik(), output);
  }

  // optional uint32 check_sum = 5;
  if (has_check_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->check_sum(), output);
  }

  // optional uint64 jf_role_id = 6;
  if (has_jf_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->jf_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgActon)
}

::google::protobuf::uint8* MsgActon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgActon)
  // optional uint64 new_actionid = 1;
  if (has_new_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->new_actionid(), target);
  }

  // optional uint64 old_actionid = 2;
  if (has_old_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->old_actionid(), target);
  }

  // repeated .MsgCardInfo hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hand_card(i), target);
  }

  // optional uint32 wik = 4;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wik(), target);
  }

  // optional uint32 check_sum = 5;
  if (has_check_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->check_sum(), target);
  }

  // optional uint64 jf_role_id = 6;
  if (has_jf_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->jf_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgActon)
  return target;
}

int MsgActon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 new_actionid = 1;
    if (has_new_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_actionid());
    }

    // optional uint64 old_actionid = 2;
    if (has_old_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_actionid());
    }

    // optional uint32 wik = 4;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 check_sum = 5;
    if (has_check_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_sum());
    }

    // optional uint64 jf_role_id = 6;
    if (has_jf_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jf_role_id());
    }

  }
  // repeated .MsgCardInfo hand_card = 3;
  total_size += 1 * this->hand_card_size();
  for (int i = 0; i < this->hand_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgActon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgActon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgActon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgActon::MergeFrom(const MsgActon& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_card_.MergeFrom(from.hand_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_actionid()) {
      set_new_actionid(from.new_actionid());
    }
    if (from.has_old_actionid()) {
      set_old_actionid(from.old_actionid());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_check_sum()) {
      set_check_sum(from.check_sum());
    }
    if (from.has_jf_role_id()) {
      set_jf_role_id(from.jf_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgActon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActon::CopyFrom(const MsgActon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActon::IsInitialized() const {

  return true;
}

void MsgActon::Swap(MsgActon* other) {
  if (other != this) {
    std::swap(new_actionid_, other->new_actionid_);
    std::swap(old_actionid_, other->old_actionid_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(wik_, other->wik_);
    std::swap(check_sum_, other->check_sum_);
    std::swap(jf_role_id_, other->jf_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgActon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgActon_descriptor_;
  metadata.reflection = MsgActon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserOutCard::kOldActionidFieldNumber;
const int MsgUserOutCard::kNewActionidFieldNumber;
const int MsgUserOutCard::kOutCardFieldNumber;
const int MsgUserOutCard::kOutKindFieldNumber;
const int MsgUserOutCard::kHandCountFieldNumber;
const int MsgUserOutCard::kAutoCardFieldNumber;
const int MsgUserOutCard::kWikFieldNumber;
const int MsgUserOutCard::kCheckSumFieldNumber;
const int MsgUserOutCard::kCanOutcardNumFieldNumber;
const int MsgUserOutCard::kTeammateHandCardFieldNumber;
#endif  // !_MSC_VER

MsgUserOutCard::MsgUserOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUserOutCard)
}

void MsgUserOutCard::InitAsDefaultInstance() {
}

MsgUserOutCard::MsgUserOutCard(const MsgUserOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUserOutCard)
}

void MsgUserOutCard::SharedCtor() {
  _cached_size_ = 0;
  old_actionid_ = GOOGLE_ULONGLONG(0);
  new_actionid_ = GOOGLE_ULONGLONG(0);
  out_kind_ = 0u;
  hand_count_ = 0u;
  auto_card_ = false;
  wik_ = 0u;
  check_sum_ = 0u;
  can_outcard_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserOutCard::~MsgUserOutCard() {
  // @@protoc_insertion_point(destructor:MsgUserOutCard)
  SharedDtor();
}

void MsgUserOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserOutCard_descriptor_;
}

const MsgUserOutCard& MsgUserOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgUserOutCard* MsgUserOutCard::default_instance_ = NULL;

MsgUserOutCard* MsgUserOutCard::New() const {
  return new MsgUserOutCard;
}

void MsgUserOutCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserOutCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(old_actionid_, new_actionid_);
    ZR_(out_kind_, check_sum_);
  }
  can_outcard_num_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  out_card_.Clear();
  teammate_hand_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUserOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 old_actionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_actionid_)));
          set_has_old_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_actionid;
        break;
      }

      // optional uint64 new_actionid = 2;
      case 2: {
        if (tag == 16) {
         parse_new_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_actionid_)));
          set_has_new_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_out_card;
        break;
      }

      // repeated .MsgCardInfo out_card = 3;
      case 3: {
        if (tag == 26) {
         parse_out_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_out_card;
        if (input->ExpectTag(32)) goto parse_out_kind;
        break;
      }

      // optional uint32 out_kind = 4;
      case 4: {
        if (tag == 32) {
         parse_out_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_kind_)));
          set_has_out_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 5;
      case 5: {
        if (tag == 40) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_auto_card;
        break;
      }

      // optional bool auto_card = 6;
      case 6: {
        if (tag == 48) {
         parse_auto_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_card_)));
          set_has_auto_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 7;
      case 7: {
        if (tag == 56) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_check_sum;
        break;
      }

      // optional uint32 check_sum = 8;
      case 8: {
        if (tag == 64) {
         parse_check_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_sum_)));
          set_has_check_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_can_outcard_num;
        break;
      }

      // optional uint32 can_outcard_num = 9;
      case 9: {
        if (tag == 72) {
         parse_can_outcard_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_outcard_num_)));
          set_has_can_outcard_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_teammate_hand_card;
        break;
      }

      // repeated .MsgCardInfo teammate_hand_card = 10;
      case 10: {
        if (tag == 82) {
         parse_teammate_hand_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teammate_hand_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_teammate_hand_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUserOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUserOutCard)
  return false;
#undef DO_
}

void MsgUserOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUserOutCard)
  // optional uint64 old_actionid = 1;
  if (has_old_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->old_actionid(), output);
  }

  // optional uint64 new_actionid = 2;
  if (has_new_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_actionid(), output);
  }

  // repeated .MsgCardInfo out_card = 3;
  for (int i = 0; i < this->out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->out_card(i), output);
  }

  // optional uint32 out_kind = 4;
  if (has_out_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->out_kind(), output);
  }

  // optional uint32 hand_count = 5;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hand_count(), output);
  }

  // optional bool auto_card = 6;
  if (has_auto_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_card(), output);
  }

  // optional uint32 wik = 7;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wik(), output);
  }

  // optional uint32 check_sum = 8;
  if (has_check_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->check_sum(), output);
  }

  // optional uint32 can_outcard_num = 9;
  if (has_can_outcard_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->can_outcard_num(), output);
  }

  // repeated .MsgCardInfo teammate_hand_card = 10;
  for (int i = 0; i < this->teammate_hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->teammate_hand_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUserOutCard)
}

::google::protobuf::uint8* MsgUserOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUserOutCard)
  // optional uint64 old_actionid = 1;
  if (has_old_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->old_actionid(), target);
  }

  // optional uint64 new_actionid = 2;
  if (has_new_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_actionid(), target);
  }

  // repeated .MsgCardInfo out_card = 3;
  for (int i = 0; i < this->out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->out_card(i), target);
  }

  // optional uint32 out_kind = 4;
  if (has_out_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->out_kind(), target);
  }

  // optional uint32 hand_count = 5;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hand_count(), target);
  }

  // optional bool auto_card = 6;
  if (has_auto_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_card(), target);
  }

  // optional uint32 wik = 7;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wik(), target);
  }

  // optional uint32 check_sum = 8;
  if (has_check_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->check_sum(), target);
  }

  // optional uint32 can_outcard_num = 9;
  if (has_can_outcard_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->can_outcard_num(), target);
  }

  // repeated .MsgCardInfo teammate_hand_card = 10;
  for (int i = 0; i < this->teammate_hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->teammate_hand_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUserOutCard)
  return target;
}

int MsgUserOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 old_actionid = 1;
    if (has_old_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_actionid());
    }

    // optional uint64 new_actionid = 2;
    if (has_new_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_actionid());
    }

    // optional uint32 out_kind = 4;
    if (has_out_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_kind());
    }

    // optional uint32 hand_count = 5;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

    // optional bool auto_card = 6;
    if (has_auto_card()) {
      total_size += 1 + 1;
    }

    // optional uint32 wik = 7;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 check_sum = 8;
    if (has_check_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_sum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 can_outcard_num = 9;
    if (has_can_outcard_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_outcard_num());
    }

  }
  // repeated .MsgCardInfo out_card = 3;
  total_size += 1 * this->out_card_size();
  for (int i = 0; i < this->out_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out_card(i));
  }

  // repeated .MsgCardInfo teammate_hand_card = 10;
  total_size += 1 * this->teammate_hand_card_size();
  for (int i = 0; i < this->teammate_hand_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammate_hand_card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserOutCard::MergeFrom(const MsgUserOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  out_card_.MergeFrom(from.out_card_);
  teammate_hand_card_.MergeFrom(from.teammate_hand_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_actionid()) {
      set_old_actionid(from.old_actionid());
    }
    if (from.has_new_actionid()) {
      set_new_actionid(from.new_actionid());
    }
    if (from.has_out_kind()) {
      set_out_kind(from.out_kind());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_auto_card()) {
      set_auto_card(from.auto_card());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_check_sum()) {
      set_check_sum(from.check_sum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_can_outcard_num()) {
      set_can_outcard_num(from.can_outcard_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserOutCard::CopyFrom(const MsgUserOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserOutCard::IsInitialized() const {

  return true;
}

void MsgUserOutCard::Swap(MsgUserOutCard* other) {
  if (other != this) {
    std::swap(old_actionid_, other->old_actionid_);
    std::swap(new_actionid_, other->new_actionid_);
    out_card_.Swap(&other->out_card_);
    std::swap(out_kind_, other->out_kind_);
    std::swap(hand_count_, other->hand_count_);
    std::swap(auto_card_, other->auto_card_);
    std::swap(wik_, other->wik_);
    std::swap(check_sum_, other->check_sum_);
    std::swap(can_outcard_num_, other->can_outcard_num_);
    teammate_hand_card_.Swap(&other->teammate_hand_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserOutCard_descriptor_;
  metadata.reflection = MsgUserOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShowDownRole::kRoleIdFieldNumber;
const int MsgShowDownRole::kGameCountFieldNumber;
const int MsgShowDownRole::kSeriesFieldNumber;
const int MsgShowDownRole::kScoreFieldNumber;
const int MsgShowDownRole::kCurrentScoreFieldNumber;
#endif  // !_MSC_VER

MsgShowDownRole::MsgShowDownRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShowDownRole)
}

void MsgShowDownRole::InitAsDefaultInstance() {
}

MsgShowDownRole::MsgShowDownRole(const MsgShowDownRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShowDownRole)
}

void MsgShowDownRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0u;
  series_ = 0u;
  score_ = 0;
  current_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShowDownRole::~MsgShowDownRole() {
  // @@protoc_insertion_point(destructor:MsgShowDownRole)
  SharedDtor();
}

void MsgShowDownRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgShowDownRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShowDownRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShowDownRole_descriptor_;
}

const MsgShowDownRole& MsgShowDownRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgShowDownRole* MsgShowDownRole::default_instance_ = NULL;

MsgShowDownRole* MsgShowDownRole::New() const {
  return new MsgShowDownRole;
}

void MsgShowDownRole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgShowDownRole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(role_id_, current_score_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShowDownRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShowDownRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 2;
      case 2: {
        if (tag == 16) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_series;
        break;
      }

      // optional uint32 series = 3;
      case 3: {
        if (tag == 24) {
         parse_series:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_)));
          set_has_series();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_current_score;
        break;
      }

      // optional int32 current_score = 5;
      case 5: {
        if (tag == 40) {
         parse_current_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_score_)));
          set_has_current_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShowDownRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShowDownRole)
  return false;
#undef DO_
}

void MsgShowDownRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShowDownRole)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 game_count = 2;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_count(), output);
  }

  // optional uint32 series = 3;
  if (has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 current_score = 5;
  if (has_current_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShowDownRole)
}

::google::protobuf::uint8* MsgShowDownRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShowDownRole)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 game_count = 2;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_count(), target);
  }

  // optional uint32 series = 3;
  if (has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 current_score = 5;
  if (has_current_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShowDownRole)
  return target;
}

int MsgShowDownRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 game_count = 2;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 series = 3;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 current_score = 5;
    if (has_current_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShowDownRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShowDownRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShowDownRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShowDownRole::MergeFrom(const MsgShowDownRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_series()) {
      set_series(from.series());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_current_score()) {
      set_current_score(from.current_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShowDownRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShowDownRole::CopyFrom(const MsgShowDownRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShowDownRole::IsInitialized() const {

  return true;
}

void MsgShowDownRole::Swap(MsgShowDownRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(game_count_, other->game_count_);
    std::swap(series_, other->series_);
    std::swap(score_, other->score_);
    std::swap(current_score_, other->current_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShowDownRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShowDownRole_descriptor_;
  metadata.reflection = MsgShowDownRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuanDanSDMSGInfo::kMachineFieldNumber;
const int MsgGuanDanSDMSGInfo::kWinLostFieldNumber;
const int MsgGuanDanSDMSGInfo::kPerScoreFieldNumber;
const int MsgGuanDanSDMSGInfo::kStroOppScoreFieldNumber;
const int MsgGuanDanSDMSGInfo::kWinStreScoreFieldNumber;
const int MsgGuanDanSDMSGInfo::kNewRankFieldNumber;
const int MsgGuanDanSDMSGInfo::kMasterScoreFieldNumber;
#endif  // !_MSC_VER

MsgGuanDanSDMSGInfo::MsgGuanDanSDMSGInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuanDanSDMSGInfo)
}

void MsgGuanDanSDMSGInfo::InitAsDefaultInstance() {
}

MsgGuanDanSDMSGInfo::MsgGuanDanSDMSGInfo(const MsgGuanDanSDMSGInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuanDanSDMSGInfo)
}

void MsgGuanDanSDMSGInfo::SharedCtor() {
  _cached_size_ = 0;
  machine_ = 0;
  win_lost_ = 0;
  per_score_ = 0;
  stro_opp_score_ = 0;
  win_stre_score_ = 0;
  new_rank_ = 0;
  master_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuanDanSDMSGInfo::~MsgGuanDanSDMSGInfo() {
  // @@protoc_insertion_point(destructor:MsgGuanDanSDMSGInfo)
  SharedDtor();
}

void MsgGuanDanSDMSGInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGuanDanSDMSGInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuanDanSDMSGInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuanDanSDMSGInfo_descriptor_;
}

const MsgGuanDanSDMSGInfo& MsgGuanDanSDMSGInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuanDanSDMSGInfo* MsgGuanDanSDMSGInfo::default_instance_ = NULL;

MsgGuanDanSDMSGInfo* MsgGuanDanSDMSGInfo::New() const {
  return new MsgGuanDanSDMSGInfo;
}

void MsgGuanDanSDMSGInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGuanDanSDMSGInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(machine_, master_score_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuanDanSDMSGInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuanDanSDMSGInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 machine = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &machine_)));
          set_has_machine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_win_lost;
        break;
      }

      // optional int32 win_lost = 2;
      case 2: {
        if (tag == 16) {
         parse_win_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_lost_)));
          set_has_win_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_per_score;
        break;
      }

      // optional int32 per_score = 3;
      case 3: {
        if (tag == 24) {
         parse_per_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_score_)));
          set_has_per_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stro_opp_score;
        break;
      }

      // optional int32 stro_opp_score = 4;
      case 4: {
        if (tag == 32) {
         parse_stro_opp_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stro_opp_score_)));
          set_has_stro_opp_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_win_stre_score;
        break;
      }

      // optional int32 win_stre_score = 5;
      case 5: {
        if (tag == 40) {
         parse_win_stre_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_stre_score_)));
          set_has_win_stre_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_new_rank;
        break;
      }

      // optional int32 new_rank = 6;
      case 6: {
        if (tag == 48) {
         parse_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_rank_)));
          set_has_new_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_master_score;
        break;
      }

      // optional double master_score = 7;
      case 7: {
        if (tag == 57) {
         parse_master_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &master_score_)));
          set_has_master_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuanDanSDMSGInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuanDanSDMSGInfo)
  return false;
#undef DO_
}

void MsgGuanDanSDMSGInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuanDanSDMSGInfo)
  // optional int32 machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->machine(), output);
  }

  // optional int32 win_lost = 2;
  if (has_win_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_lost(), output);
  }

  // optional int32 per_score = 3;
  if (has_per_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->per_score(), output);
  }

  // optional int32 stro_opp_score = 4;
  if (has_stro_opp_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stro_opp_score(), output);
  }

  // optional int32 win_stre_score = 5;
  if (has_win_stre_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_stre_score(), output);
  }

  // optional int32 new_rank = 6;
  if (has_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->new_rank(), output);
  }

  // optional double master_score = 7;
  if (has_master_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->master_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuanDanSDMSGInfo)
}

::google::protobuf::uint8* MsgGuanDanSDMSGInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuanDanSDMSGInfo)
  // optional int32 machine = 1;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->machine(), target);
  }

  // optional int32 win_lost = 2;
  if (has_win_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_lost(), target);
  }

  // optional int32 per_score = 3;
  if (has_per_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->per_score(), target);
  }

  // optional int32 stro_opp_score = 4;
  if (has_stro_opp_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stro_opp_score(), target);
  }

  // optional int32 win_stre_score = 5;
  if (has_win_stre_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_stre_score(), target);
  }

  // optional int32 new_rank = 6;
  if (has_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->new_rank(), target);
  }

  // optional double master_score = 7;
  if (has_master_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->master_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuanDanSDMSGInfo)
  return target;
}

int MsgGuanDanSDMSGInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->machine());
    }

    // optional int32 win_lost = 2;
    if (has_win_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_lost());
    }

    // optional int32 per_score = 3;
    if (has_per_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->per_score());
    }

    // optional int32 stro_opp_score = 4;
    if (has_stro_opp_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stro_opp_score());
    }

    // optional int32 win_stre_score = 5;
    if (has_win_stre_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_stre_score());
    }

    // optional int32 new_rank = 6;
    if (has_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_rank());
    }

    // optional double master_score = 7;
    if (has_master_score()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuanDanSDMSGInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuanDanSDMSGInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuanDanSDMSGInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuanDanSDMSGInfo::MergeFrom(const MsgGuanDanSDMSGInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      set_machine(from.machine());
    }
    if (from.has_win_lost()) {
      set_win_lost(from.win_lost());
    }
    if (from.has_per_score()) {
      set_per_score(from.per_score());
    }
    if (from.has_stro_opp_score()) {
      set_stro_opp_score(from.stro_opp_score());
    }
    if (from.has_win_stre_score()) {
      set_win_stre_score(from.win_stre_score());
    }
    if (from.has_new_rank()) {
      set_new_rank(from.new_rank());
    }
    if (from.has_master_score()) {
      set_master_score(from.master_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuanDanSDMSGInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuanDanSDMSGInfo::CopyFrom(const MsgGuanDanSDMSGInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuanDanSDMSGInfo::IsInitialized() const {

  return true;
}

void MsgGuanDanSDMSGInfo::Swap(MsgGuanDanSDMSGInfo* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    std::swap(win_lost_, other->win_lost_);
    std::swap(per_score_, other->per_score_);
    std::swap(stro_opp_score_, other->stro_opp_score_);
    std::swap(win_stre_score_, other->win_stre_score_);
    std::swap(new_rank_, other->new_rank_);
    std::swap(master_score_, other->master_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuanDanSDMSGInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuanDanSDMSGInfo_descriptor_;
  metadata.reflection = MsgGuanDanSDMSGInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuanDanShowDown::kSeriesFieldNumber;
const int MsgGuanDanShowDown::kWinRoleFieldNumber;
const int MsgGuanDanShowDown::kLostRoleFieldNumber;
const int MsgGuanDanShowDown::kGameCountFieldNumber;
const int MsgGuanDanShowDown::kSeriesRoleIdFieldNumber;
const int MsgGuanDanShowDown::kMaxScoreFieldNumber;
const int MsgGuanDanShowDown::kTimeFieldNumber;
const int MsgGuanDanShowDown::kRoomIdFieldNumber;
const int MsgGuanDanShowDown::kRoomStateFieldNumber;
const int MsgGuanDanShowDown::kStateTimeFieldNumber;
const int MsgGuanDanShowDown::kOneGameOverFieldNumber;
const int MsgGuanDanShowDown::kRoomRankingFieldNumber;
const int MsgGuanDanShowDown::kSeriesIncFieldNumber;
const int MsgGuanDanShowDown::kThreeTimesUpFieldNumber;
const int MsgGuanDanShowDown::kRelieveStateFieldNumber;
const int MsgGuanDanShowDown::kOverEndseriesFieldNumber;
const int MsgGuanDanShowDown::kIntegralListFieldNumber;
const int MsgGuanDanShowDown::kMsgInfoFieldNumber;
#endif  // !_MSC_VER

MsgGuanDanShowDown::MsgGuanDanShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuanDanShowDown)
}

void MsgGuanDanShowDown::InitAsDefaultInstance() {
  room_ranking_ = const_cast< ::MsgGuanDanRanking*>(&::MsgGuanDanRanking::default_instance());
  msg_info_ = const_cast< ::MsgGuanDanSDMSGInfo*>(&::MsgGuanDanSDMSGInfo::default_instance());
}

MsgGuanDanShowDown::MsgGuanDanShowDown(const MsgGuanDanShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuanDanShowDown)
}

void MsgGuanDanShowDown::SharedCtor() {
  _cached_size_ = 0;
  series_ = 0u;
  game_count_ = 0u;
  series_role_id_ = GOOGLE_ULONGLONG(0);
  max_score_ = GOOGLE_LONGLONG(0);
  time_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  room_state_ = 0;
  state_time_ = 0u;
  one_game_over_ = 0;
  room_ranking_ = NULL;
  series_inc_ = 0u;
  three_times_up_ = 0;
  relieve_state_ = 0;
  over_endseries_ = 0;
  msg_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuanDanShowDown::~MsgGuanDanShowDown() {
  // @@protoc_insertion_point(destructor:MsgGuanDanShowDown)
  SharedDtor();
}

void MsgGuanDanShowDown::SharedDtor() {
  if (this != default_instance_) {
    delete room_ranking_;
    delete msg_info_;
  }
}

void MsgGuanDanShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuanDanShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuanDanShowDown_descriptor_;
}

const MsgGuanDanShowDown& MsgGuanDanShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuanDanShowDown* MsgGuanDanShowDown::default_instance_ = NULL;

MsgGuanDanShowDown* MsgGuanDanShowDown::New() const {
  return new MsgGuanDanShowDown;
}

void MsgGuanDanShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGuanDanShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 249) {
    ZR_(series_, game_count_);
    ZR_(series_role_id_, time_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(room_state_, one_game_over_);
    ZR_(series_inc_, over_endseries_);
    if (has_room_ranking()) {
      if (room_ranking_ != NULL) room_ranking_->::MsgGuanDanRanking::Clear();
    }
  }
  if (has_msg_info()) {
    if (msg_info_ != NULL) msg_info_->::MsgGuanDanSDMSGInfo::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  win_role_.Clear();
  lost_role_.Clear();
  integral_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuanDanShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuanDanShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 series = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_)));
          set_has_series();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_win_role;
        break;
      }

      // repeated .MsgShowDownRole win_role = 2;
      case 2: {
        if (tag == 18) {
         parse_win_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_win_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_win_role;
        if (input->ExpectTag(26)) goto parse_lost_role;
        break;
      }

      // repeated .MsgShowDownRole lost_role = 3;
      case 3: {
        if (tag == 26) {
         parse_lost_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lost_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lost_role;
        if (input->ExpectTag(32)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 4;
      case 4: {
        if (tag == 32) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_series_role_id;
        break;
      }

      // optional uint64 series_role_id = 5;
      case 5: {
        if (tag == 40) {
         parse_series_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &series_role_id_)));
          set_has_series_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_score;
        break;
      }

      // optional int64 max_score = 6;
      case 6: {
        if (tag == 48) {
         parse_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_score_)));
          set_has_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 8;
      case 8: {
        if (tag == 64) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_room_state;
        break;
      }

      // optional .TGuanDanState room_state = 9;
      case 9: {
        if (tag == 72) {
         parse_room_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TGuanDanState_IsValid(value)) {
            set_room_state(static_cast< ::TGuanDanState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_state_time;
        break;
      }

      // optional uint32 state_time = 10;
      case 10: {
        if (tag == 80) {
         parse_state_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_time_)));
          set_has_state_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_one_game_over;
        break;
      }

      // optional int32 one_game_over = 11;
      case 11: {
        if (tag == 88) {
         parse_one_game_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &one_game_over_)));
          set_has_one_game_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_room_ranking;
        break;
      }

      // optional .MsgGuanDanRanking room_ranking = 12;
      case 12: {
        if (tag == 98) {
         parse_room_ranking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_ranking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_series_inc;
        break;
      }

      // optional uint32 series_inc = 13;
      case 13: {
        if (tag == 104) {
         parse_series_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_inc_)));
          set_has_series_inc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_three_times_up;
        break;
      }

      // optional int32 three_times_up = 14;
      case 14: {
        if (tag == 112) {
         parse_three_times_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_times_up_)));
          set_has_three_times_up();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_relieve_state;
        break;
      }

      // optional int32 relieve_state = 15;
      case 15: {
        if (tag == 120) {
         parse_relieve_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relieve_state_)));
          set_has_relieve_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_over_endseries;
        break;
      }

      // optional int32 over_endseries = 16;
      case 16: {
        if (tag == 128) {
         parse_over_endseries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &over_endseries_)));
          set_has_over_endseries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_integral_list;
        break;
      }

      // repeated .MsgGDIntegralCount integral_list = 17;
      case 17: {
        if (tag == 138) {
         parse_integral_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_integral_list;
        if (input->ExpectTag(146)) goto parse_msg_info;
        break;
      }

      // optional .MsgGuanDanSDMSGInfo msg_info = 18;
      case 18: {
        if (tag == 146) {
         parse_msg_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuanDanShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuanDanShowDown)
  return false;
#undef DO_
}

void MsgGuanDanShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuanDanShowDown)
  // optional uint32 series = 1;
  if (has_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->series(), output);
  }

  // repeated .MsgShowDownRole win_role = 2;
  for (int i = 0; i < this->win_role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->win_role(i), output);
  }

  // repeated .MsgShowDownRole lost_role = 3;
  for (int i = 0; i < this->lost_role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lost_role(i), output);
  }

  // optional uint32 game_count = 4;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_count(), output);
  }

  // optional uint64 series_role_id = 5;
  if (has_series_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->series_role_id(), output);
  }

  // optional int64 max_score = 6;
  if (has_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->max_score(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint64 room_id = 8;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->room_id(), output);
  }

  // optional .TGuanDanState room_state = 9;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->room_state(), output);
  }

  // optional uint32 state_time = 10;
  if (has_state_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->state_time(), output);
  }

  // optional int32 one_game_over = 11;
  if (has_one_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->one_game_over(), output);
  }

  // optional .MsgGuanDanRanking room_ranking = 12;
  if (has_room_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->room_ranking(), output);
  }

  // optional uint32 series_inc = 13;
  if (has_series_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->series_inc(), output);
  }

  // optional int32 three_times_up = 14;
  if (has_three_times_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->three_times_up(), output);
  }

  // optional int32 relieve_state = 15;
  if (has_relieve_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->relieve_state(), output);
  }

  // optional int32 over_endseries = 16;
  if (has_over_endseries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->over_endseries(), output);
  }

  // repeated .MsgGDIntegralCount integral_list = 17;
  for (int i = 0; i < this->integral_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->integral_list(i), output);
  }

  // optional .MsgGuanDanSDMSGInfo msg_info = 18;
  if (has_msg_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->msg_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuanDanShowDown)
}

::google::protobuf::uint8* MsgGuanDanShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuanDanShowDown)
  // optional uint32 series = 1;
  if (has_series()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->series(), target);
  }

  // repeated .MsgShowDownRole win_role = 2;
  for (int i = 0; i < this->win_role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->win_role(i), target);
  }

  // repeated .MsgShowDownRole lost_role = 3;
  for (int i = 0; i < this->lost_role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lost_role(i), target);
  }

  // optional uint32 game_count = 4;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_count(), target);
  }

  // optional uint64 series_role_id = 5;
  if (has_series_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->series_role_id(), target);
  }

  // optional int64 max_score = 6;
  if (has_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->max_score(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint64 room_id = 8;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->room_id(), target);
  }

  // optional .TGuanDanState room_state = 9;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->room_state(), target);
  }

  // optional uint32 state_time = 10;
  if (has_state_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->state_time(), target);
  }

  // optional int32 one_game_over = 11;
  if (has_one_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->one_game_over(), target);
  }

  // optional .MsgGuanDanRanking room_ranking = 12;
  if (has_room_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->room_ranking(), target);
  }

  // optional uint32 series_inc = 13;
  if (has_series_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->series_inc(), target);
  }

  // optional int32 three_times_up = 14;
  if (has_three_times_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->three_times_up(), target);
  }

  // optional int32 relieve_state = 15;
  if (has_relieve_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->relieve_state(), target);
  }

  // optional int32 over_endseries = 16;
  if (has_over_endseries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->over_endseries(), target);
  }

  // repeated .MsgGDIntegralCount integral_list = 17;
  for (int i = 0; i < this->integral_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->integral_list(i), target);
  }

  // optional .MsgGuanDanSDMSGInfo msg_info = 18;
  if (has_msg_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->msg_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuanDanShowDown)
  return target;
}

int MsgGuanDanShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 series = 1;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series());
    }

    // optional uint32 game_count = 4;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint64 series_role_id = 5;
    if (has_series_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->series_role_id());
    }

    // optional int64 max_score = 6;
    if (has_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_score());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 room_id = 8;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TGuanDanState room_state = 9;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 state_time = 10;
    if (has_state_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_time());
    }

    // optional int32 one_game_over = 11;
    if (has_one_game_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->one_game_over());
    }

    // optional .MsgGuanDanRanking room_ranking = 12;
    if (has_room_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_ranking());
    }

    // optional uint32 series_inc = 13;
    if (has_series_inc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_inc());
    }

    // optional int32 three_times_up = 14;
    if (has_three_times_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_times_up());
    }

    // optional int32 relieve_state = 15;
    if (has_relieve_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relieve_state());
    }

    // optional int32 over_endseries = 16;
    if (has_over_endseries()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->over_endseries());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .MsgGuanDanSDMSGInfo msg_info = 18;
    if (has_msg_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_info());
    }

  }
  // repeated .MsgShowDownRole win_role = 2;
  total_size += 1 * this->win_role_size();
  for (int i = 0; i < this->win_role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->win_role(i));
  }

  // repeated .MsgShowDownRole lost_role = 3;
  total_size += 1 * this->lost_role_size();
  for (int i = 0; i < this->lost_role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lost_role(i));
  }

  // repeated .MsgGDIntegralCount integral_list = 17;
  total_size += 2 * this->integral_list_size();
  for (int i = 0; i < this->integral_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuanDanShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuanDanShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuanDanShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuanDanShowDown::MergeFrom(const MsgGuanDanShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_role_.MergeFrom(from.win_role_);
  lost_role_.MergeFrom(from.lost_role_);
  integral_list_.MergeFrom(from.integral_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_series()) {
      set_series(from.series());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_series_role_id()) {
      set_series_role_id(from.series_role_id());
    }
    if (from.has_max_score()) {
      set_max_score(from.max_score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_state_time()) {
      set_state_time(from.state_time());
    }
    if (from.has_one_game_over()) {
      set_one_game_over(from.one_game_over());
    }
    if (from.has_room_ranking()) {
      mutable_room_ranking()->::MsgGuanDanRanking::MergeFrom(from.room_ranking());
    }
    if (from.has_series_inc()) {
      set_series_inc(from.series_inc());
    }
    if (from.has_three_times_up()) {
      set_three_times_up(from.three_times_up());
    }
    if (from.has_relieve_state()) {
      set_relieve_state(from.relieve_state());
    }
    if (from.has_over_endseries()) {
      set_over_endseries(from.over_endseries());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_msg_info()) {
      mutable_msg_info()->::MsgGuanDanSDMSGInfo::MergeFrom(from.msg_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuanDanShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuanDanShowDown::CopyFrom(const MsgGuanDanShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuanDanShowDown::IsInitialized() const {

  return true;
}

void MsgGuanDanShowDown::Swap(MsgGuanDanShowDown* other) {
  if (other != this) {
    std::swap(series_, other->series_);
    win_role_.Swap(&other->win_role_);
    lost_role_.Swap(&other->lost_role_);
    std::swap(game_count_, other->game_count_);
    std::swap(series_role_id_, other->series_role_id_);
    std::swap(max_score_, other->max_score_);
    std::swap(time_, other->time_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_state_, other->room_state_);
    std::swap(state_time_, other->state_time_);
    std::swap(one_game_over_, other->one_game_over_);
    std::swap(room_ranking_, other->room_ranking_);
    std::swap(series_inc_, other->series_inc_);
    std::swap(three_times_up_, other->three_times_up_);
    std::swap(relieve_state_, other->relieve_state_);
    std::swap(over_endseries_, other->over_endseries_);
    integral_list_.Swap(&other->integral_list_);
    std::swap(msg_info_, other->msg_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuanDanShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuanDanShowDown_descriptor_;
  metadata.reflection = MsgGuanDanShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGDIntegralCount::kRoleidFieldNumber;
const int MsgGDIntegralCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgGDIntegralCount::MsgGDIntegralCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGDIntegralCount)
}

void MsgGDIntegralCount::InitAsDefaultInstance() {
}

MsgGDIntegralCount::MsgGDIntegralCount(const MsgGDIntegralCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGDIntegralCount)
}

void MsgGDIntegralCount::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGDIntegralCount::~MsgGDIntegralCount() {
  // @@protoc_insertion_point(destructor:MsgGDIntegralCount)
  SharedDtor();
}

void MsgGDIntegralCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGDIntegralCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGDIntegralCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGDIntegralCount_descriptor_;
}

const MsgGDIntegralCount& MsgGDIntegralCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGDIntegralCount* MsgGDIntegralCount::default_instance_ = NULL;

MsgGDIntegralCount* MsgGDIntegralCount::New() const {
  return new MsgGDIntegralCount;
}

void MsgGDIntegralCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgGDIntegralCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGDIntegralCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGDIntegralCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGDIntegralCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGDIntegralCount)
  return false;
#undef DO_
}

void MsgGDIntegralCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGDIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGDIntegralCount)
}

::google::protobuf::uint8* MsgGDIntegralCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGDIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGDIntegralCount)
  return target;
}

int MsgGDIntegralCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGDIntegralCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGDIntegralCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGDIntegralCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGDIntegralCount::MergeFrom(const MsgGDIntegralCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGDIntegralCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGDIntegralCount::CopyFrom(const MsgGDIntegralCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGDIntegralCount::IsInitialized() const {

  return true;
}

void MsgGDIntegralCount::Swap(MsgGDIntegralCount* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGDIntegralCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGDIntegralCount_descriptor_;
  metadata.reflection = MsgGDIntegralCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGuanDanResistGift::kKingcardRoleListFieldNumber;
#endif  // !_MSC_VER

MsgGuanDanResistGift::MsgGuanDanResistGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgGuanDanResistGift)
}

void MsgGuanDanResistGift::InitAsDefaultInstance() {
}

MsgGuanDanResistGift::MsgGuanDanResistGift(const MsgGuanDanResistGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgGuanDanResistGift)
}

void MsgGuanDanResistGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGuanDanResistGift::~MsgGuanDanResistGift() {
  // @@protoc_insertion_point(destructor:MsgGuanDanResistGift)
  SharedDtor();
}

void MsgGuanDanResistGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGuanDanResistGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGuanDanResistGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGuanDanResistGift_descriptor_;
}

const MsgGuanDanResistGift& MsgGuanDanResistGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fguandan_2eproto();
  return *default_instance_;
}

MsgGuanDanResistGift* MsgGuanDanResistGift::default_instance_ = NULL;

MsgGuanDanResistGift* MsgGuanDanResistGift::New() const {
  return new MsgGuanDanResistGift;
}

void MsgGuanDanResistGift::Clear() {
  kingcard_role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGuanDanResistGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgGuanDanResistGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 kingcard_role_list = 1;
      case 1: {
        if (tag == 8) {
         parse_kingcard_role_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_kingcard_role_list())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_kingcard_role_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_kingcard_role_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgGuanDanResistGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgGuanDanResistGift)
  return false;
#undef DO_
}

void MsgGuanDanResistGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgGuanDanResistGift)
  // repeated uint64 kingcard_role_list = 1;
  for (int i = 0; i < this->kingcard_role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->kingcard_role_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgGuanDanResistGift)
}

::google::protobuf::uint8* MsgGuanDanResistGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGuanDanResistGift)
  // repeated uint64 kingcard_role_list = 1;
  for (int i = 0; i < this->kingcard_role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->kingcard_role_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGuanDanResistGift)
  return target;
}

int MsgGuanDanResistGift::ByteSize() const {
  int total_size = 0;

  // repeated uint64 kingcard_role_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcard_role_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->kingcard_role_list(i));
    }
    total_size += 1 * this->kingcard_role_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGuanDanResistGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGuanDanResistGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGuanDanResistGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGuanDanResistGift::MergeFrom(const MsgGuanDanResistGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  kingcard_role_list_.MergeFrom(from.kingcard_role_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGuanDanResistGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGuanDanResistGift::CopyFrom(const MsgGuanDanResistGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGuanDanResistGift::IsInitialized() const {

  return true;
}

void MsgGuanDanResistGift::Swap(MsgGuanDanResistGift* other) {
  if (other != this) {
    kingcard_role_list_.Swap(&other->kingcard_role_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGuanDanResistGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGuanDanResistGift_descriptor_;
  metadata.reflection = MsgGuanDanResistGift_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
