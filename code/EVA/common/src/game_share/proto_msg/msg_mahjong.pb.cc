// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_mahjong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_mahjong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgBones_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBones_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMendFlower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMendFlower_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserPowerTT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserPowerTT_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgListen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgListen_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAmerce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAmerce_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUserOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUserOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMahJongPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMahJongPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMahJongRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMahJongRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMahJongPrivateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMahJongPrivateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgWeaveCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgWeaveCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFlowerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFlowerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFlowerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFlowerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShowDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShowDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShowDownEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShowDownEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgIntegralCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgIntegralCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStatisticsEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStatisticsEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStatisticsEventList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStatisticsEventList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShowDownCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShowDownCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShowMaxFlower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShowMaxFlower_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRoleCathecticCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRoleCathecticCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTickCathetic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTickCathetic_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgContract_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgContract_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgContractResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgContractResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAnXiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAnXiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJiaCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJiaCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgListenCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgListenCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerQueMen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerQueMen_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSelectQueMen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSelectQueMen_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSelectThreeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSelectThreeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSwapFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSwapFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TMahJongRoleState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TBarState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TStatisticsEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TAmerceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMahJongState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMahJongASK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMahJongCHR_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMahJongColor_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fmahjong_2eproto() {
  protobuf_AddDesc_msg_5fmahjong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_mahjong.proto");
  GOOGLE_CHECK(file != NULL);
  MsgBones_descriptor_ = file->message_type(0);
  static const int MsgBones_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBones, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBones, dotcoun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBones, state_),
  };
  MsgBones_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBones_descriptor_,
      MsgBones::default_instance_,
      MsgBones_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBones, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBones, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBones));
  MsgMendFlower_descriptor_ = file->message_type(1);
  static const int MsgMendFlower_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, handcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, flower_bar_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, flower_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, surplus_hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, role_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, flower_card_list_),
  };
  MsgMendFlower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMendFlower_descriptor_,
      MsgMendFlower::default_instance_,
      MsgMendFlower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMendFlower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMendFlower));
  MsgUserAction_descriptor_ = file->message_type(2);
  static const int MsgUserAction_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, flower_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, gang_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, flower_bar_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, surplus_hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, sub_money_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, role_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, za_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, launch_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, liangxi_wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, buxi_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, flower_card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, eat_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, listen_list_),
  };
  MsgUserAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserAction_descriptor_,
      MsgUserAction::default_instance_,
      MsgUserAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserAction));
  MsgUserPower_descriptor_ = file->message_type(3);
  static const int MsgUserPower_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPower, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPower, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPower, handle_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPower, new_card_),
  };
  MsgUserPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserPower_descriptor_,
      MsgUserPower::default_instance_,
      MsgUserPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserPower));
  MsgUserPowerTT_descriptor_ = file->message_type(4);
  static const int MsgUserPowerTT_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPowerTT, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPowerTT, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPowerTT, handle_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPowerTT, new_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPowerTT, gang_card_),
  };
  MsgUserPowerTT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserPowerTT_descriptor_,
      MsgUserPowerTT::default_instance_,
      MsgUserPowerTT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPowerTT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserPowerTT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserPowerTT));
  MsgListen_descriptor_ = file->message_type(5);
  static const int MsgListen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListen, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListen, state_),
  };
  MsgListen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgListen_descriptor_,
      MsgListen::default_instance_,
      MsgListen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgListen));
  MsgAmerce_descriptor_ = file->message_type(6);
  static const int MsgAmerce_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAmerce, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAmerce, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAmerce, sub_money_id_),
  };
  MsgAmerce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAmerce_descriptor_,
      MsgAmerce::default_instance_,
      MsgAmerce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAmerce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAmerce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAmerce));
  MsgOutCard_descriptor_ = file->message_type(7);
  static const int MsgOutCard_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, amerce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, river_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, role_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, listen_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, listen_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, dingzha_index_),
  };
  MsgOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgOutCard_descriptor_,
      MsgOutCard::default_instance_,
      MsgOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgOutCard));
  MsgUserOperate_descriptor_ = file->message_type(8);
  static const int MsgUserOperate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, gang_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, ahold_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, liangxi_wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, buxi_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, kou_card_),
  };
  MsgUserOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUserOperate_descriptor_,
      MsgUserOperate::default_instance_,
      MsgUserOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUserOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUserOperate));
  MsgRoleScore_descriptor_ = file->message_type(9);
  static const int MsgRoleScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleScore, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleScore, score_),
  };
  MsgRoleScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleScore_descriptor_,
      MsgRoleScore::default_instance_,
      MsgRoleScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleScore));
  MsgCardData_descriptor_ = file->message_type(10);
  static const int MsgCardData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, barkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, show_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, sub_money_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, role_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, mix_card_),
  };
  MsgCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCardData_descriptor_,
      MsgCardData::default_instance_,
      MsgCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCardData));
  MsgMahJongPlayer_descriptor_ = file->message_type(11);
  static const int MsgMahJongPlayer_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, river_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, weave_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, flower_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, wik_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, td_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, listen_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, cathcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, listen_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, gang_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, anxiao_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, anxiao_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, dingzha_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, flower_card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, eat_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, jia_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, hu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, hu_card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, color_),
  };
  MsgMahJongPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMahJongPlayer_descriptor_,
      MsgMahJongPlayer::default_instance_,
      MsgMahJongPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMahJongPlayer));
  MsgMahJongRoom_descriptor_ = file->message_type(12);
  static const int MsgMahJongRoom_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, leibaota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, surplus_hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, base_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, send_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, state_run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, private_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, hui_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, game_circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, param_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, gang_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, show_down_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, za_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, launch_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, role_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, role_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, hu_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, room_pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, listen_list_),
  };
  MsgMahJongRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMahJongRoom_descriptor_,
      MsgMahJongRoom::default_instance_,
      MsgMahJongRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMahJongRoom));
  MsgMahJongPrivateRoom_descriptor_ = file->message_type(13);
  static const int MsgMahJongPrivateRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPrivateRoom, special_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPrivateRoom, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPrivateRoom, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPrivateRoom, player_number_),
  };
  MsgMahJongPrivateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMahJongPrivateRoom_descriptor_,
      MsgMahJongPrivateRoom::default_instance_,
      MsgMahJongPrivateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPrivateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMahJongPrivateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMahJongPrivateRoom));
  MsgWeaveCard_descriptor_ = file->message_type(14);
  static const int MsgWeaveCard_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, role_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, player_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, weave_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, eat_card_),
  };
  MsgWeaveCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgWeaveCard_descriptor_,
      MsgWeaveCard::default_instance_,
      MsgWeaveCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeaveCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgWeaveCard));
  MsgFlowerList_descriptor_ = file->message_type(15);
  static const int MsgFlowerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowerList, flower_list_),
  };
  MsgFlowerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFlowerList_descriptor_,
      MsgFlowerList::default_instance_,
      MsgFlowerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFlowerList));
  MsgFlowerData_descriptor_ = file->message_type(16);
  static const int MsgFlowerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowerData, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowerData, card_),
  };
  MsgFlowerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFlowerData_descriptor_,
      MsgFlowerData::default_instance_,
      MsgFlowerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFlowerData));
  MsgShowDown_descriptor_ = file->message_type(17);
  static const int MsgShowDown_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, hukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, hard_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, mild_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, baota_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, hu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, pack_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, total_pack_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, event_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, hu_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, hu_list_),
  };
  MsgShowDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShowDown_descriptor_,
      MsgShowDown::default_instance_,
      MsgShowDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShowDown));
  MsgShowDownEvent_descriptor_ = file->message_type(18);
  static const int MsgShowDownEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownEvent, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownEvent, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownEvent, score_count_),
  };
  MsgShowDownEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShowDownEvent_descriptor_,
      MsgShowDownEvent::default_instance_,
      MsgShowDownEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShowDownEvent));
  MsgIntegralCount_descriptor_ = file->message_type(19);
  static const int MsgIntegralCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntegralCount, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntegralCount, count_),
  };
  MsgIntegralCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgIntegralCount_descriptor_,
      MsgIntegralCount::default_instance_,
      MsgIntegralCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntegralCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntegralCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgIntegralCount));
  MsgStatisticsEvent_descriptor_ = file->message_type(20);
  static const int MsgStatisticsEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEvent, count_),
  };
  MsgStatisticsEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStatisticsEvent_descriptor_,
      MsgStatisticsEvent::default_instance_,
      MsgStatisticsEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStatisticsEvent));
  MsgStatisticsEventList_descriptor_ = file->message_type(21);
  static const int MsgStatisticsEventList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEventList, roel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEventList, event_list_),
  };
  MsgStatisticsEventList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStatisticsEventList_descriptor_,
      MsgStatisticsEventList::default_instance_,
      MsgStatisticsEventList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEventList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStatisticsEventList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStatisticsEventList));
  MsgShowDownCount_descriptor_ = file->message_type(22);
  static const int MsgShowDownCount_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, showdown_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, game_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, other_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, other_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, hu_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, integral_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, event_list_),
  };
  MsgShowDownCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShowDownCount_descriptor_,
      MsgShowDownCount::default_instance_,
      MsgShowDownCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowDownCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShowDownCount));
  MsgShowMaxFlower_descriptor_ = file->message_type(23);
  static const int MsgShowMaxFlower_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, weave_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, hu_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, flower_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, base_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, hard_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, mild_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, bao_ta_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, hu_card_),
  };
  MsgShowMaxFlower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShowMaxFlower_descriptor_,
      MsgShowMaxFlower::default_instance_,
      MsgShowMaxFlower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowMaxFlower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShowMaxFlower));
  MsgRoleCathecticCount_descriptor_ = file->message_type(24);
  static const int MsgRoleCathecticCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleCathecticCount, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleCathecticCount, cathectic_count_),
  };
  MsgRoleCathecticCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRoleCathecticCount_descriptor_,
      MsgRoleCathecticCount::default_instance_,
      MsgRoleCathecticCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleCathecticCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRoleCathecticCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRoleCathecticCount));
  MsgTickCathetic_descriptor_ = file->message_type(25);
  static const int MsgTickCathetic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTickCathetic, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTickCathetic, cathectic_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTickCathetic, state_),
  };
  MsgTickCathetic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTickCathetic_descriptor_,
      MsgTickCathetic::default_instance_,
      MsgTickCathetic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTickCathetic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTickCathetic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTickCathetic));
  MsgContract_descriptor_ = file->message_type(26);
  static const int MsgContract_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContract, contractor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContract, contracted_),
  };
  MsgContract_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgContract_descriptor_,
      MsgContract::default_instance_,
      MsgContract_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContract, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContract, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgContract));
  MsgContractResult_descriptor_ = file->message_type(27);
  static const int MsgContractResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContractResult, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContractResult, result_),
  };
  MsgContractResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgContractResult_descriptor_,
      MsgContractResult::default_instance_,
      MsgContractResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContractResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgContractResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgContractResult));
  MsgAnXiao_descriptor_ = file->message_type(28);
  static const int MsgAnXiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAnXiao, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAnXiao, sign_),
  };
  MsgAnXiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAnXiao_descriptor_,
      MsgAnXiao::default_instance_,
      MsgAnXiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAnXiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAnXiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAnXiao));
  MsgJiaCard_descriptor_ = file->message_type(29);
  static const int MsgJiaCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaCard, card_),
  };
  MsgJiaCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJiaCard_descriptor_,
      MsgJiaCard::default_instance_,
      MsgJiaCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJiaCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJiaCard));
  MsgListenCard_descriptor_ = file->message_type(30);
  static const int MsgListenCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListenCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListenCard, listen_card_),
  };
  MsgListenCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgListenCard_descriptor_,
      MsgListenCard::default_instance_,
      MsgListenCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListenCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgListenCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgListenCard));
  MsgPlayerQueMen_descriptor_ = file->message_type(31);
  static const int MsgPlayerQueMen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerQueMen, quemen_list_),
  };
  MsgPlayerQueMen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerQueMen_descriptor_,
      MsgPlayerQueMen::default_instance_,
      MsgPlayerQueMen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerQueMen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerQueMen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerQueMen));
  MsgSelectQueMen_descriptor_ = file->message_type(32);
  static const int MsgSelectQueMen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectQueMen, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectQueMen, color_),
  };
  MsgSelectQueMen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSelectQueMen_descriptor_,
      MsgSelectQueMen::default_instance_,
      MsgSelectQueMen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectQueMen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectQueMen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSelectQueMen));
  MsgSelectThreeCard_descriptor_ = file->message_type(33);
  static const int MsgSelectThreeCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectThreeCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectThreeCard, swap_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectThreeCard, hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectThreeCard, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectThreeCard, other_player_list_),
  };
  MsgSelectThreeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSelectThreeCard_descriptor_,
      MsgSelectThreeCard::default_instance_,
      MsgSelectThreeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectThreeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSelectThreeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSelectThreeCard));
  MsgSwapFinish_descriptor_ = file->message_type(34);
  static const int MsgSwapFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSwapFinish, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSwapFinish, card_count_),
  };
  MsgSwapFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSwapFinish_descriptor_,
      MsgSwapFinish::default_instance_,
      MsgSwapFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSwapFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSwapFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSwapFinish));
  TMahJongRoleState_descriptor_ = file->enum_type(0);
  TBarState_descriptor_ = file->enum_type(1);
  TStatisticsEvent_descriptor_ = file->enum_type(2);
  TDirection_descriptor_ = file->enum_type(3);
  TAmerceState_descriptor_ = file->enum_type(4);
  TMahJongState_descriptor_ = file->enum_type(5);
  TMahJongASK_descriptor_ = file->enum_type(6);
  TMahJongCHR_descriptor_ = file->enum_type(7);
  TMahJongColor_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fmahjong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBones_descriptor_, &MsgBones::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMendFlower_descriptor_, &MsgMendFlower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserAction_descriptor_, &MsgUserAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserPower_descriptor_, &MsgUserPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserPowerTT_descriptor_, &MsgUserPowerTT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgListen_descriptor_, &MsgListen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAmerce_descriptor_, &MsgAmerce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgOutCard_descriptor_, &MsgOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUserOperate_descriptor_, &MsgUserOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleScore_descriptor_, &MsgRoleScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCardData_descriptor_, &MsgCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMahJongPlayer_descriptor_, &MsgMahJongPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMahJongRoom_descriptor_, &MsgMahJongRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMahJongPrivateRoom_descriptor_, &MsgMahJongPrivateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgWeaveCard_descriptor_, &MsgWeaveCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFlowerList_descriptor_, &MsgFlowerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFlowerData_descriptor_, &MsgFlowerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShowDown_descriptor_, &MsgShowDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShowDownEvent_descriptor_, &MsgShowDownEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgIntegralCount_descriptor_, &MsgIntegralCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStatisticsEvent_descriptor_, &MsgStatisticsEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStatisticsEventList_descriptor_, &MsgStatisticsEventList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShowDownCount_descriptor_, &MsgShowDownCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShowMaxFlower_descriptor_, &MsgShowMaxFlower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRoleCathecticCount_descriptor_, &MsgRoleCathecticCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTickCathetic_descriptor_, &MsgTickCathetic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgContract_descriptor_, &MsgContract::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgContractResult_descriptor_, &MsgContractResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAnXiao_descriptor_, &MsgAnXiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJiaCard_descriptor_, &MsgJiaCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgListenCard_descriptor_, &MsgListenCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerQueMen_descriptor_, &MsgPlayerQueMen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSelectQueMen_descriptor_, &MsgSelectQueMen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSelectThreeCard_descriptor_, &MsgSelectThreeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSwapFinish_descriptor_, &MsgSwapFinish::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fmahjong_2eproto() {
  delete MsgBones::default_instance_;
  delete MsgBones_reflection_;
  delete MsgMendFlower::default_instance_;
  delete MsgMendFlower_reflection_;
  delete MsgUserAction::default_instance_;
  delete MsgUserAction_reflection_;
  delete MsgUserPower::default_instance_;
  delete MsgUserPower_reflection_;
  delete MsgUserPowerTT::default_instance_;
  delete MsgUserPowerTT_reflection_;
  delete MsgListen::default_instance_;
  delete MsgListen_reflection_;
  delete MsgAmerce::default_instance_;
  delete MsgAmerce_reflection_;
  delete MsgOutCard::default_instance_;
  delete MsgOutCard_reflection_;
  delete MsgUserOperate::default_instance_;
  delete MsgUserOperate_reflection_;
  delete MsgRoleScore::default_instance_;
  delete MsgRoleScore_reflection_;
  delete MsgCardData::default_instance_;
  delete MsgCardData_reflection_;
  delete MsgMahJongPlayer::default_instance_;
  delete MsgMahJongPlayer_reflection_;
  delete MsgMahJongRoom::default_instance_;
  delete MsgMahJongRoom_reflection_;
  delete MsgMahJongPrivateRoom::default_instance_;
  delete MsgMahJongPrivateRoom_reflection_;
  delete MsgWeaveCard::default_instance_;
  delete MsgWeaveCard_reflection_;
  delete MsgFlowerList::default_instance_;
  delete MsgFlowerList_reflection_;
  delete MsgFlowerData::default_instance_;
  delete MsgFlowerData_reflection_;
  delete MsgShowDown::default_instance_;
  delete MsgShowDown_reflection_;
  delete MsgShowDownEvent::default_instance_;
  delete MsgShowDownEvent_reflection_;
  delete MsgIntegralCount::default_instance_;
  delete MsgIntegralCount_reflection_;
  delete MsgStatisticsEvent::default_instance_;
  delete MsgStatisticsEvent_reflection_;
  delete MsgStatisticsEventList::default_instance_;
  delete MsgStatisticsEventList_reflection_;
  delete MsgShowDownCount::default_instance_;
  delete MsgShowDownCount_reflection_;
  delete MsgShowMaxFlower::default_instance_;
  delete MsgShowMaxFlower_reflection_;
  delete MsgRoleCathecticCount::default_instance_;
  delete MsgRoleCathecticCount_reflection_;
  delete MsgTickCathetic::default_instance_;
  delete MsgTickCathetic_reflection_;
  delete MsgContract::default_instance_;
  delete MsgContract_reflection_;
  delete MsgContractResult::default_instance_;
  delete MsgContractResult_reflection_;
  delete MsgAnXiao::default_instance_;
  delete MsgAnXiao_reflection_;
  delete MsgJiaCard::default_instance_;
  delete MsgJiaCard_reflection_;
  delete MsgListenCard::default_instance_;
  delete MsgListenCard_reflection_;
  delete MsgPlayerQueMen::default_instance_;
  delete MsgPlayerQueMen_reflection_;
  delete MsgSelectQueMen::default_instance_;
  delete MsgSelectQueMen_reflection_;
  delete MsgSelectThreeCard::default_instance_;
  delete MsgSelectThreeCard_reflection_;
  delete MsgSwapFinish::default_instance_;
  delete MsgSwapFinish_reflection_;
}

void protobuf_AddDesc_msg_5fmahjong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_public_5fpro_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021msg_mahjong.proto\032\020public_pro.proto\"F\n"
    "\010MsgBones\022\n\n\002id\030\001 \001(\004\022\017\n\007dotCoun\030\002 \003(\r\022\035"
    "\n\005state\030\003 \001(\0162\016.TMahJongState\"\304\001\n\rMsgMen"
    "dFlower\022\n\n\002id\030\001 \001(\004\022\020\n\010handcard\030\002 \003(\r\022\030\n"
    "\020flower_bar_count\030\003 \001(\r\022\020\n\010hand_num\030\004 \001("
    "\r\022\022\n\nflower_num\030\005 \001(\r\022\030\n\020surplus_hand_nu"
    "m\030\006 \001(\r\022!\n\nrole_score\030\007 \003(\0132\r.MsgRoleSco"
    "re\022\030\n\020flower_card_list\030\010 \003(\r\"\215\003\n\rMsgUser"
    "Action\022\n\n\002id\030\001 \001(\004\022\"\n\nroom_state\030\002 \001(\0162\016"
    ".TMahJongState\022\014\n\004card\030\003 \001(\r\022\022\n\nflower_n"
    "um\030\004 \001(\r\022\013\n\003wik\030\005 \001(\r\022\021\n\tgang_card\030\006 \003(\r"
    "\022\030\n\020flower_bar_count\030\007 \001(\r\022\030\n\020surplus_ha"
    "nd_num\030\010 \001(\r\022\024\n\014sub_money_id\030\t \001(\004\022!\n\nro"
    "le_score\030\n \003(\0132\r.MsgRoleScore\022\017\n\007za_card"
    "\030\013 \003(\r\022\023\n\013launch_card\030\014 \003(\r\022\023\n\013liangxi_w"
    "ik\030\r \001(\r\022\021\n\tbuxi_card\030\016 \003(\r\022\030\n\020flower_ca"
    "rd_list\030\017 \003(\r\022\020\n\010eat_card\030\020 \003(\r\022#\n\013liste"
    "n_list\030\021 \003(\0132\016.MsgListenCard\"N\n\014MsgUserP"
    "ower\022\n\n\002id\030\001 \001(\004\022\013\n\003wik\030\002 \001(\r\022\023\n\013handle_"
    "card\030\003 \001(\r\022\020\n\010new_card\030\004 \001(\r\"c\n\016MsgUserP"
    "owerTT\022\n\n\002id\030\001 \001(\004\022\013\n\003wik\030\002 \001(\r\022\023\n\013handl"
    "e_card\030\003 \001(\r\022\020\n\010new_card\030\004 \001(\r\022\021\n\tgang_c"
    "ard\030\005 \003(\r\"&\n\tMsgListen\022\n\n\002id\030\001 \001(\004\022\r\n\005st"
    "ate\030\002 \001(\r\"K\n\tMsgAmerce\022\n\n\002id\030\001 \001(\004\022\034\n\005st"
    "ate\030\002 \001(\0162\r.TAmerceState\022\024\n\014sub_money_id"
    "\030\003 \001(\004\"\202\002\n\nMsgOutCard\022\n\n\002id\030\001 \001(\004\022\014\n\004car"
    "d\030\002 \001(\r\022\r\n\005index\030\003 \001(\005\022\020\n\010hand_num\030\004 \001(\r"
    "\022\032\n\006amerce\030\005 \003(\0132\n.MsgAmerce\022\021\n\thand_car"
    "d\030\006 \003(\r\022\021\n\triver_num\030\007 \001(\r\022!\n\nrole_score"
    "\030\010 \003(\0132\r.MsgRoleScore\022\022\n\nrole_state\030\t \001("
    "\r\022\023\n\013listen_card\030\n \003(\r\022\024\n\014listen_index\030\013"
    " \001(\r\022\025\n\rdingzha_index\030\014 \001(\r\"\214\001\n\016MsgUserO"
    "perate\022\013\n\003wik\030\001 \001(\r\022\014\n\004card\030\002 \001(\r\022\021\n\tgan"
    "g_card\030\003 \003(\r\022\022\n\nahold_card\030\004 \003(\r\022\023\n\013lian"
    "gxi_wik\030\005 \001(\r\022\021\n\tbuxi_card\030\006 \003(\r\022\020\n\010kou_"
    "card\030\007 \003(\r\")\n\014MsgRoleScore\022\n\n\002id\030\001 \001(\004\022\r"
    "\n\005score\030\002 \001(\003\"\266\001\n\013MsgCardData\022\014\n\004card\030\001 "
    "\001(\r\022\013\n\003wik\030\002 \001(\r\022\r\n\005tarid\030\003 \001(\004\022\r\n\005srcid"
    "\030\004 \001(\004\022\017\n\007barkind\030\005 \001(\r\022\022\n\nshow_money\030\006 "
    "\001(\010\022\024\n\014sub_money_id\030\007 \001(\004\022!\n\nrole_score\030"
    "\010 \003(\0132\r.MsgRoleScore\022\020\n\010mix_card\030\t \003(\r\"\336"
    "\003\n\020MsgMahJongPlayer\022#\n\013player_info\030\001 \001(\013"
    "2\016.MsgPlayerInfo\022\r\n\005state\030\002 \001(\r\022\020\n\010hand_"
    "num\030\003 \001(\r\022\022\n\nriver_card\030\004 \003(\r\022 \n\nweave_c"
    "ard\030\005 \003(\0132\014.MsgCardData\022\022\n\nflower_num\030\006 "
    "\001(\r\022\013\n\003wik\030\007 \001(\r\022\027\n\002td\030\010 \001(\0162\013.TDirectio"
    "n\022\023\n\013listen_card\030\n \003(\r\022\021\n\tCathCount\030\013 \001("
    "\r\022\024\n\014listen_index\030\014 \001(\r\022\021\n\tgang_card\030\r \003"
    "(\r\022\024\n\014anxiao_power\030\016 \001(\010\022\023\n\013anxiao_sign\030"
    "\017 \001(\010\022\024\n\014dingzha_card\030\020 \001(\r\022\030\n\020flower_ca"
    "rd_list\030\021 \003(\r\022\020\n\010eat_card\030\022 \003(\r\022\020\n\010jia_c"
    "ard\030\023 \001(\r\022\017\n\007hu_card\030\024 \001(\r\022\024\n\014hu_card_li"
    "st\030\025 \003(\r\022\035\n\005color\030\026 \001(\0162\016.TMahJongColor\""
    "\351\005\n\016MsgMahJongRoom\022\"\n\nroom_state\030\001 \001(\0162\016"
    ".TMahJongState\022&\n\013player_list\030\002 \003(\0132\021.Ms"
    "gMahJongPlayer\022\021\n\tbanker_id\030\003 \001(\004\022\021\n\tact"
    "ion_id\030\004 \001(\004\022\021\n\thand_card\030\005 \003(\r\022#\n\troom_"
    "info\030\006 \001(\0132\020.MsgBaseRoomInfo\022\020\n\010leibaota"
    "\030\007 \001(\r\022\030\n\020surplus_hand_num\030\010 \001(\r\022\023\n\013base"
    "_flower\030\t \001(\r\022\021\n\tsend_card\030\n \001(\r\022\017\n\007room"
    "_id\030\013 \001(\004\022\021\n\troom_type\030\014 \001(\t\022\022\n\ngame_cou"
    "nt\030\r \001(\r\022\026\n\016state_run_time\030\016 \001(\r\022,\n\014priv"
    "ate_room\030\017 \001(\0132\026.MsgMahJongPrivateRoom\022\020"
    "\n\010hui_card\030\020 \001(\r\022\023\n\013game_circle\030\021 \001(\r\022\020\n"
    "\010out_card\030\022 \001(\r\022\016\n\006param1\030\023 \001(\r\022\022\n\nparam"
    "_list\030\024 \003(\r\022\021\n\tgang_card\030\025 \003(\r\022)\n\016show_d"
    "own_info\030\026 \001(\0132\021.MsgShowDownCount\022\017\n\007za_"
    "card\030\027 \003(\r\022\023\n\013launch_card\030\030 \003(\r\022$\n\trole_"
    "host\030\031 \001(\0132\021.MsgRoleHostCount\022&\n\nrole_st"
    "ate\030\032 \001(\0132\022.MsgRoleStateCount\022\020\n\010hu_stat"
    "e\030\033 \001(\r\022\025\n\rroom_pay_type\030\034 \001(\r\022#\n\013listen"
    "_list\030\035 \003(\0132\016.MsgListenCard\"g\n\025MsgMahJon"
    "gPrivateRoom\022\024\n\014special_kind\030\001 \001(\r\022\022\n\nco"
    "nsume_id\030\002 \001(\r\022\r\n\005score\030\003 \001(\r\022\025\n\rplayer_"
    "number\030\004 \001(\r\"\325\001\n\014MsgWeaveCard\022\036\n\010carddat"
    "a\030\001 \003(\0132\014.MsgCardData\022\020\n\010hand_num\030\002 \001(\r\022"
    "\021\n\thand_card\030\003 \003(\r\022!\n\nrole_score\030\004 \003(\0132\r"
    ".MsgRoleScore\022&\n\013player_list\030\005 \003(\0132\021.Msg"
    "MahJongPlayer\022\016\n\006param1\030\006 \001(\010\022\023\n\013weave_s"
    "core\030\007 \001(\r\022\020\n\010eat_card\030\010 \003(\r\"4\n\rMsgFlowe"
    "rList\022#\n\013flower_list\030\001 \003(\0132\016.MsgFlowerDa"
    "ta\"-\n\rMsgFlowerData\022\016\n\006roleid\030\001 \001(\004\022\014\n\004c"
    "ard\030\002 \003(\r\"\277\002\n\013MsgShowDown\022\016\n\006roleid\030\001 \001("
    "\004\022\r\n\005money\030\002 \001(\003\022\016\n\006hukind\030\003 \001(\r\022\021\n\thand"
    "_card\030\004 \003(\r\022\023\n\013hard_flower\030\005 \001(\r\022\023\n\013mild"
    "_flower\030\006 \001(\r\022\024\n\014baota_flower\030\007 \001(\r\022\017\n\007h"
    "u_card\030\010 \001(\r\022\023\n\013total_money\030\t \001(\003\022\022\n\npac"
    "k_score\030\n \001(\003\022\030\n\020total_pack_score\030\013 \001(\003\022"
    "&\n\013event_count\030\014 \003(\0132\021.MsgShowDownEvent\022"
    "\017\n\007hu_role\030\r \001(\010\022\020\n\010hand_num\030\016 \001(\r\022\017\n\007hu"
    "_list\030\017 \003(\r\"W\n\020MsgShowDownEvent\022\020\n\010event"
    "_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\r\n\005score\030\003 \003(\005\022"
    "\023\n\013score_count\030\004 \003(\r\"1\n\020MsgIntegralCount"
    "\022\016\n\006roleid\030\001 \001(\004\022\r\n\005count\030\002 \001(\r\"H\n\022MsgSt"
    "atisticsEvent\022#\n\010event_id\030\002 \001(\0162\021.TStati"
    "sticsEvent\022\r\n\005count\030\003 \001(\r\"R\n\026MsgStatisti"
    "csEventList\022\017\n\007roel_id\030\001 \001(\004\022\'\n\nevent_li"
    "st\030\002 \003(\0132\023.MsgStatisticsEvent\"\262\002\n\020MsgSho"
    "wDownCount\022#\n\rshowdown_list\030\001 \003(\0132\014.MsgS"
    "howDown\022\"\n\nroom_state\030\002 \001(\0162\016.TMahJongSt"
    "ate\022\022\n\ngame_count\030\003 \001(\r\022\021\n\tgame_over\030\004 \001"
    "(\010\022\022\n\nother_card\030\005 \003(\r\022\023\n\013other_count\030\006 "
    "\001(\r\022\014\n\004time\030\007 \001(\r\022\016\n\006param1\030\010 \001(\r\022\020\n\010hu_"
    "state\030\t \001(\r\022(\n\rintegral_list\030\n \003(\0132\021.Msg"
    "IntegralCount\022+\n\nevent_list\030\013 \003(\0132\027.MsgS"
    "tatisticsEventList\"\324\001\n\020MsgShowMaxFlower\022"
    " \n\nweave_list\030\001 \003(\0132\014.MsgCardData\022\017\n\007hu_"
    "kind\030\002 \001(\r\022\021\n\thand_card\030\003 \003(\r\022\023\n\013flower_"
    "card\030\004 \003(\r\022\023\n\013base_flower\030\005 \001(\r\022\023\n\013hard_"
    "flower\030\006 \001(\r\022\023\n\013mild_flower\030\007 \001(\r\022\025\n\rbao"
    "_ta_flower\030\010 \001(\r\022\017\n\007hu_card\030\t \001(\r\"A\n\025Msg"
    "RoleCathecticCount\022\017\n\007role_id\030\001 \001(\004\022\027\n\017c"
    "athectic_count\030\002 \001(\r\"J\n\017MsgTickCathetic\022"
    "\017\n\007role_id\030\001 \001(\004\022\027\n\017cathectic_count\030\002 \001("
    "\r\022\r\n\005state\030\003 \001(\r\"5\n\013MsgContract\022\022\n\ncontr"
    "actor\030\001 \001(\004\022\022\n\ncontracted\030\002 \001(\004\"4\n\021MsgCo"
    "ntractResult\022\017\n\007role_id\030\001 \001(\004\022\016\n\006result\030"
    "\002 \001(\r\"%\n\tMsgAnXiao\022\n\n\002id\030\001 \001(\004\022\014\n\004sign\030\002"
    " \001(\010\"&\n\nMsgJiaCard\022\n\n\002id\030\001 \001(\004\022\014\n\004card\030\002"
    " \001(\r\"2\n\rMsgListenCard\022\014\n\004card\030\001 \001(\r\022\023\n\013l"
    "isten_card\030\002 \003(\r\"8\n\017MsgPlayerQueMen\022%\n\013q"
    "uemen_list\030\001 \003(\0132\020.MsgSelectQueMen\"<\n\017Ms"
    "gSelectQueMen\022\n\n\002id\030\001 \001(\004\022\035\n\005color\030\002 \001(\016"
    "2\016.TMahJongColor\"\205\001\n\022MsgSelectThreeCard\022"
    "\n\n\002id\030\001 \001(\004\022\021\n\tswap_card\030\002 \003(\r\022\021\n\thand_c"
    "ard\030\003 \003(\r\022\022\n\nhand_count\030\004 \001(\r\022)\n\021other_p"
    "layer_list\030\005 \003(\0132\016.MsgSwapFinish\"4\n\rMsgS"
    "wapFinish\022\017\n\007role_id\030\001 \001(\004\022\022\n\ncard_count"
    "\030\002 \001(\r*\345\004\n\021TMahJongRoleState\022\017\n\013STATE_RE"
    "ADY\020\001\022\020\n\014STATE_LISTEN\020\002\022\017\n\013STATE_TRUST\020\004"
    "\022\021\n\rSTATE_NEWROLE\020\010\022\024\n\020STATE_ROOM_OWNER\020"
    "\020\022\017\n\013STATE_VIDEO\020 \022\021\n\rSTATE_RELIEVE\020@\022\020\n"
    "\013STATE_LIMIT\020\200\001\022\024\n\017STATE_PACK_CARD\020\200\002\022\022\n"
    "\rSTATE_OFFLINE\020\200\004\022\021\n\014STATE_KOUPAI\020\200\010\022\026\n\021"
    "STATE_PLAY_LISTEN\020\200\020\022\023\n\016STATE_MING_LOU\020\200"
    " \022\022\n\rSTATE_BAO_TOU\020\200@\022\024\n\016STATE_PIAO_CAI\020"
    "\200\200\001\022\021\n\013STATE_MO_DA\020\200\200\002\022\024\n\016STATE_CATHETIC"
    "\020\200\200\004\022\023\n\rSTATE_KAI_MEN\020\200\200\010\022\025\n\017STATE_DI_YI"
    "_LUN\020\200\200\020\022\030\n\022STATE_CONTIUE_GAME\020\200\200 \022\033\n\025ST"
    "ATE_CONTRACT_ACCEPT\020\200\200@\022\027\n\020STATE_CONTRAC"
    "TOR\020\200\200\200\001\022\027\n\020STATE_CONTRACTED\020\200\200\200\002\022\024\n\rSTA"
    "TE_DINGZHA\020\200\200\200\004\022\023\n\014STATE_HUNYOU\020\200\200\200\010\022\023\n\014"
    "STATE_QUEMEN\020\200\200\200\020\022\032\n\023STATE_WAIT_SWAPCARD"
    "\020\200\200\200 \022\017\n\010STATE_HU\020\200\200\200@*\316\001\n\tTBarState\022\023\n\017"
    "STATE_GANG_NULL\020\000\022\023\n\017STATE_MING_GANG\020\001\022\021"
    "\n\rSTATE_AN_GANG\020\002\022\023\n\017STATE_ERCI_GANG\020\003\022\027"
    "\n\023STATE_HUI_MING_GANG\020\004\022\025\n\021STATE_HUI_AN_"
    "GANG\020\005\022\023\n\017STATE_H_AN_GANG\020\006\022\025\n\021STATE_H_M"
    "ING_GANG\020\007\022\023\n\017STATE_PENG_GANG\020\010*i\n\020TStat"
    "isticsEvent\022\033\n\027STATISTICS_DANBA_GAOFEN\020\001"
    "\022\034\n\030STATISTICS_DIANPAO_CISHU\020\002\022\032\n\026STATIS"
    "TICS_HUPAI_CISHU\020\003*I\n\nTDirection\022\013\n\007DT_N"
    "ULL\020\000\022\013\n\007DT_DONG\020\001\022\n\n\006DT_NAN\020\002\022\t\n\005DT_XI\020"
    "\003\022\n\n\006DT_BEI\020\004*b\n\014TAmerceState\022\017\n\013AMERCE_"
    "NULL\020\000\022\023\n\017AMERCE_OUT_CARD\020\001\022\024\n\020AMERCE_WI"
    "TH_CARD\020\002\022\026\n\022AMERCE_SERIES_CARD\020\004*\217\021\n\rTM"
    "ahJongState\022\025\n\021TMahJongStateWait\020\000\022\037\n\033TM"
    "ahJongStateCheckStartGame\020\001\022\032\n\026TMahJongS"
    "tateStartGame\020\002\022\033\n\027TMahJongStateMakeBanK"
    "er\020\003\022\032\n\026TMahJongStateMakeMound\020\004\022\037\n\033TMah"
    "JongStateSendFirstBrand\020\005\022\037\n\033TMahJongSta"
    "teHandMendFlower\020\006\022\037\n\033TMahJongStateTianD"
    "iHuChoice\020\007\022 \n\034TMahJongStateAholdMendFlo"
    "wer\020\010\022\027\n\023TMahJongStateAction\020\t\022\031\n\025TMahJo"
    "ngStateShowdown\020\n\022\030\n\024TMahJongStateOutCar"
    "d\020\013\022\033\n\027TMahJongStateUserChoice\020\014\022\033\n\027TMah"
    "JongStateSelfChoice\020\r\022 \n\034TMahJongStateQi"
    "angGangChoice\020\016\022\032\n\026TMahJongStateTouchCar"
    "d\020\017\022\030\n\024TMahJongStateBarCard\020\020\022\030\n\024TMahJon"
    "gStateEatCard\020\021\022\027\n\023TMahJongStateAmerce\020\022"
    "\022\030\n\024TMahJongStateRelieve\020\023\022 \n\034TMahJongSt"
    "ateTouchCardFinish\020\024\022\036\n\032TMahJongStateBar"
    "CardFinish\020\025\022\036\n\032TMahJongStateEatCardFini"
    "sh\020\026\022\035\n\031TMahJongStateAmerceFinish\020\027\022\036\n\032T"
    "MahJongStateRelieveFinish\020\030\022\032\n\026TMahJongS"
    "tateLeaveGame\020\031\022\032\n\026TMahJongStateDianPaoH"
    "u\020\032\022\027\n\023TMahJongStateZiMoHu\020\033\022\030\n\024TMahJong"
    "StateLiuJuHu\020\034\022\034\n\030TMahJongStateQiangGang"
    "Hu\020\035\022\031\n\025TMahJongStateBarDuiHu\020\036\022\033\n\027TMahJ"
    "ongStateSanZhiJian\020\037\022\031\n\025TMahJongStateSiX"
    "iFeng\020 \022!\n\035TMahJongStateSanZhiJianFinish"
    "\020!\022\037\n\033TMahJongStateSiXiFengFinish\020\"\022\033\n\027T"
    "MahJongStateHuGangFang\020#\022\031\n\025TMahJongStat"
    "eZuanCard\020$\022\037\n\033TMahJongStateZuanCardFini"
    "sh\020%\022\034\n\030TMahJongStateMingLouCard\020&\022\031\n\025TM"
    "ahJongStateCathetic\020\'\022%\n!TMahJongStateSe"
    "ndFirstBrandFinish\020(\022\"\n\036TMahJongStateSel"
    "ectVirtaulCard\020)\022!\n\035TMahJongStateXuanFen"
    "gGangCard\020*\022\'\n#TMahJongStateXuanFengGang"
    "CardFinish\020+\022 \n\034TMahJongStateContractCon"
    "firm\020,\022\031\n\025TMahJongStateBianCard\020-\022\037\n\033TMa"
    "hJongStateBianCardFinish\020.\022\031\n\025TMahJongSt"
    "ateGameOver\020/\022\027\n\023TMahJongStateZaCard\0200\022\035"
    "\n\031TMahJongStateZaCardFinish\0201\022\030\n\024TMahJon"
    "gStateKouCard\0202\022\036\n\032TMahJongStateKouCardF"
    "inish\0203\022\030\n\024TMahJongStateLiangXi\0204\022\036\n\032TMa"
    "hJongStateLiangXiFinish\0205\022\025\n\021TMahJongSta"
    "teBuXi\0206\022\033\n\027TMahJongStateBuXiFinish\0207\022\032\n"
    "\026TMahJongStateQiangPeng\0208\022\027\n\023TMahJongSta"
    "teLaunch\0209\022\035\n\031TMahJongStateLaunchFinish\020"
    ":\022\035\n\031TMahJongStatePreOperation\020;\022\036\n\032TMah"
    "JongStateHuiMendFlower\020<\022$\n TMahJongStat"
    "eHuiMendFlowerFinish\020=\022\031\n\025TMahJongStateT"
    "ianTing\020>\022\032\n\026TMahJongStateLiangXiHu\020\?\022\031\n"
    "\025TMahJongStateFangFeng\020@\022\037\n\033TMahJongStat"
    "eFangFengFinish\020A\022\031\n\025TMahJongStateZhangM"
    "ao\020B\022\037\n\033TMahJongStateZhangMaoFinish\020C\022\026\n"
    "\022TMahJongStateTrust\020D\022 \n\034TMahJongStateSe"
    "lectThreeCard\020E\022\035\n\031TMahJongStateSelectQu"
    "eMen\020F\022\031\n\025TMahJongStateSwapCard\020G\022 \n\034TMa"
    "hjongSatateSwapCardFinish\020H*\264\003\n\013TMahJong"
    "ASK\022\014\n\010ASK_NULL\020\000\022\014\n\010ASK_LEFT\020\001\022\016\n\nASK_C"
    "ENTER\020\002\022\r\n\tASK_RIGHT\020\004\022\014\n\010ASK_PENG\020\010\022\014\n\010"
    "ASK_FILL\020\020\022\014\n\010ASK_GANG\020 \022\016\n\nASK_LISTEN\020@"
    "\022\016\n\tASK_CHIHU\020\200\001\022\023\n\016ASK_SANZHIJIAN\020\200\002\022\021\n"
    "\014ASK_SIXIFENG\020\200\004\022\017\n\nASK_KOUPAI\020\200\010\022\025\n\020ASK"
    "_AUTH_SUCCEED\020\200\020\022\020\n\013ASK_MINGLOU\020\200 \022\016\n\tAS"
    "K_ANLOU\020\200@\022\016\n\010ASK_ZUAN\020\200\200\001\022\025\n\017ASK_SELECT"
    "_CARD\020\200\200\002\022\016\n\010ASK_BIAN\020\200\200\004\022\014\n\006ASK_ZA\020\200\200\010\022"
    "\014\n\006ASK_HU\020\200\200\020\022\020\n\nASK_HUNYOU\020\200\200 \022\021\n\013ASK_L"
    "IANGXI\020\200\200@\022\017\n\010ASK_BUXI\020\200\200\200\001\022\022\n\013ASK_DINGZ"
    "HA\020\200\200\200\002\022\021\n\nASK_LAUNCH\020\200\200\200\004*\345\004\n\013TMahJongC"
    "HR\022\014\n\010CHR_NULL\020\000\022\017\n\013CHR_XIAO_HU\020\001\022\031\n\025CHR"
    "_XIAO_GANG_KAI_HUA\020\002\022\020\n\014CHR_MEN_QING\020\004\022\021"
    "\n\rCHR_HUN_YI_SE\020\010\022\022\n\016CHR_DUI_DUI_HU\020\020\022\016\n"
    "\nCHR_YA_JUE\020 \022\022\n\016CHR_QING_YI_SE\020@\022\021\n\014CHR"
    "_DAN_DIAO\020\200\001\022\017\n\nCHR_QI_DUI\020\200\002\022\027\n\022CHR_HAO"
    "_HUA_QI_DUI\020\200\004\022\034\n\027CHR_CHAO_HAO_HUA_QI_DU"
    "I\020\200\010\022!\n\034CHR_CHAO_CHAO_HAO_HUA_QI_DUI\020\200\020\022"
    "\023\n\016CHR_WU_HUA_GUO\020\200 \022\030\n\023CHR_DA_GANG_KAI_"
    "HUA\020\200@\022\017\n\tCHR_DI_HU\020\200\200\001\022\021\n\013CHR_TAIN_HU\020\200"
    "\200\002\022\030\n\022CHR_HAI_DI_LAO_YUE\020\200\200\004\022\027\n\021CHR_QIAN"
    "G_GANG_HU\020\200\200\010\022\023\n\rCHR_BI_XIA_HU\020\200\200\020\022\021\n\013CH"
    "R_YA_DANG\020\200\200 \022\023\n\rCHR_SANDUI_HU\020\200\200@\022\017\n\010CH"
    "R_LONG\020\200\200\200\001\022\024\n\rCHR_QING_LONG\020\200\200\200\002\022\021\n\nCHR"
    "_13_YAO\020\200\200\200\004\022\026\n\017CHR_JIANG_YI_SE\020\200\200\200\010\022\027\n\020"
    "CHR_HU_GANG_FANG\020\200\200\200\020\022\023\n\014CHR_MING_LOU\020\200\200"
    "\200 *N\n\rTMahJongColor\022\016\n\nCOLOR_NULL\020\000\022\r\n\tC"
    "OLOR_WAN\020\001\022\016\n\nCOLOR_TIAO\020\002\022\016\n\nCOLOR_TONG"
    "\020\003", 9562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_mahjong.proto", &protobuf_RegisterTypes);
  MsgBones::default_instance_ = new MsgBones();
  MsgMendFlower::default_instance_ = new MsgMendFlower();
  MsgUserAction::default_instance_ = new MsgUserAction();
  MsgUserPower::default_instance_ = new MsgUserPower();
  MsgUserPowerTT::default_instance_ = new MsgUserPowerTT();
  MsgListen::default_instance_ = new MsgListen();
  MsgAmerce::default_instance_ = new MsgAmerce();
  MsgOutCard::default_instance_ = new MsgOutCard();
  MsgUserOperate::default_instance_ = new MsgUserOperate();
  MsgRoleScore::default_instance_ = new MsgRoleScore();
  MsgCardData::default_instance_ = new MsgCardData();
  MsgMahJongPlayer::default_instance_ = new MsgMahJongPlayer();
  MsgMahJongRoom::default_instance_ = new MsgMahJongRoom();
  MsgMahJongPrivateRoom::default_instance_ = new MsgMahJongPrivateRoom();
  MsgWeaveCard::default_instance_ = new MsgWeaveCard();
  MsgFlowerList::default_instance_ = new MsgFlowerList();
  MsgFlowerData::default_instance_ = new MsgFlowerData();
  MsgShowDown::default_instance_ = new MsgShowDown();
  MsgShowDownEvent::default_instance_ = new MsgShowDownEvent();
  MsgIntegralCount::default_instance_ = new MsgIntegralCount();
  MsgStatisticsEvent::default_instance_ = new MsgStatisticsEvent();
  MsgStatisticsEventList::default_instance_ = new MsgStatisticsEventList();
  MsgShowDownCount::default_instance_ = new MsgShowDownCount();
  MsgShowMaxFlower::default_instance_ = new MsgShowMaxFlower();
  MsgRoleCathecticCount::default_instance_ = new MsgRoleCathecticCount();
  MsgTickCathetic::default_instance_ = new MsgTickCathetic();
  MsgContract::default_instance_ = new MsgContract();
  MsgContractResult::default_instance_ = new MsgContractResult();
  MsgAnXiao::default_instance_ = new MsgAnXiao();
  MsgJiaCard::default_instance_ = new MsgJiaCard();
  MsgListenCard::default_instance_ = new MsgListenCard();
  MsgPlayerQueMen::default_instance_ = new MsgPlayerQueMen();
  MsgSelectQueMen::default_instance_ = new MsgSelectQueMen();
  MsgSelectThreeCard::default_instance_ = new MsgSelectThreeCard();
  MsgSwapFinish::default_instance_ = new MsgSwapFinish();
  MsgBones::default_instance_->InitAsDefaultInstance();
  MsgMendFlower::default_instance_->InitAsDefaultInstance();
  MsgUserAction::default_instance_->InitAsDefaultInstance();
  MsgUserPower::default_instance_->InitAsDefaultInstance();
  MsgUserPowerTT::default_instance_->InitAsDefaultInstance();
  MsgListen::default_instance_->InitAsDefaultInstance();
  MsgAmerce::default_instance_->InitAsDefaultInstance();
  MsgOutCard::default_instance_->InitAsDefaultInstance();
  MsgUserOperate::default_instance_->InitAsDefaultInstance();
  MsgRoleScore::default_instance_->InitAsDefaultInstance();
  MsgCardData::default_instance_->InitAsDefaultInstance();
  MsgMahJongPlayer::default_instance_->InitAsDefaultInstance();
  MsgMahJongRoom::default_instance_->InitAsDefaultInstance();
  MsgMahJongPrivateRoom::default_instance_->InitAsDefaultInstance();
  MsgWeaveCard::default_instance_->InitAsDefaultInstance();
  MsgFlowerList::default_instance_->InitAsDefaultInstance();
  MsgFlowerData::default_instance_->InitAsDefaultInstance();
  MsgShowDown::default_instance_->InitAsDefaultInstance();
  MsgShowDownEvent::default_instance_->InitAsDefaultInstance();
  MsgIntegralCount::default_instance_->InitAsDefaultInstance();
  MsgStatisticsEvent::default_instance_->InitAsDefaultInstance();
  MsgStatisticsEventList::default_instance_->InitAsDefaultInstance();
  MsgShowDownCount::default_instance_->InitAsDefaultInstance();
  MsgShowMaxFlower::default_instance_->InitAsDefaultInstance();
  MsgRoleCathecticCount::default_instance_->InitAsDefaultInstance();
  MsgTickCathetic::default_instance_->InitAsDefaultInstance();
  MsgContract::default_instance_->InitAsDefaultInstance();
  MsgContractResult::default_instance_->InitAsDefaultInstance();
  MsgAnXiao::default_instance_->InitAsDefaultInstance();
  MsgJiaCard::default_instance_->InitAsDefaultInstance();
  MsgListenCard::default_instance_->InitAsDefaultInstance();
  MsgPlayerQueMen::default_instance_->InitAsDefaultInstance();
  MsgSelectQueMen::default_instance_->InitAsDefaultInstance();
  MsgSelectThreeCard::default_instance_->InitAsDefaultInstance();
  MsgSwapFinish::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fmahjong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fmahjong_2eproto {
  StaticDescriptorInitializer_msg_5fmahjong_2eproto() {
    protobuf_AddDesc_msg_5fmahjong_2eproto();
  }
} static_descriptor_initializer_msg_5fmahjong_2eproto_;
const ::google::protobuf::EnumDescriptor* TMahJongRoleState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMahJongRoleState_descriptor_;
}
bool TMahJongRoleState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TBarState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarState_descriptor_;
}
bool TBarState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TStatisticsEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStatisticsEvent_descriptor_;
}
bool TStatisticsEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDirection_descriptor_;
}
bool TDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TAmerceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAmerceState_descriptor_;
}
bool TAmerceState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMahJongState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMahJongState_descriptor_;
}
bool TMahJongState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMahJongASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMahJongASK_descriptor_;
}
bool TMahJongASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMahJongCHR_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMahJongCHR_descriptor_;
}
bool TMahJongCHR_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMahJongColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMahJongColor_descriptor_;
}
bool TMahJongColor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBones::kIdFieldNumber;
const int MsgBones::kDotCounFieldNumber;
const int MsgBones::kStateFieldNumber;
#endif  // !_MSC_VER

MsgBones::MsgBones()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBones)
}

void MsgBones::InitAsDefaultInstance() {
}

MsgBones::MsgBones(const MsgBones& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBones)
}

void MsgBones::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBones::~MsgBones() {
  // @@protoc_insertion_point(destructor:MsgBones)
  SharedDtor();
}

void MsgBones::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBones::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBones::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBones_descriptor_;
}

const MsgBones& MsgBones::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgBones* MsgBones::default_instance_ = NULL;

MsgBones* MsgBones::New() const {
  return new MsgBones;
}

void MsgBones::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  dotcoun_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBones::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBones)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dotCoun;
        break;
      }

      // repeated uint32 dotCoun = 2;
      case 2: {
        if (tag == 16) {
         parse_dotCoun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_dotcoun())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dotcoun())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dotCoun;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .TMahJongState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMahJongState_IsValid(value)) {
            set_state(static_cast< ::TMahJongState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBones)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBones)
  return false;
#undef DO_
}

void MsgBones::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBones)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint32 dotCoun = 2;
  for (int i = 0; i < this->dotcoun_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->dotcoun(i), output);
  }

  // optional .TMahJongState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgBones)
}

::google::protobuf::uint8* MsgBones::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBones)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 dotCoun = 2;
  for (int i = 0; i < this->dotcoun_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->dotcoun(i), target);
  }

  // optional .TMahJongState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgBones)
  return target;
}

int MsgBones::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .TMahJongState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated uint32 dotCoun = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dotcoun_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dotcoun(i));
    }
    total_size += 1 * this->dotcoun_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBones::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBones* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBones*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBones::MergeFrom(const MsgBones& from) {
  GOOGLE_CHECK_NE(&from, this);
  dotcoun_.MergeFrom(from.dotcoun_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBones::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBones::CopyFrom(const MsgBones& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBones::IsInitialized() const {

  return true;
}

void MsgBones::Swap(MsgBones* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    dotcoun_.Swap(&other->dotcoun_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBones::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBones_descriptor_;
  metadata.reflection = MsgBones_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMendFlower::kIdFieldNumber;
const int MsgMendFlower::kHandcardFieldNumber;
const int MsgMendFlower::kFlowerBarCountFieldNumber;
const int MsgMendFlower::kHandNumFieldNumber;
const int MsgMendFlower::kFlowerNumFieldNumber;
const int MsgMendFlower::kSurplusHandNumFieldNumber;
const int MsgMendFlower::kRoleScoreFieldNumber;
const int MsgMendFlower::kFlowerCardListFieldNumber;
#endif  // !_MSC_VER

MsgMendFlower::MsgMendFlower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMendFlower)
}

void MsgMendFlower::InitAsDefaultInstance() {
}

MsgMendFlower::MsgMendFlower(const MsgMendFlower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMendFlower)
}

void MsgMendFlower::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  flower_bar_count_ = 0u;
  hand_num_ = 0u;
  flower_num_ = 0u;
  surplus_hand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMendFlower::~MsgMendFlower() {
  // @@protoc_insertion_point(destructor:MsgMendFlower)
  SharedDtor();
}

void MsgMendFlower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMendFlower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMendFlower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMendFlower_descriptor_;
}

const MsgMendFlower& MsgMendFlower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgMendFlower* MsgMendFlower::default_instance_ = NULL;

MsgMendFlower* MsgMendFlower::New() const {
  return new MsgMendFlower;
}

void MsgMendFlower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMendFlower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(flower_bar_count_, surplus_hand_num_);
    id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  handcard_.Clear();
  role_score_.Clear();
  flower_card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMendFlower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMendFlower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handcard;
        break;
      }

      // repeated uint32 handcard = 2;
      case 2: {
        if (tag == 16) {
         parse_handcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_handcard())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_handcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handcard;
        if (input->ExpectTag(24)) goto parse_flower_bar_count;
        break;
      }

      // optional uint32 flower_bar_count = 3;
      case 3: {
        if (tag == 24) {
         parse_flower_bar_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_bar_count_)));
          set_has_flower_bar_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flower_num;
        break;
      }

      // optional uint32 flower_num = 5;
      case 5: {
        if (tag == 40) {
         parse_flower_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_num_)));
          set_has_flower_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_surplus_hand_num;
        break;
      }

      // optional uint32 surplus_hand_num = 6;
      case 6: {
        if (tag == 48) {
         parse_surplus_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_hand_num_)));
          set_has_surplus_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_role_score;
        break;
      }

      // repeated .MsgRoleScore role_score = 7;
      case 7: {
        if (tag == 58) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_role_score;
        if (input->ExpectTag(64)) goto parse_flower_card_list;
        break;
      }

      // repeated uint32 flower_card_list = 8;
      case 8: {
        if (tag == 64) {
         parse_flower_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_flower_card_list())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_flower_card_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flower_card_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMendFlower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMendFlower)
  return false;
#undef DO_
}

void MsgMendFlower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMendFlower)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint32 handcard = 2;
  for (int i = 0; i < this->handcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->handcard(i), output);
  }

  // optional uint32 flower_bar_count = 3;
  if (has_flower_bar_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flower_bar_count(), output);
  }

  // optional uint32 hand_num = 4;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_num(), output);
  }

  // optional uint32 flower_num = 5;
  if (has_flower_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flower_num(), output);
  }

  // optional uint32 surplus_hand_num = 6;
  if (has_surplus_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->surplus_hand_num(), output);
  }

  // repeated .MsgRoleScore role_score = 7;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->role_score(i), output);
  }

  // repeated uint32 flower_card_list = 8;
  for (int i = 0; i < this->flower_card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->flower_card_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMendFlower)
}

::google::protobuf::uint8* MsgMendFlower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMendFlower)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 handcard = 2;
  for (int i = 0; i < this->handcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->handcard(i), target);
  }

  // optional uint32 flower_bar_count = 3;
  if (has_flower_bar_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flower_bar_count(), target);
  }

  // optional uint32 hand_num = 4;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_num(), target);
  }

  // optional uint32 flower_num = 5;
  if (has_flower_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flower_num(), target);
  }

  // optional uint32 surplus_hand_num = 6;
  if (has_surplus_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->surplus_hand_num(), target);
  }

  // repeated .MsgRoleScore role_score = 7;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->role_score(i), target);
  }

  // repeated uint32 flower_card_list = 8;
  for (int i = 0; i < this->flower_card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->flower_card_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMendFlower)
  return target;
}

int MsgMendFlower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 flower_bar_count = 3;
    if (has_flower_bar_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_bar_count());
    }

    // optional uint32 hand_num = 4;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

    // optional uint32 flower_num = 5;
    if (has_flower_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_num());
    }

    // optional uint32 surplus_hand_num = 6;
    if (has_surplus_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_hand_num());
    }

  }
  // repeated uint32 handcard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->handcard(i));
    }
    total_size += 1 * this->handcard_size() + data_size;
  }

  // repeated .MsgRoleScore role_score = 7;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  // repeated uint32 flower_card_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->flower_card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->flower_card_list(i));
    }
    total_size += 1 * this->flower_card_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMendFlower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMendFlower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMendFlower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMendFlower::MergeFrom(const MsgMendFlower& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcard_.MergeFrom(from.handcard_);
  role_score_.MergeFrom(from.role_score_);
  flower_card_list_.MergeFrom(from.flower_card_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flower_bar_count()) {
      set_flower_bar_count(from.flower_bar_count());
    }
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
    if (from.has_flower_num()) {
      set_flower_num(from.flower_num());
    }
    if (from.has_surplus_hand_num()) {
      set_surplus_hand_num(from.surplus_hand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMendFlower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMendFlower::CopyFrom(const MsgMendFlower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMendFlower::IsInitialized() const {

  return true;
}

void MsgMendFlower::Swap(MsgMendFlower* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    handcard_.Swap(&other->handcard_);
    std::swap(flower_bar_count_, other->flower_bar_count_);
    std::swap(hand_num_, other->hand_num_);
    std::swap(flower_num_, other->flower_num_);
    std::swap(surplus_hand_num_, other->surplus_hand_num_);
    role_score_.Swap(&other->role_score_);
    flower_card_list_.Swap(&other->flower_card_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMendFlower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMendFlower_descriptor_;
  metadata.reflection = MsgMendFlower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserAction::kIdFieldNumber;
const int MsgUserAction::kRoomStateFieldNumber;
const int MsgUserAction::kCardFieldNumber;
const int MsgUserAction::kFlowerNumFieldNumber;
const int MsgUserAction::kWikFieldNumber;
const int MsgUserAction::kGangCardFieldNumber;
const int MsgUserAction::kFlowerBarCountFieldNumber;
const int MsgUserAction::kSurplusHandNumFieldNumber;
const int MsgUserAction::kSubMoneyIdFieldNumber;
const int MsgUserAction::kRoleScoreFieldNumber;
const int MsgUserAction::kZaCardFieldNumber;
const int MsgUserAction::kLaunchCardFieldNumber;
const int MsgUserAction::kLiangxiWikFieldNumber;
const int MsgUserAction::kBuxiCardFieldNumber;
const int MsgUserAction::kFlowerCardListFieldNumber;
const int MsgUserAction::kEatCardFieldNumber;
const int MsgUserAction::kListenListFieldNumber;
#endif  // !_MSC_VER

MsgUserAction::MsgUserAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUserAction)
}

void MsgUserAction::InitAsDefaultInstance() {
}

MsgUserAction::MsgUserAction(const MsgUserAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUserAction)
}

void MsgUserAction::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  room_state_ = 0;
  card_ = 0u;
  flower_num_ = 0u;
  wik_ = 0u;
  flower_bar_count_ = 0u;
  surplus_hand_num_ = 0u;
  sub_money_id_ = GOOGLE_ULONGLONG(0);
  liangxi_wik_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserAction::~MsgUserAction() {
  // @@protoc_insertion_point(destructor:MsgUserAction)
  SharedDtor();
}

void MsgUserAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserAction_descriptor_;
}

const MsgUserAction& MsgUserAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgUserAction* MsgUserAction::default_instance_ = NULL;

MsgUserAction* MsgUserAction::New() const {
  return new MsgUserAction;
}

void MsgUserAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(id_, wik_);
    ZR_(flower_bar_count_, surplus_hand_num_);
  }
  if (_has_bits_[8 / 32] & 4352) {
    sub_money_id_ = GOOGLE_ULONGLONG(0);
    liangxi_wik_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gang_card_.Clear();
  role_score_.Clear();
  za_card_.Clear();
  launch_card_.Clear();
  buxi_card_.Clear();
  flower_card_list_.Clear();
  eat_card_.Clear();
  listen_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUserAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_state;
        break;
      }

      // optional .TMahJongState room_state = 2;
      case 2: {
        if (tag == 16) {
         parse_room_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMahJongState_IsValid(value)) {
            set_room_state(static_cast< ::TMahJongState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_card;
        break;
      }

      // optional uint32 card = 3;
      case 3: {
        if (tag == 24) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flower_num;
        break;
      }

      // optional uint32 flower_num = 4;
      case 4: {
        if (tag == 32) {
         parse_flower_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_num_)));
          set_has_flower_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 5;
      case 5: {
        if (tag == 40) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gang_card;
        break;
      }

      // repeated uint32 gang_card = 6;
      case 6: {
        if (tag == 48) {
         parse_gang_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_gang_card())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gang_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gang_card;
        if (input->ExpectTag(56)) goto parse_flower_bar_count;
        break;
      }

      // optional uint32 flower_bar_count = 7;
      case 7: {
        if (tag == 56) {
         parse_flower_bar_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_bar_count_)));
          set_has_flower_bar_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_surplus_hand_num;
        break;
      }

      // optional uint32 surplus_hand_num = 8;
      case 8: {
        if (tag == 64) {
         parse_surplus_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_hand_num_)));
          set_has_surplus_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sub_money_id;
        break;
      }

      // optional uint64 sub_money_id = 9;
      case 9: {
        if (tag == 72) {
         parse_sub_money_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sub_money_id_)));
          set_has_sub_money_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_role_score;
        break;
      }

      // repeated .MsgRoleScore role_score = 10;
      case 10: {
        if (tag == 82) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_role_score;
        if (input->ExpectTag(88)) goto parse_za_card;
        break;
      }

      // repeated uint32 za_card = 11;
      case 11: {
        if (tag == 88) {
         parse_za_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_za_card())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_za_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_za_card;
        if (input->ExpectTag(96)) goto parse_launch_card;
        break;
      }

      // repeated uint32 launch_card = 12;
      case 12: {
        if (tag == 96) {
         parse_launch_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_launch_card())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_launch_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_launch_card;
        if (input->ExpectTag(104)) goto parse_liangxi_wik;
        break;
      }

      // optional uint32 liangxi_wik = 13;
      case 13: {
        if (tag == 104) {
         parse_liangxi_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liangxi_wik_)));
          set_has_liangxi_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_buxi_card;
        break;
      }

      // repeated uint32 buxi_card = 14;
      case 14: {
        if (tag == 112) {
         parse_buxi_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_buxi_card())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buxi_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_buxi_card;
        if (input->ExpectTag(120)) goto parse_flower_card_list;
        break;
      }

      // repeated uint32 flower_card_list = 15;
      case 15: {
        if (tag == 120) {
         parse_flower_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_flower_card_list())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_flower_card_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_flower_card_list;
        if (input->ExpectTag(128)) goto parse_eat_card;
        break;
      }

      // repeated uint32 eat_card = 16;
      case 16: {
        if (tag == 128) {
         parse_eat_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_eat_card())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eat_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_eat_card;
        if (input->ExpectTag(138)) goto parse_listen_list;
        break;
      }

      // repeated .MsgListenCard listen_list = 17;
      case 17: {
        if (tag == 138) {
         parse_listen_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listen_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_listen_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUserAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUserAction)
  return false;
#undef DO_
}

void MsgUserAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUserAction)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .TMahJongState room_state = 2;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_state(), output);
  }

  // optional uint32 card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card(), output);
  }

  // optional uint32 flower_num = 4;
  if (has_flower_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flower_num(), output);
  }

  // optional uint32 wik = 5;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wik(), output);
  }

  // repeated uint32 gang_card = 6;
  for (int i = 0; i < this->gang_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->gang_card(i), output);
  }

  // optional uint32 flower_bar_count = 7;
  if (has_flower_bar_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flower_bar_count(), output);
  }

  // optional uint32 surplus_hand_num = 8;
  if (has_surplus_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->surplus_hand_num(), output);
  }

  // optional uint64 sub_money_id = 9;
  if (has_sub_money_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->sub_money_id(), output);
  }

  // repeated .MsgRoleScore role_score = 10;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->role_score(i), output);
  }

  // repeated uint32 za_card = 11;
  for (int i = 0; i < this->za_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->za_card(i), output);
  }

  // repeated uint32 launch_card = 12;
  for (int i = 0; i < this->launch_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->launch_card(i), output);
  }

  // optional uint32 liangxi_wik = 13;
  if (has_liangxi_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->liangxi_wik(), output);
  }

  // repeated uint32 buxi_card = 14;
  for (int i = 0; i < this->buxi_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->buxi_card(i), output);
  }

  // repeated uint32 flower_card_list = 15;
  for (int i = 0; i < this->flower_card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->flower_card_list(i), output);
  }

  // repeated uint32 eat_card = 16;
  for (int i = 0; i < this->eat_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->eat_card(i), output);
  }

  // repeated .MsgListenCard listen_list = 17;
  for (int i = 0; i < this->listen_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->listen_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUserAction)
}

::google::protobuf::uint8* MsgUserAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUserAction)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .TMahJongState room_state = 2;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_state(), target);
  }

  // optional uint32 card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card(), target);
  }

  // optional uint32 flower_num = 4;
  if (has_flower_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flower_num(), target);
  }

  // optional uint32 wik = 5;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wik(), target);
  }

  // repeated uint32 gang_card = 6;
  for (int i = 0; i < this->gang_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->gang_card(i), target);
  }

  // optional uint32 flower_bar_count = 7;
  if (has_flower_bar_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flower_bar_count(), target);
  }

  // optional uint32 surplus_hand_num = 8;
  if (has_surplus_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->surplus_hand_num(), target);
  }

  // optional uint64 sub_money_id = 9;
  if (has_sub_money_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->sub_money_id(), target);
  }

  // repeated .MsgRoleScore role_score = 10;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->role_score(i), target);
  }

  // repeated uint32 za_card = 11;
  for (int i = 0; i < this->za_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->za_card(i), target);
  }

  // repeated uint32 launch_card = 12;
  for (int i = 0; i < this->launch_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->launch_card(i), target);
  }

  // optional uint32 liangxi_wik = 13;
  if (has_liangxi_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->liangxi_wik(), target);
  }

  // repeated uint32 buxi_card = 14;
  for (int i = 0; i < this->buxi_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->buxi_card(i), target);
  }

  // repeated uint32 flower_card_list = 15;
  for (int i = 0; i < this->flower_card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->flower_card_list(i), target);
  }

  // repeated uint32 eat_card = 16;
  for (int i = 0; i < this->eat_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->eat_card(i), target);
  }

  // repeated .MsgListenCard listen_list = 17;
  for (int i = 0; i < this->listen_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->listen_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUserAction)
  return target;
}

int MsgUserAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .TMahJongState room_state = 2;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 flower_num = 4;
    if (has_flower_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_num());
    }

    // optional uint32 wik = 5;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 flower_bar_count = 7;
    if (has_flower_bar_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_bar_count());
    }

    // optional uint32 surplus_hand_num = 8;
    if (has_surplus_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_hand_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 sub_money_id = 9;
    if (has_sub_money_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sub_money_id());
    }

    // optional uint32 liangxi_wik = 13;
    if (has_liangxi_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liangxi_wik());
    }

  }
  // repeated uint32 gang_card = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gang_card(i));
    }
    total_size += 1 * this->gang_card_size() + data_size;
  }

  // repeated .MsgRoleScore role_score = 10;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  // repeated uint32 za_card = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->za_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->za_card(i));
    }
    total_size += 1 * this->za_card_size() + data_size;
  }

  // repeated uint32 launch_card = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->launch_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->launch_card(i));
    }
    total_size += 1 * this->launch_card_size() + data_size;
  }

  // repeated uint32 buxi_card = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->buxi_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buxi_card(i));
    }
    total_size += 1 * this->buxi_card_size() + data_size;
  }

  // repeated uint32 flower_card_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->flower_card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->flower_card_list(i));
    }
    total_size += 1 * this->flower_card_list_size() + data_size;
  }

  // repeated uint32 eat_card = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->eat_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eat_card(i));
    }
    total_size += 2 * this->eat_card_size() + data_size;
  }

  // repeated .MsgListenCard listen_list = 17;
  total_size += 2 * this->listen_list_size();
  for (int i = 0; i < this->listen_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listen_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserAction::MergeFrom(const MsgUserAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_card_.MergeFrom(from.gang_card_);
  role_score_.MergeFrom(from.role_score_);
  za_card_.MergeFrom(from.za_card_);
  launch_card_.MergeFrom(from.launch_card_);
  buxi_card_.MergeFrom(from.buxi_card_);
  flower_card_list_.MergeFrom(from.flower_card_list_);
  eat_card_.MergeFrom(from.eat_card_);
  listen_list_.MergeFrom(from.listen_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_flower_num()) {
      set_flower_num(from.flower_num());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_flower_bar_count()) {
      set_flower_bar_count(from.flower_bar_count());
    }
    if (from.has_surplus_hand_num()) {
      set_surplus_hand_num(from.surplus_hand_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_money_id()) {
      set_sub_money_id(from.sub_money_id());
    }
    if (from.has_liangxi_wik()) {
      set_liangxi_wik(from.liangxi_wik());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserAction::CopyFrom(const MsgUserAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserAction::IsInitialized() const {

  return true;
}

void MsgUserAction::Swap(MsgUserAction* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(room_state_, other->room_state_);
    std::swap(card_, other->card_);
    std::swap(flower_num_, other->flower_num_);
    std::swap(wik_, other->wik_);
    gang_card_.Swap(&other->gang_card_);
    std::swap(flower_bar_count_, other->flower_bar_count_);
    std::swap(surplus_hand_num_, other->surplus_hand_num_);
    std::swap(sub_money_id_, other->sub_money_id_);
    role_score_.Swap(&other->role_score_);
    za_card_.Swap(&other->za_card_);
    launch_card_.Swap(&other->launch_card_);
    std::swap(liangxi_wik_, other->liangxi_wik_);
    buxi_card_.Swap(&other->buxi_card_);
    flower_card_list_.Swap(&other->flower_card_list_);
    eat_card_.Swap(&other->eat_card_);
    listen_list_.Swap(&other->listen_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserAction_descriptor_;
  metadata.reflection = MsgUserAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserPower::kIdFieldNumber;
const int MsgUserPower::kWikFieldNumber;
const int MsgUserPower::kHandleCardFieldNumber;
const int MsgUserPower::kNewCardFieldNumber;
#endif  // !_MSC_VER

MsgUserPower::MsgUserPower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUserPower)
}

void MsgUserPower::InitAsDefaultInstance() {
}

MsgUserPower::MsgUserPower(const MsgUserPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUserPower)
}

void MsgUserPower::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  wik_ = 0u;
  handle_card_ = 0u;
  new_card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserPower::~MsgUserPower() {
  // @@protoc_insertion_point(destructor:MsgUserPower)
  SharedDtor();
}

void MsgUserPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserPower_descriptor_;
}

const MsgUserPower& MsgUserPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgUserPower* MsgUserPower::default_instance_ = NULL;

MsgUserPower* MsgUserPower::New() const {
  return new MsgUserPower;
}

void MsgUserPower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserPower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, new_card_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUserPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 2;
      case 2: {
        if (tag == 16) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_card;
        break;
      }

      // optional uint32 handle_card = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_card_)));
          set_has_handle_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_new_card;
        break;
      }

      // optional uint32 new_card = 4;
      case 4: {
        if (tag == 32) {
         parse_new_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_card_)));
          set_has_new_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUserPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUserPower)
  return false;
#undef DO_
}

void MsgUserPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUserPower)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wik(), output);
  }

  // optional uint32 handle_card = 3;
  if (has_handle_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handle_card(), output);
  }

  // optional uint32 new_card = 4;
  if (has_new_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUserPower)
}

::google::protobuf::uint8* MsgUserPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUserPower)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wik(), target);
  }

  // optional uint32 handle_card = 3;
  if (has_handle_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->handle_card(), target);
  }

  // optional uint32 new_card = 4;
  if (has_new_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUserPower)
  return target;
}

int MsgUserPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 wik = 2;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 handle_card = 3;
    if (has_handle_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_card());
    }

    // optional uint32 new_card = 4;
    if (has_new_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserPower::MergeFrom(const MsgUserPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_handle_card()) {
      set_handle_card(from.handle_card());
    }
    if (from.has_new_card()) {
      set_new_card(from.new_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserPower::CopyFrom(const MsgUserPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserPower::IsInitialized() const {

  return true;
}

void MsgUserPower::Swap(MsgUserPower* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wik_, other->wik_);
    std::swap(handle_card_, other->handle_card_);
    std::swap(new_card_, other->new_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserPower_descriptor_;
  metadata.reflection = MsgUserPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserPowerTT::kIdFieldNumber;
const int MsgUserPowerTT::kWikFieldNumber;
const int MsgUserPowerTT::kHandleCardFieldNumber;
const int MsgUserPowerTT::kNewCardFieldNumber;
const int MsgUserPowerTT::kGangCardFieldNumber;
#endif  // !_MSC_VER

MsgUserPowerTT::MsgUserPowerTT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUserPowerTT)
}

void MsgUserPowerTT::InitAsDefaultInstance() {
}

MsgUserPowerTT::MsgUserPowerTT(const MsgUserPowerTT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUserPowerTT)
}

void MsgUserPowerTT::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  wik_ = 0u;
  handle_card_ = 0u;
  new_card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserPowerTT::~MsgUserPowerTT() {
  // @@protoc_insertion_point(destructor:MsgUserPowerTT)
  SharedDtor();
}

void MsgUserPowerTT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserPowerTT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserPowerTT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserPowerTT_descriptor_;
}

const MsgUserPowerTT& MsgUserPowerTT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgUserPowerTT* MsgUserPowerTT::default_instance_ = NULL;

MsgUserPowerTT* MsgUserPowerTT::New() const {
  return new MsgUserPowerTT;
}

void MsgUserPowerTT::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserPowerTT*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, handle_card_);
    new_card_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gang_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserPowerTT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUserPowerTT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 2;
      case 2: {
        if (tag == 16) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_card;
        break;
      }

      // optional uint32 handle_card = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_card_)));
          set_has_handle_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_new_card;
        break;
      }

      // optional uint32 new_card = 4;
      case 4: {
        if (tag == 32) {
         parse_new_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_card_)));
          set_has_new_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gang_card;
        break;
      }

      // repeated uint32 gang_card = 5;
      case 5: {
        if (tag == 40) {
         parse_gang_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_gang_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gang_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gang_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUserPowerTT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUserPowerTT)
  return false;
#undef DO_
}

void MsgUserPowerTT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUserPowerTT)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wik(), output);
  }

  // optional uint32 handle_card = 3;
  if (has_handle_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handle_card(), output);
  }

  // optional uint32 new_card = 4;
  if (has_new_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_card(), output);
  }

  // repeated uint32 gang_card = 5;
  for (int i = 0; i < this->gang_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->gang_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUserPowerTT)
}

::google::protobuf::uint8* MsgUserPowerTT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUserPowerTT)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wik(), target);
  }

  // optional uint32 handle_card = 3;
  if (has_handle_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->handle_card(), target);
  }

  // optional uint32 new_card = 4;
  if (has_new_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_card(), target);
  }

  // repeated uint32 gang_card = 5;
  for (int i = 0; i < this->gang_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->gang_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUserPowerTT)
  return target;
}

int MsgUserPowerTT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 wik = 2;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 handle_card = 3;
    if (has_handle_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_card());
    }

    // optional uint32 new_card = 4;
    if (has_new_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_card());
    }

  }
  // repeated uint32 gang_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gang_card(i));
    }
    total_size += 1 * this->gang_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserPowerTT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserPowerTT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserPowerTT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserPowerTT::MergeFrom(const MsgUserPowerTT& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_card_.MergeFrom(from.gang_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_handle_card()) {
      set_handle_card(from.handle_card());
    }
    if (from.has_new_card()) {
      set_new_card(from.new_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserPowerTT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserPowerTT::CopyFrom(const MsgUserPowerTT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserPowerTT::IsInitialized() const {

  return true;
}

void MsgUserPowerTT::Swap(MsgUserPowerTT* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wik_, other->wik_);
    std::swap(handle_card_, other->handle_card_);
    std::swap(new_card_, other->new_card_);
    gang_card_.Swap(&other->gang_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserPowerTT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserPowerTT_descriptor_;
  metadata.reflection = MsgUserPowerTT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgListen::kIdFieldNumber;
const int MsgListen::kStateFieldNumber;
#endif  // !_MSC_VER

MsgListen::MsgListen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgListen)
}

void MsgListen::InitAsDefaultInstance() {
}

MsgListen::MsgListen(const MsgListen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgListen)
}

void MsgListen::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgListen::~MsgListen() {
  // @@protoc_insertion_point(destructor:MsgListen)
  SharedDtor();
}

void MsgListen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgListen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgListen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgListen_descriptor_;
}

const MsgListen& MsgListen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgListen* MsgListen::default_instance_ = NULL;

MsgListen* MsgListen::New() const {
  return new MsgListen;
}

void MsgListen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgListen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgListen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgListen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgListen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgListen)
  return false;
#undef DO_
}

void MsgListen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgListen)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgListen)
}

::google::protobuf::uint8* MsgListen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgListen)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgListen)
  return target;
}

int MsgListen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgListen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgListen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgListen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgListen::MergeFrom(const MsgListen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgListen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgListen::CopyFrom(const MsgListen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgListen::IsInitialized() const {

  return true;
}

void MsgListen::Swap(MsgListen* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgListen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgListen_descriptor_;
  metadata.reflection = MsgListen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAmerce::kIdFieldNumber;
const int MsgAmerce::kStateFieldNumber;
const int MsgAmerce::kSubMoneyIdFieldNumber;
#endif  // !_MSC_VER

MsgAmerce::MsgAmerce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAmerce)
}

void MsgAmerce::InitAsDefaultInstance() {
}

MsgAmerce::MsgAmerce(const MsgAmerce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAmerce)
}

void MsgAmerce::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  sub_money_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAmerce::~MsgAmerce() {
  // @@protoc_insertion_point(destructor:MsgAmerce)
  SharedDtor();
}

void MsgAmerce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAmerce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAmerce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAmerce_descriptor_;
}

const MsgAmerce& MsgAmerce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgAmerce* MsgAmerce::default_instance_ = NULL;

MsgAmerce* MsgAmerce::New() const {
  return new MsgAmerce;
}

void MsgAmerce::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAmerce*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAmerce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAmerce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .TAmerceState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TAmerceState_IsValid(value)) {
            set_state(static_cast< ::TAmerceState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_money_id;
        break;
      }

      // optional uint64 sub_money_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_money_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sub_money_id_)));
          set_has_sub_money_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAmerce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAmerce)
  return false;
#undef DO_
}

void MsgAmerce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAmerce)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .TAmerceState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 sub_money_id = 3;
  if (has_sub_money_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sub_money_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAmerce)
}

::google::protobuf::uint8* MsgAmerce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAmerce)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .TAmerceState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 sub_money_id = 3;
  if (has_sub_money_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sub_money_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAmerce)
  return target;
}

int MsgAmerce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .TAmerceState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 sub_money_id = 3;
    if (has_sub_money_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sub_money_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAmerce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAmerce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAmerce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAmerce::MergeFrom(const MsgAmerce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_sub_money_id()) {
      set_sub_money_id(from.sub_money_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAmerce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAmerce::CopyFrom(const MsgAmerce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAmerce::IsInitialized() const {

  return true;
}

void MsgAmerce::Swap(MsgAmerce* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(sub_money_id_, other->sub_money_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAmerce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAmerce_descriptor_;
  metadata.reflection = MsgAmerce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgOutCard::kIdFieldNumber;
const int MsgOutCard::kCardFieldNumber;
const int MsgOutCard::kIndexFieldNumber;
const int MsgOutCard::kHandNumFieldNumber;
const int MsgOutCard::kAmerceFieldNumber;
const int MsgOutCard::kHandCardFieldNumber;
const int MsgOutCard::kRiverNumFieldNumber;
const int MsgOutCard::kRoleScoreFieldNumber;
const int MsgOutCard::kRoleStateFieldNumber;
const int MsgOutCard::kListenCardFieldNumber;
const int MsgOutCard::kListenIndexFieldNumber;
const int MsgOutCard::kDingzhaIndexFieldNumber;
#endif  // !_MSC_VER

MsgOutCard::MsgOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgOutCard)
}

void MsgOutCard::InitAsDefaultInstance() {
}

MsgOutCard::MsgOutCard(const MsgOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgOutCard)
}

void MsgOutCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  card_ = 0u;
  index_ = 0;
  hand_num_ = 0u;
  river_num_ = 0u;
  role_state_ = 0u;
  listen_index_ = 0u;
  dingzha_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgOutCard::~MsgOutCard() {
  // @@protoc_insertion_point(destructor:MsgOutCard)
  SharedDtor();
}

void MsgOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgOutCard_descriptor_;
}

const MsgOutCard& MsgOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgOutCard* MsgOutCard::default_instance_ = NULL;

MsgOutCard* MsgOutCard::New() const {
  return new MsgOutCard;
}

void MsgOutCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgOutCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(id_, index_);
    ZR_(hand_num_, river_num_);
  }
  ZR_(role_state_, dingzha_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  amerce_.Clear();
  hand_card_.Clear();
  role_score_.Clear();
  listen_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_amerce;
        break;
      }

      // repeated .MsgAmerce amerce = 5;
      case 5: {
        if (tag == 42) {
         parse_amerce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_amerce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_amerce;
        if (input->ExpectTag(48)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 6;
      case 6: {
        if (tag == 48) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_hand_card())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hand_card;
        if (input->ExpectTag(56)) goto parse_river_num;
        break;
      }

      // optional uint32 river_num = 7;
      case 7: {
        if (tag == 56) {
         parse_river_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &river_num_)));
          set_has_river_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_score;
        break;
      }

      // repeated .MsgRoleScore role_score = 8;
      case 8: {
        if (tag == 66) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_score;
        if (input->ExpectTag(72)) goto parse_role_state;
        break;
      }

      // optional uint32 role_state = 9;
      case 9: {
        if (tag == 72) {
         parse_role_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_state_)));
          set_has_role_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_listen_card;
        break;
      }

      // repeated uint32 listen_card = 10;
      case 10: {
        if (tag == 80) {
         parse_listen_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_listen_card())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_listen_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_listen_card;
        if (input->ExpectTag(88)) goto parse_listen_index;
        break;
      }

      // optional uint32 listen_index = 11;
      case 11: {
        if (tag == 88) {
         parse_listen_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_index_)));
          set_has_listen_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dingzha_index;
        break;
      }

      // optional uint32 dingzha_index = 12;
      case 12: {
        if (tag == 96) {
         parse_dingzha_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dingzha_index_)));
          set_has_dingzha_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgOutCard)
  return false;
#undef DO_
}

void MsgOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgOutCard)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional uint32 hand_num = 4;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_num(), output);
  }

  // repeated .MsgAmerce amerce = 5;
  for (int i = 0; i < this->amerce_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->amerce(i), output);
  }

  // repeated uint32 hand_card = 6;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->hand_card(i), output);
  }

  // optional uint32 river_num = 7;
  if (has_river_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->river_num(), output);
  }

  // repeated .MsgRoleScore role_score = 8;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_score(i), output);
  }

  // optional uint32 role_state = 9;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->role_state(), output);
  }

  // repeated uint32 listen_card = 10;
  for (int i = 0; i < this->listen_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->listen_card(i), output);
  }

  // optional uint32 listen_index = 11;
  if (has_listen_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->listen_index(), output);
  }

  // optional uint32 dingzha_index = 12;
  if (has_dingzha_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dingzha_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgOutCard)
}

::google::protobuf::uint8* MsgOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgOutCard)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional uint32 hand_num = 4;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_num(), target);
  }

  // repeated .MsgAmerce amerce = 5;
  for (int i = 0; i < this->amerce_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->amerce(i), target);
  }

  // repeated uint32 hand_card = 6;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->hand_card(i), target);
  }

  // optional uint32 river_num = 7;
  if (has_river_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->river_num(), target);
  }

  // repeated .MsgRoleScore role_score = 8;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_score(i), target);
  }

  // optional uint32 role_state = 9;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->role_state(), target);
  }

  // repeated uint32 listen_card = 10;
  for (int i = 0; i < this->listen_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->listen_card(i), target);
  }

  // optional uint32 listen_index = 11;
  if (has_listen_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->listen_index(), target);
  }

  // optional uint32 dingzha_index = 12;
  if (has_dingzha_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dingzha_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgOutCard)
  return target;
}

int MsgOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional uint32 hand_num = 4;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

    // optional uint32 river_num = 7;
    if (has_river_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->river_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 role_state = 9;
    if (has_role_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_state());
    }

    // optional uint32 listen_index = 11;
    if (has_listen_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_index());
    }

    // optional uint32 dingzha_index = 12;
    if (has_dingzha_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dingzha_index());
    }

  }
  // repeated .MsgAmerce amerce = 5;
  total_size += 1 * this->amerce_size();
  for (int i = 0; i < this->amerce_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->amerce(i));
  }

  // repeated uint32 hand_card = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated .MsgRoleScore role_score = 8;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  // repeated uint32 listen_card = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->listen_card(i));
    }
    total_size += 1 * this->listen_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgOutCard::MergeFrom(const MsgOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  amerce_.MergeFrom(from.amerce_);
  hand_card_.MergeFrom(from.hand_card_);
  role_score_.MergeFrom(from.role_score_);
  listen_card_.MergeFrom(from.listen_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
    if (from.has_river_num()) {
      set_river_num(from.river_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_state()) {
      set_role_state(from.role_state());
    }
    if (from.has_listen_index()) {
      set_listen_index(from.listen_index());
    }
    if (from.has_dingzha_index()) {
      set_dingzha_index(from.dingzha_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOutCard::CopyFrom(const MsgOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOutCard::IsInitialized() const {

  return true;
}

void MsgOutCard::Swap(MsgOutCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(card_, other->card_);
    std::swap(index_, other->index_);
    std::swap(hand_num_, other->hand_num_);
    amerce_.Swap(&other->amerce_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(river_num_, other->river_num_);
    role_score_.Swap(&other->role_score_);
    std::swap(role_state_, other->role_state_);
    listen_card_.Swap(&other->listen_card_);
    std::swap(listen_index_, other->listen_index_);
    std::swap(dingzha_index_, other->dingzha_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgOutCard_descriptor_;
  metadata.reflection = MsgOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserOperate::kWikFieldNumber;
const int MsgUserOperate::kCardFieldNumber;
const int MsgUserOperate::kGangCardFieldNumber;
const int MsgUserOperate::kAholdCardFieldNumber;
const int MsgUserOperate::kLiangxiWikFieldNumber;
const int MsgUserOperate::kBuxiCardFieldNumber;
const int MsgUserOperate::kKouCardFieldNumber;
#endif  // !_MSC_VER

MsgUserOperate::MsgUserOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgUserOperate)
}

void MsgUserOperate::InitAsDefaultInstance() {
}

MsgUserOperate::MsgUserOperate(const MsgUserOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgUserOperate)
}

void MsgUserOperate::SharedCtor() {
  _cached_size_ = 0;
  wik_ = 0u;
  card_ = 0u;
  liangxi_wik_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserOperate::~MsgUserOperate() {
  // @@protoc_insertion_point(destructor:MsgUserOperate)
  SharedDtor();
}

void MsgUserOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUserOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUserOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUserOperate_descriptor_;
}

const MsgUserOperate& MsgUserOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgUserOperate* MsgUserOperate::default_instance_ = NULL;

MsgUserOperate* MsgUserOperate::New() const {
  return new MsgUserOperate;
}

void MsgUserOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(wik_, card_);
    liangxi_wik_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gang_card_.Clear();
  ahold_card_.Clear();
  buxi_card_.Clear();
  kou_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUserOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgUserOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wik = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gang_card;
        break;
      }

      // repeated uint32 gang_card = 3;
      case 3: {
        if (tag == 24) {
         parse_gang_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gang_card())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gang_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gang_card;
        if (input->ExpectTag(32)) goto parse_ahold_card;
        break;
      }

      // repeated uint32 ahold_card = 4;
      case 4: {
        if (tag == 32) {
         parse_ahold_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_ahold_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ahold_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ahold_card;
        if (input->ExpectTag(40)) goto parse_liangxi_wik;
        break;
      }

      // optional uint32 liangxi_wik = 5;
      case 5: {
        if (tag == 40) {
         parse_liangxi_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liangxi_wik_)));
          set_has_liangxi_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buxi_card;
        break;
      }

      // repeated uint32 buxi_card = 6;
      case 6: {
        if (tag == 48) {
         parse_buxi_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_buxi_card())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buxi_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buxi_card;
        if (input->ExpectTag(56)) goto parse_kou_card;
        break;
      }

      // repeated uint32 kou_card = 7;
      case 7: {
        if (tag == 56) {
         parse_kou_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_kou_card())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kou_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kou_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgUserOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgUserOperate)
  return false;
#undef DO_
}

void MsgUserOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgUserOperate)
  // optional uint32 wik = 1;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wik(), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  // repeated uint32 gang_card = 3;
  for (int i = 0; i < this->gang_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gang_card(i), output);
  }

  // repeated uint32 ahold_card = 4;
  for (int i = 0; i < this->ahold_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->ahold_card(i), output);
  }

  // optional uint32 liangxi_wik = 5;
  if (has_liangxi_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->liangxi_wik(), output);
  }

  // repeated uint32 buxi_card = 6;
  for (int i = 0; i < this->buxi_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->buxi_card(i), output);
  }

  // repeated uint32 kou_card = 7;
  for (int i = 0; i < this->kou_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->kou_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgUserOperate)
}

::google::protobuf::uint8* MsgUserOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgUserOperate)
  // optional uint32 wik = 1;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wik(), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  // repeated uint32 gang_card = 3;
  for (int i = 0; i < this->gang_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gang_card(i), target);
  }

  // repeated uint32 ahold_card = 4;
  for (int i = 0; i < this->ahold_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->ahold_card(i), target);
  }

  // optional uint32 liangxi_wik = 5;
  if (has_liangxi_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->liangxi_wik(), target);
  }

  // repeated uint32 buxi_card = 6;
  for (int i = 0; i < this->buxi_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->buxi_card(i), target);
  }

  // repeated uint32 kou_card = 7;
  for (int i = 0; i < this->kou_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->kou_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgUserOperate)
  return target;
}

int MsgUserOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wik = 1;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 liangxi_wik = 5;
    if (has_liangxi_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liangxi_wik());
    }

  }
  // repeated uint32 gang_card = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gang_card(i));
    }
    total_size += 1 * this->gang_card_size() + data_size;
  }

  // repeated uint32 ahold_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ahold_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ahold_card(i));
    }
    total_size += 1 * this->ahold_card_size() + data_size;
  }

  // repeated uint32 buxi_card = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->buxi_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buxi_card(i));
    }
    total_size += 1 * this->buxi_card_size() + data_size;
  }

  // repeated uint32 kou_card = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->kou_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kou_card(i));
    }
    total_size += 1 * this->kou_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUserOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUserOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUserOperate::MergeFrom(const MsgUserOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_card_.MergeFrom(from.gang_card_);
  ahold_card_.MergeFrom(from.ahold_card_);
  buxi_card_.MergeFrom(from.buxi_card_);
  kou_card_.MergeFrom(from.kou_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_liangxi_wik()) {
      set_liangxi_wik(from.liangxi_wik());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUserOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUserOperate::CopyFrom(const MsgUserOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserOperate::IsInitialized() const {

  return true;
}

void MsgUserOperate::Swap(MsgUserOperate* other) {
  if (other != this) {
    std::swap(wik_, other->wik_);
    std::swap(card_, other->card_);
    gang_card_.Swap(&other->gang_card_);
    ahold_card_.Swap(&other->ahold_card_);
    std::swap(liangxi_wik_, other->liangxi_wik_);
    buxi_card_.Swap(&other->buxi_card_);
    kou_card_.Swap(&other->kou_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUserOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUserOperate_descriptor_;
  metadata.reflection = MsgUserOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleScore::kIdFieldNumber;
const int MsgRoleScore::kScoreFieldNumber;
#endif  // !_MSC_VER

MsgRoleScore::MsgRoleScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoleScore)
}

void MsgRoleScore::InitAsDefaultInstance() {
}

MsgRoleScore::MsgRoleScore(const MsgRoleScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoleScore)
}

void MsgRoleScore::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleScore::~MsgRoleScore() {
  // @@protoc_insertion_point(destructor:MsgRoleScore)
  SharedDtor();
}

void MsgRoleScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRoleScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoleScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleScore_descriptor_;
}

const MsgRoleScore& MsgRoleScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgRoleScore* MsgRoleScore::default_instance_ = NULL;

MsgRoleScore* MsgRoleScore::New() const {
  return new MsgRoleScore;
}

void MsgRoleScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRoleScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoleScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoleScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoleScore)
  return false;
#undef DO_
}

void MsgRoleScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoleScore)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoleScore)
}

::google::protobuf::uint8* MsgRoleScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoleScore)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoleScore)
  return target;
}

int MsgRoleScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleScore::MergeFrom(const MsgRoleScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleScore::CopyFrom(const MsgRoleScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleScore::IsInitialized() const {

  return true;
}

void MsgRoleScore::Swap(MsgRoleScore* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleScore_descriptor_;
  metadata.reflection = MsgRoleScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCardData::kCardFieldNumber;
const int MsgCardData::kWikFieldNumber;
const int MsgCardData::kTaridFieldNumber;
const int MsgCardData::kSrcidFieldNumber;
const int MsgCardData::kBarkindFieldNumber;
const int MsgCardData::kShowMoneyFieldNumber;
const int MsgCardData::kSubMoneyIdFieldNumber;
const int MsgCardData::kRoleScoreFieldNumber;
const int MsgCardData::kMixCardFieldNumber;
#endif  // !_MSC_VER

MsgCardData::MsgCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCardData)
}

void MsgCardData::InitAsDefaultInstance() {
}

MsgCardData::MsgCardData(const MsgCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCardData)
}

void MsgCardData::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0u;
  wik_ = 0u;
  tarid_ = GOOGLE_ULONGLONG(0);
  srcid_ = GOOGLE_ULONGLONG(0);
  barkind_ = 0u;
  show_money_ = false;
  sub_money_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCardData::~MsgCardData() {
  // @@protoc_insertion_point(destructor:MsgCardData)
  SharedDtor();
}

void MsgCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCardData_descriptor_;
}

const MsgCardData& MsgCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgCardData* MsgCardData::default_instance_ = NULL;

MsgCardData* MsgCardData::New() const {
  return new MsgCardData;
}

void MsgCardData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgCardData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(card_, sub_money_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  role_score_.Clear();
  mix_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 2;
      case 2: {
        if (tag == 16) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tarid;
        break;
      }

      // optional uint64 tarid = 3;
      case 3: {
        if (tag == 24) {
         parse_tarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcid;
        break;
      }

      // optional uint64 srcid = 4;
      case 4: {
        if (tag == 32) {
         parse_srcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_barkind;
        break;
      }

      // optional uint32 barkind = 5;
      case 5: {
        if (tag == 40) {
         parse_barkind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barkind_)));
          set_has_barkind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_show_money;
        break;
      }

      // optional bool show_money = 6;
      case 6: {
        if (tag == 48) {
         parse_show_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_money_)));
          set_has_show_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sub_money_id;
        break;
      }

      // optional uint64 sub_money_id = 7;
      case 7: {
        if (tag == 56) {
         parse_sub_money_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sub_money_id_)));
          set_has_sub_money_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_score;
        break;
      }

      // repeated .MsgRoleScore role_score = 8;
      case 8: {
        if (tag == 66) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_role_score;
        if (input->ExpectTag(72)) goto parse_mix_card;
        break;
      }

      // repeated uint32 mix_card = 9;
      case 9: {
        if (tag == 72) {
         parse_mix_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_mix_card())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mix_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mix_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCardData)
  return false;
#undef DO_
}

void MsgCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCardData)
  // optional uint32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card(), output);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wik(), output);
  }

  // optional uint64 tarid = 3;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tarid(), output);
  }

  // optional uint64 srcid = 4;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->srcid(), output);
  }

  // optional uint32 barkind = 5;
  if (has_barkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->barkind(), output);
  }

  // optional bool show_money = 6;
  if (has_show_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_money(), output);
  }

  // optional uint64 sub_money_id = 7;
  if (has_sub_money_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sub_money_id(), output);
  }

  // repeated .MsgRoleScore role_score = 8;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_score(i), output);
  }

  // repeated uint32 mix_card = 9;
  for (int i = 0; i < this->mix_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->mix_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCardData)
}

::google::protobuf::uint8* MsgCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCardData)
  // optional uint32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card(), target);
  }

  // optional uint32 wik = 2;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wik(), target);
  }

  // optional uint64 tarid = 3;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tarid(), target);
  }

  // optional uint64 srcid = 4;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->srcid(), target);
  }

  // optional uint32 barkind = 5;
  if (has_barkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->barkind(), target);
  }

  // optional bool show_money = 6;
  if (has_show_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show_money(), target);
  }

  // optional uint64 sub_money_id = 7;
  if (has_sub_money_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sub_money_id(), target);
  }

  // repeated .MsgRoleScore role_score = 8;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_score(i), target);
  }

  // repeated uint32 mix_card = 9;
  for (int i = 0; i < this->mix_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->mix_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCardData)
  return target;
}

int MsgCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 wik = 2;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional uint64 tarid = 3;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tarid());
    }

    // optional uint64 srcid = 4;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint32 barkind = 5;
    if (has_barkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barkind());
    }

    // optional bool show_money = 6;
    if (has_show_money()) {
      total_size += 1 + 1;
    }

    // optional uint64 sub_money_id = 7;
    if (has_sub_money_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sub_money_id());
    }

  }
  // repeated .MsgRoleScore role_score = 8;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  // repeated uint32 mix_card = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->mix_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mix_card(i));
    }
    total_size += 1 * this->mix_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCardData::MergeFrom(const MsgCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_score_.MergeFrom(from.role_score_);
  mix_card_.MergeFrom(from.mix_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_barkind()) {
      set_barkind(from.barkind());
    }
    if (from.has_show_money()) {
      set_show_money(from.show_money());
    }
    if (from.has_sub_money_id()) {
      set_sub_money_id(from.sub_money_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCardData::CopyFrom(const MsgCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCardData::IsInitialized() const {

  return true;
}

void MsgCardData::Swap(MsgCardData* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(wik_, other->wik_);
    std::swap(tarid_, other->tarid_);
    std::swap(srcid_, other->srcid_);
    std::swap(barkind_, other->barkind_);
    std::swap(show_money_, other->show_money_);
    std::swap(sub_money_id_, other->sub_money_id_);
    role_score_.Swap(&other->role_score_);
    mix_card_.Swap(&other->mix_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCardData_descriptor_;
  metadata.reflection = MsgCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMahJongPlayer::kPlayerInfoFieldNumber;
const int MsgMahJongPlayer::kStateFieldNumber;
const int MsgMahJongPlayer::kHandNumFieldNumber;
const int MsgMahJongPlayer::kRiverCardFieldNumber;
const int MsgMahJongPlayer::kWeaveCardFieldNumber;
const int MsgMahJongPlayer::kFlowerNumFieldNumber;
const int MsgMahJongPlayer::kWikFieldNumber;
const int MsgMahJongPlayer::kTdFieldNumber;
const int MsgMahJongPlayer::kListenCardFieldNumber;
const int MsgMahJongPlayer::kCathCountFieldNumber;
const int MsgMahJongPlayer::kListenIndexFieldNumber;
const int MsgMahJongPlayer::kGangCardFieldNumber;
const int MsgMahJongPlayer::kAnxiaoPowerFieldNumber;
const int MsgMahJongPlayer::kAnxiaoSignFieldNumber;
const int MsgMahJongPlayer::kDingzhaCardFieldNumber;
const int MsgMahJongPlayer::kFlowerCardListFieldNumber;
const int MsgMahJongPlayer::kEatCardFieldNumber;
const int MsgMahJongPlayer::kJiaCardFieldNumber;
const int MsgMahJongPlayer::kHuCardFieldNumber;
const int MsgMahJongPlayer::kHuCardListFieldNumber;
const int MsgMahJongPlayer::kColorFieldNumber;
#endif  // !_MSC_VER

MsgMahJongPlayer::MsgMahJongPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMahJongPlayer)
}

void MsgMahJongPlayer::InitAsDefaultInstance() {
  player_info_ = const_cast< ::MsgPlayerInfo*>(&::MsgPlayerInfo::default_instance());
}

MsgMahJongPlayer::MsgMahJongPlayer(const MsgMahJongPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMahJongPlayer)
}

void MsgMahJongPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  state_ = 0u;
  hand_num_ = 0u;
  flower_num_ = 0u;
  wik_ = 0u;
  td_ = 0;
  cathcount_ = 0u;
  listen_index_ = 0u;
  anxiao_power_ = false;
  anxiao_sign_ = false;
  dingzha_card_ = 0u;
  jia_card_ = 0u;
  hu_card_ = 0u;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMahJongPlayer::~MsgMahJongPlayer() {
  // @@protoc_insertion_point(destructor:MsgMahJongPlayer)
  SharedDtor();
}

void MsgMahJongPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void MsgMahJongPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMahJongPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMahJongPlayer_descriptor_;
}

const MsgMahJongPlayer& MsgMahJongPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgMahJongPlayer* MsgMahJongPlayer::default_instance_ = NULL;

MsgMahJongPlayer* MsgMahJongPlayer::New() const {
  return new MsgMahJongPlayer;
}

void MsgMahJongPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMahJongPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(state_, hand_num_);
    ZR_(flower_num_, wik_);
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::MsgPlayerInfo::Clear();
    }
    td_ = 0;
  }
  if (_has_bits_[8 / 32] & 30208) {
    ZR_(listen_index_, anxiao_sign_);
    cathcount_ = 0u;
    dingzha_card_ = 0u;
  }
  if (_has_bits_[16 / 32] & 1441792) {
    ZR_(hu_card_, color_);
    jia_card_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  river_card_.Clear();
  weave_card_.Clear();
  listen_card_.Clear();
  gang_card_.Clear();
  flower_card_list_.Clear();
  eat_card_.Clear();
  hu_card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMahJongPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMahJongPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgPlayerInfo player_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_river_card;
        break;
      }

      // repeated uint32 river_card = 4;
      case 4: {
        if (tag == 32) {
         parse_river_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_river_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_river_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_river_card;
        if (input->ExpectTag(42)) goto parse_weave_card;
        break;
      }

      // repeated .MsgCardData weave_card = 5;
      case 5: {
        if (tag == 42) {
         parse_weave_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weave_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weave_card;
        if (input->ExpectTag(48)) goto parse_flower_num;
        break;
      }

      // optional uint32 flower_num = 6;
      case 6: {
        if (tag == 48) {
         parse_flower_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flower_num_)));
          set_has_flower_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wik;
        break;
      }

      // optional uint32 wik = 7;
      case 7: {
        if (tag == 56) {
         parse_wik:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wik_)));
          set_has_wik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_td;
        break;
      }

      // optional .TDirection td = 8;
      case 8: {
        if (tag == 64) {
         parse_td:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TDirection_IsValid(value)) {
            set_td(static_cast< ::TDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_listen_card;
        break;
      }

      // repeated uint32 listen_card = 10;
      case 10: {
        if (tag == 80) {
         parse_listen_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_listen_card())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_listen_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_listen_card;
        if (input->ExpectTag(88)) goto parse_CathCount;
        break;
      }

      // optional uint32 CathCount = 11;
      case 11: {
        if (tag == 88) {
         parse_CathCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cathcount_)));
          set_has_cathcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_listen_index;
        break;
      }

      // optional uint32 listen_index = 12;
      case 12: {
        if (tag == 96) {
         parse_listen_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_index_)));
          set_has_listen_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gang_card;
        break;
      }

      // repeated uint32 gang_card = 13;
      case 13: {
        if (tag == 104) {
         parse_gang_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_gang_card())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gang_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gang_card;
        if (input->ExpectTag(112)) goto parse_anxiao_power;
        break;
      }

      // optional bool anxiao_power = 14;
      case 14: {
        if (tag == 112) {
         parse_anxiao_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anxiao_power_)));
          set_has_anxiao_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_anxiao_sign;
        break;
      }

      // optional bool anxiao_sign = 15;
      case 15: {
        if (tag == 120) {
         parse_anxiao_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anxiao_sign_)));
          set_has_anxiao_sign();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dingzha_card;
        break;
      }

      // optional uint32 dingzha_card = 16;
      case 16: {
        if (tag == 128) {
         parse_dingzha_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dingzha_card_)));
          set_has_dingzha_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_flower_card_list;
        break;
      }

      // repeated uint32 flower_card_list = 17;
      case 17: {
        if (tag == 136) {
         parse_flower_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_flower_card_list())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_flower_card_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_flower_card_list;
        if (input->ExpectTag(144)) goto parse_eat_card;
        break;
      }

      // repeated uint32 eat_card = 18;
      case 18: {
        if (tag == 144) {
         parse_eat_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_eat_card())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eat_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_eat_card;
        if (input->ExpectTag(152)) goto parse_jia_card;
        break;
      }

      // optional uint32 jia_card = 19;
      case 19: {
        if (tag == 152) {
         parse_jia_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jia_card_)));
          set_has_jia_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_hu_card;
        break;
      }

      // optional uint32 hu_card = 20;
      case 20: {
        if (tag == 160) {
         parse_hu_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_card_)));
          set_has_hu_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_hu_card_list;
        break;
      }

      // repeated uint32 hu_card_list = 21;
      case 21: {
        if (tag == 168) {
         parse_hu_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168, input, this->mutable_hu_card_list())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hu_card_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_hu_card_list;
        if (input->ExpectTag(176)) goto parse_color;
        break;
      }

      // optional .TMahJongColor color = 22;
      case 22: {
        if (tag == 176) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMahJongColor_IsValid(value)) {
            set_color(static_cast< ::TMahJongColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMahJongPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMahJongPlayer)
  return false;
#undef DO_
}

void MsgMahJongPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMahJongPlayer)
  // optional .MsgPlayerInfo player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 hand_num = 3;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hand_num(), output);
  }

  // repeated uint32 river_card = 4;
  for (int i = 0; i < this->river_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->river_card(i), output);
  }

  // repeated .MsgCardData weave_card = 5;
  for (int i = 0; i < this->weave_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weave_card(i), output);
  }

  // optional uint32 flower_num = 6;
  if (has_flower_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flower_num(), output);
  }

  // optional uint32 wik = 7;
  if (has_wik()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wik(), output);
  }

  // optional .TDirection td = 8;
  if (has_td()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->td(), output);
  }

  // repeated uint32 listen_card = 10;
  for (int i = 0; i < this->listen_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->listen_card(i), output);
  }

  // optional uint32 CathCount = 11;
  if (has_cathcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cathcount(), output);
  }

  // optional uint32 listen_index = 12;
  if (has_listen_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->listen_index(), output);
  }

  // repeated uint32 gang_card = 13;
  for (int i = 0; i < this->gang_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->gang_card(i), output);
  }

  // optional bool anxiao_power = 14;
  if (has_anxiao_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->anxiao_power(), output);
  }

  // optional bool anxiao_sign = 15;
  if (has_anxiao_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->anxiao_sign(), output);
  }

  // optional uint32 dingzha_card = 16;
  if (has_dingzha_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dingzha_card(), output);
  }

  // repeated uint32 flower_card_list = 17;
  for (int i = 0; i < this->flower_card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->flower_card_list(i), output);
  }

  // repeated uint32 eat_card = 18;
  for (int i = 0; i < this->eat_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->eat_card(i), output);
  }

  // optional uint32 jia_card = 19;
  if (has_jia_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->jia_card(), output);
  }

  // optional uint32 hu_card = 20;
  if (has_hu_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->hu_card(), output);
  }

  // repeated uint32 hu_card_list = 21;
  for (int i = 0; i < this->hu_card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->hu_card_list(i), output);
  }

  // optional .TMahJongColor color = 22;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMahJongPlayer)
}

::google::protobuf::uint8* MsgMahJongPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMahJongPlayer)
  // optional .MsgPlayerInfo player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 hand_num = 3;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hand_num(), target);
  }

  // repeated uint32 river_card = 4;
  for (int i = 0; i < this->river_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->river_card(i), target);
  }

  // repeated .MsgCardData weave_card = 5;
  for (int i = 0; i < this->weave_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->weave_card(i), target);
  }

  // optional uint32 flower_num = 6;
  if (has_flower_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flower_num(), target);
  }

  // optional uint32 wik = 7;
  if (has_wik()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wik(), target);
  }

  // optional .TDirection td = 8;
  if (has_td()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->td(), target);
  }

  // repeated uint32 listen_card = 10;
  for (int i = 0; i < this->listen_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->listen_card(i), target);
  }

  // optional uint32 CathCount = 11;
  if (has_cathcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cathcount(), target);
  }

  // optional uint32 listen_index = 12;
  if (has_listen_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->listen_index(), target);
  }

  // repeated uint32 gang_card = 13;
  for (int i = 0; i < this->gang_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->gang_card(i), target);
  }

  // optional bool anxiao_power = 14;
  if (has_anxiao_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->anxiao_power(), target);
  }

  // optional bool anxiao_sign = 15;
  if (has_anxiao_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->anxiao_sign(), target);
  }

  // optional uint32 dingzha_card = 16;
  if (has_dingzha_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dingzha_card(), target);
  }

  // repeated uint32 flower_card_list = 17;
  for (int i = 0; i < this->flower_card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->flower_card_list(i), target);
  }

  // repeated uint32 eat_card = 18;
  for (int i = 0; i < this->eat_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->eat_card(i), target);
  }

  // optional uint32 jia_card = 19;
  if (has_jia_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->jia_card(), target);
  }

  // optional uint32 hu_card = 20;
  if (has_hu_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->hu_card(), target);
  }

  // repeated uint32 hu_card_list = 21;
  for (int i = 0; i < this->hu_card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(21, this->hu_card_list(i), target);
  }

  // optional .TMahJongColor color = 22;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMahJongPlayer)
  return target;
}

int MsgMahJongPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgPlayerInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 hand_num = 3;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

    // optional uint32 flower_num = 6;
    if (has_flower_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flower_num());
    }

    // optional uint32 wik = 7;
    if (has_wik()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wik());
    }

    // optional .TDirection td = 8;
    if (has_td()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->td());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 CathCount = 11;
    if (has_cathcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cathcount());
    }

    // optional uint32 listen_index = 12;
    if (has_listen_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_index());
    }

    // optional bool anxiao_power = 14;
    if (has_anxiao_power()) {
      total_size += 1 + 1;
    }

    // optional bool anxiao_sign = 15;
    if (has_anxiao_sign()) {
      total_size += 1 + 1;
    }

    // optional uint32 dingzha_card = 16;
    if (has_dingzha_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dingzha_card());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 jia_card = 19;
    if (has_jia_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jia_card());
    }

    // optional uint32 hu_card = 20;
    if (has_hu_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_card());
    }

    // optional .TMahJongColor color = 22;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  // repeated uint32 river_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->river_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->river_card(i));
    }
    total_size += 1 * this->river_card_size() + data_size;
  }

  // repeated .MsgCardData weave_card = 5;
  total_size += 1 * this->weave_card_size();
  for (int i = 0; i < this->weave_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weave_card(i));
  }

  // repeated uint32 listen_card = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->listen_card(i));
    }
    total_size += 1 * this->listen_card_size() + data_size;
  }

  // repeated uint32 gang_card = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gang_card(i));
    }
    total_size += 1 * this->gang_card_size() + data_size;
  }

  // repeated uint32 flower_card_list = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->flower_card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->flower_card_list(i));
    }
    total_size += 2 * this->flower_card_list_size() + data_size;
  }

  // repeated uint32 eat_card = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->eat_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eat_card(i));
    }
    total_size += 2 * this->eat_card_size() + data_size;
  }

  // repeated uint32 hu_card_list = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->hu_card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hu_card_list(i));
    }
    total_size += 2 * this->hu_card_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMahJongPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMahJongPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMahJongPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMahJongPlayer::MergeFrom(const MsgMahJongPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  river_card_.MergeFrom(from.river_card_);
  weave_card_.MergeFrom(from.weave_card_);
  listen_card_.MergeFrom(from.listen_card_);
  gang_card_.MergeFrom(from.gang_card_);
  flower_card_list_.MergeFrom(from.flower_card_list_);
  eat_card_.MergeFrom(from.eat_card_);
  hu_card_list_.MergeFrom(from.hu_card_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::MsgPlayerInfo::MergeFrom(from.player_info());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
    if (from.has_flower_num()) {
      set_flower_num(from.flower_num());
    }
    if (from.has_wik()) {
      set_wik(from.wik());
    }
    if (from.has_td()) {
      set_td(from.td());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_cathcount()) {
      set_cathcount(from.cathcount());
    }
    if (from.has_listen_index()) {
      set_listen_index(from.listen_index());
    }
    if (from.has_anxiao_power()) {
      set_anxiao_power(from.anxiao_power());
    }
    if (from.has_anxiao_sign()) {
      set_anxiao_sign(from.anxiao_sign());
    }
    if (from.has_dingzha_card()) {
      set_dingzha_card(from.dingzha_card());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_jia_card()) {
      set_jia_card(from.jia_card());
    }
    if (from.has_hu_card()) {
      set_hu_card(from.hu_card());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMahJongPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMahJongPlayer::CopyFrom(const MsgMahJongPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMahJongPlayer::IsInitialized() const {

  return true;
}

void MsgMahJongPlayer::Swap(MsgMahJongPlayer* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    std::swap(state_, other->state_);
    std::swap(hand_num_, other->hand_num_);
    river_card_.Swap(&other->river_card_);
    weave_card_.Swap(&other->weave_card_);
    std::swap(flower_num_, other->flower_num_);
    std::swap(wik_, other->wik_);
    std::swap(td_, other->td_);
    listen_card_.Swap(&other->listen_card_);
    std::swap(cathcount_, other->cathcount_);
    std::swap(listen_index_, other->listen_index_);
    gang_card_.Swap(&other->gang_card_);
    std::swap(anxiao_power_, other->anxiao_power_);
    std::swap(anxiao_sign_, other->anxiao_sign_);
    std::swap(dingzha_card_, other->dingzha_card_);
    flower_card_list_.Swap(&other->flower_card_list_);
    eat_card_.Swap(&other->eat_card_);
    std::swap(jia_card_, other->jia_card_);
    std::swap(hu_card_, other->hu_card_);
    hu_card_list_.Swap(&other->hu_card_list_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMahJongPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMahJongPlayer_descriptor_;
  metadata.reflection = MsgMahJongPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMahJongRoom::kRoomStateFieldNumber;
const int MsgMahJongRoom::kPlayerListFieldNumber;
const int MsgMahJongRoom::kBankerIdFieldNumber;
const int MsgMahJongRoom::kActionIdFieldNumber;
const int MsgMahJongRoom::kHandCardFieldNumber;
const int MsgMahJongRoom::kRoomInfoFieldNumber;
const int MsgMahJongRoom::kLeibaotaFieldNumber;
const int MsgMahJongRoom::kSurplusHandNumFieldNumber;
const int MsgMahJongRoom::kBaseFlowerFieldNumber;
const int MsgMahJongRoom::kSendCardFieldNumber;
const int MsgMahJongRoom::kRoomIdFieldNumber;
const int MsgMahJongRoom::kRoomTypeFieldNumber;
const int MsgMahJongRoom::kGameCountFieldNumber;
const int MsgMahJongRoom::kStateRunTimeFieldNumber;
const int MsgMahJongRoom::kPrivateRoomFieldNumber;
const int MsgMahJongRoom::kHuiCardFieldNumber;
const int MsgMahJongRoom::kGameCircleFieldNumber;
const int MsgMahJongRoom::kOutCardFieldNumber;
const int MsgMahJongRoom::kParam1FieldNumber;
const int MsgMahJongRoom::kParamListFieldNumber;
const int MsgMahJongRoom::kGangCardFieldNumber;
const int MsgMahJongRoom::kShowDownInfoFieldNumber;
const int MsgMahJongRoom::kZaCardFieldNumber;
const int MsgMahJongRoom::kLaunchCardFieldNumber;
const int MsgMahJongRoom::kRoleHostFieldNumber;
const int MsgMahJongRoom::kRoleStateFieldNumber;
const int MsgMahJongRoom::kHuStateFieldNumber;
const int MsgMahJongRoom::kRoomPayTypeFieldNumber;
const int MsgMahJongRoom::kListenListFieldNumber;
#endif  // !_MSC_VER

MsgMahJongRoom::MsgMahJongRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMahJongRoom)
}

void MsgMahJongRoom::InitAsDefaultInstance() {
  room_info_ = const_cast< ::MsgBaseRoomInfo*>(&::MsgBaseRoomInfo::default_instance());
  private_room_ = const_cast< ::MsgMahJongPrivateRoom*>(&::MsgMahJongPrivateRoom::default_instance());
  show_down_info_ = const_cast< ::MsgShowDownCount*>(&::MsgShowDownCount::default_instance());
  role_host_ = const_cast< ::MsgRoleHostCount*>(&::MsgRoleHostCount::default_instance());
  role_state_ = const_cast< ::MsgRoleStateCount*>(&::MsgRoleStateCount::default_instance());
}

MsgMahJongRoom::MsgMahJongRoom(const MsgMahJongRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMahJongRoom)
}

void MsgMahJongRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_state_ = 0;
  banker_id_ = GOOGLE_ULONGLONG(0);
  action_id_ = GOOGLE_ULONGLONG(0);
  room_info_ = NULL;
  leibaota_ = 0u;
  surplus_hand_num_ = 0u;
  base_flower_ = 0u;
  send_card_ = 0u;
  room_id_ = GOOGLE_ULONGLONG(0);
  room_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_count_ = 0u;
  state_run_time_ = 0u;
  private_room_ = NULL;
  hui_card_ = 0u;
  game_circle_ = 0u;
  out_card_ = 0u;
  param1_ = 0u;
  show_down_info_ = NULL;
  role_host_ = NULL;
  role_state_ = NULL;
  hu_state_ = 0u;
  room_pay_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMahJongRoom::~MsgMahJongRoom() {
  // @@protoc_insertion_point(destructor:MsgMahJongRoom)
  SharedDtor();
}

void MsgMahJongRoom::SharedDtor() {
  if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_type_;
  }
  if (this != default_instance_) {
    delete room_info_;
    delete private_room_;
    delete show_down_info_;
    delete role_host_;
    delete role_state_;
  }
}

void MsgMahJongRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMahJongRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMahJongRoom_descriptor_;
}

const MsgMahJongRoom& MsgMahJongRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgMahJongRoom* MsgMahJongRoom::default_instance_ = NULL;

MsgMahJongRoom* MsgMahJongRoom::New() const {
  return new MsgMahJongRoom;
}

void MsgMahJongRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMahJongRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 237) {
    ZR_(banker_id_, leibaota_);
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::MsgBaseRoomInfo::Clear();
    }
    surplus_hand_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(base_flower_, game_count_);
    ZR_(state_run_time_, hui_card_);
    if (has_room_type()) {
      if (room_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_type_->clear();
      }
    }
    if (has_private_room()) {
      if (private_room_ != NULL) private_room_->::MsgMahJongPrivateRoom::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 2555904) {
    ZR_(game_circle_, out_card_);
    param1_ = 0u;
    if (has_show_down_info()) {
      if (show_down_info_ != NULL) show_down_info_->::MsgShowDownCount::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 251658240) {
    if (has_role_host()) {
      if (role_host_ != NULL) role_host_->::MsgRoleHostCount::Clear();
    }
    if (has_role_state()) {
      if (role_state_ != NULL) role_state_->::MsgRoleStateCount::Clear();
    }
    hu_state_ = 0u;
    room_pay_type_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_list_.Clear();
  hand_card_.Clear();
  param_list_.Clear();
  gang_card_.Clear();
  za_card_.Clear();
  launch_card_.Clear();
  listen_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMahJongRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMahJongRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TMahJongState room_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMahJongState_IsValid(value)) {
            set_room_state(static_cast< ::TMahJongState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }

      // repeated .MsgMahJongPlayer player_list = 2;
      case 2: {
        if (tag == 18) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectTag(24)) goto parse_banker_id;
        break;
      }

      // optional uint64 banker_id = 3;
      case 3: {
        if (tag == 24) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint64 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 5;
      case 5: {
        if (tag == 40) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hand_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hand_card;
        if (input->ExpectTag(50)) goto parse_room_info;
        break;
      }

      // optional .MsgBaseRoomInfo room_info = 6;
      case 6: {
        if (tag == 50) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_leibaota;
        break;
      }

      // optional uint32 leibaota = 7;
      case 7: {
        if (tag == 56) {
         parse_leibaota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leibaota_)));
          set_has_leibaota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_surplus_hand_num;
        break;
      }

      // optional uint32 surplus_hand_num = 8;
      case 8: {
        if (tag == 64) {
         parse_surplus_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplus_hand_num_)));
          set_has_surplus_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_base_flower;
        break;
      }

      // optional uint32 base_flower = 9;
      case 9: {
        if (tag == 72) {
         parse_base_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_flower_)));
          set_has_base_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_send_card;
        break;
      }

      // optional uint32 send_card = 10;
      case 10: {
        if (tag == 80) {
         parse_send_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_card_)));
          set_has_send_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 11;
      case 11: {
        if (tag == 88) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_room_type;
        break;
      }

      // optional string room_type = 12;
      case 12: {
        if (tag == 98) {
         parse_room_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_type().data(), this->room_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 13;
      case 13: {
        if (tag == 104) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_state_run_time;
        break;
      }

      // optional uint32 state_run_time = 14;
      case 14: {
        if (tag == 112) {
         parse_state_run_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_run_time_)));
          set_has_state_run_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_private_room;
        break;
      }

      // optional .MsgMahJongPrivateRoom private_room = 15;
      case 15: {
        if (tag == 122) {
         parse_private_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hui_card;
        break;
      }

      // optional uint32 hui_card = 16;
      case 16: {
        if (tag == 128) {
         parse_hui_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hui_card_)));
          set_has_hui_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_game_circle;
        break;
      }

      // optional uint32 game_circle = 17;
      case 17: {
        if (tag == 136) {
         parse_game_circle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_circle_)));
          set_has_game_circle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_out_card;
        break;
      }

      // optional uint32 out_card = 18;
      case 18: {
        if (tag == 144) {
         parse_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_card_)));
          set_has_out_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 19;
      case 19: {
        if (tag == 152) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_param_list;
        break;
      }

      // repeated uint32 param_list = 20;
      case 20: {
        if (tag == 160) {
         parse_param_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_param_list())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_param_list;
        if (input->ExpectTag(168)) goto parse_gang_card;
        break;
      }

      // repeated uint32 gang_card = 21;
      case 21: {
        if (tag == 168) {
         parse_gang_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168, input, this->mutable_gang_card())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gang_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_gang_card;
        if (input->ExpectTag(178)) goto parse_show_down_info;
        break;
      }

      // optional .MsgShowDownCount show_down_info = 22;
      case 22: {
        if (tag == 178) {
         parse_show_down_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_down_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_za_card;
        break;
      }

      // repeated uint32 za_card = 23;
      case 23: {
        if (tag == 184) {
         parse_za_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184, input, this->mutable_za_card())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_za_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_za_card;
        if (input->ExpectTag(192)) goto parse_launch_card;
        break;
      }

      // repeated uint32 launch_card = 24;
      case 24: {
        if (tag == 192) {
         parse_launch_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192, input, this->mutable_launch_card())));
        } else if (tag == 194) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_launch_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_launch_card;
        if (input->ExpectTag(202)) goto parse_role_host;
        break;
      }

      // optional .MsgRoleHostCount role_host = 25;
      case 25: {
        if (tag == 202) {
         parse_role_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_role_state;
        break;
      }

      // optional .MsgRoleStateCount role_state = 26;
      case 26: {
        if (tag == 210) {
         parse_role_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_hu_state;
        break;
      }

      // optional uint32 hu_state = 27;
      case 27: {
        if (tag == 216) {
         parse_hu_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_state_)));
          set_has_hu_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_room_pay_type;
        break;
      }

      // optional uint32 room_pay_type = 28;
      case 28: {
        if (tag == 224) {
         parse_room_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_pay_type_)));
          set_has_room_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_listen_list;
        break;
      }

      // repeated .MsgListenCard listen_list = 29;
      case 29: {
        if (tag == 234) {
         parse_listen_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listen_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_listen_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMahJongRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMahJongRoom)
  return false;
#undef DO_
}

void MsgMahJongRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMahJongRoom)
  // optional .TMahJongState room_state = 1;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->room_state(), output);
  }

  // repeated .MsgMahJongPlayer player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }

  // optional uint64 banker_id = 3;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->banker_id(), output);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->action_id(), output);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hand_card(i), output);
  }

  // optional .MsgBaseRoomInfo room_info = 6;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->room_info(), output);
  }

  // optional uint32 leibaota = 7;
  if (has_leibaota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leibaota(), output);
  }

  // optional uint32 surplus_hand_num = 8;
  if (has_surplus_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->surplus_hand_num(), output);
  }

  // optional uint32 base_flower = 9;
  if (has_base_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->base_flower(), output);
  }

  // optional uint32 send_card = 10;
  if (has_send_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->send_card(), output);
  }

  // optional uint64 room_id = 11;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->room_id(), output);
  }

  // optional string room_type = 12;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->room_type(), output);
  }

  // optional uint32 game_count = 13;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->game_count(), output);
  }

  // optional uint32 state_run_time = 14;
  if (has_state_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->state_run_time(), output);
  }

  // optional .MsgMahJongPrivateRoom private_room = 15;
  if (has_private_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->private_room(), output);
  }

  // optional uint32 hui_card = 16;
  if (has_hui_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hui_card(), output);
  }

  // optional uint32 game_circle = 17;
  if (has_game_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->game_circle(), output);
  }

  // optional uint32 out_card = 18;
  if (has_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->out_card(), output);
  }

  // optional uint32 param1 = 19;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->param1(), output);
  }

  // repeated uint32 param_list = 20;
  for (int i = 0; i < this->param_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->param_list(i), output);
  }

  // repeated uint32 gang_card = 21;
  for (int i = 0; i < this->gang_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->gang_card(i), output);
  }

  // optional .MsgShowDownCount show_down_info = 22;
  if (has_show_down_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->show_down_info(), output);
  }

  // repeated uint32 za_card = 23;
  for (int i = 0; i < this->za_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->za_card(i), output);
  }

  // repeated uint32 launch_card = 24;
  for (int i = 0; i < this->launch_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->launch_card(i), output);
  }

  // optional .MsgRoleHostCount role_host = 25;
  if (has_role_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->role_host(), output);
  }

  // optional .MsgRoleStateCount role_state = 26;
  if (has_role_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->role_state(), output);
  }

  // optional uint32 hu_state = 27;
  if (has_hu_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->hu_state(), output);
  }

  // optional uint32 room_pay_type = 28;
  if (has_room_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->room_pay_type(), output);
  }

  // repeated .MsgListenCard listen_list = 29;
  for (int i = 0; i < this->listen_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->listen_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMahJongRoom)
}

::google::protobuf::uint8* MsgMahJongRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMahJongRoom)
  // optional .TMahJongState room_state = 1;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->room_state(), target);
  }

  // repeated .MsgMahJongPlayer player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }

  // optional uint64 banker_id = 3;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->banker_id(), target);
  }

  // optional uint64 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->action_id(), target);
  }

  // repeated uint32 hand_card = 5;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hand_card(i), target);
  }

  // optional .MsgBaseRoomInfo room_info = 6;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->room_info(), target);
  }

  // optional uint32 leibaota = 7;
  if (has_leibaota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leibaota(), target);
  }

  // optional uint32 surplus_hand_num = 8;
  if (has_surplus_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->surplus_hand_num(), target);
  }

  // optional uint32 base_flower = 9;
  if (has_base_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->base_flower(), target);
  }

  // optional uint32 send_card = 10;
  if (has_send_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->send_card(), target);
  }

  // optional uint64 room_id = 11;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->room_id(), target);
  }

  // optional string room_type = 12;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_type().data(), this->room_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->room_type(), target);
  }

  // optional uint32 game_count = 13;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->game_count(), target);
  }

  // optional uint32 state_run_time = 14;
  if (has_state_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->state_run_time(), target);
  }

  // optional .MsgMahJongPrivateRoom private_room = 15;
  if (has_private_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->private_room(), target);
  }

  // optional uint32 hui_card = 16;
  if (has_hui_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hui_card(), target);
  }

  // optional uint32 game_circle = 17;
  if (has_game_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->game_circle(), target);
  }

  // optional uint32 out_card = 18;
  if (has_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->out_card(), target);
  }

  // optional uint32 param1 = 19;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->param1(), target);
  }

  // repeated uint32 param_list = 20;
  for (int i = 0; i < this->param_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->param_list(i), target);
  }

  // repeated uint32 gang_card = 21;
  for (int i = 0; i < this->gang_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(21, this->gang_card(i), target);
  }

  // optional .MsgShowDownCount show_down_info = 22;
  if (has_show_down_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->show_down_info(), target);
  }

  // repeated uint32 za_card = 23;
  for (int i = 0; i < this->za_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(23, this->za_card(i), target);
  }

  // repeated uint32 launch_card = 24;
  for (int i = 0; i < this->launch_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(24, this->launch_card(i), target);
  }

  // optional .MsgRoleHostCount role_host = 25;
  if (has_role_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->role_host(), target);
  }

  // optional .MsgRoleStateCount role_state = 26;
  if (has_role_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->role_state(), target);
  }

  // optional uint32 hu_state = 27;
  if (has_hu_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->hu_state(), target);
  }

  // optional uint32 room_pay_type = 28;
  if (has_room_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->room_pay_type(), target);
  }

  // repeated .MsgListenCard listen_list = 29;
  for (int i = 0; i < this->listen_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->listen_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMahJongRoom)
  return target;
}

int MsgMahJongRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TMahJongState room_state = 1;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint64 banker_id = 3;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banker_id());
    }

    // optional uint64 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->action_id());
    }

    // optional .MsgBaseRoomInfo room_info = 6;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

    // optional uint32 leibaota = 7;
    if (has_leibaota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leibaota());
    }

    // optional uint32 surplus_hand_num = 8;
    if (has_surplus_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplus_hand_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 base_flower = 9;
    if (has_base_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_flower());
    }

    // optional uint32 send_card = 10;
    if (has_send_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_card());
    }

    // optional uint64 room_id = 11;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional string room_type = 12;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_type());
    }

    // optional uint32 game_count = 13;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional uint32 state_run_time = 14;
    if (has_state_run_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_run_time());
    }

    // optional .MsgMahJongPrivateRoom private_room = 15;
    if (has_private_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_room());
    }

    // optional uint32 hui_card = 16;
    if (has_hui_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hui_card());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 game_circle = 17;
    if (has_game_circle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_circle());
    }

    // optional uint32 out_card = 18;
    if (has_out_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_card());
    }

    // optional uint32 param1 = 19;
    if (has_param1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional .MsgShowDownCount show_down_info = 22;
    if (has_show_down_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_down_info());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .MsgRoleHostCount role_host = 25;
    if (has_role_host()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_host());
    }

    // optional .MsgRoleStateCount role_state = 26;
    if (has_role_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_state());
    }

    // optional uint32 hu_state = 27;
    if (has_hu_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_state());
    }

    // optional uint32 room_pay_type = 28;
    if (has_room_pay_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_pay_type());
    }

  }
  // repeated .MsgMahJongPlayer player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated uint32 hand_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated uint32 param_list = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param_list(i));
    }
    total_size += 2 * this->param_list_size() + data_size;
  }

  // repeated uint32 gang_card = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gang_card(i));
    }
    total_size += 2 * this->gang_card_size() + data_size;
  }

  // repeated uint32 za_card = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->za_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->za_card(i));
    }
    total_size += 2 * this->za_card_size() + data_size;
  }

  // repeated uint32 launch_card = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->launch_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->launch_card(i));
    }
    total_size += 2 * this->launch_card_size() + data_size;
  }

  // repeated .MsgListenCard listen_list = 29;
  total_size += 2 * this->listen_list_size();
  for (int i = 0; i < this->listen_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listen_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMahJongRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMahJongRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMahJongRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMahJongRoom::MergeFrom(const MsgMahJongRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  hand_card_.MergeFrom(from.hand_card_);
  param_list_.MergeFrom(from.param_list_);
  gang_card_.MergeFrom(from.gang_card_);
  za_card_.MergeFrom(from.za_card_);
  launch_card_.MergeFrom(from.launch_card_);
  listen_list_.MergeFrom(from.listen_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::MsgBaseRoomInfo::MergeFrom(from.room_info());
    }
    if (from.has_leibaota()) {
      set_leibaota(from.leibaota());
    }
    if (from.has_surplus_hand_num()) {
      set_surplus_hand_num(from.surplus_hand_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base_flower()) {
      set_base_flower(from.base_flower());
    }
    if (from.has_send_card()) {
      set_send_card(from.send_card());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_state_run_time()) {
      set_state_run_time(from.state_run_time());
    }
    if (from.has_private_room()) {
      mutable_private_room()->::MsgMahJongPrivateRoom::MergeFrom(from.private_room());
    }
    if (from.has_hui_card()) {
      set_hui_card(from.hui_card());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_game_circle()) {
      set_game_circle(from.game_circle());
    }
    if (from.has_out_card()) {
      set_out_card(from.out_card());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_show_down_info()) {
      mutable_show_down_info()->::MsgShowDownCount::MergeFrom(from.show_down_info());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_role_host()) {
      mutable_role_host()->::MsgRoleHostCount::MergeFrom(from.role_host());
    }
    if (from.has_role_state()) {
      mutable_role_state()->::MsgRoleStateCount::MergeFrom(from.role_state());
    }
    if (from.has_hu_state()) {
      set_hu_state(from.hu_state());
    }
    if (from.has_room_pay_type()) {
      set_room_pay_type(from.room_pay_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMahJongRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMahJongRoom::CopyFrom(const MsgMahJongRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMahJongRoom::IsInitialized() const {

  return true;
}

void MsgMahJongRoom::Swap(MsgMahJongRoom* other) {
  if (other != this) {
    std::swap(room_state_, other->room_state_);
    player_list_.Swap(&other->player_list_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(action_id_, other->action_id_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(room_info_, other->room_info_);
    std::swap(leibaota_, other->leibaota_);
    std::swap(surplus_hand_num_, other->surplus_hand_num_);
    std::swap(base_flower_, other->base_flower_);
    std::swap(send_card_, other->send_card_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(game_count_, other->game_count_);
    std::swap(state_run_time_, other->state_run_time_);
    std::swap(private_room_, other->private_room_);
    std::swap(hui_card_, other->hui_card_);
    std::swap(game_circle_, other->game_circle_);
    std::swap(out_card_, other->out_card_);
    std::swap(param1_, other->param1_);
    param_list_.Swap(&other->param_list_);
    gang_card_.Swap(&other->gang_card_);
    std::swap(show_down_info_, other->show_down_info_);
    za_card_.Swap(&other->za_card_);
    launch_card_.Swap(&other->launch_card_);
    std::swap(role_host_, other->role_host_);
    std::swap(role_state_, other->role_state_);
    std::swap(hu_state_, other->hu_state_);
    std::swap(room_pay_type_, other->room_pay_type_);
    listen_list_.Swap(&other->listen_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMahJongRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMahJongRoom_descriptor_;
  metadata.reflection = MsgMahJongRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMahJongPrivateRoom::kSpecialKindFieldNumber;
const int MsgMahJongPrivateRoom::kConsumeIdFieldNumber;
const int MsgMahJongPrivateRoom::kScoreFieldNumber;
const int MsgMahJongPrivateRoom::kPlayerNumberFieldNumber;
#endif  // !_MSC_VER

MsgMahJongPrivateRoom::MsgMahJongPrivateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgMahJongPrivateRoom)
}

void MsgMahJongPrivateRoom::InitAsDefaultInstance() {
}

MsgMahJongPrivateRoom::MsgMahJongPrivateRoom(const MsgMahJongPrivateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgMahJongPrivateRoom)
}

void MsgMahJongPrivateRoom::SharedCtor() {
  _cached_size_ = 0;
  special_kind_ = 0u;
  consume_id_ = 0u;
  score_ = 0u;
  player_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMahJongPrivateRoom::~MsgMahJongPrivateRoom() {
  // @@protoc_insertion_point(destructor:MsgMahJongPrivateRoom)
  SharedDtor();
}

void MsgMahJongPrivateRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMahJongPrivateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMahJongPrivateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMahJongPrivateRoom_descriptor_;
}

const MsgMahJongPrivateRoom& MsgMahJongPrivateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgMahJongPrivateRoom* MsgMahJongPrivateRoom::default_instance_ = NULL;

MsgMahJongPrivateRoom* MsgMahJongPrivateRoom::New() const {
  return new MsgMahJongPrivateRoom;
}

void MsgMahJongPrivateRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgMahJongPrivateRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(special_kind_, player_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMahJongPrivateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgMahJongPrivateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 special_kind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_kind_)));
          set_has_special_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_consume_id;
        break;
      }

      // optional uint32 consume_id = 2;
      case 2: {
        if (tag == 16) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_number;
        break;
      }

      // optional uint32 player_number = 4;
      case 4: {
        if (tag == 32) {
         parse_player_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_number_)));
          set_has_player_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgMahJongPrivateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgMahJongPrivateRoom)
  return false;
#undef DO_
}

void MsgMahJongPrivateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgMahJongPrivateRoom)
  // optional uint32 special_kind = 1;
  if (has_special_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->special_kind(), output);
  }

  // optional uint32 consume_id = 2;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume_id(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 player_number = 4;
  if (has_player_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgMahJongPrivateRoom)
}

::google::protobuf::uint8* MsgMahJongPrivateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgMahJongPrivateRoom)
  // optional uint32 special_kind = 1;
  if (has_special_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->special_kind(), target);
  }

  // optional uint32 consume_id = 2;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume_id(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint32 player_number = 4;
  if (has_player_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgMahJongPrivateRoom)
  return target;
}

int MsgMahJongPrivateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 special_kind = 1;
    if (has_special_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_kind());
    }

    // optional uint32 consume_id = 2;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 player_number = 4;
    if (has_player_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMahJongPrivateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMahJongPrivateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMahJongPrivateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMahJongPrivateRoom::MergeFrom(const MsgMahJongPrivateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_special_kind()) {
      set_special_kind(from.special_kind());
    }
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_player_number()) {
      set_player_number(from.player_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMahJongPrivateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMahJongPrivateRoom::CopyFrom(const MsgMahJongPrivateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMahJongPrivateRoom::IsInitialized() const {

  return true;
}

void MsgMahJongPrivateRoom::Swap(MsgMahJongPrivateRoom* other) {
  if (other != this) {
    std::swap(special_kind_, other->special_kind_);
    std::swap(consume_id_, other->consume_id_);
    std::swap(score_, other->score_);
    std::swap(player_number_, other->player_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMahJongPrivateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMahJongPrivateRoom_descriptor_;
  metadata.reflection = MsgMahJongPrivateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgWeaveCard::kCarddataFieldNumber;
const int MsgWeaveCard::kHandNumFieldNumber;
const int MsgWeaveCard::kHandCardFieldNumber;
const int MsgWeaveCard::kRoleScoreFieldNumber;
const int MsgWeaveCard::kPlayerListFieldNumber;
const int MsgWeaveCard::kParam1FieldNumber;
const int MsgWeaveCard::kWeaveScoreFieldNumber;
const int MsgWeaveCard::kEatCardFieldNumber;
#endif  // !_MSC_VER

MsgWeaveCard::MsgWeaveCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgWeaveCard)
}

void MsgWeaveCard::InitAsDefaultInstance() {
}

MsgWeaveCard::MsgWeaveCard(const MsgWeaveCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgWeaveCard)
}

void MsgWeaveCard::SharedCtor() {
  _cached_size_ = 0;
  hand_num_ = 0u;
  param1_ = false;
  weave_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgWeaveCard::~MsgWeaveCard() {
  // @@protoc_insertion_point(destructor:MsgWeaveCard)
  SharedDtor();
}

void MsgWeaveCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgWeaveCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgWeaveCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgWeaveCard_descriptor_;
}

const MsgWeaveCard& MsgWeaveCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgWeaveCard* MsgWeaveCard::default_instance_ = NULL;

MsgWeaveCard* MsgWeaveCard::New() const {
  return new MsgWeaveCard;
}

void MsgWeaveCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgWeaveCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 98) {
    ZR_(hand_num_, param1_);
    weave_score_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  carddata_.Clear();
  hand_card_.Clear();
  role_score_.Clear();
  player_list_.Clear();
  eat_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgWeaveCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgWeaveCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgCardData carddata = 1;
      case 1: {
        if (tag == 10) {
         parse_carddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_carddata;
        if (input->ExpectTag(16)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 2;
      case 2: {
        if (tag == 16) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hand_card())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_card;
        if (input->ExpectTag(34)) goto parse_role_score;
        break;
      }

      // repeated .MsgRoleScore role_score = 4;
      case 4: {
        if (tag == 34) {
         parse_role_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_score;
        if (input->ExpectTag(42)) goto parse_player_list;
        break;
      }

      // repeated .MsgMahJongPlayer player_list = 5;
      case 5: {
        if (tag == 42) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_list;
        if (input->ExpectTag(48)) goto parse_param1;
        break;
      }

      // optional bool param1 = 6;
      case 6: {
        if (tag == 48) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_weave_score;
        break;
      }

      // optional uint32 weave_score = 7;
      case 7: {
        if (tag == 56) {
         parse_weave_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weave_score_)));
          set_has_weave_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eat_card;
        break;
      }

      // repeated uint32 eat_card = 8;
      case 8: {
        if (tag == 64) {
         parse_eat_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_eat_card())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eat_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eat_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgWeaveCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgWeaveCard)
  return false;
#undef DO_
}

void MsgWeaveCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgWeaveCard)
  // repeated .MsgCardData carddata = 1;
  for (int i = 0; i < this->carddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->carddata(i), output);
  }

  // optional uint32 hand_num = 2;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hand_num(), output);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hand_card(i), output);
  }

  // repeated .MsgRoleScore role_score = 4;
  for (int i = 0; i < this->role_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_score(i), output);
  }

  // repeated .MsgMahJongPlayer player_list = 5;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_list(i), output);
  }

  // optional bool param1 = 6;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->param1(), output);
  }

  // optional uint32 weave_score = 7;
  if (has_weave_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->weave_score(), output);
  }

  // repeated uint32 eat_card = 8;
  for (int i = 0; i < this->eat_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->eat_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgWeaveCard)
}

::google::protobuf::uint8* MsgWeaveCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgWeaveCard)
  // repeated .MsgCardData carddata = 1;
  for (int i = 0; i < this->carddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->carddata(i), target);
  }

  // optional uint32 hand_num = 2;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hand_num(), target);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hand_card(i), target);
  }

  // repeated .MsgRoleScore role_score = 4;
  for (int i = 0; i < this->role_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_score(i), target);
  }

  // repeated .MsgMahJongPlayer player_list = 5;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_list(i), target);
  }

  // optional bool param1 = 6;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->param1(), target);
  }

  // optional uint32 weave_score = 7;
  if (has_weave_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->weave_score(), target);
  }

  // repeated uint32 eat_card = 8;
  for (int i = 0; i < this->eat_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->eat_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgWeaveCard)
  return target;
}

int MsgWeaveCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 hand_num = 2;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

    // optional bool param1 = 6;
    if (has_param1()) {
      total_size += 1 + 1;
    }

    // optional uint32 weave_score = 7;
    if (has_weave_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weave_score());
    }

  }
  // repeated .MsgCardData carddata = 1;
  total_size += 1 * this->carddata_size();
  for (int i = 0; i < this->carddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carddata(i));
  }

  // repeated uint32 hand_card = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated .MsgRoleScore role_score = 4;
  total_size += 1 * this->role_score_size();
  for (int i = 0; i < this->role_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score(i));
  }

  // repeated .MsgMahJongPlayer player_list = 5;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  // repeated uint32 eat_card = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->eat_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eat_card(i));
    }
    total_size += 1 * this->eat_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWeaveCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgWeaveCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgWeaveCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgWeaveCard::MergeFrom(const MsgWeaveCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  carddata_.MergeFrom(from.carddata_);
  hand_card_.MergeFrom(from.hand_card_);
  role_score_.MergeFrom(from.role_score_);
  player_list_.MergeFrom(from.player_list_);
  eat_card_.MergeFrom(from.eat_card_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_weave_score()) {
      set_weave_score(from.weave_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgWeaveCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWeaveCard::CopyFrom(const MsgWeaveCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWeaveCard::IsInitialized() const {

  return true;
}

void MsgWeaveCard::Swap(MsgWeaveCard* other) {
  if (other != this) {
    carddata_.Swap(&other->carddata_);
    std::swap(hand_num_, other->hand_num_);
    hand_card_.Swap(&other->hand_card_);
    role_score_.Swap(&other->role_score_);
    player_list_.Swap(&other->player_list_);
    std::swap(param1_, other->param1_);
    std::swap(weave_score_, other->weave_score_);
    eat_card_.Swap(&other->eat_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgWeaveCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgWeaveCard_descriptor_;
  metadata.reflection = MsgWeaveCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFlowerList::kFlowerListFieldNumber;
#endif  // !_MSC_VER

MsgFlowerList::MsgFlowerList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFlowerList)
}

void MsgFlowerList::InitAsDefaultInstance() {
}

MsgFlowerList::MsgFlowerList(const MsgFlowerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFlowerList)
}

void MsgFlowerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFlowerList::~MsgFlowerList() {
  // @@protoc_insertion_point(destructor:MsgFlowerList)
  SharedDtor();
}

void MsgFlowerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFlowerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFlowerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFlowerList_descriptor_;
}

const MsgFlowerList& MsgFlowerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgFlowerList* MsgFlowerList::default_instance_ = NULL;

MsgFlowerList* MsgFlowerList::New() const {
  return new MsgFlowerList;
}

void MsgFlowerList::Clear() {
  flower_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFlowerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFlowerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgFlowerData flower_list = 1;
      case 1: {
        if (tag == 10) {
         parse_flower_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flower_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_flower_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFlowerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFlowerList)
  return false;
#undef DO_
}

void MsgFlowerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFlowerList)
  // repeated .MsgFlowerData flower_list = 1;
  for (int i = 0; i < this->flower_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flower_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFlowerList)
}

::google::protobuf::uint8* MsgFlowerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFlowerList)
  // repeated .MsgFlowerData flower_list = 1;
  for (int i = 0; i < this->flower_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flower_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFlowerList)
  return target;
}

int MsgFlowerList::ByteSize() const {
  int total_size = 0;

  // repeated .MsgFlowerData flower_list = 1;
  total_size += 1 * this->flower_list_size();
  for (int i = 0; i < this->flower_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flower_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFlowerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFlowerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFlowerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFlowerList::MergeFrom(const MsgFlowerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  flower_list_.MergeFrom(from.flower_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFlowerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFlowerList::CopyFrom(const MsgFlowerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFlowerList::IsInitialized() const {

  return true;
}

void MsgFlowerList::Swap(MsgFlowerList* other) {
  if (other != this) {
    flower_list_.Swap(&other->flower_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFlowerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFlowerList_descriptor_;
  metadata.reflection = MsgFlowerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFlowerData::kRoleidFieldNumber;
const int MsgFlowerData::kCardFieldNumber;
#endif  // !_MSC_VER

MsgFlowerData::MsgFlowerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgFlowerData)
}

void MsgFlowerData::InitAsDefaultInstance() {
}

MsgFlowerData::MsgFlowerData(const MsgFlowerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgFlowerData)
}

void MsgFlowerData::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFlowerData::~MsgFlowerData() {
  // @@protoc_insertion_point(destructor:MsgFlowerData)
  SharedDtor();
}

void MsgFlowerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFlowerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFlowerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFlowerData_descriptor_;
}

const MsgFlowerData& MsgFlowerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgFlowerData* MsgFlowerData::default_instance_ = NULL;

MsgFlowerData* MsgFlowerData::New() const {
  return new MsgFlowerData;
}

void MsgFlowerData::Clear() {
  roleid_ = GOOGLE_ULONGLONG(0);
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFlowerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgFlowerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // repeated uint32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_card())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgFlowerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgFlowerData)
  return false;
#undef DO_
}

void MsgFlowerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgFlowerData)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // repeated uint32 card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgFlowerData)
}

::google::protobuf::uint8* MsgFlowerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgFlowerData)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // repeated uint32 card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgFlowerData)
  return target;
}

int MsgFlowerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  // repeated uint32 card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFlowerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFlowerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFlowerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFlowerData::MergeFrom(const MsgFlowerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFlowerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFlowerData::CopyFrom(const MsgFlowerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFlowerData::IsInitialized() const {

  return true;
}

void MsgFlowerData::Swap(MsgFlowerData* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFlowerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFlowerData_descriptor_;
  metadata.reflection = MsgFlowerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShowDown::kRoleidFieldNumber;
const int MsgShowDown::kMoneyFieldNumber;
const int MsgShowDown::kHukindFieldNumber;
const int MsgShowDown::kHandCardFieldNumber;
const int MsgShowDown::kHardFlowerFieldNumber;
const int MsgShowDown::kMildFlowerFieldNumber;
const int MsgShowDown::kBaotaFlowerFieldNumber;
const int MsgShowDown::kHuCardFieldNumber;
const int MsgShowDown::kTotalMoneyFieldNumber;
const int MsgShowDown::kPackScoreFieldNumber;
const int MsgShowDown::kTotalPackScoreFieldNumber;
const int MsgShowDown::kEventCountFieldNumber;
const int MsgShowDown::kHuRoleFieldNumber;
const int MsgShowDown::kHandNumFieldNumber;
const int MsgShowDown::kHuListFieldNumber;
#endif  // !_MSC_VER

MsgShowDown::MsgShowDown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShowDown)
}

void MsgShowDown::InitAsDefaultInstance() {
}

MsgShowDown::MsgShowDown(const MsgShowDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShowDown)
}

void MsgShowDown::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  hukind_ = 0u;
  hard_flower_ = 0u;
  mild_flower_ = 0u;
  baota_flower_ = 0u;
  hu_card_ = 0u;
  total_money_ = GOOGLE_LONGLONG(0);
  pack_score_ = GOOGLE_LONGLONG(0);
  total_pack_score_ = GOOGLE_LONGLONG(0);
  hu_role_ = false;
  hand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShowDown::~MsgShowDown() {
  // @@protoc_insertion_point(destructor:MsgShowDown)
  SharedDtor();
}

void MsgShowDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgShowDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShowDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShowDown_descriptor_;
}

const MsgShowDown& MsgShowDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgShowDown* MsgShowDown::default_instance_ = NULL;

MsgShowDown* MsgShowDown::New() const {
  return new MsgShowDown;
}

void MsgShowDown::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgShowDown*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(roleid_, money_);
    ZR_(hukind_, baota_flower_);
    hu_card_ = 0u;
  }
  if (_has_bits_[8 / 32] & 14080) {
    ZR_(total_money_, pack_score_);
    ZR_(hu_role_, total_pack_score_);
    hand_num_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hand_card_.Clear();
  event_count_.Clear();
  hu_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShowDown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hukind;
        break;
      }

      // optional uint32 hukind = 3;
      case 3: {
        if (tag == 24) {
         parse_hukind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hukind_)));
          set_has_hukind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_hand_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hand_card;
        if (input->ExpectTag(40)) goto parse_hard_flower;
        break;
      }

      // optional uint32 hard_flower = 5;
      case 5: {
        if (tag == 40) {
         parse_hard_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hard_flower_)));
          set_has_hard_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mild_flower;
        break;
      }

      // optional uint32 mild_flower = 6;
      case 6: {
        if (tag == 48) {
         parse_mild_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mild_flower_)));
          set_has_mild_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_baota_flower;
        break;
      }

      // optional uint32 baota_flower = 7;
      case 7: {
        if (tag == 56) {
         parse_baota_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baota_flower_)));
          set_has_baota_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hu_card;
        break;
      }

      // optional uint32 hu_card = 8;
      case 8: {
        if (tag == 64) {
         parse_hu_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_card_)));
          set_has_hu_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_total_money;
        break;
      }

      // optional int64 total_money = 9;
      case 9: {
        if (tag == 72) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pack_score;
        break;
      }

      // optional int64 pack_score = 10;
      case 10: {
        if (tag == 80) {
         parse_pack_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pack_score_)));
          set_has_pack_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_pack_score;
        break;
      }

      // optional int64 total_pack_score = 11;
      case 11: {
        if (tag == 88) {
         parse_total_pack_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_pack_score_)));
          set_has_total_pack_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_event_count;
        break;
      }

      // repeated .MsgShowDownEvent event_count = 12;
      case 12: {
        if (tag == 98) {
         parse_event_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_event_count;
        if (input->ExpectTag(104)) goto parse_hu_role;
        break;
      }

      // optional bool hu_role = 13;
      case 13: {
        if (tag == 104) {
         parse_hu_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hu_role_)));
          set_has_hu_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hand_num;
        break;
      }

      // optional uint32 hand_num = 14;
      case 14: {
        if (tag == 112) {
         parse_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_num_)));
          set_has_hand_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_hu_list;
        break;
      }

      // repeated uint32 hu_list = 15;
      case 15: {
        if (tag == 120) {
         parse_hu_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_hu_list())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hu_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_hu_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShowDown)
  return false;
#undef DO_
}

void MsgShowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShowDown)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // optional uint32 hukind = 3;
  if (has_hukind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hukind(), output);
  }

  // repeated uint32 hand_card = 4;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->hand_card(i), output);
  }

  // optional uint32 hard_flower = 5;
  if (has_hard_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hard_flower(), output);
  }

  // optional uint32 mild_flower = 6;
  if (has_mild_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mild_flower(), output);
  }

  // optional uint32 baota_flower = 7;
  if (has_baota_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->baota_flower(), output);
  }

  // optional uint32 hu_card = 8;
  if (has_hu_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hu_card(), output);
  }

  // optional int64 total_money = 9;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->total_money(), output);
  }

  // optional int64 pack_score = 10;
  if (has_pack_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->pack_score(), output);
  }

  // optional int64 total_pack_score = 11;
  if (has_total_pack_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->total_pack_score(), output);
  }

  // repeated .MsgShowDownEvent event_count = 12;
  for (int i = 0; i < this->event_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->event_count(i), output);
  }

  // optional bool hu_role = 13;
  if (has_hu_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->hu_role(), output);
  }

  // optional uint32 hand_num = 14;
  if (has_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->hand_num(), output);
  }

  // repeated uint32 hu_list = 15;
  for (int i = 0; i < this->hu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->hu_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShowDown)
}

::google::protobuf::uint8* MsgShowDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShowDown)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // optional uint32 hukind = 3;
  if (has_hukind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hukind(), target);
  }

  // repeated uint32 hand_card = 4;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->hand_card(i), target);
  }

  // optional uint32 hard_flower = 5;
  if (has_hard_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hard_flower(), target);
  }

  // optional uint32 mild_flower = 6;
  if (has_mild_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mild_flower(), target);
  }

  // optional uint32 baota_flower = 7;
  if (has_baota_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->baota_flower(), target);
  }

  // optional uint32 hu_card = 8;
  if (has_hu_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hu_card(), target);
  }

  // optional int64 total_money = 9;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->total_money(), target);
  }

  // optional int64 pack_score = 10;
  if (has_pack_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->pack_score(), target);
  }

  // optional int64 total_pack_score = 11;
  if (has_total_pack_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->total_pack_score(), target);
  }

  // repeated .MsgShowDownEvent event_count = 12;
  for (int i = 0; i < this->event_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->event_count(i), target);
  }

  // optional bool hu_role = 13;
  if (has_hu_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->hu_role(), target);
  }

  // optional uint32 hand_num = 14;
  if (has_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->hand_num(), target);
  }

  // repeated uint32 hu_list = 15;
  for (int i = 0; i < this->hu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->hu_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShowDown)
  return target;
}

int MsgShowDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional uint32 hukind = 3;
    if (has_hukind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hukind());
    }

    // optional uint32 hard_flower = 5;
    if (has_hard_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hard_flower());
    }

    // optional uint32 mild_flower = 6;
    if (has_mild_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mild_flower());
    }

    // optional uint32 baota_flower = 7;
    if (has_baota_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baota_flower());
    }

    // optional uint32 hu_card = 8;
    if (has_hu_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_card());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 total_money = 9;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_money());
    }

    // optional int64 pack_score = 10;
    if (has_pack_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pack_score());
    }

    // optional int64 total_pack_score = 11;
    if (has_total_pack_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_pack_score());
    }

    // optional bool hu_role = 13;
    if (has_hu_role()) {
      total_size += 1 + 1;
    }

    // optional uint32 hand_num = 14;
    if (has_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_num());
    }

  }
  // repeated uint32 hand_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated .MsgShowDownEvent event_count = 12;
  total_size += 1 * this->event_count_size();
  for (int i = 0; i < this->event_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_count(i));
  }

  // repeated uint32 hu_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->hu_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hu_list(i));
    }
    total_size += 1 * this->hu_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShowDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShowDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShowDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShowDown::MergeFrom(const MsgShowDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_card_.MergeFrom(from.hand_card_);
  event_count_.MergeFrom(from.event_count_);
  hu_list_.MergeFrom(from.hu_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_hukind()) {
      set_hukind(from.hukind());
    }
    if (from.has_hard_flower()) {
      set_hard_flower(from.hard_flower());
    }
    if (from.has_mild_flower()) {
      set_mild_flower(from.mild_flower());
    }
    if (from.has_baota_flower()) {
      set_baota_flower(from.baota_flower());
    }
    if (from.has_hu_card()) {
      set_hu_card(from.hu_card());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_pack_score()) {
      set_pack_score(from.pack_score());
    }
    if (from.has_total_pack_score()) {
      set_total_pack_score(from.total_pack_score());
    }
    if (from.has_hu_role()) {
      set_hu_role(from.hu_role());
    }
    if (from.has_hand_num()) {
      set_hand_num(from.hand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShowDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShowDown::CopyFrom(const MsgShowDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShowDown::IsInitialized() const {

  return true;
}

void MsgShowDown::Swap(MsgShowDown* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(money_, other->money_);
    std::swap(hukind_, other->hukind_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(hard_flower_, other->hard_flower_);
    std::swap(mild_flower_, other->mild_flower_);
    std::swap(baota_flower_, other->baota_flower_);
    std::swap(hu_card_, other->hu_card_);
    std::swap(total_money_, other->total_money_);
    std::swap(pack_score_, other->pack_score_);
    std::swap(total_pack_score_, other->total_pack_score_);
    event_count_.Swap(&other->event_count_);
    std::swap(hu_role_, other->hu_role_);
    std::swap(hand_num_, other->hand_num_);
    hu_list_.Swap(&other->hu_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShowDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShowDown_descriptor_;
  metadata.reflection = MsgShowDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShowDownEvent::kEventIdFieldNumber;
const int MsgShowDownEvent::kCountFieldNumber;
const int MsgShowDownEvent::kScoreFieldNumber;
const int MsgShowDownEvent::kScoreCountFieldNumber;
#endif  // !_MSC_VER

MsgShowDownEvent::MsgShowDownEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShowDownEvent)
}

void MsgShowDownEvent::InitAsDefaultInstance() {
}

MsgShowDownEvent::MsgShowDownEvent(const MsgShowDownEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShowDownEvent)
}

void MsgShowDownEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShowDownEvent::~MsgShowDownEvent() {
  // @@protoc_insertion_point(destructor:MsgShowDownEvent)
  SharedDtor();
}

void MsgShowDownEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgShowDownEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShowDownEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShowDownEvent_descriptor_;
}

const MsgShowDownEvent& MsgShowDownEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgShowDownEvent* MsgShowDownEvent::default_instance_ = NULL;

MsgShowDownEvent* MsgShowDownEvent::New() const {
  return new MsgShowDownEvent;
}

void MsgShowDownEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgShowDownEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  score_.Clear();
  score_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShowDownEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShowDownEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // repeated int32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_score())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        if (input->ExpectTag(32)) goto parse_score_count;
        break;
      }

      // repeated uint32 score_count = 4;
      case 4: {
        if (tag == 32) {
         parse_score_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_score_count())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShowDownEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShowDownEvent)
  return false;
#undef DO_
}

void MsgShowDownEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShowDownEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated int32 score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->score(i), output);
  }

  // repeated uint32 score_count = 4;
  for (int i = 0; i < this->score_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->score_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShowDownEvent)
}

::google::protobuf::uint8* MsgShowDownEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShowDownEvent)
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated int32 score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->score(i), target);
  }

  // repeated uint32 score_count = 4;
  for (int i = 0; i < this->score_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->score_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShowDownEvent)
  return target;
}

int MsgShowDownEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated int32 score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated uint32 score_count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->score_count(i));
    }
    total_size += 1 * this->score_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShowDownEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShowDownEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShowDownEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShowDownEvent::MergeFrom(const MsgShowDownEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  score_count_.MergeFrom(from.score_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShowDownEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShowDownEvent::CopyFrom(const MsgShowDownEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShowDownEvent::IsInitialized() const {

  return true;
}

void MsgShowDownEvent::Swap(MsgShowDownEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(count_, other->count_);
    score_.Swap(&other->score_);
    score_count_.Swap(&other->score_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShowDownEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShowDownEvent_descriptor_;
  metadata.reflection = MsgShowDownEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgIntegralCount::kRoleidFieldNumber;
const int MsgIntegralCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgIntegralCount::MsgIntegralCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgIntegralCount)
}

void MsgIntegralCount::InitAsDefaultInstance() {
}

MsgIntegralCount::MsgIntegralCount(const MsgIntegralCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgIntegralCount)
}

void MsgIntegralCount::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgIntegralCount::~MsgIntegralCount() {
  // @@protoc_insertion_point(destructor:MsgIntegralCount)
  SharedDtor();
}

void MsgIntegralCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgIntegralCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgIntegralCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgIntegralCount_descriptor_;
}

const MsgIntegralCount& MsgIntegralCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgIntegralCount* MsgIntegralCount::default_instance_ = NULL;

MsgIntegralCount* MsgIntegralCount::New() const {
  return new MsgIntegralCount;
}

void MsgIntegralCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgIntegralCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgIntegralCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgIntegralCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgIntegralCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgIntegralCount)
  return false;
#undef DO_
}

void MsgIntegralCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgIntegralCount)
}

::google::protobuf::uint8* MsgIntegralCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgIntegralCount)
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgIntegralCount)
  return target;
}

int MsgIntegralCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgIntegralCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgIntegralCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgIntegralCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgIntegralCount::MergeFrom(const MsgIntegralCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgIntegralCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgIntegralCount::CopyFrom(const MsgIntegralCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIntegralCount::IsInitialized() const {

  return true;
}

void MsgIntegralCount::Swap(MsgIntegralCount* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgIntegralCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgIntegralCount_descriptor_;
  metadata.reflection = MsgIntegralCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStatisticsEvent::kEventIdFieldNumber;
const int MsgStatisticsEvent::kCountFieldNumber;
#endif  // !_MSC_VER

MsgStatisticsEvent::MsgStatisticsEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgStatisticsEvent)
}

void MsgStatisticsEvent::InitAsDefaultInstance() {
}

MsgStatisticsEvent::MsgStatisticsEvent(const MsgStatisticsEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgStatisticsEvent)
}

void MsgStatisticsEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 1;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStatisticsEvent::~MsgStatisticsEvent() {
  // @@protoc_insertion_point(destructor:MsgStatisticsEvent)
  SharedDtor();
}

void MsgStatisticsEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStatisticsEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStatisticsEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStatisticsEvent_descriptor_;
}

const MsgStatisticsEvent& MsgStatisticsEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgStatisticsEvent* MsgStatisticsEvent::default_instance_ = NULL;

MsgStatisticsEvent* MsgStatisticsEvent::New() const {
  return new MsgStatisticsEvent;
}

void MsgStatisticsEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    event_id_ = 1;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStatisticsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgStatisticsEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TStatisticsEvent event_id = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TStatisticsEvent_IsValid(value)) {
            set_event_id(static_cast< ::TStatisticsEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgStatisticsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgStatisticsEvent)
  return false;
#undef DO_
}

void MsgStatisticsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgStatisticsEvent)
  // optional .TStatisticsEvent event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_id(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgStatisticsEvent)
}

::google::protobuf::uint8* MsgStatisticsEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgStatisticsEvent)
  // optional .TStatisticsEvent event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_id(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgStatisticsEvent)
  return target;
}

int MsgStatisticsEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TStatisticsEvent event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStatisticsEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStatisticsEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStatisticsEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStatisticsEvent::MergeFrom(const MsgStatisticsEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStatisticsEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStatisticsEvent::CopyFrom(const MsgStatisticsEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStatisticsEvent::IsInitialized() const {

  return true;
}

void MsgStatisticsEvent::Swap(MsgStatisticsEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStatisticsEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStatisticsEvent_descriptor_;
  metadata.reflection = MsgStatisticsEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStatisticsEventList::kRoelIdFieldNumber;
const int MsgStatisticsEventList::kEventListFieldNumber;
#endif  // !_MSC_VER

MsgStatisticsEventList::MsgStatisticsEventList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgStatisticsEventList)
}

void MsgStatisticsEventList::InitAsDefaultInstance() {
}

MsgStatisticsEventList::MsgStatisticsEventList(const MsgStatisticsEventList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgStatisticsEventList)
}

void MsgStatisticsEventList::SharedCtor() {
  _cached_size_ = 0;
  roel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStatisticsEventList::~MsgStatisticsEventList() {
  // @@protoc_insertion_point(destructor:MsgStatisticsEventList)
  SharedDtor();
}

void MsgStatisticsEventList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStatisticsEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStatisticsEventList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStatisticsEventList_descriptor_;
}

const MsgStatisticsEventList& MsgStatisticsEventList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgStatisticsEventList* MsgStatisticsEventList::default_instance_ = NULL;

MsgStatisticsEventList* MsgStatisticsEventList::New() const {
  return new MsgStatisticsEventList;
}

void MsgStatisticsEventList::Clear() {
  roel_id_ = GOOGLE_ULONGLONG(0);
  event_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStatisticsEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgStatisticsEventList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roel_id_)));
          set_has_roel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_list;
        break;
      }

      // repeated .MsgStatisticsEvent event_list = 2;
      case 2: {
        if (tag == 18) {
         parse_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_event_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgStatisticsEventList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgStatisticsEventList)
  return false;
#undef DO_
}

void MsgStatisticsEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgStatisticsEventList)
  // optional uint64 roel_id = 1;
  if (has_roel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roel_id(), output);
  }

  // repeated .MsgStatisticsEvent event_list = 2;
  for (int i = 0; i < this->event_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgStatisticsEventList)
}

::google::protobuf::uint8* MsgStatisticsEventList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgStatisticsEventList)
  // optional uint64 roel_id = 1;
  if (has_roel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roel_id(), target);
  }

  // repeated .MsgStatisticsEvent event_list = 2;
  for (int i = 0; i < this->event_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgStatisticsEventList)
  return target;
}

int MsgStatisticsEventList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roel_id = 1;
    if (has_roel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roel_id());
    }

  }
  // repeated .MsgStatisticsEvent event_list = 2;
  total_size += 1 * this->event_list_size();
  for (int i = 0; i < this->event_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStatisticsEventList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStatisticsEventList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStatisticsEventList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStatisticsEventList::MergeFrom(const MsgStatisticsEventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_list_.MergeFrom(from.event_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roel_id()) {
      set_roel_id(from.roel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStatisticsEventList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStatisticsEventList::CopyFrom(const MsgStatisticsEventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStatisticsEventList::IsInitialized() const {

  return true;
}

void MsgStatisticsEventList::Swap(MsgStatisticsEventList* other) {
  if (other != this) {
    std::swap(roel_id_, other->roel_id_);
    event_list_.Swap(&other->event_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStatisticsEventList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStatisticsEventList_descriptor_;
  metadata.reflection = MsgStatisticsEventList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShowDownCount::kShowdownListFieldNumber;
const int MsgShowDownCount::kRoomStateFieldNumber;
const int MsgShowDownCount::kGameCountFieldNumber;
const int MsgShowDownCount::kGameOverFieldNumber;
const int MsgShowDownCount::kOtherCardFieldNumber;
const int MsgShowDownCount::kOtherCountFieldNumber;
const int MsgShowDownCount::kTimeFieldNumber;
const int MsgShowDownCount::kParam1FieldNumber;
const int MsgShowDownCount::kHuStateFieldNumber;
const int MsgShowDownCount::kIntegralListFieldNumber;
const int MsgShowDownCount::kEventListFieldNumber;
#endif  // !_MSC_VER

MsgShowDownCount::MsgShowDownCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShowDownCount)
}

void MsgShowDownCount::InitAsDefaultInstance() {
}

MsgShowDownCount::MsgShowDownCount(const MsgShowDownCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShowDownCount)
}

void MsgShowDownCount::SharedCtor() {
  _cached_size_ = 0;
  room_state_ = 0;
  game_count_ = 0u;
  game_over_ = false;
  other_count_ = 0u;
  time_ = 0u;
  param1_ = 0u;
  hu_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShowDownCount::~MsgShowDownCount() {
  // @@protoc_insertion_point(destructor:MsgShowDownCount)
  SharedDtor();
}

void MsgShowDownCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgShowDownCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShowDownCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShowDownCount_descriptor_;
}

const MsgShowDownCount& MsgShowDownCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgShowDownCount* MsgShowDownCount::default_instance_ = NULL;

MsgShowDownCount* MsgShowDownCount::New() const {
  return new MsgShowDownCount;
}

void MsgShowDownCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgShowDownCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 238) {
    ZR_(room_state_, game_count_);
    ZR_(game_over_, param1_);
  }
  hu_state_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  showdown_list_.Clear();
  other_card_.Clear();
  integral_list_.Clear();
  event_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShowDownCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShowDownCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgShowDown showdown_list = 1;
      case 1: {
        if (tag == 10) {
         parse_showdown_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showdown_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_showdown_list;
        if (input->ExpectTag(16)) goto parse_room_state;
        break;
      }

      // optional .TMahJongState room_state = 2;
      case 2: {
        if (tag == 16) {
         parse_room_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMahJongState_IsValid(value)) {
            set_room_state(static_cast< ::TMahJongState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_count;
        break;
      }

      // optional uint32 game_count = 3;
      case 3: {
        if (tag == 24) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_over;
        break;
      }

      // optional bool game_over = 4;
      case 4: {
        if (tag == 32) {
         parse_game_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &game_over_)));
          set_has_game_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_other_card;
        break;
      }

      // repeated uint32 other_card = 5;
      case 5: {
        if (tag == 40) {
         parse_other_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_other_card())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_other_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_other_card;
        if (input->ExpectTag(48)) goto parse_other_count;
        break;
      }

      // optional uint32 other_count = 6;
      case 6: {
        if (tag == 48) {
         parse_other_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_count_)));
          set_has_other_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 8;
      case 8: {
        if (tag == 64) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hu_state;
        break;
      }

      // optional uint32 hu_state = 9;
      case 9: {
        if (tag == 72) {
         parse_hu_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_state_)));
          set_has_hu_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_integral_list;
        break;
      }

      // repeated .MsgIntegralCount integral_list = 10;
      case 10: {
        if (tag == 82) {
         parse_integral_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_integral_list;
        if (input->ExpectTag(90)) goto parse_event_list;
        break;
      }

      // repeated .MsgStatisticsEventList event_list = 11;
      case 11: {
        if (tag == 90) {
         parse_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_event_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShowDownCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShowDownCount)
  return false;
#undef DO_
}

void MsgShowDownCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShowDownCount)
  // repeated .MsgShowDown showdown_list = 1;
  for (int i = 0; i < this->showdown_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showdown_list(i), output);
  }

  // optional .TMahJongState room_state = 2;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_state(), output);
  }

  // optional uint32 game_count = 3;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_count(), output);
  }

  // optional bool game_over = 4;
  if (has_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->game_over(), output);
  }

  // repeated uint32 other_card = 5;
  for (int i = 0; i < this->other_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->other_card(i), output);
  }

  // optional uint32 other_count = 6;
  if (has_other_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->other_count(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint32 param1 = 8;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->param1(), output);
  }

  // optional uint32 hu_state = 9;
  if (has_hu_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hu_state(), output);
  }

  // repeated .MsgIntegralCount integral_list = 10;
  for (int i = 0; i < this->integral_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->integral_list(i), output);
  }

  // repeated .MsgStatisticsEventList event_list = 11;
  for (int i = 0; i < this->event_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->event_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShowDownCount)
}

::google::protobuf::uint8* MsgShowDownCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShowDownCount)
  // repeated .MsgShowDown showdown_list = 1;
  for (int i = 0; i < this->showdown_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showdown_list(i), target);
  }

  // optional .TMahJongState room_state = 2;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_state(), target);
  }

  // optional uint32 game_count = 3;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_count(), target);
  }

  // optional bool game_over = 4;
  if (has_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->game_over(), target);
  }

  // repeated uint32 other_card = 5;
  for (int i = 0; i < this->other_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->other_card(i), target);
  }

  // optional uint32 other_count = 6;
  if (has_other_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->other_count(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint32 param1 = 8;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->param1(), target);
  }

  // optional uint32 hu_state = 9;
  if (has_hu_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hu_state(), target);
  }

  // repeated .MsgIntegralCount integral_list = 10;
  for (int i = 0; i < this->integral_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->integral_list(i), target);
  }

  // repeated .MsgStatisticsEventList event_list = 11;
  for (int i = 0; i < this->event_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->event_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShowDownCount)
  return target;
}

int MsgShowDownCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TMahJongState room_state = 2;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional uint32 game_count = 3;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_count());
    }

    // optional bool game_over = 4;
    if (has_game_over()) {
      total_size += 1 + 1;
    }

    // optional uint32 other_count = 6;
    if (has_other_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_count());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 param1 = 8;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hu_state = 9;
    if (has_hu_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_state());
    }

  }
  // repeated .MsgShowDown showdown_list = 1;
  total_size += 1 * this->showdown_list_size();
  for (int i = 0; i < this->showdown_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showdown_list(i));
  }

  // repeated uint32 other_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->other_card(i));
    }
    total_size += 1 * this->other_card_size() + data_size;
  }

  // repeated .MsgIntegralCount integral_list = 10;
  total_size += 1 * this->integral_list_size();
  for (int i = 0; i < this->integral_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_list(i));
  }

  // repeated .MsgStatisticsEventList event_list = 11;
  total_size += 1 * this->event_list_size();
  for (int i = 0; i < this->event_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShowDownCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShowDownCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShowDownCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShowDownCount::MergeFrom(const MsgShowDownCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  showdown_list_.MergeFrom(from.showdown_list_);
  other_card_.MergeFrom(from.other_card_);
  integral_list_.MergeFrom(from.integral_list_);
  event_list_.MergeFrom(from.event_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_game_over()) {
      set_game_over(from.game_over());
    }
    if (from.has_other_count()) {
      set_other_count(from.other_count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hu_state()) {
      set_hu_state(from.hu_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShowDownCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShowDownCount::CopyFrom(const MsgShowDownCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShowDownCount::IsInitialized() const {

  return true;
}

void MsgShowDownCount::Swap(MsgShowDownCount* other) {
  if (other != this) {
    showdown_list_.Swap(&other->showdown_list_);
    std::swap(room_state_, other->room_state_);
    std::swap(game_count_, other->game_count_);
    std::swap(game_over_, other->game_over_);
    other_card_.Swap(&other->other_card_);
    std::swap(other_count_, other->other_count_);
    std::swap(time_, other->time_);
    std::swap(param1_, other->param1_);
    std::swap(hu_state_, other->hu_state_);
    integral_list_.Swap(&other->integral_list_);
    event_list_.Swap(&other->event_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShowDownCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShowDownCount_descriptor_;
  metadata.reflection = MsgShowDownCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShowMaxFlower::kWeaveListFieldNumber;
const int MsgShowMaxFlower::kHuKindFieldNumber;
const int MsgShowMaxFlower::kHandCardFieldNumber;
const int MsgShowMaxFlower::kFlowerCardFieldNumber;
const int MsgShowMaxFlower::kBaseFlowerFieldNumber;
const int MsgShowMaxFlower::kHardFlowerFieldNumber;
const int MsgShowMaxFlower::kMildFlowerFieldNumber;
const int MsgShowMaxFlower::kBaoTaFlowerFieldNumber;
const int MsgShowMaxFlower::kHuCardFieldNumber;
#endif  // !_MSC_VER

MsgShowMaxFlower::MsgShowMaxFlower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgShowMaxFlower)
}

void MsgShowMaxFlower::InitAsDefaultInstance() {
}

MsgShowMaxFlower::MsgShowMaxFlower(const MsgShowMaxFlower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgShowMaxFlower)
}

void MsgShowMaxFlower::SharedCtor() {
  _cached_size_ = 0;
  hu_kind_ = 0u;
  base_flower_ = 0u;
  hard_flower_ = 0u;
  mild_flower_ = 0u;
  bao_ta_flower_ = 0u;
  hu_card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShowMaxFlower::~MsgShowMaxFlower() {
  // @@protoc_insertion_point(destructor:MsgShowMaxFlower)
  SharedDtor();
}

void MsgShowMaxFlower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgShowMaxFlower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShowMaxFlower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShowMaxFlower_descriptor_;
}

const MsgShowMaxFlower& MsgShowMaxFlower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgShowMaxFlower* MsgShowMaxFlower::default_instance_ = NULL;

MsgShowMaxFlower* MsgShowMaxFlower::New() const {
  return new MsgShowMaxFlower;
}

void MsgShowMaxFlower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgShowMaxFlower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 242) {
    ZR_(hu_kind_, base_flower_);
    ZR_(hard_flower_, bao_ta_flower_);
  }
  hu_card_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  weave_list_.Clear();
  hand_card_.Clear();
  flower_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShowMaxFlower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgShowMaxFlower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgCardData weave_list = 1;
      case 1: {
        if (tag == 10) {
         parse_weave_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weave_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_weave_list;
        if (input->ExpectTag(16)) goto parse_hu_kind;
        break;
      }

      // optional uint32 hu_kind = 2;
      case 2: {
        if (tag == 16) {
         parse_hu_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_kind_)));
          set_has_hu_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hand_card())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_card;
        if (input->ExpectTag(32)) goto parse_flower_card;
        break;
      }

      // repeated uint32 flower_card = 4;
      case 4: {
        if (tag == 32) {
         parse_flower_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_flower_card())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_flower_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flower_card;
        if (input->ExpectTag(40)) goto parse_base_flower;
        break;
      }

      // optional uint32 base_flower = 5;
      case 5: {
        if (tag == 40) {
         parse_base_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_flower_)));
          set_has_base_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hard_flower;
        break;
      }

      // optional uint32 hard_flower = 6;
      case 6: {
        if (tag == 48) {
         parse_hard_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hard_flower_)));
          set_has_hard_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mild_flower;
        break;
      }

      // optional uint32 mild_flower = 7;
      case 7: {
        if (tag == 56) {
         parse_mild_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mild_flower_)));
          set_has_mild_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bao_ta_flower;
        break;
      }

      // optional uint32 bao_ta_flower = 8;
      case 8: {
        if (tag == 64) {
         parse_bao_ta_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bao_ta_flower_)));
          set_has_bao_ta_flower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hu_card;
        break;
      }

      // optional uint32 hu_card = 9;
      case 9: {
        if (tag == 72) {
         parse_hu_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_card_)));
          set_has_hu_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgShowMaxFlower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgShowMaxFlower)
  return false;
#undef DO_
}

void MsgShowMaxFlower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgShowMaxFlower)
  // repeated .MsgCardData weave_list = 1;
  for (int i = 0; i < this->weave_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weave_list(i), output);
  }

  // optional uint32 hu_kind = 2;
  if (has_hu_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hu_kind(), output);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hand_card(i), output);
  }

  // repeated uint32 flower_card = 4;
  for (int i = 0; i < this->flower_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->flower_card(i), output);
  }

  // optional uint32 base_flower = 5;
  if (has_base_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->base_flower(), output);
  }

  // optional uint32 hard_flower = 6;
  if (has_hard_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hard_flower(), output);
  }

  // optional uint32 mild_flower = 7;
  if (has_mild_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mild_flower(), output);
  }

  // optional uint32 bao_ta_flower = 8;
  if (has_bao_ta_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bao_ta_flower(), output);
  }

  // optional uint32 hu_card = 9;
  if (has_hu_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hu_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgShowMaxFlower)
}

::google::protobuf::uint8* MsgShowMaxFlower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgShowMaxFlower)
  // repeated .MsgCardData weave_list = 1;
  for (int i = 0; i < this->weave_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weave_list(i), target);
  }

  // optional uint32 hu_kind = 2;
  if (has_hu_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hu_kind(), target);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hand_card(i), target);
  }

  // repeated uint32 flower_card = 4;
  for (int i = 0; i < this->flower_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->flower_card(i), target);
  }

  // optional uint32 base_flower = 5;
  if (has_base_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->base_flower(), target);
  }

  // optional uint32 hard_flower = 6;
  if (has_hard_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hard_flower(), target);
  }

  // optional uint32 mild_flower = 7;
  if (has_mild_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mild_flower(), target);
  }

  // optional uint32 bao_ta_flower = 8;
  if (has_bao_ta_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bao_ta_flower(), target);
  }

  // optional uint32 hu_card = 9;
  if (has_hu_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hu_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgShowMaxFlower)
  return target;
}

int MsgShowMaxFlower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 hu_kind = 2;
    if (has_hu_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_kind());
    }

    // optional uint32 base_flower = 5;
    if (has_base_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_flower());
    }

    // optional uint32 hard_flower = 6;
    if (has_hard_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hard_flower());
    }

    // optional uint32 mild_flower = 7;
    if (has_mild_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mild_flower());
    }

    // optional uint32 bao_ta_flower = 8;
    if (has_bao_ta_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bao_ta_flower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hu_card = 9;
    if (has_hu_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_card());
    }

  }
  // repeated .MsgCardData weave_list = 1;
  total_size += 1 * this->weave_list_size();
  for (int i = 0; i < this->weave_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weave_list(i));
  }

  // repeated uint32 hand_card = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated uint32 flower_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->flower_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->flower_card(i));
    }
    total_size += 1 * this->flower_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShowMaxFlower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShowMaxFlower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShowMaxFlower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShowMaxFlower::MergeFrom(const MsgShowMaxFlower& from) {
  GOOGLE_CHECK_NE(&from, this);
  weave_list_.MergeFrom(from.weave_list_);
  hand_card_.MergeFrom(from.hand_card_);
  flower_card_.MergeFrom(from.flower_card_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hu_kind()) {
      set_hu_kind(from.hu_kind());
    }
    if (from.has_base_flower()) {
      set_base_flower(from.base_flower());
    }
    if (from.has_hard_flower()) {
      set_hard_flower(from.hard_flower());
    }
    if (from.has_mild_flower()) {
      set_mild_flower(from.mild_flower());
    }
    if (from.has_bao_ta_flower()) {
      set_bao_ta_flower(from.bao_ta_flower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hu_card()) {
      set_hu_card(from.hu_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShowMaxFlower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShowMaxFlower::CopyFrom(const MsgShowMaxFlower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShowMaxFlower::IsInitialized() const {

  return true;
}

void MsgShowMaxFlower::Swap(MsgShowMaxFlower* other) {
  if (other != this) {
    weave_list_.Swap(&other->weave_list_);
    std::swap(hu_kind_, other->hu_kind_);
    hand_card_.Swap(&other->hand_card_);
    flower_card_.Swap(&other->flower_card_);
    std::swap(base_flower_, other->base_flower_);
    std::swap(hard_flower_, other->hard_flower_);
    std::swap(mild_flower_, other->mild_flower_);
    std::swap(bao_ta_flower_, other->bao_ta_flower_);
    std::swap(hu_card_, other->hu_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShowMaxFlower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShowMaxFlower_descriptor_;
  metadata.reflection = MsgShowMaxFlower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRoleCathecticCount::kRoleIdFieldNumber;
const int MsgRoleCathecticCount::kCathecticCountFieldNumber;
#endif  // !_MSC_VER

MsgRoleCathecticCount::MsgRoleCathecticCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgRoleCathecticCount)
}

void MsgRoleCathecticCount::InitAsDefaultInstance() {
}

MsgRoleCathecticCount::MsgRoleCathecticCount(const MsgRoleCathecticCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgRoleCathecticCount)
}

void MsgRoleCathecticCount::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  cathectic_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleCathecticCount::~MsgRoleCathecticCount() {
  // @@protoc_insertion_point(destructor:MsgRoleCathecticCount)
  SharedDtor();
}

void MsgRoleCathecticCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgRoleCathecticCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRoleCathecticCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRoleCathecticCount_descriptor_;
}

const MsgRoleCathecticCount& MsgRoleCathecticCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgRoleCathecticCount* MsgRoleCathecticCount::default_instance_ = NULL;

MsgRoleCathecticCount* MsgRoleCathecticCount::New() const {
  return new MsgRoleCathecticCount;
}

void MsgRoleCathecticCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgRoleCathecticCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, cathectic_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRoleCathecticCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgRoleCathecticCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cathectic_count;
        break;
      }

      // optional uint32 cathectic_count = 2;
      case 2: {
        if (tag == 16) {
         parse_cathectic_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cathectic_count_)));
          set_has_cathectic_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgRoleCathecticCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgRoleCathecticCount)
  return false;
#undef DO_
}

void MsgRoleCathecticCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgRoleCathecticCount)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 cathectic_count = 2;
  if (has_cathectic_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cathectic_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgRoleCathecticCount)
}

::google::protobuf::uint8* MsgRoleCathecticCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRoleCathecticCount)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 cathectic_count = 2;
  if (has_cathectic_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cathectic_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRoleCathecticCount)
  return target;
}

int MsgRoleCathecticCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 cathectic_count = 2;
    if (has_cathectic_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cathectic_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleCathecticCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRoleCathecticCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRoleCathecticCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRoleCathecticCount::MergeFrom(const MsgRoleCathecticCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_cathectic_count()) {
      set_cathectic_count(from.cathectic_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRoleCathecticCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRoleCathecticCount::CopyFrom(const MsgRoleCathecticCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleCathecticCount::IsInitialized() const {

  return true;
}

void MsgRoleCathecticCount::Swap(MsgRoleCathecticCount* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(cathectic_count_, other->cathectic_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRoleCathecticCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRoleCathecticCount_descriptor_;
  metadata.reflection = MsgRoleCathecticCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTickCathetic::kRoleIdFieldNumber;
const int MsgTickCathetic::kCathecticCountFieldNumber;
const int MsgTickCathetic::kStateFieldNumber;
#endif  // !_MSC_VER

MsgTickCathetic::MsgTickCathetic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgTickCathetic)
}

void MsgTickCathetic::InitAsDefaultInstance() {
}

MsgTickCathetic::MsgTickCathetic(const MsgTickCathetic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgTickCathetic)
}

void MsgTickCathetic::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  cathectic_count_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTickCathetic::~MsgTickCathetic() {
  // @@protoc_insertion_point(destructor:MsgTickCathetic)
  SharedDtor();
}

void MsgTickCathetic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTickCathetic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTickCathetic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTickCathetic_descriptor_;
}

const MsgTickCathetic& MsgTickCathetic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgTickCathetic* MsgTickCathetic::default_instance_ = NULL;

MsgTickCathetic* MsgTickCathetic::New() const {
  return new MsgTickCathetic;
}

void MsgTickCathetic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgTickCathetic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTickCathetic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgTickCathetic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cathectic_count;
        break;
      }

      // optional uint32 cathectic_count = 2;
      case 2: {
        if (tag == 16) {
         parse_cathectic_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cathectic_count_)));
          set_has_cathectic_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgTickCathetic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgTickCathetic)
  return false;
#undef DO_
}

void MsgTickCathetic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgTickCathetic)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 cathectic_count = 2;
  if (has_cathectic_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cathectic_count(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgTickCathetic)
}

::google::protobuf::uint8* MsgTickCathetic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTickCathetic)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 cathectic_count = 2;
  if (has_cathectic_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cathectic_count(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTickCathetic)
  return target;
}

int MsgTickCathetic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 cathectic_count = 2;
    if (has_cathectic_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cathectic_count());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTickCathetic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTickCathetic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTickCathetic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTickCathetic::MergeFrom(const MsgTickCathetic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_cathectic_count()) {
      set_cathectic_count(from.cathectic_count());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTickCathetic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTickCathetic::CopyFrom(const MsgTickCathetic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTickCathetic::IsInitialized() const {

  return true;
}

void MsgTickCathetic::Swap(MsgTickCathetic* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(cathectic_count_, other->cathectic_count_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTickCathetic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTickCathetic_descriptor_;
  metadata.reflection = MsgTickCathetic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgContract::kContractorFieldNumber;
const int MsgContract::kContractedFieldNumber;
#endif  // !_MSC_VER

MsgContract::MsgContract()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgContract)
}

void MsgContract::InitAsDefaultInstance() {
}

MsgContract::MsgContract(const MsgContract& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgContract)
}

void MsgContract::SharedCtor() {
  _cached_size_ = 0;
  contractor_ = GOOGLE_ULONGLONG(0);
  contracted_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgContract::~MsgContract() {
  // @@protoc_insertion_point(destructor:MsgContract)
  SharedDtor();
}

void MsgContract::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgContract::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgContract::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgContract_descriptor_;
}

const MsgContract& MsgContract::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgContract* MsgContract::default_instance_ = NULL;

MsgContract* MsgContract::New() const {
  return new MsgContract;
}

void MsgContract::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgContract*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(contractor_, contracted_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgContract)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 contractor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &contractor_)));
          set_has_contractor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_contracted;
        break;
      }

      // optional uint64 contracted = 2;
      case 2: {
        if (tag == 16) {
         parse_contracted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &contracted_)));
          set_has_contracted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgContract)
  return false;
#undef DO_
}

void MsgContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgContract)
  // optional uint64 contractor = 1;
  if (has_contractor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->contractor(), output);
  }

  // optional uint64 contracted = 2;
  if (has_contracted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->contracted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgContract)
}

::google::protobuf::uint8* MsgContract::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgContract)
  // optional uint64 contractor = 1;
  if (has_contractor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->contractor(), target);
  }

  // optional uint64 contracted = 2;
  if (has_contracted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->contracted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgContract)
  return target;
}

int MsgContract::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 contractor = 1;
    if (has_contractor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->contractor());
    }

    // optional uint64 contracted = 2;
    if (has_contracted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->contracted());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgContract::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgContract* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgContract*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgContract::MergeFrom(const MsgContract& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contractor()) {
      set_contractor(from.contractor());
    }
    if (from.has_contracted()) {
      set_contracted(from.contracted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgContract::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgContract::CopyFrom(const MsgContract& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgContract::IsInitialized() const {

  return true;
}

void MsgContract::Swap(MsgContract* other) {
  if (other != this) {
    std::swap(contractor_, other->contractor_);
    std::swap(contracted_, other->contracted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgContract::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgContract_descriptor_;
  metadata.reflection = MsgContract_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgContractResult::kRoleIdFieldNumber;
const int MsgContractResult::kResultFieldNumber;
#endif  // !_MSC_VER

MsgContractResult::MsgContractResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgContractResult)
}

void MsgContractResult::InitAsDefaultInstance() {
}

MsgContractResult::MsgContractResult(const MsgContractResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgContractResult)
}

void MsgContractResult::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgContractResult::~MsgContractResult() {
  // @@protoc_insertion_point(destructor:MsgContractResult)
  SharedDtor();
}

void MsgContractResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgContractResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgContractResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgContractResult_descriptor_;
}

const MsgContractResult& MsgContractResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgContractResult* MsgContractResult::default_instance_ = NULL;

MsgContractResult* MsgContractResult::New() const {
  return new MsgContractResult;
}

void MsgContractResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgContractResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgContractResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgContractResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgContractResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgContractResult)
  return false;
#undef DO_
}

void MsgContractResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgContractResult)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgContractResult)
}

::google::protobuf::uint8* MsgContractResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgContractResult)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgContractResult)
  return target;
}

int MsgContractResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgContractResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgContractResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgContractResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgContractResult::MergeFrom(const MsgContractResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgContractResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgContractResult::CopyFrom(const MsgContractResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgContractResult::IsInitialized() const {

  return true;
}

void MsgContractResult::Swap(MsgContractResult* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgContractResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgContractResult_descriptor_;
  metadata.reflection = MsgContractResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAnXiao::kIdFieldNumber;
const int MsgAnXiao::kSignFieldNumber;
#endif  // !_MSC_VER

MsgAnXiao::MsgAnXiao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgAnXiao)
}

void MsgAnXiao::InitAsDefaultInstance() {
}

MsgAnXiao::MsgAnXiao(const MsgAnXiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgAnXiao)
}

void MsgAnXiao::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  sign_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAnXiao::~MsgAnXiao() {
  // @@protoc_insertion_point(destructor:MsgAnXiao)
  SharedDtor();
}

void MsgAnXiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAnXiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAnXiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAnXiao_descriptor_;
}

const MsgAnXiao& MsgAnXiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgAnXiao* MsgAnXiao::default_instance_ = NULL;

MsgAnXiao* MsgAnXiao::New() const {
  return new MsgAnXiao;
}

void MsgAnXiao::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgAnXiao*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, sign_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAnXiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgAnXiao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign;
        break;
      }

      // optional bool sign = 2;
      case 2: {
        if (tag == 16) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sign_)));
          set_has_sign();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgAnXiao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgAnXiao)
  return false;
#undef DO_
}

void MsgAnXiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgAnXiao)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bool sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgAnXiao)
}

::google::protobuf::uint8* MsgAnXiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgAnXiao)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bool sign = 2;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgAnXiao)
  return target;
}

int MsgAnXiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bool sign = 2;
    if (has_sign()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAnXiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAnXiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAnXiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAnXiao::MergeFrom(const MsgAnXiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAnXiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAnXiao::CopyFrom(const MsgAnXiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAnXiao::IsInitialized() const {

  return true;
}

void MsgAnXiao::Swap(MsgAnXiao* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAnXiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAnXiao_descriptor_;
  metadata.reflection = MsgAnXiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJiaCard::kIdFieldNumber;
const int MsgJiaCard::kCardFieldNumber;
#endif  // !_MSC_VER

MsgJiaCard::MsgJiaCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgJiaCard)
}

void MsgJiaCard::InitAsDefaultInstance() {
}

MsgJiaCard::MsgJiaCard(const MsgJiaCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgJiaCard)
}

void MsgJiaCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJiaCard::~MsgJiaCard() {
  // @@protoc_insertion_point(destructor:MsgJiaCard)
  SharedDtor();
}

void MsgJiaCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgJiaCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJiaCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJiaCard_descriptor_;
}

const MsgJiaCard& MsgJiaCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgJiaCard* MsgJiaCard::default_instance_ = NULL;

MsgJiaCard* MsgJiaCard::New() const {
  return new MsgJiaCard;
}

void MsgJiaCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgJiaCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, card_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJiaCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgJiaCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgJiaCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgJiaCard)
  return false;
#undef DO_
}

void MsgJiaCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgJiaCard)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgJiaCard)
}

::google::protobuf::uint8* MsgJiaCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgJiaCard)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgJiaCard)
  return target;
}

int MsgJiaCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJiaCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJiaCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJiaCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJiaCard::MergeFrom(const MsgJiaCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJiaCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJiaCard::CopyFrom(const MsgJiaCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJiaCard::IsInitialized() const {

  return true;
}

void MsgJiaCard::Swap(MsgJiaCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJiaCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJiaCard_descriptor_;
  metadata.reflection = MsgJiaCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgListenCard::kCardFieldNumber;
const int MsgListenCard::kListenCardFieldNumber;
#endif  // !_MSC_VER

MsgListenCard::MsgListenCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgListenCard)
}

void MsgListenCard::InitAsDefaultInstance() {
}

MsgListenCard::MsgListenCard(const MsgListenCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgListenCard)
}

void MsgListenCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgListenCard::~MsgListenCard() {
  // @@protoc_insertion_point(destructor:MsgListenCard)
  SharedDtor();
}

void MsgListenCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgListenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgListenCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgListenCard_descriptor_;
}

const MsgListenCard& MsgListenCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgListenCard* MsgListenCard::default_instance_ = NULL;

MsgListenCard* MsgListenCard::New() const {
  return new MsgListenCard;
}

void MsgListenCard::Clear() {
  card_ = 0u;
  listen_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgListenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgListenCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_listen_card;
        break;
      }

      // repeated uint32 listen_card = 2;
      case 2: {
        if (tag == 16) {
         parse_listen_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_listen_card())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_listen_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_listen_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgListenCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgListenCard)
  return false;
#undef DO_
}

void MsgListenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgListenCard)
  // optional uint32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card(), output);
  }

  // repeated uint32 listen_card = 2;
  for (int i = 0; i < this->listen_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->listen_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgListenCard)
}

::google::protobuf::uint8* MsgListenCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgListenCard)
  // optional uint32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card(), target);
  }

  // repeated uint32 listen_card = 2;
  for (int i = 0; i < this->listen_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->listen_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgListenCard)
  return target;
}

int MsgListenCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

  }
  // repeated uint32 listen_card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->listen_card(i));
    }
    total_size += 1 * this->listen_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgListenCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgListenCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgListenCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgListenCard::MergeFrom(const MsgListenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  listen_card_.MergeFrom(from.listen_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgListenCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgListenCard::CopyFrom(const MsgListenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgListenCard::IsInitialized() const {

  return true;
}

void MsgListenCard::Swap(MsgListenCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    listen_card_.Swap(&other->listen_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgListenCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgListenCard_descriptor_;
  metadata.reflection = MsgListenCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerQueMen::kQuemenListFieldNumber;
#endif  // !_MSC_VER

MsgPlayerQueMen::MsgPlayerQueMen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgPlayerQueMen)
}

void MsgPlayerQueMen::InitAsDefaultInstance() {
}

MsgPlayerQueMen::MsgPlayerQueMen(const MsgPlayerQueMen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgPlayerQueMen)
}

void MsgPlayerQueMen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerQueMen::~MsgPlayerQueMen() {
  // @@protoc_insertion_point(destructor:MsgPlayerQueMen)
  SharedDtor();
}

void MsgPlayerQueMen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerQueMen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerQueMen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerQueMen_descriptor_;
}

const MsgPlayerQueMen& MsgPlayerQueMen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgPlayerQueMen* MsgPlayerQueMen::default_instance_ = NULL;

MsgPlayerQueMen* MsgPlayerQueMen::New() const {
  return new MsgPlayerQueMen;
}

void MsgPlayerQueMen::Clear() {
  quemen_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerQueMen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgPlayerQueMen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgSelectQueMen quemen_list = 1;
      case 1: {
        if (tag == 10) {
         parse_quemen_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quemen_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_quemen_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgPlayerQueMen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgPlayerQueMen)
  return false;
#undef DO_
}

void MsgPlayerQueMen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgPlayerQueMen)
  // repeated .MsgSelectQueMen quemen_list = 1;
  for (int i = 0; i < this->quemen_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quemen_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgPlayerQueMen)
}

::google::protobuf::uint8* MsgPlayerQueMen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerQueMen)
  // repeated .MsgSelectQueMen quemen_list = 1;
  for (int i = 0; i < this->quemen_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quemen_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerQueMen)
  return target;
}

int MsgPlayerQueMen::ByteSize() const {
  int total_size = 0;

  // repeated .MsgSelectQueMen quemen_list = 1;
  total_size += 1 * this->quemen_list_size();
  for (int i = 0; i < this->quemen_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quemen_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerQueMen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerQueMen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerQueMen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerQueMen::MergeFrom(const MsgPlayerQueMen& from) {
  GOOGLE_CHECK_NE(&from, this);
  quemen_list_.MergeFrom(from.quemen_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerQueMen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerQueMen::CopyFrom(const MsgPlayerQueMen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerQueMen::IsInitialized() const {

  return true;
}

void MsgPlayerQueMen::Swap(MsgPlayerQueMen* other) {
  if (other != this) {
    quemen_list_.Swap(&other->quemen_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerQueMen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerQueMen_descriptor_;
  metadata.reflection = MsgPlayerQueMen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSelectQueMen::kIdFieldNumber;
const int MsgSelectQueMen::kColorFieldNumber;
#endif  // !_MSC_VER

MsgSelectQueMen::MsgSelectQueMen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSelectQueMen)
}

void MsgSelectQueMen::InitAsDefaultInstance() {
}

MsgSelectQueMen::MsgSelectQueMen(const MsgSelectQueMen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSelectQueMen)
}

void MsgSelectQueMen::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSelectQueMen::~MsgSelectQueMen() {
  // @@protoc_insertion_point(destructor:MsgSelectQueMen)
  SharedDtor();
}

void MsgSelectQueMen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSelectQueMen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSelectQueMen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSelectQueMen_descriptor_;
}

const MsgSelectQueMen& MsgSelectQueMen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgSelectQueMen* MsgSelectQueMen::default_instance_ = NULL;

MsgSelectQueMen* MsgSelectQueMen::New() const {
  return new MsgSelectQueMen;
}

void MsgSelectQueMen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSelectQueMen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, color_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSelectQueMen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSelectQueMen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional .TMahJongColor color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TMahJongColor_IsValid(value)) {
            set_color(static_cast< ::TMahJongColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSelectQueMen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSelectQueMen)
  return false;
#undef DO_
}

void MsgSelectQueMen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSelectQueMen)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .TMahJongColor color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSelectQueMen)
}

::google::protobuf::uint8* MsgSelectQueMen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSelectQueMen)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .TMahJongColor color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSelectQueMen)
  return target;
}

int MsgSelectQueMen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .TMahJongColor color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSelectQueMen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSelectQueMen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSelectQueMen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSelectQueMen::MergeFrom(const MsgSelectQueMen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSelectQueMen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSelectQueMen::CopyFrom(const MsgSelectQueMen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSelectQueMen::IsInitialized() const {

  return true;
}

void MsgSelectQueMen::Swap(MsgSelectQueMen* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSelectQueMen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSelectQueMen_descriptor_;
  metadata.reflection = MsgSelectQueMen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSelectThreeCard::kIdFieldNumber;
const int MsgSelectThreeCard::kSwapCardFieldNumber;
const int MsgSelectThreeCard::kHandCardFieldNumber;
const int MsgSelectThreeCard::kHandCountFieldNumber;
const int MsgSelectThreeCard::kOtherPlayerListFieldNumber;
#endif  // !_MSC_VER

MsgSelectThreeCard::MsgSelectThreeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSelectThreeCard)
}

void MsgSelectThreeCard::InitAsDefaultInstance() {
}

MsgSelectThreeCard::MsgSelectThreeCard(const MsgSelectThreeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSelectThreeCard)
}

void MsgSelectThreeCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  hand_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSelectThreeCard::~MsgSelectThreeCard() {
  // @@protoc_insertion_point(destructor:MsgSelectThreeCard)
  SharedDtor();
}

void MsgSelectThreeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSelectThreeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSelectThreeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSelectThreeCard_descriptor_;
}

const MsgSelectThreeCard& MsgSelectThreeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgSelectThreeCard* MsgSelectThreeCard::default_instance_ = NULL;

MsgSelectThreeCard* MsgSelectThreeCard::New() const {
  return new MsgSelectThreeCard;
}

void MsgSelectThreeCard::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    id_ = GOOGLE_ULONGLONG(0);
    hand_count_ = 0u;
  }
  swap_card_.Clear();
  hand_card_.Clear();
  other_player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSelectThreeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSelectThreeCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_swap_card;
        break;
      }

      // repeated uint32 swap_card = 2;
      case 2: {
        if (tag == 16) {
         parse_swap_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_swap_card())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_swap_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_swap_card;
        if (input->ExpectTag(24)) goto parse_hand_card;
        break;
      }

      // repeated uint32 hand_card = 3;
      case 3: {
        if (tag == 24) {
         parse_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hand_card())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hand_card;
        if (input->ExpectTag(32)) goto parse_hand_count;
        break;
      }

      // optional uint32 hand_count = 4;
      case 4: {
        if (tag == 32) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_other_player_list;
        break;
      }

      // repeated .MsgSwapFinish other_player_list = 5;
      case 5: {
        if (tag == 42) {
         parse_other_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_other_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSelectThreeCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSelectThreeCard)
  return false;
#undef DO_
}

void MsgSelectThreeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSelectThreeCard)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint32 swap_card = 2;
  for (int i = 0; i < this->swap_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->swap_card(i), output);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hand_card(i), output);
  }

  // optional uint32 hand_count = 4;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hand_count(), output);
  }

  // repeated .MsgSwapFinish other_player_list = 5;
  for (int i = 0; i < this->other_player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->other_player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSelectThreeCard)
}

::google::protobuf::uint8* MsgSelectThreeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSelectThreeCard)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 swap_card = 2;
  for (int i = 0; i < this->swap_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->swap_card(i), target);
  }

  // repeated uint32 hand_card = 3;
  for (int i = 0; i < this->hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hand_card(i), target);
  }

  // optional uint32 hand_count = 4;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hand_count(), target);
  }

  // repeated .MsgSwapFinish other_player_list = 5;
  for (int i = 0; i < this->other_player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->other_player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSelectThreeCard)
  return target;
}

int MsgSelectThreeCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 hand_count = 4;
    if (has_hand_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hand_count());
    }

  }
  // repeated uint32 swap_card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->swap_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->swap_card(i));
    }
    total_size += 1 * this->swap_card_size() + data_size;
  }

  // repeated uint32 hand_card = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card(i));
    }
    total_size += 1 * this->hand_card_size() + data_size;
  }

  // repeated .MsgSwapFinish other_player_list = 5;
  total_size += 1 * this->other_player_list_size();
  for (int i = 0; i < this->other_player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other_player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSelectThreeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSelectThreeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSelectThreeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSelectThreeCard::MergeFrom(const MsgSelectThreeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  swap_card_.MergeFrom(from.swap_card_);
  hand_card_.MergeFrom(from.hand_card_);
  other_player_list_.MergeFrom(from.other_player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSelectThreeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSelectThreeCard::CopyFrom(const MsgSelectThreeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSelectThreeCard::IsInitialized() const {

  return true;
}

void MsgSelectThreeCard::Swap(MsgSelectThreeCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    swap_card_.Swap(&other->swap_card_);
    hand_card_.Swap(&other->hand_card_);
    std::swap(hand_count_, other->hand_count_);
    other_player_list_.Swap(&other->other_player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSelectThreeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSelectThreeCard_descriptor_;
  metadata.reflection = MsgSelectThreeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSwapFinish::kRoleIdFieldNumber;
const int MsgSwapFinish::kCardCountFieldNumber;
#endif  // !_MSC_VER

MsgSwapFinish::MsgSwapFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSwapFinish)
}

void MsgSwapFinish::InitAsDefaultInstance() {
}

MsgSwapFinish::MsgSwapFinish(const MsgSwapFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSwapFinish)
}

void MsgSwapFinish::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  card_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSwapFinish::~MsgSwapFinish() {
  // @@protoc_insertion_point(destructor:MsgSwapFinish)
  SharedDtor();
}

void MsgSwapFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSwapFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSwapFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSwapFinish_descriptor_;
}

const MsgSwapFinish& MsgSwapFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fmahjong_2eproto();
  return *default_instance_;
}

MsgSwapFinish* MsgSwapFinish::default_instance_ = NULL;

MsgSwapFinish* MsgSwapFinish::New() const {
  return new MsgSwapFinish;
}

void MsgSwapFinish::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSwapFinish*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(role_id_, card_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSwapFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSwapFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card_count;
        break;
      }

      // optional uint32 card_count = 2;
      case 2: {
        if (tag == 16) {
         parse_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_count_)));
          set_has_card_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSwapFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSwapFinish)
  return false;
#undef DO_
}

void MsgSwapFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSwapFinish)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 card_count = 2;
  if (has_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSwapFinish)
}

::google::protobuf::uint8* MsgSwapFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSwapFinish)
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 card_count = 2;
  if (has_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSwapFinish)
  return target;
}

int MsgSwapFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 card_count = 2;
    if (has_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSwapFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSwapFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSwapFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSwapFinish::MergeFrom(const MsgSwapFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_card_count()) {
      set_card_count(from.card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSwapFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSwapFinish::CopyFrom(const MsgSwapFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSwapFinish::IsInitialized() const {

  return true;
}

void MsgSwapFinish::Swap(MsgSwapFinish* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(card_count_, other->card_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSwapFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSwapFinish_descriptor_;
  metadata.reflection = MsgSwapFinish_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
