// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: define_pro.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "define_pro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* TEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BlackJackEndingState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TSyncDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPlayerFlagBit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TKPIType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TChannel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TTissueState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TViewState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TRobotLuaEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TAchievementState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TAchievementConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumBonusGameEndType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumSlotsWinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumRoomState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMoneyFlow_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TRMBFlow_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TSex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMissionState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMahJongShowDownEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumItemUseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TCostType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TShopLabelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TSystemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TDotType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameConsumePay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameRoomKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameRunFastSpecialKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPaymentMechanism_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindShenYang_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindPingHu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindJiaXing_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindJiaShan_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindBaZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindWenAn_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindLangFangTwo_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindShengFang_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindHanDan_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindRuShan_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindRongCheng_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindTaiAn_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindNanFeng_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindHangZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TCardsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindQuZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindYunCheng_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindShanDong_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindYanTai_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindWuXi_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMahJonGCmdRecord_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindQinHuangDao_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindGuangDongTuiDaoHu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindBaoDing_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindDouDiZhu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindPSZ_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindTangShan_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindDingXing_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindLangFang_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindAnXin_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindQiaoDong_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialTangShanAnXiao_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialManCheng_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialGaoYang_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialJingZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialDaCheng_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindDongTai_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKingPingXiang_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialChess_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameGuanDanSpecial_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindQingHe_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindWuQiang_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindSiChuanZiYou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindDouShiSi_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindPengHu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindYiXian_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindDeZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindDongYing_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialTaocheng_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindNiuNiu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialSiChuanXueLiu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialBinZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialNanJing_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameRoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TCurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TClientEffects_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MAIL_CURRENCY_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindGanDengYan_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialDeZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialRenQiu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindQingEr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TGameSpecialKindCangZhou_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TQingErShowDownEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TQualifyingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TMatchLevel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_define_5fpro_2eproto() {
  protobuf_AddDesc_define_5fpro_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "define_pro.proto");
  GOOGLE_CHECK(file != NULL);
  TEvent_descriptor_ = file->enum_type(0);
  TConditionType_descriptor_ = file->enum_type(1);
  BlackJackEndingState_descriptor_ = file->enum_type(2);
  TSyncDataType_descriptor_ = file->enum_type(3);
  TErrorType_descriptor_ = file->enum_type(4);
  TPlayerFlagBit_descriptor_ = file->enum_type(5);
  TKPIType_descriptor_ = file->enum_type(6);
  TGameType_descriptor_ = file->enum_type(7);
  TChannel_descriptor_ = file->enum_type(8);
  TMailType_descriptor_ = file->enum_type(9);
  TTissueState_descriptor_ = file->enum_type(10);
  TViewState_descriptor_ = file->enum_type(11);
  TRobotLuaEvent_descriptor_ = file->enum_type(12);
  TAchievementState_descriptor_ = file->enum_type(13);
  TAchievementConditionType_descriptor_ = file->enum_type(14);
  EnumBonusGameEndType_descriptor_ = file->enum_type(15);
  EnumSlotsWinType_descriptor_ = file->enum_type(16);
  EnumRoomState_descriptor_ = file->enum_type(17);
  TMoneyFlow_descriptor_ = file->enum_type(18);
  TRMBFlow_descriptor_ = file->enum_type(19);
  TSex_descriptor_ = file->enum_type(20);
  TMissionState_descriptor_ = file->enum_type(21);
  TMahJongShowDownEvent_descriptor_ = file->enum_type(22);
  EnumItemUseType_descriptor_ = file->enum_type(23);
  TCostType_descriptor_ = file->enum_type(24);
  TShopLabelType_descriptor_ = file->enum_type(25);
  TSystemType_descriptor_ = file->enum_type(26);
  TDotType_descriptor_ = file->enum_type(27);
  TGameConsumePay_descriptor_ = file->enum_type(28);
  TGameRoomKind_descriptor_ = file->enum_type(29);
  TGameSpecialKind_descriptor_ = file->enum_type(30);
  TGameRunFastSpecialKind_descriptor_ = file->enum_type(31);
  TPaymentMechanism_descriptor_ = file->enum_type(32);
  TGameSpecialKindShenYang_descriptor_ = file->enum_type(33);
  TGameSpecialKindPingHu_descriptor_ = file->enum_type(34);
  TGameSpecialKindJiaXing_descriptor_ = file->enum_type(35);
  TGameSpecialKindJiaShan_descriptor_ = file->enum_type(36);
  TGameSpecialKindBaZhou_descriptor_ = file->enum_type(37);
  TGameSpecialKindWenAn_descriptor_ = file->enum_type(38);
  TGameSpecialKindLangFangTwo_descriptor_ = file->enum_type(39);
  TGameSpecialKindShengFang_descriptor_ = file->enum_type(40);
  TGameSpecialKindHanDan_descriptor_ = file->enum_type(41);
  TGameSpecialKindRuShan_descriptor_ = file->enum_type(42);
  TGameSpecialKindRongCheng_descriptor_ = file->enum_type(43);
  TGameSpecialKindTaiAn_descriptor_ = file->enum_type(44);
  TGameSpecialKindNanFeng_descriptor_ = file->enum_type(45);
  TGameSpecialKindHangZhou_descriptor_ = file->enum_type(46);
  TCardsType_descriptor_ = file->enum_type(47);
  TGameSpecialKindQuZhou_descriptor_ = file->enum_type(48);
  TGameSpecialKindYunCheng_descriptor_ = file->enum_type(49);
  TGameSpecialKindShanDong_descriptor_ = file->enum_type(50);
  TGameSpecialKindYanTai_descriptor_ = file->enum_type(51);
  TGameSpecialKindWuXi_descriptor_ = file->enum_type(52);
  TMahJonGCmdRecord_descriptor_ = file->enum_type(53);
  TGameSpecialKindQinHuangDao_descriptor_ = file->enum_type(54);
  TGameSpecialKindGuangDongTuiDaoHu_descriptor_ = file->enum_type(55);
  TGameSpecialKindBaoDing_descriptor_ = file->enum_type(56);
  TGameSpecialKindDouDiZhu_descriptor_ = file->enum_type(57);
  TGameSpecialKindPSZ_descriptor_ = file->enum_type(58);
  TGameSpecialKindTangShan_descriptor_ = file->enum_type(59);
  TGameSpecialKindDingXing_descriptor_ = file->enum_type(60);
  TGameSpecialKindLangFang_descriptor_ = file->enum_type(61);
  TGameSpecialKindAnXin_descriptor_ = file->enum_type(62);
  TGameSpecialKindQiaoDong_descriptor_ = file->enum_type(63);
  TGameSpecialTangShanAnXiao_descriptor_ = file->enum_type(64);
  TGameSpecialManCheng_descriptor_ = file->enum_type(65);
  TGameSpecialGaoYang_descriptor_ = file->enum_type(66);
  TGameSpecialJingZhou_descriptor_ = file->enum_type(67);
  TGameSpecialDaCheng_descriptor_ = file->enum_type(68);
  TGameSpecialKindDongTai_descriptor_ = file->enum_type(69);
  TGameSpecialKingPingXiang_descriptor_ = file->enum_type(70);
  TGameSpecialChess_descriptor_ = file->enum_type(71);
  TGameGuanDanSpecial_descriptor_ = file->enum_type(72);
  TPlayerState_descriptor_ = file->enum_type(73);
  TGameSpecialKindQingHe_descriptor_ = file->enum_type(74);
  TGameSpecialKindWuQiang_descriptor_ = file->enum_type(75);
  TGameSpecialKindSiChuanZiYou_descriptor_ = file->enum_type(76);
  TGameSpecialKindDouShiSi_descriptor_ = file->enum_type(77);
  TGameSpecialKindPengHu_descriptor_ = file->enum_type(78);
  TGameSpecialKindYiXian_descriptor_ = file->enum_type(79);
  TGameSpecialKindDeZhou_descriptor_ = file->enum_type(80);
  TGameSpecialKindDongYing_descriptor_ = file->enum_type(81);
  TGameSpecialTaocheng_descriptor_ = file->enum_type(82);
  TGameSpecialKindNiuNiu_descriptor_ = file->enum_type(83);
  TGameSpecialSiChuanXueLiu_descriptor_ = file->enum_type(84);
  TGameSpecialBinZhou_descriptor_ = file->enum_type(85);
  TGameSpecialNanJing_descriptor_ = file->enum_type(86);
  TGameRoomType_descriptor_ = file->enum_type(87);
  TItemType_descriptor_ = file->enum_type(88);
  TCurrencyType_descriptor_ = file->enum_type(89);
  TClientEffects_descriptor_ = file->enum_type(90);
  MAIL_CURRENCY_TYPE_descriptor_ = file->enum_type(91);
  TGameSpecialKindGanDengYan_descriptor_ = file->enum_type(92);
  TGameSpecialDeZhou_descriptor_ = file->enum_type(93);
  TGameSpecialRenQiu_descriptor_ = file->enum_type(94);
  TGameSpecialKindQingEr_descriptor_ = file->enum_type(95);
  TGameSpecialKindCangZhou_descriptor_ = file->enum_type(96);
  TQingErShowDownEvent_descriptor_ = file->enum_type(97);
  TQualifyingType_descriptor_ = file->enum_type(98);
  TMatchLevel_descriptor_ = file->enum_type(99);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_define_5fpro_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_define_5fpro_2eproto() {
}

void protobuf_AddDesc_define_5fpro_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020define_pro.proto*\315\003\n\006TEvent\022\020\n\014EventIn"
    "valid\020\000\022\022\n\016EventEnterGame\020\001\022\021\n\rEventPlay"
    "erUp\020\002\022\021\n\rEventJoinRoom\020\003\022\016\n\nEventLogin\020"
    "\004\022\025\n\021EventBlackJackWin\020\005\022\026\n\022EventBlackJa"
    "ckPush\020\006\022\026\n\022EventBlackJackLose\020\007\022\026\n\022Even"
    "tBlackJackBust\020\010\022\027\n\023EventBlackJackSplit\020"
    "\t\022\030\n\024EventBlackJackDouble\020\n\022\033\n\027EventBlac"
    "kJackInsurance\020\013\022\026\n\022EventChalBJTopRank\020\014"
    "\022\032\n\026EventBlackJackAddMoney\020\r\022\020\n\014EventRan"
    "king\020\016\022\021\n\rEventTotalPay\020\017\022\024\n\020EventInvite"
    "Fight\020\020\022\022\n\016EventAddFriend\020\021\022\022\n\016EventAddD"
    "onate\020\022\022\020\n\014EventAddBind\020\023\022\017\n\013EventAddRMB"
    "\020\024*\354\013\n\016TConditionType\022\020\n\014CondTInvalid\020\000\022"
    "\033\n\027CondTBlackJack_JoinRoom\020\001\022\027\n\023CondTBla"
    "ckJack_Game\020\002\022\026\n\022CondTBlackJack_Win\020\003\022\027\n"
    "\023CondTBlackJack_Push\020\004\022\027\n\023CondTBlackJack"
    "_Lose\020\005\022\027\n\023CondTBlackJack_Bust\020\006\022\030\n\024Cond"
    "TBlackJack_Split\020\007\022\031\n\025CondTBlackJack_Dou"
    "ble\020\010\022\034\n\030CondTBlackJack_Insurance\020\t\022 \n\034C"
    "ondTBlackJack_ChalBJTopRank\020\n\022$\n CondTBl"
    "ackJack_BlackJackAddMoney\020\013\022\020\n\014CondTRank"
    "ing\020\014\022\030\n\024CondTTexasPoker_Game\020\r\022\027\n\023CondT"
    "TexasPoker_Win\020\016\022\033\n\027CondTTexasPoker_Game"
    "Out\020\017\022\033\n\027CondTTexasPoker_AddPour\020\020\022\036\n\032Co"
    "ndTTexasPoker_AddPourWin\020\021\022\037\n\033CondTTexas"
    "Poker_AllFoldCard\020\022\022\022\n\016CondTSlot_Game\020\023\022"
    "\034\n\030CondTSlot_HorizontalLine\020\024\022\025\n\021CondTSl"
    "ot_WinCoin\020\025\022\034\n\030CondTTexasPoker_ChalGame"
    "\020\026\022\035\n\031CondTTexasPoker_ChalClose\020\027\022\034\n\030Con"
    "dTTexasPoker_ChalLose\020\030\022\034\n\030CondTTexasPok"
    "er_FoldCard\020\031\022\031\n\025CondTCasino_AddFriend\020\032"
    "\022\034\n\030CondTCasino_BindFacebook\020\033\022\032\n\026CondTC"
    "asino_ChangeName\020\034\022\035\n\031CondTCasino_Change"
    "Picture\020\035\022\030\n\024CondTCasino_GaveGift\020\036\022\034\n\030C"
    "ondTCasino_ReceivedGift\020\037\022\032\n\026CondTCasino"
    "_TotalMoney\020 \022\034\n\030CondTBlackJack_Less10Wi"
    "n\020!\022\030\n\024CondTSlot_TotalMoney\020\"\022\026\n\022CondTSl"
    "ot_ChalGame\020#\022\033\n\027CondTBlackJack_ChalGame"
    "\020$\022\026\n\022CondTMahjong_Score\020%\022\025\n\021CondTMahjo"
    "ng_Game\020&\022\024\n\020CondTMahjong_Win\020\'\022\030\n\024CondT"
    "Mahjong_Winning\020(\022\031\n\025CondTMahjong_WinMon"
    "ey\020)\022\032\n\026CondTMahjong_MaxFlower\020*\022\025\n\021Cond"
    "TMahjong_Shar\020+\022\031\n\025CondTMahjong_ChalGame"
    "\020,\022\030\n\024CondTMahjong_EatCard\020-\022\031\n\025CondTMah"
    "jong_PengCard\020.\022\031\n\025CondTMahjong_GangCard"
    "\020/\022\027\n\023CondTMahjong_HuCard\0200\022\024\n\020CondTCasi"
    "no_Like\0201\022\023\n\017CondTFish_Catch\0202\022\035\n\031CondTF"
    "ish_Appointed_Catch\0203\022\024\n\020CondTHorse_Bing"
    "o\0204\022\035\n\031CondTCasino_SendSplitGift\0205\022\023\n\017Co"
    "ndTNiuNiu_Win\0206\022\030\n\024CondTNiuNiu_WinMoney\020"
    "7*\232\001\n\024BlackJackEndingState\022\033\n\027BlackJackE"
    "nding_Invalid\020\000\022\027\n\023BlackJackEnding_Win\020\001"
    "\022\030\n\024BlackJackEnding_Push\020\002\022\030\n\024BlackJackE"
    "nding_Lose\020\003\022\030\n\024BlackJackEnding_Bust\020\004*\212"
    "\003\n\rTSyncDataType\022\027\n\023SYNC_LEADER_HERO_ID\020"
    "\000\022\022\n\016SYNC_ROLE_NAME\020\001\022\023\n\017SYNC_ROLE_LEVEL"
    "\020\002\022\033\n\027SYNC_FRIEND_FIGHT_COUNT\020\003\022\016\n\nSYNC_"
    "MONEY\020\004\022\022\n\016SYNC_ADD_MONEY\020\005\022\016\n\nSYNC_LEVE"
    "L\020\006\022\024\n\020SYNC_ARENA_COUNT\020\007\022\025\n\021SYNC_FRIEND"
    "_COUNT\020\010\022\020\n\014SYNC_ADD_RMB\020\t\022\023\n\017SYNC_ADD_F"
    "RIEND\020\n\022\022\n\016SYNC_ADD_BLACK\020\013\022\023\n\017SYNC_DEL_"
    "FRIEND\020\014\022\022\n\016SYNC_DEL_BLACK\020\r\022\022\n\016SYNC_PVP"
    "_SCORE\020\016\022\023\n\017SYNC_ROLE_STATE\020\017\022\026\n\022SYNC_AR"
    "ENA_RANKING\020\020\022\024\n\020SYNC_BUILD_LEVEL\020\021*\227+\n\n"
    "TErrorType\022\020\n\014INVALID_TYPE\020\000\022\022\n\016ACCOUNT_"
    "LOGGED\020\001\022\017\n\013SERVER_FULL\020\002\022\023\n\017SERVER_NOT_"
    "OPEN\020\003\022\017\n\013TEXT_SUCESS\020\004\022\r\n\tTEXT_FAIL\020\005\022\r"
    "\n\tPWD_ERROR\020\006\022\030\n\024PLAYER_ONLINE_TO_FES\020\007\022"
    "\021\n\rPLAYER_EXISTS\020\010\022\021\n\rPLAYER_RELOAD\020\t\022\021\n"
    "\rPLAYER_REMOVE\020\n\022\023\n\017GET_REWARD_TIME\020\013\022\021\n"
    "\rACCOUNT_ERROR\020\014\022\025\n\021NOT_FOUND_ACCOUNT\020\r\022"
    "\024\n\020NOT_FOUND_PLAYER\020\016\022\n\n\006SUCESS\020\017\022\020\n\014NO_"
    "AUTH_TYPE\020\020\022\024\n\020CONFIG_NOT_FOUND\020\021\022\024\n\020NOT"
    "_ENOUGH_MONEY\020\022\022\022\n\016NOT_ENOUGH_RMB\020\023\022\021\n\rM"
    "AIL_NOT_FIND\020\024\022\025\n\021CMAIL_NOTNEW_MAIL\020\025\022\023\n"
    "\017NOT_ENOUGH_COIN\020\026\022\036\n\032NOT_FOUND_REC_CHAM"
    "PIONSHIP\020\027\022\025\n\021SYSTEM_DATED_MAIL\020\030\022\025\n\021COM"
    "MON_DATED_MAIL\020\031\022\027\n\023COMMON_EXIST_REWARD\020"
    "\032\022\026\n\022FRIEND_APPLY_FAILE\020\033\022\030\n\024FRIEND_APPL"
    "Y_SUCCEED\020\034\022\023\n\017TARGET_NO_EXIST\020\035\022\023\n\017FRIE"
    "ND_RELATION\020\036\022\024\n\020FRIEND_ADD_FAILE\020\037\022\027\n\023F"
    "RIEND_REWARD_FAILE\020 \022\031\n\025FRIEND_REWARD_SU"
    "CCEED\020!\022\031\n\025COMMON_MAIL_MAX_COUNT\020\"\022\025\n\021RO"
    "OM_TYPE_IS_FULL\020#\022\023\n\017JOIN_ROOM_FAILE\020$\022\034"
    "\n\030TIPS_COUNT_OUT_OF_BOUNDS\020%\022\026\n\022WATCH_TH"
    "E_ADS_FAIL\020&\022\027\n\023REWARD_FRIEND_FAILE\020\'\022\023\n"
    "\017ROOM_TYPE_FAILE\020(\022\020\n\014NEED_RELOGIN\020)\022\032\n\026"
    "GAIN_MAIL_COMMON_FAILE\020*\022\032\n\026GAIN_MAIL_SY"
    "STEM_FAILE\020+\022\021\n\rREFRESH_MONEY\020,\022\022\n\016ROOM_"
    "SEAT_FULL\020-\022\020\n\014ALREADY_LIKE\020.\022\024\n\020BONUS_G"
    "AME_ERROR\020/\022\022\n\016NOT_FOUND_ROOM\0200\022\024\n\020FRIEN"
    "D_NO_ONLINE\0201\022\031\n\025INVITE_FRIEND_SUCCEED\0203"
    "\022\025\n\021TP_APPLY_NO_MONEY\0204\022\027\n\023TP_APPLY_REGI"
    "STERED\0205\022\030\n\024TP_ENTER_CHALL_FAILE\0206\022\026\n\022TP"
    "_APPLY_GAME_PAST\0207\022\036\n\032TARGET_PLAYER_REC_"
    "GIFT_MAX\0208\022\025\n\021SEND_MONEY_SUCESS\0209\022\024\n\020SEN"
    "D_MONEY_LIMIT\020:\022\022\n\016BUY_BACK_LIMIT\020;\022\027\n\023B"
    "LACK_LIST_RELATION\020<\022\025\n\021BLACK_LIST_NOT_I"
    "N\020=\022\033\n\027RENAME_TIME_LIMIT_FAILE\020>\022\031\n\025SELF"
    "_FRIEND_LIST_FULL\020\?\022\033\n\027TARGET_FRIEND_LIS"
    "T_FULL\020@\022\026\n\022SAFE_BOX_PWD_ERROR\020A\022\027\n\023SAFE"
    "_BOX_PWD_IS_SET\020B\022\024\n\020SAFE_BOX_IS_OPEN\020C\022"
    "\026\n\022SAFE_BOX_NEED_OPEN\020D\022\023\n\017NOT_ENOUGH_IT"
    "EM\020E\022\023\n\017LIMITUSE_FAILED\020F\022\026\n\022MOBILE_BIND"
    "_SUCESS\020G\022\025\n\021MOBILE_BIND_ERROR\020H\022\026\n\022NO_F"
    "RIEND_RELATION\020I\022\024\n\020ADD_ITEM_SUCCEED\020J\022\021"
    "\n\rADD_ITEM_FAIL\020K\022\033\n\027SEND_MAIL_NOT_FIND_"
    "ITEM\020L\022\035\n\031SEND_MAIL_ITEM_COUNT_FAIL\020M\022\023\n"
    "\017USE_ITEM_SUCESS\020N\022\030\n\024SCORE_CLEAR_POSITI"
    "VE\020O\022\035\n\031BUY_ITEM_MONEY_NOT_ENOUGH\020P\022\033\n\027B"
    "UY_ITEM_RMB_NOT_ENOUGH\020Q\022!\n\035BUY_ITEM_VIP"
    "_LEVEL_NOT_ENOUGH\020R\022\021\n\rFREEZE_PLAYER\020S\022\022"
    "\n\016NOT_FOUND_ITEM\020T\022\031\n\025NOT_TIP_ITEM_OUT_R"
    "OOM\020U\022\027\n\023SYNC_ITEM_CRC_EQUAL\020V\022\030\n\024FRIEND"
    "_APPLY_REQUEST\020W\022\031\n\025ICON_ALREADY_ACTIVAT"
    "E\020X\022\027\n\023ICON_ALREADY_UNLOCK\020Y\022!\n\035ICON_NOT"
    "_ACTIVATE_NOT_UNCLOCK\020Z\022\030\n\024CURR_UNCLOCK_"
    "ICON_ID\020[\022\037\n\033QUICK_UNCLOCK_ICON_ID_FAILE"
    "\020\\\022\027\n\023MOBILE_BIND_TIMEOUT\020]\022\025\n\021SEND_ITEM"
    "_SUCCESS\020^\022\030\n\024USER_READY_NOT_MONEY\020_\022\032\n\026"
    "SAFE_BOX_PWD_SET_ERROR\020`\022\026\n\022EXIST_FRIEND"
    "_APPLY\020a\022\035\n\031CREATE_PRIVATE_ROOM_FAILE\020b\022"
    "\025\n\021HAVE_PRIVATE_ROOM\020c\022\030\n\024NEED_ENTER_SEL"
    "F_ROOM\020d\022\031\n\025PRIVATE_ROOM_NOTEXIST\020e\022\034\n\030E"
    "NTER_PRIVATE_ROOM_FAILE\020f\022\033\n\027JOIN_PRIVAT"
    "E_ROOM_FAILE\020g\022\036\n\032PRIVATE_ROOM_CONSUME_F"
    "ALIE\020h\022\022\n\016HORSE_ID_ERROR\020i\022\033\n\027PRIVATE_RO"
    "OM_ITEM_FAILE\020j\022\036\n\032RELIEVE_ROOM_NOT_STAR"
    "TGAME\020k\022\026\n\022WEAPON_LEVEL_ERROR\020l\022\031\n\025BULLE"
    "T_ALREADY_UNLOCK\020m\022\035\n\031SEND_ENVELOPE_MONE"
    "Y_LIMIT\020n\022\024\n\020NO_MORE_ENVELOPE\020o\022\035\n\031ALREA"
    "DY_GOT_THIS_ENVELOPE\020p\022\025\n\021NOT_ENOUGH_COU"
    "PON\020q\022\030\n\024NIUNIU_JOINROOM_FAIL\020r\022\031\n\025NIUNI"
    "U_STARTGAME_FAIL\020s\022\036\n\032RUNFAST_OUTCARD_TY"
    "PE_ERROR\020t\022\035\n\031RUNFAST_OUTCARD_NOTHEISAN\020"
    "u\022\035\n\031RUNFAST_OUTCARD_GUANBUZHU\020v\022\023\n\017OUTC"
    "ARD_INVALID\020w\022\025\n\021GIFT_CARD_INVALID\020x\022\032\n\026"
    "RECV_GIFT_CARD_INVALID\020y\022\034\n\030GUANDAN_CANN"
    "OT_PASS_CARD\020z\022\037\n\033MAHJONG_MODA_LIMIT_OUT"
    "_CARD\020{\022\031\n\025MAHJONG_VERSION_FAILE\020|\022\031\n\025RU"
    "NFAST_OUTCARD_FAILE\020}\022\024\n\020BIND_PHONE_ERRO"
    "R\020~\022\020\n\014RFQ_JNPL_MAX\020\177\022\020\n\013RFQ_NO_FIND\020\200\001\022"
    "\022\n\rRFQ_NO_ACTIME\020\201\001\022\017\n\nRFQ_AC_MAX\020\202\001\022\017\n\n"
    "RFQ_JN_MAX\020\203\001\022\020\n\013RFQ_AC_ITEM\020\204\001\022\020\n\013RFQ_J"
    "N_ITEM\020\205\001\022\022\n\rRFQ_AC_CANCEL\020\206\001\022\022\n\rRFQ_JN_"
    "CANCEL\020\207\001\022\022\n\rRFQ_NO_JNTIME\020\210\001\022\016\n\tRFQ_JN_"
    "RE\020\211\001\022\016\n\tRFQ_JN_ER\020\212\001\022\022\n\rRFQ_ERR_STATE\020\213"
    "\001\022\016\n\tRFQ_ST_ER\020\214\001\022\017\n\nRFQ_RF_UMT\020\215\001\022\r\n\010RF"
    "_UN_TR\020\216\001\022\017\n\nRF_ST_ROOM\020\217\001\022\021\n\014RF_ST_NOID"
    "LE\020\220\001\022\022\n\rRFQ_TIME_ACIN\020\221\001\022\022\n\rRFQ_TIME_JN"
    "IN\020\222\001\022\022\n\rRFQ_ACTION_ER\020\223\001\022\020\n\013RFQ_TIME_ER"
    "\020\224\001\022\033\n\026DDZ_OUTCARD_TYPE_ERROR\020\225\001\022\032\n\025DDZ_"
    "OUTCARD_GUANBUZHU\020\226\001\022\026\n\021DDZ_OUTCARD_FAIL"
    "E\020\227\001\022\036\n\031BUY_ITEM_JIFEN_NOT_ENOUGH\020\230\001\022\026\n\021"
    "PF_CHANGE_SUCCEED\020\231\001\022\025\n\020PF_CHANGE_FAILED"
    "\020\232\001\022\024\n\017BUY_LIMIT_COUNT\020\233\001\022\020\n\013RFQ_NO_OPEN"
    "\020\234\001\022\026\n\021BIND_IDCARD_ERROR\020\235\001\022\030\n\023BIND_IDCA"
    "RD_TIMEOUT\020\236\001\022\030\n\023BIND_IDCARD_SUCCEED\020\237\001\022"
    "\021\n\014RF_JNNO_BIND\020\240\001\022\016\n\tRF_QY_REG\020\241\001\022\020\n\013RF"
    "_QYBC_REG\020\242\001\022\021\n\014ALREADY_BIND\020\243\001\022\032\n\025TARGE"
    "T_BIND_LIST_FULL\020\244\001\022\021\n\014DST_ID_ERROR\020\245\001\022\024"
    "\n\017DST_STATE_ERROR\020\246\001\022\031\n\024DST_PLAY_COUNT_E"
    "RROR\020\247\001\022\030\n\023SELF_BIRTH_TIME_OLD\020\250\001\022\032\n\025SEL"
    "F_PLAY_COUNT_ERROR\020\251\001\022\032\n\025SELF_BIND_STATE"
    "_ERROR\020\252\001\022\027\n\022APP_NAME_DIFFERENT\020\253\001\022\025\n\020BI"
    "ND_PROXY_FAILE\020\255\001\022\024\n\017BIND_PROXY_ECHO\020\256\001\022"
    "\023\n\016BIND_PROXY_ING\020\257\001\022\027\n\022REQUEST_BIND_PRO"
    "XY\020\260\001\022\024\n\017BIND_BANK_ERROR\020\261\001\022\026\n\021BIND_BANK"
    "_TIMEOUT\020\262\001\022\026\n\021BIND_BANK_SUCCEED\020\263\001\022\021\n\014T"
    "IP_ITEM_NOT\020\264\001\022\027\n\022FRIEND_TISSUE_NULL\020\265\001\022"
    "\033\n\026FRIEND_TISSUE_NOT_JOIN\020\266\001\022\031\n\024FRIEND_T"
    "ISSUE_ID_ERR\020\267\001\022\034\n\027FRIEND_TISSUE_NOT_OWN"
    "ER\020\270\001\022\"\n\035FRIEND_TISSUE_JOIN_OVER_COUNT\020\271"
    "\001\022!\n\034FRIEND_TISSUE_REMOVE_ID_SAME\020\272\001\022\036\n\031"
    "FRIEND_TISSUE_ALLREADY_IN\020\273\001\022!\n\034FRIEND_T"
    "ISSUE_AUTHORISE_FAIL\020\274\001\022\037\n\032VIP_TISSUE_CR"
    "EATE_COST_ERR\020\275\001\022 \n\033CREATE_TISSUE_SUB_IT"
    "EM_FAIL\020\276\001\022!\n\034VIP_FRIEND_TISSUE_OVER_COU"
    "NT\020\277\001\022!\n\034NOR_FRIEND_TISSUE_OVER_COUNT\020\300\001"
    "\022\025\n\020RFQ_AC_TIMELIMIT\020\301\001\022\022\n\rRFQ_QY_ERTYPE"
    "\020\302\001\022\025\n\020REQUEST_QY_SCORE\020\303\001\022\025\n\020REQUEST_QY"
    "_MONEY\020\304\001\022\024\n\017REQUEST_QY_DAER\020\305\001\022\027\n\022REQUE"
    "ST_HTQY_SCORE\020\306\001\022\027\n\022REQUEST_HTQY_MONEY\020\307"
    "\001\022\027\n\022PROXY_ID_DIFFERENT\020\310\001\022\021\n\014NOT_PROXY_"
    "ID\020\311\001\022\036\n\031SICHUAN_HUANSANZHANG_FAIL\020\312\001\022\023\n"
    "\016SHOP_BUY_ERROR\020\313\001\022\036\n\031RELIEVEROOM_FAILE_"
    "BYSTATE\020\314\001\022\025\n\020RECORD_NOT_EXIST\020\315\001\022\035\n\030GAN"
    "DENGYAN_JOINROOM_FAIL\020\316\001\022\036\n\031GANDENGYAN_S"
    "TARTGAME_FAIL\020\317\001\022\027\n\022UNBIND_PROXY_FAILE\020\320"
    "\001\022\026\n\021UNBIND_PROXY_NONE\020\321\001\022\025\n\020UNBIND_PROX"
    "Y_ING\020\322\001\022\031\n\024UNBIND_PROXY_SUCCEED\020\323\001\022\035\n\030C"
    "HESS_REGRETCHESS_REFUSE\020\324\001\022\032\n\025CHESS_ASKP"
    "EACE_REFUSE\020\325\001\022\033\n\026CHESS_MOVECHESS_FAILED"
    "\020\326\001\022\031\n\024QINGER_JOINROOM_FAIL\020\327\001\022\032\n\025QINGER"
    "_STARTGAME_FAIL\020\330\001\022\"\n\035FRIEND_TISSUE_GAME"
    "_OVER_COUNT\020\331\001\022\035\n\030RFIEND_TISSUE_MONEY_VO"
    "ER\020\332\001\022\035\n\030RFIEND_TISSUE_LACK_MONEY\020\333\001\022\025\n\020"
    "REQUEST_VC_ERROR\020\334\001\022\023\n\016REQUEST_VC_ING\020\335\001"
    "\022\027\n\022REQUEST_VC_SUCCEED\020\336\001\022\027\n\022CHESS_NEED_"
    "INCHECK\020\337\001\022\027\n\022CHESS_WILL_BECHECK\020\340\001\022 \n\033M"
    "ATCH_QUALIFYING_CODE_FAILE\020\364\003\022\030\n\023MATCH_G"
    "ETCODE_FAILE\020\365\003\022\034\n\027CREATE_MATCH_ROOM_FAI"
    "LE\020\366\003*\302\005\n\016TPlayerFlagBit\022\035\n\031PLAYER_FLAG_"
    "BIND_FACEBOOK\020\000\022\036\n\032PLAYER_FLAG_FIRST_REC"
    "HARGE\020\001\022\033\n\027PLAYER_FLAG_CREATE_INIT\020\002\022 \n\034"
    "PLAYER_FLAG_SAFE_BOX_PWD_SET\020\003\022\"\n\036PLAYER"
    "_FLAG_BIND_MOBILE_NUMBER\020\004\022\033\n\027PLAYER_FLA"
    "G_BIND_IDCARD\020\005\022\035\n\031PLAYER_FLAG_BIND_BANK"
    "CARD\020\006\022\032\n\026PLAYER_FLAG_BIND_PROXY\020\007\022 \n\034PL"
    "AYER_FLAG_TISSUE_AUTHORIZE\020\010\022!\n\035PLAYER_F"
    "LAG_BIND_PROXY_BEFORE\020\t\022\030\n\024PLAYER_FLAG_B"
    "ULLET_A\020\n\022\030\n\024PLAYER_FLAG_BULLET_B\020\013\022\030\n\024P"
    "LAYER_FLAG_BULLET_C\020\014\022\030\n\024PLAYER_FLAG_BUL"
    "LET_D\020\r\022\030\n\024PLAYER_FLAG_BULLET_E\020\016\022\030\n\024PLA"
    "YER_FLAG_BULLET_F\020\017\022\030\n\024PLAYER_FLAG_BULLE"
    "T_G\020\020\022\034\n\030PLAYER_FLAG_BIND_CHANNEL\020\021\022\036\n\032P"
    "LAYER_FLAG_BIND_GD_IDCARD\020\022\022\037\n\033PLAYER_FL"
    "AG_BIND_PDK_IDCARD\020\023\022 \n\034PLAYER_FALG_BIND"
    "_GD_BANKCARD\020\024\022!\n\035PLAYER_FALG_BIND_PDK_B"
    "ANKCARD\020\025\022\027\n\023PLAYER_FLAG_INVALID\020@*&\n\010TK"
    "PIType\022\032\n\026KPI_MAHJONG_MAX_FLOWER\020\001*A\n\tTG"
    "ameType\022\021\n\rGAMETYPE_NULL\020\000\022\017\n\013GAMETYPE_G"
    "D\020d\022\020\n\014GAMETYPE_PDK\020e*y\n\010TChannel\022\021\n\rCHA"
    "NNEL_GUEST\020\000\022\016\n\nCHANNEL_MY\020\001\022\022\n\016CHANNEL_"
    "MOBILE\020\002\022\020\n\014CHANNEL_APUS\020\003\022\016\n\nCHANNEL_WX"
    "\020\004\022\024\n\020CHANNEL_FACEBOOK\020\n*i\n\tTMailType\022\020\n"
    "\014TYPE_INVALID\020\000\022\017\n\013TYPE_SYSTEM\020\001\022\017\n\013TYPE"
    "_COMMON\020\002\022\017\n\013TYPE_NOTICE\020\003\022\027\n\023TYPE_SYSTE"
    "M_AUTOPEN\020\004*<\n\014TTissueState\022\022\n\016TYPE_KOUF"
    "ANGKA\020\001\022\030\n\024TYPE_JINFANGTIAOJIAN\020\002**\n\nTVi"
    "ewState\022\r\n\tVIEW_NONE\020\001\022\r\n\tVIEW_HAVE\020\002*\366\001"
    "\n\016TRobotLuaEvent\022\027\n\023ROBOT_EVENT_INVALID\020"
    "\000\022\034\n\030ROBOT_EVENT_REGSTEREVENT\020\001\022\031\n\025ROBOT"
    "_EVENT_BLACKJACK\020\002\022\032\n\026ROBOT_EVENT_TEXASP"
    "OKER\020\003\022\024\n\020ROBOT_EVENT_SLOT\020\004\022\027\n\023ROBOT_EV"
    "ENT_MAHJONG\020\005\022\026\n\022ROBOT_EVENT_NIUNIU\020\006\022\031\n"
    "\025ROBOT_EVENT_HORSERACE\020\007\022\024\n\020ROBOT_EVENT_"
    "FISH\020\010*\212\001\n\021TAchievementState\022\035\n\031ACHIEVEM"
    "ENT_STATE_INVALID\020\000\022\034\n\030ACHIEVEMENT_STATE"
    "_ACCEPT\020\001\022\032\n\026ACHIEVEMENT_STATE_DONE\020\002\022\034\n"
    "\030ACHIEVEMENT_STATE_REWARD\020\003*\242\001\n\031TAchieve"
    "mentConditionType\022!\n\024ConditionDefaultTyp"
    "e\020\377\377\377\377\377\377\377\377\377\001\022\022\n\016ConditionType0\020\000\022\022\n\016Cond"
    "itionType1\020\001\022\022\n\016ConditionType2\020\002\022\022\n\016Cond"
    "itionType3\020\003\022\022\n\016ConditionType4\020\004*S\n\024Enum"
    "BonusGameEndType\022\021\n\rEnumCircleEnd\020\000\022\017\n\013E"
    "numFailEnd\020\001\022\027\n\023EnumCircleOrFailEnd\020\002*h\n"
    "\020EnumSlotsWinType\022\017\n\013EnumNoneWin\020\000\022\021\n\rEn"
    "umNormalWin\020\001\022\016\n\nEnumBigWin\020\002\022\017\n\013EnumMeg"
    "aWin\020\003\022\017\n\013EnumEpicWin\020\004*9\n\rEnumRoomState"
    "\022\024\n\020EnumUnRegistered\020\000\022\022\n\016EnumRegistered"
    "\020\001*\240\r\n\nTMoneyFlow\022\027\n\nMF_INVALID\020\377\377\377\377\377\377\377\377"
    "\377\001\022\n\n\006MF_ACH\020\000\022\r\n\tMF_BJ_WIN\020\001\022\022\n\016MF_BJ_R"
    "ECV_TIP\020\002\022\r\n\tMF_SL_WIN\020\003\022\023\n\017MF_SL_BONUS_"
    "WIN\020\004\022\r\n\tMF_TP_WIN\020\005\022\021\n\rMF_TP_MTT_WIN\020\006\022"
    "\021\n\rMF_TP_SNG_WIN\020\007\022\013\n\007MF_BILL\020\010\022\017\n\013MF_PL"
    "Y_INIT\020\t\022\024\n\020MF_BILL_ROULETTE\020\n\022\013\n\007MF_LVU"
    "P\020\013\022\n\n\006MF_PIG\020\014\022\014\n\010MF_BONUS\020\r\022\014\n\010MF_SMAI"
    "L\020\016\022\014\n\010MF_CMAIL\020\017\022\016\n\nMF_BIND_FB\020\020\022\017\n\013MF_"
    "ROULETTE\020\021\022\014\n\010MF_CDKEY\020\022\022\017\n\013MF_ROOM_TIP\020"
    "\023\022\013\n\007MF_SHOP\020\024\022\n\n\006MF_ADS\020\025\022\024\n\020MF_MSG_ADD"
    "_MONEY\020\026\022\021\n\rMF_MTT_CANCEL\020\027\022\021\n\rMF_SCORE_"
    "WALL\020\030\022\025\n\021MF_MISSION_REWARD\020\031\022\020\n\014MF_SELL"
    "_ITEM\020\032\022\017\n\013MF_USE_ITEM\020\033\022\025\n\021MF_SIGN_IN_R"
    "EWARD\020\034\022\026\n\022MF_STORE_ADD_MONEY\020\035\022\021\n\rMF_SL"
    "_COLLECT\020\036\022\027\n\023MF_MJ_ADD_MING_GANG\020\037\022\025\n\021M"
    "F_MJ_ADD_AN_GANG\020 \022\r\n\tMF_MJ_WIN\020!\022\026\n\022MF_"
    "MJ_ADD_OUT_CARD\020\"\022\027\n\023MF_MJ_ADD_WITH_CARD"
    "\020#\022\031\n\025MF_MJ_ADD_SERIES_CARD\020$\022\031\n\025MF_MJ_A"
    "DD_FLOWER_GANG\020%\022\r\n\tMF_HR_WIN\020&\022\025\n\021MF_GD"
    "_ADD_SHILIAN\020\'\022\r\n\tMF_F_DROP\020(\022\022\n\016MF_F_FI"
    "SH_DROP\020)\022\026\n\022MF_F_UNLOCK_BULLET\020*\022\023\n\017MF_"
    "ENVELOPE_GET\020+\022\025\n\021MF_SPLIT_GIFT_GET\020,\022\027\n"
    "\023MF_VIP_DAILY_REWARD\020-\022\023\n\016MF_BJ_SEND_TIP"
    "\020\200\002\022\017\n\nMF_BJ_LOST\020\201\002\022\031\n\024MF_BJ_JOIN_CHAL_"
    "COST\020\202\002\022\030\n\023MF_BJ_CHAL_BUY_BACK\020\203\002\022\024\n\017MF_"
    "SL_SPIN_COST\020\204\002\022\017\n\nMF_TP_LOST\020\205\002\022\024\n\017MF_T"
    "P_MTT_APPLY\020\206\002\022\023\n\016MF_TP_SNG_LOST\020\207\002\022\023\n\016M"
    "F_GIFT_TO_PLY\020\210\002\022\025\n\020MF_ROOM_SEND_TIP\020\211\002\022"
    "\025\n\020MF_MSG_SUB_MONEY\020\212\002\022\030\n\023MF_BJ_JOIN_SNG"
    "_COST\020\213\002\022\026\n\021MF_STORE_BUY_ITEM\020\214\002\022\030\n\023MF_M"
    "J_SUB_MING_GANG\020\215\002\022\026\n\021MF_MJ_SUB_AN_GANG\020"
    "\216\002\022\017\n\nMF_MJ_LOST\020\217\002\022\017\n\nMF_MJ_PACK\020\220\002\022\027\n\022"
    "MF_MJ_SUB_OUT_CARD\020\221\002\022\030\n\023MF_MJ_SUB_WITH_"
    "CARD\020\222\002\022\032\n\025MF_MJ_SUB_SERIES_CARD\020\223\002\022\032\n\025M"
    "F_MJ_SUB_FLOWER_GANG\020\224\002\022\023\n\016MF_HR_BET_COS"
    "T\020\225\002\022\016\n\tMF_F_FIRE\020\226\002\022\020\n\013MF_F_UP_GUN\020\227\002\022\025"
    "\n\020MF_SEND_ENVELOPE\020\230\002\022\023\n\016MF_MJ_SUB_ROOM\020"
    "\231\002\022\027\n\022MF_SPLIT_GIFT_COST\020\232\002\022\016\n\tMF_NN_WIN"
    "\020\233\002\022\017\n\nMF_NN_LOST\020\234\002\022\023\n\016MF_NN_BET_COST\020\235"
    "\002\022\023\n\016MF_F_BUY_SKILL\020\236\002\022\024\n\017MF_F_BUY_BULLE"
    "T\020\237\002\022\023\n\016MF_F_SHOW_CHAT\020\240\002\022\020\n\013MF_RF_AC_QA"
    "\020\241\002\022\020\n\013MF_RF_JN_QA\020\242\002\022\022\n\rMF_RF_BCAC_QA\020\243"
    "\002\022\022\n\rMF_RF_BCJN_QA\020\244\002*\314\002\n\010TRMBFlow\022\013\n\007RF"
    "_SHOP\020\000\022\025\n\021RF_MISSION_REWARD\020\001\022\025\n\021RF_SIG"
    "N_IN_REWARD\020\002\022\024\n\020RF_STORE_ADD_RMB\020\003\022\014\n\010R"
    "F_SMAIL\020\004\022\n\n\006RF_ACH\020\005\022\013\n\007RF_INIT\020\006\022\021\n\rRF"
    "_GD_SHILIAN\020\007\022\r\n\tRF_F_DROP\020\010\022\026\n\021RF_STORE"
    "_BUY_ITEM\020\200\002\022\024\n\017RF_UNCLOCK_ICON\020\201\002\022\023\n\016RF"
    "_F_UP_WEAPON\020\202\002\022\027\n\022RF_F_UNLOCK_BULLET\020\203\002"
    "\022\020\n\013RF_RF_AC_QA\020\243\002\022\020\n\013RF_RF_JN_QA\020\244\002\022\022\n\r"
    "RF_RF_BCAC_QA\020\245\002\022\022\n\rRF_RF_BCJN_QA\020\246\002*\034\n\004"
    "TSex\022\010\n\004MALE\020\000\022\n\n\006FEMALE\020\001*\217\001\n\rTMissionS"
    "tate\022\031\n\025MISSION_STATE_INVALID\020\000\022\030\n\024MISSI"
    "ON_STATE_ACCEPT\020\001\022\026\n\022MISSION_STATE_DONE\020"
    "\002\022\030\n\024MISSION_STATE_REWARD\020\003\022\027\n\023MISSION_S"
    "TATE_CLOSE\020\004*\2420\n\025TMahJongShowDownEvent\022\020"
    "\n\014EVENT_XIAOHU\020\001\022\020\n\014EVENT_MEIHUI\020\002\022\023\n\017EV"
    "ENT_HUIGUIWEI\020\003\022\024\n\020EVENT_GANGKAIHUA\020\004\022\020\n"
    "\014EVENT_TIANHU\020\005\022\016\n\nEVENT_DIHU\020\006\022\021\n\rEVENT"
    "_SIGEHUI\020\007\022\017\n\013EVENT_QIDUI\020\010\022\023\n\017EVENT_QIN"
    "GQIDUI\020\t\022\025\n\021EVENT_HAOHUAQIDUI\020\n\022\026\n\022EVENT"
    "_CHAOHUAQIDUI\020\013\022\035\n\031EVENT_CHAOCHAOHAOHUAQ"
    "IDUI\020\014\022\023\n\017EVENT_ZHUANGJIA\020\r\022\022\n\016EVENT_MIN"
    "GGANG\020\016\022\020\n\014EVENT_ANGANG\020\017\022\022\n\016EVENT_SIXIF"
    "ENG\020\020\022\024\n\020EVENT_SANZHIJIAN\020\021\022\025\n\021EVENT_HUI"
    "MINGGANG\020\022\022\023\n\017EVENT_HUIANGANG\020\023\022\016\n\nEVENT"
    "_MENG\020\024\022\023\n\017EVENT_GENZHUANG\020\025\022\023\n\017EVENT_SH"
    "ISANYAO\020\026\022\016\n\nEVENT_LONG\020\027\022\022\n\016EVENT_QINGY"
    "ISE\020\030\022\021\n\rEVENT_HUNYISE\020\031\022\024\n\020EVENT_PENGPE"
    "NGHU\020\032\022\023\n\017EVENT_JIANGYISE\020\033\022\025\n\021EVENT_HAI"
    "DILAOYUE\020\034\022\024\n\020EVENT_HUGANGFANG\020\035\022\022\n\016EVEN"
    "T_WUHUAGUO\020\036\022\016\n\nEVENT_TING\020\037\022\022\n\016EVENT_PF"
    "FLOWER\020 \022\021\n\rEVENT_KOU_PAI\020!\022\024\n\020EVENT_THR"
    "EE_ZUAN\020\"\022\023\n\017EVENT_FOUR_ZUAN\020#\022\023\n\017EVENT_"
    "DIAOWUWAN\020$\022\023\n\017EVENT_ZHUOWUKUI\020%\022\022\n\016EVEN"
    "T_ZHI_GANG\020&\022\021\n\rEVENT_DIANPAO\020\'\022\016\n\nEVENT"
    "_ZIMO\020(\022\025\n\021EVENT_QIANGGANGHU\020)\022\023\n\017EVENT_"
    "BASESCORE\020*\022\023\n\017EVENT_JIAPINGHU\020+\022\025\n\021EVEN"
    "T_SHISANBUKAO\020,\022\026\n\022EVENT_PAOPEIPINGHU\020-\022"
    "\025\n\021EVENT_PAOPEIQIDUI\020.\022\020\n\014EVENT_KANHUI\020/"
    "\022\021\n\rEVENT_MINGLOU\0200\022\030\n\024EVENT_XIAOGANGKAI"
    "HUA\0201\022\025\n\021EVENT_HUANGZHUANG\0202\022\026\n\022EVENT_HA"
    "OHUAQQIDUI\0203\022\027\n\023EVENT_CHAOHUAQQIDUI\0204\022\036\n"
    "\032EVENT_CHAOCHAOHAOHUAQQIDUI\0205\022\021\n\rEVENT_P"
    "IAOCAI\0206\022\020\n\014EVENT_BAOTOU\0207\022\023\n\017EVENT_LAOZ"
    "HUANG\0208\022\023\n\017EVENT_DASANYUAN\0209\022\020\n\014EVENT_DI"
    "AOYU\020:\022\023\n\017EVENT_SUIJIYISE\020;\022\020\n\014EVENT_LAN"
    "PAI\020<\022\026\n\022EVENT_QIXINGLANPAI\020=\022\024\n\020EVENT_S"
    "ANCAISHEN\020>\022\023\n\017EVENT_QIFENGDAO\020\?\022\025\n\021EVEN"
    "T_QIFENGBAIDA\020@\022\025\n\021EVENT_SHISANBAIDA\020A\022\024"
    "\n\020EVENT_QUANFENGZI\020B\022\021\n\rEVENT_DANDIAO\020C\022"
    "\017\n\013EVENT_WUCAI\020D\022\036\n\032EVENT_QUANFENGZIPENG"
    "PENGHU\020E\022\031\n\025EVENT_QUANFENGZIQIDUI\020F\022\024\n\020E"
    "VENT_DIANPAOFEN\020G\022\030\n\024EVENT_QIANGGANGHUFE"
    "N\020H\022\021\n\rEVENT_ZIMOFEN\020I\022\022\n\016EVENT_DUIDUIHU"
    "\020J\022\022\n\016EVENT_MEIBAIDA\020K\022\022\n\016EVENT_SANBAIDA"
    "\020L\022\023\n\017EVENT_DADIAOCHE\020M\022\024\n\020EVENT_SHUANGP"
    "IAO\020N\022\021\n\rEVENT_SANPIAO\020O\022\022\n\016EVENT_LANBAI"
    "DA\020P\022\025\n\021EVENT_FENGZIBAIDA\020Q\022\017\n\013EVENT_SIH"
    "UA\020R\022\021\n\rEVENT_CHUNHUA\020S\022\025\n\021EVENT_PENGFEN"
    "GHUA\020T\022\021\n\rEVENT_GANGHUA\020U\022\021\n\rEVENT_HUNPE"
    "NG\020V\022\022\n\016EVENT_QINGPENG\020W\022\022\n\016EVENT_HUNQID"
    "UI\020X\022\020\n\014EVENT_HUAPAI\020Y\022\020\n\014EVENT_GUODAN\020Z"
    "\022\021\n\rEVENT_MENQING\020[\022\025\n\021EVENT_SANJIABIMEN"
    "\020\\\022\022\n\016EVENT_SHOWBAYI\020]\022\021\n\rEVENT_SIGUIYI\020"
    "^\022\026\n\022EVENT_XUANFENGGANG\020_\022\021\n\rEVENT_JIEGA"
    "NG\020`\022\020\n\014EVENT_ZIYISE\020a\022\023\n\017EVENT_TESHUYIS"
    "E\020b\022\027\n\023EVENT_19LAOTOUBAIDA\020c\022\030\n\024EVENT_QI"
    "ANGANGXIAOHU\020d\022\022\n\016EVENT_BUQIUREN\020e\022\022\n\016EV"
    "ENT_CONTRACT\020f\022\017\n\013EVENT_ZHAMA\020g\022\024\n\020EVENT"
    "_HUNBAZHANG\020h\022\022\n\016EVENT_QUEYIMEN\020i\022\021\n\rEVE"
    "NT_HUIDIAO\020j\022\020\n\014EVENT_QINGHU\020k\022\024\n\020EVENT_"
    "HUIDIAOHUI\020l\022\020\n\014EVENT_PIAOHU\020m\022\023\n\017EVENT_"
    "THREEBIAN\020n\022\022\n\016EVENT_FOURBIAN\020o\022\016\n\nEVENT"
    "_SUHU\020p\022\024\n\020EVENT_HUNDIAOHUN\020q\022\023\n\017EVENT_D"
    "AIZHUANG\020r\022\021\n\rEVENT_JIA1FEN\020s\022\021\n\rEVENT_J"
    "IA2FEN\020t\022\016\n\nEVENT_WUZI\020u\022\022\n\016EVENT_KANZHA"
    "NG\020v\022\023\n\017EVENT_BIANZHANG\020w\022\023\n\017EVENT_SBALU"
    "OHAN\020x\022\023\n\017EVENT_HONGZGBAO\020y\022\017\n\013EVENT_QUE"
    "YI\020z\022\021\n\rEVENT_LUANYAO\020{\022\031\n\025EVENT_BAO3QIA"
    "NGGANGHU\020|\022\025\n\021EVENT_ERWUBAJIANG\020}\022\021\n\rEVE"
    "NT_GUJIANG\020~\022\024\n\020EVENT_DUANYAOJIU\020\177\022\024\n\017EV"
    "ENT_YIBIANGAO\020\200\001\022\024\n\017EVENT_GULIANLIU\020\201\001\022\023"
    "\n\016EVENT_DAXIAOWU\020\202\001\022\022\n\rEVENT_GOUSHAN\020\203\001\022"
    "\025\n\020EVENT_ZHONGFABAI\020\204\001\022\022\n\rEVENT_THREEZA\020"
    "\205\001\022\021\n\014EVENT_FOURZA\020\206\001\022\022\n\rEVENT_KAWUKUI\020\207"
    "\001\022\021\n\014EVENT_ANXIAO\020\210\001\022\022\n\rEVENT_SANGEYI\020\211\001"
    "\022\023\n\016EVENT_SANGEJIU\020\212\001\022\022\n\rEVENT_SUQIDUI\020\213"
    "\001\022\033\n\026EVENT_HUIDIAOQIXIAODUI\020\214\001\022\022\n\rEVENT_"
    "MANGUAN\020\215\001\022\025\n\020EVENT_HUIBENLONG\020\216\001\022\024\n\017EVE"
    "NT_DIAOWUKUI\020\217\001\022\023\n\016EVENT_LAZHUANG\020\220\001\022\022\n\r"
    "EVENT_LIUGANG\020\221\001\022\021\n\014EVENT_SULONG\020\222\001\022\022\n\rE"
    "VENT_HUNLONG\020\223\001\022\022\n\rEVENT_HEIFENG\020\224\001\022\023\n\016E"
    "VENT_HONGFENG\020\225\001\022\020\n\013EVENT_YIJIU\020\226\001\022\021\n\014EV"
    "ENT_ZMH_PH\020\227\001\022\021\n\014EVENT_ZMH_MQ\020\230\001\022\021\n\014EVEN"
    "T_QGH_PH\020\231\001\022\021\n\014EVENT_QGH_MQ\020\232\001\022\021\n\014EVENT_"
    "DPH_PH\020\233\001\022\021\n\014EVENT_DPH_MQ\020\234\001\022\023\n\016EVENT_QY"
    "S_LONG\020\235\001\022\022\n\rEVENT_LIANGXI\020\236\001\022\017\n\nEVENT_B"
    "UXI\020\237\001\022\017\n\nEVENT_PENG\020\240\001\022\022\n\rEVENT_DAJIANG"
    "\020\241\001\022\023\n\016EVENT_FENGYISE\020\242\001\022\027\n\022EVENT_QIDUIH"
    "UIDIAO\020\243\001\022\032\n\025EVENT_QIDUIHUIDIAOHUI\020\244\001\022\021\n"
    "\014EVENT_DASIXI\020\245\001\022\023\n\016EVENT_XIAOSIXI\020\246\001\022\026\n"
    "\021EVENT_XIAOSANYUAN\020\247\001\022\025\n\020EVENT_GANGGANGH"
    "U\020\250\001\022\022\n\rEVENT_BUHUAHU\020\251\001\022\026\n\021EVENT_LIANGT"
    "AIHUA\020\252\001\022\033\n\026EVENT_LIANGTAIHUAQUEYI\020\253\001\022\022\n"
    "\rEVENT_HUAGANG\020\254\001\022\023\n\016EVENT_HUISCORE\020\255\001\022\020"
    "\n\013EVENT_HUWEI\020\256\001\022\020\n\013EVENT_ANKAN\020\257\001\022\024\n\017EV"
    "ENT_HUNERDIAO\020\260\001\022\021\n\014EVENT_PINGHU\020\261\001\022\023\n\016E"
    "VENT_HUNERYOU\020\262\001\022\031\n\024EVENT_YITIAOZHENLONG"
    "\020\263\001\022\030\n\023EVENT_YITIAOJIALONG\020\264\001\022\027\n\022EVENT_H"
    "UANGJINGANG\020\265\001\022\030\n\023EVENT_ZMH_PH_PINGHU\020\266\001"
    "\022\030\n\023EVENT_ZMH_MQ_PINGHU\020\267\001\022\030\n\023EVENT_QGH_"
    "PH_PINGHU\020\270\001\022\030\n\023EVENT_QGH_MQ_PINGHU\020\271\001\022\030"
    "\n\023EVENT_DPH_PH_PINGHU\020\272\001\022\030\n\023EVENT_DPH_MQ"
    "_PINGHU\020\273\001\022\032\n\025EVENT_PINGHU_MINGGANG\020\274\001\022\030"
    "\n\023EVENT_PINGHU_ANGANG\020\275\001\022\030\n\023EVENT_DIANPA"
    "O_QIDUI\020\276\001\022\025\n\020EVENT_ZIMO_QIDUI\020\277\001\022\033\n\026EVE"
    "NT_PINGHU_GENZHUANG\020\300\001\022\021\n\014EVENT_FAGANG\020\301"
    "\001\022\025\n\020EVENT_ZIMOFENGKE\020\302\001\022\027\n\022EVENT_ZIMOFE"
    "NGDIAO\020\303\001\022\021\n\014EVENT_ZIMOKE\020\304\001\022\022\n\rEVENT_ZI"
    "MOJIA\020\305\001\022\023\n\016EVENT_ZIMODIAO\020\306\001\022\024\n\017EVENT_D"
    "IANPAOKE\020\307\001\022\026\n\021EVENT_DIANPAODIAO\020\310\001\022\025\n\020E"
    "VENT_DIANPAOJIA\020\311\001\022\023\n\016EVENT_FENGKEZI\020\312\001\022"
    "\025\n\020EVENT_NORMALKEZI\020\313\001\022\023\n\016EVENT_ZIJIAHUA"
    "\020\314\001\022\022\n\rEVENT_SIGEHUA\020\315\001\022\022\n\rEVENT_BAGEHUA"
    "\020\316\001\022\032\n\025EVENT_BIANKADIAOSANQI\020\317\001\022\024\n\017EVENT"
    "_ZIJIAPENG\020\320\001\022\024\n\017EVENT_ZIJIAKEZI\020\321\001\022\030\n\023E"
    "VENT_HONGZHONGPENG\020\322\001\022\030\n\023EVENT_HONGZHONG"
    "KEZI\020\323\001\022\024\n\017EVENT_FACAIPENG\020\324\001\022\024\n\017EVENT_F"
    "ACAIKEZI\020\325\001\022\025\n\020EVENT_HUJUEZHANG\020\326\001\022\023\n\016EV"
    "ENT_YIBANGAO\020\327\001\022\022\n\rEVENT_LIANLIU\020\330\001\022\025\n\020E"
    "VENT_QUANLAOTOU\020\331\001\022\025\n\020EVENT_LUANLAOTOU\020\332"
    "\001\022\030\n\023EVENT_SANBAIDAZUOKE\020\333\001\022\023\n\016EVENT_CHU"
    "BAIDA\020\334\001\022\032\n\025EVENT_CHAOQIANGGANGHU\020\335\001\022\027\n\022"
    "EVENT_DUISHANGGANG\020\336\001\022\026\n\021EVENT_DUITIANTI"
    "NG\020\337\001\022\025\n\020EVENT_DUIDANDIAO\020\340\001\022\024\n\017EVENT_SH"
    "ANGGANG\020\341\001\022\023\n\016EVENT_TIANTING\020\342\001\022\033\n\026EVENT"
    "_GANGSHANGDIANPAO\020\343\001\022\031\n\024EVENT_BAIDADUIZU"
    "OTOU\020\344\001\022\027\n\022EVENT_SHUANGGANKAN\020\345\001\022\034\n\027EVEN"
    "T_GANGKAIHUIDIAOHUI\020\346\001\022\026\n\021EVENT_HUIDIAOL"
    "ONG\020\347\001\022\034\n\027EVENT_HUIDIAOBENHUILONG\020\350\001\022\023\n\016"
    "EVENT_ZHANGMAO\020\351\001\022\024\n\017EVENT_ZIJIAGANG\020\352\001\022"
    "\030\n\023EVENT_HONGZHONGGANG\020\353\001\022\024\n\017EVENT_FACAI"
    "GANG\020\354\001\022\023\n\016EVENT_ZIJIADUI\020\355\001\022\023\n\016EVENT_FA"
    "CAIDUI\020\356\001\022\027\n\022EVENT_HONGZHONGDUI\020\357\001\022\024\n\017EV"
    "ENT_YIJIUCARD\020\360\001\022\026\n\021EVENT_HUADUIZIJIA\020\361\001"
    "\022\027\n\022EVENT_HUADUIZIJIAN\020\362\001\022\024\n\017EVENT_QYS_Q"
    "IDUI\020\363\001\022\022\n\rEVENT_ZHONGMA\020\364\001\022\026\n\021EVENT_PEN"
    "GHOUGANG\020\365\001\022\026\n\021EVENT_QYS_HUIDIAO\020\366\001\022\024\n\017E"
    "VENT_ZIMOWUHUN\020\367\001\022\030\n\023EVENT_HENGYIHENGJIU"
    "\020\370\001\022\022\n\rENENT_CAIFENG\020\371\001\022\023\n\016EVENT_DDZDIFE"
    "N\020\372\001\022\021\n\014EVENT_ZHADAN\020\373\001\022\023\n\016EVENT_CHUNTIA"
    "N\020\374\001\022\022\n\rEVENT_MINGPAI\020\375\001\022\020\n\013EVENT_DIPAI\020"
    "\376\001\022\025\n\020EVENT_QIANGDIZHU\020\377\001\022\021\n\014EVENT_JIABE"
    "I\020\200\002\022\022\n\rEVENT_JIAOFEN\020\201\002\022\023\n\016EVENT_XIAOWA"
    "NG\020\202\002\022\021\n\014EVENT_DAWANG\020\203\002\022\020\n\013EVENT_DUIZI\020"
    "\204\002\022\022\n\rEVENT_TONGHUA\020\205\002\022\021\n\014EVENT_SHUNZI\020\206"
    "\002\022\023\n\016EVENT_SANZHANG\020\207\002\022\026\n\021EVENT_TONGHUAS"
    "HUN\020\210\002\022\023\n\016EVENT_DAIYIJIU\020\211\002\022\024\n\017EVENT_LON"
    "GQIDUI\020\212\002\022\016\n\tEVENT_GEN\020\213\002\022\023\n\016EVENT_JINGO"
    "UHU\020\214\002\022\025\n\020EVENT_ZHONGZHANG\020\215\002\022\027\n\022EVENT_G"
    "ANGSHANGPAO\020\216\002\022\024\n\017EVENT_DIANPAOHU\020\217\002\022\022\n\r"
    "EVENT_BEIZIMO\020\220\002\022\021\n\014EVENT_ZIMOHU\020\221\002\022\022\n\rE"
    "VENT_GUAFENG\020\222\002\022\025\n\020EVENT_BEIGUAFENG\020\223\002\022\020"
    "\n\013EVENT_XIAYU\020\224\002\022\023\n\016EVENT_BEIXIAYU\020\225\002\022\026\n"
    "\021EVENT_MIANXIAGANG\020\226\002\022\031\n\024EVENT_BEIMIANXI"
    "AGANG\020\227\002\022\030\n\023EVENT_HUJIAOZHUANYI\020\230\002\022\033\n\026EV"
    "ENT_BEIHUJIAOZHUANYI\020\231\002\022\024\n\017EVENT_CHAHUAZ"
    "HU\020\232\002\022\022\n\rEVENT_CHAJIAO\020\233\002\022\027\n\022EVENT_BEICH"
    "AHUAZHU\020\234\002\022\025\n\020EVENT_BEICHAJIAO\020\235\002*A\n\017Enu"
    "mItemUseType\022\016\n\nEnumCommon\020\000\022\r\n\tEnumMone"
    "y\020\001\022\017\n\013EnumItemBox\020\002*[\n\tTCostType\022\024\n\020COS"
    "TTYPE_INVALID\020\000\022\022\n\016COSTTYPE_MONEY\020\001\022\020\n\014C"
    "OSTTYPE_RMB\020\002\022\022\n\016COSTTYPE_JIFEN\020\003*S\n\016TSh"
    "opLabelType\022\023\n\017SHOP_LABEL_NULL\020\000\022\030\n\024SHOP"
    "_LABEL_Promotion\020\001\022\022\n\016SHOP_LABEL_Hot\020\002*`"
    "\n\013TSystemType\022\022\n\016SYSTEM_ANDROID\020\000\022\016\n\nSYS"
    "TEM_IOS\020\001\022\r\n\tSYSTEM_TV\020\002\022\017\n\013SYSTEM_XBOX\020"
    "\003\022\r\n\tSYSTEM_PC\020\004*\210\010\n\010TDotType\022\017\n\013DOT_INV"
    "ALID\020\000\022\027\n\023DOT_LEAVE_ROOM_TIME\020\001\022\033\n\027DOT_C"
    "HAL_RANKING_REWARD\020\002\022\031\n\025DOT_GAME_CONSUME"
    "_ITEM\0202\022 \n\034DOT_COUPON_SPLIT_GIFT_REWARD\020"
    "d\022 \n\034DOT_COUPON_SPLIT_GIFT_SNATCH\020e\022\030\n\024D"
    "OT_COUPON_FISH_DROP\020f\022\026\n\022DOT_COUPON_MISS"
    "ION\020g\022\026\n\022DOT_COUPON_BUY_VIP\020h\022\030\n\024DOT_COU"
    "PON_CHALLENGE\020i\022\034\n\030DOT_COUPON_ONE_BET_GR"
    "OUP\020j\022\034\n\030DOT_ADD_SHIRENFANG_JIFEN\020k\022\026\n\022D"
    "OT_SUB_ITEM_JIFEN\020l\022\031\n\025DOT_ADD_MAHJONG_J"
    "IFEN\020m\022\031\n\025DOT_ADD_RUNFAST_JIFEN\020n\022\026\n\022DOT"
    "_ADD_MAIL_JIFEN\020o\022\034\n\027DOT_SHOP_CONSUME_CO"
    "UPON\020\310\001\022\035\n\030DOT_COUPON_UNLOCK_BULLET\020\311\001\022\030"
    "\n\023DOT_COUPON_ROULETTE\020\312\001\022\026\n\021DOT_QUALIFYI"
    "NG_AC\020\313\001\022\026\n\021DOT_QUALIFYING_JN\020\314\001\022\030\n\023DOT_"
    "QUALIFYING_BCAC\020\315\001\022\030\n\023DOT_QUALIFYING_BCJ"
    "N\020\316\001\022\026\n\021DOT_CREATE_TISSUE\020\254\002\022\024\n\017DOT_JOIN"
    "_TISSUE\020\255\002\022\033\n\026DOT_CHANGE_TISSUE_NAME\020\256\002\022"
    "\024\n\017DOT_QUIT_TISSUE\020\257\002\022\027\n\022DOT_DISMISS_TIS"
    "SUE\020\260\002\022\033\n\026DOT_RESET_TISSUE_LIMIT\020\261\002\022\036\n\031D"
    "OT_RECHARGE_TISSUE_MONEY\020\262\002\022\033\n\026DOT_TISSU"
    "E_CREATE_ROOM\020\263\002\022\037\n\032DOT_TISSUE_FORCE_QUI"
    "T_ROOM\020\264\002\022\037\n\032DOT_TISSUE_ROOM_START_GAME\020"
    "\265\002\022\030\n\023DOT_QUALIFYING_DATA\020\220\003\022\035\n\030DOT_QUAL"
    "IFYING_DATA_JOIN\020\221\003\022\037\n\032DOT_QUALIFYING_DA"
    "TA_PLAYER\020\222\003\022\016\n\tDOT_LOGIN\020\232\003\022\025\n\020DOT_FIGH"
    "T_RECORD\020\330\004*/\n\017TGameConsumePay\022\014\n\010TGC_GO"
    "LD\020\000\022\016\n\nTGC_SILVER\020\001*\225\002\n\rTGameRoomKind\022\016"
    "\n\nTGD_NORMAL\020\000\022\021\n\rTGD_JINYUANZI\020\001\022\023\n\017TGD"
    "_CHANGKAITOU\020\002\022\020\n\014TGD_CANGZHOU\020\003\022\017\n\013TGD_"
    "BAODING\020\004\022\020\n\014TGD_SHANDONG\020\005\022\016\n\nTGD_SUZHO"
    "U\020\006\022\014\n\010TGD_GUAN\020\007\022\016\n\nTGD_HEJIAN\020\010\022\016\n\nTGD"
    "_RENQIU\020\t\022\027\n\023TGD_GUANDAN_PRIVATE\020\n\022\020\n\014TG"
    "D_HANGZHOU\020\013\022\017\n\013TGD_NANFENG\020\014\022\016\n\nTGD_YAN"
    "TAI\020\r\022\r\n\tTGD_JINAN\020\016*\333\003\n\020TGameSpecialKin"
    "d\022\014\n\010TSK_NULL\020\000\022\014\n\010TSK_ZAER\020\001\022\017\n\013TSK_BIX"
    "IAHU\020\002\022\r\n\tTSK_MENG2\020\004\022\r\n\tTSK_MENG4\020\010\022\013\n\007"
    "TSK_HUI\020\020\022\020\n\014TSK_JIANG258\020 \022\025\n\020TSK_GUAND"
    "AN_GIFT\020\200\020\022\020\n\013TSK_DIANPAO\020\200 \022\023\n\016TSK_FLOW"
    "ERCARD\020\200@\022\022\n\014TSK_TUIDAOHU\020\200\200\001\022\026\n\020TSK_FOL"
    "LOWBANKER\020\200\200\002\022\026\n\020TSK_SANLAOZHUANG\020\200\200\004\022\020\n"
    "\nTSK_KOUPAI\020\200\200\010\022\021\n\013TSK_XIAOBAO\020\200\200\020\022\017\n\tTS"
    "K_DABAO\020\200\200 \022\023\n\rTSK_SANJIACHU\020\200\200@\022\023\n\014TSK_"
    "QINGYISE\020\200\200\200\001\022\026\n\017TSK_VIRTUALCARD\020\200\200\200\002\022\021\n"
    "\nTSK_Cathen\020\200\200\200\004\022\026\n\017TSK_LAOTOUBAIDA\020\200\200\200\010"
    "\022\022\n\013TSK_DAJIANG\020\200\200\200\020\022\017\n\010TSK_ZIMO\020\200\200\200 \022\023\n"
    "\014TSK_CONTRACT\020\200\200\200@*\342\001\n\027TGameRunFastSpeci"
    "alKind\022\017\n\013TSK_RF_NULL\020\000\022\025\n\021TSK_RF_ZHADAN"
    "FENG\020\001\022\025\n\021TSK_RF_BUFENGDING\020\002\022\026\n\022TSK_RF_"
    "SHIFENGDING\020\003\022\030\n\024TSK_RF_ERSHIFENGDING\020\004\022"
    "\016\n\nTSK_CARD15\020\005\022\021\n\rTSK_MUSTOUTHS\020\006\022\r\n\tTS"
    "K_LAIZI\020\007\022\017\n\013TSK_JIEGUAN\020\010\022\023\n\017TSK_DISPLA"
    "YCARD\020\t*m\n\021TPaymentMechanism\022\025\n\021ROOM_OWN"
    "ER_OPTION\020\000\022\024\n\020AA_SYSTEM_OPTION\020\001\022\024\n\020BIG"
    "_OWNER_OPTION\020\002\022\025\n\021VIP_TISSUE_OPTION\020\003*\203"
    "\002\n\030TGameSpecialKindShenYang\022\017\n\013TSK_SY_NU"
    "LL\020\000\022\024\n\020TSK_SY_KAIMENCHI\020\001\022\027\n\023TSK_SY_FIR"
    "STWAVEXFG\020\002\022\024\n\020TSK_SY_CANNOTXFG\020\003\022\022\n\016TSK"
    "_SY_ZIMOZFB\020\004\022\021\n\rTSK_SY_GUODAN\020\005\022\025\n\021TSK_"
    "SY_HUDANZHANG\020\006\022\020\n\014TSK_SY_DAGUO\020\007\022\024\n\020TSK"
    "_SY_FENGDING6\020\010\022\024\n\020TSK_SY_FENGDING7\020\t\022\025\n"
    "\021TSK_SY_BUFENGDING\020\n*\247\001\n\026TGameSpecialKin"
    "dPingHu\022\023\n\017TSK_PINGHU_NULL\020\000\022\027\n\023TSK_PING"
    "HU_QINGYISE\020\001\022\032\n\026TSK_PINGHU_LAOTOUBAIDA\020"
    "\002\022\026\n\022TSK_PINGHU_DIANPAO\020\003\022\027\n\023TSK_PINGHU_"
    "CONTRACT\020\004\022\022\n\016TSK_PINGHU_CAP\020\005*L\n\027TGameS"
    "pecialKindJiaXing\022\017\n\013TSK_JX_NULL\020\000\022\017\n\013TS"
    "K_JX_FZBD\020\001\022\017\n\013TSK_JX_LTBD\020\002*\204\001\n\027TGameSp"
    "ecialKindJiaShan\022\017\n\013TSK_JS_NULL\020\000\022\017\n\013TSK"
    "_JS_FZBD\020\001\022\017\n\013TSK_JS_LTBD\020\002\022\020\n\014TSK_JS_WX"
    "ZQH\020\003\022\021\n\rTSK_JS_1FANQH\020\004\022\021\n\rTSK_JS_2FANQ"
    "H\020\005*i\n\026TGameSpecialKindBaZhou\022\017\n\013TSK_BZ_"
    "NULL\020\000\022\023\n\017TSK_BZ_LAZHUANG\020\001\022\024\n\020TSK_BZ_ZU"
    "OZHUANG\020\002\022\023\n\017TSK_BZ_BUDAIZUI\020\003*S\n\025TGameS"
    "pecialKindWenAn\022\017\n\013TSK_WA_NULL\020\000\022\024\n\020TSK_"
    "WA_DAIZHUANG\020\001\022\023\n\017TSK_WA_LAZHUANG\020\002*r\n\033T"
    "GameSpecialKindLangFangTwo\022\020\n\014TSK_LFT_NU"
    "LL\020\000\022\025\n\021TSK_LFT_DAIZHUANG\020\001\022\024\n\020TSK_LFT_L"
    "AZHUANG\020\002\022\024\n\020TSK_LFT_BUDAIZUI\020\003*{\n\031TGame"
    "SpecialKindShengFang\022\017\n\013TSK_SF_NULL\020\000\022\023\n"
    "\017TSK_SF_LAZHUANG\020\001\022\024\n\020TSK_SF_DAIZHUANG\020\002"
    "\022\020\n\014TSK_SF_SiHui\020\003\022\020\n\014TSK_SF_QiHUI\020\004*d\n\026"
    "TGameSpecialKindHanDan\022\017\n\013TSK_HD_NULL\020\000\022"
    "\022\n\016TSK_HD_BAOTING\020\001\022\024\n\020TSK_HD_BUDAIFENG\020"
    "\002\022\017\n\013TSK_HD_DAHU\020\003*c\n\026TGameSpecialKindRu"
    "Shan\022\017\n\013TSK_RS_NULL\020\000\022\024\n\020TSK_RS_GENZHUAN"
    "G\020\001\022\017\n\013TSK_RS_ZIMO\020\002\022\021\n\rTSK_RS_CHIPAI\020\003*"
    "f\n\031TGameSpecialKindRongCheng\022\017\n\013TSK_RC_N"
    "ULL\020\000\022\024\n\020TSK_RC_GENZHUANG\020\001\022\017\n\013TSK_RC_ZI"
    "MO\020\002\022\021\n\rTSK_RC_CHIPAI\020\003*x\n\025TGameSpecialK"
    "indTaiAn\022\017\n\013TSK_TA_NULL\020\000\022\024\n\020TSK_TA_GENZ"
    "HUANG\020\001\022\021\n\rTSK_TA_ERWUBA\020\002\022\021\n\rTSK_TA_CHI"
    "PAI\020\003\022\022\n\016TSK_TA_DIANPAO\020\004*>\n\027TGameSpecia"
    "lKindNanFeng\022\017\n\013TSK_NF_NULL\020\000\022\022\n\016TSK_NF_"
    "DIANPAO\020\001*\262\001\n\030TGameSpecialKindHangZhou\022\017"
    "\n\013TSK_HZ_NULL\020\000\022\022\n\016TSK_HZ_DIANPAO\020\001\022\024\n\020T"
    "SK_HZ_ONEZHUANG\020\002\022\026\n\022TSK_HZ_THREEZHUANG\020"
    "\003\022\025\n\021TSK_HZ_FENGDING32\020\004\022\025\n\021TSK_HZ_FENGD"
    "ING64\020\005\022\025\n\021TSK_HZ_BUFENGDING\020\006*d\n\nTCards"
    "Type\022\r\n\tCardsNone\020\000\022\016\n\nCardsSpade\020\001\022\017\n\013C"
    "ardsHearts\020\002\022\024\n\020CardsPlumBlossom\020\003\022\020\n\014Ca"
    "rdsDiamond\020\004*:\n\026TGameSpecialKindQuZhou\022\017"
    "\n\013TSK_QZ_NULL\020\000\022\017\n\013TSK_QZ_JUMA\020\001*@\n\030TGam"
    "eSpecialKindYunCheng\022\017\n\013TSK_YC_NULL\020\000\022\023\n"
    "\017TSK_YC_QINGLONG\020\001*\177\n\030TGameSpecialKindSh"
    "anDong\022\017\n\013TSK_SD_NULL\020\000\022\023\n\017TSK_SD_JIANG2"
    "58\020\001\022\022\n\016TSK_SD_DIANPAO\020\002\022\025\n\021TSK_SD_FLOWE"
    "RCARD\020\003\022\022\n\016TSK_SD_EATCARD\020\004*\222\002\n\026TGameSpe"
    "cialKindYanTai\022\017\n\013TSK_YT_NULL\020\000\022\023\n\017TSK_Y"
    "T_JIANG258\020\001\022\027\n\023TSK_YT_FOLLOWBANKER\020\002\022\026\n"
    "\022TSK_YT_VIRTUALCARD\020\003\022\027\n\023TSK_YT_DIANPAO_"
    "GANG\020\004\022\022\n\016TSK_YT_EATCARD\020\005\022\022\n\016TSK_YT_XIA"
    "OFAN\020\006\022\020\n\014TSK_YT_DAFAN\020\007\022\021\n\rTSK_YT_HUNPA"
    "I\020\010\022\023\n\017TSK_YT_FANGFENG\020\t\022\022\n\016TSK_YT_DIANP"
    "AO\020\n\022\022\n\016TSK_YT_ZMJIFEN\020\013*c\n\024TGameSpecial"
    "KindWuXi\022\017\n\013TSK_WX_NULL\020\000\022\022\n\016TSK_WX_SHEN"
    "GJI\020\001\022\023\n\017TSK_WX_FENGDING\020\002\022\021\n\rTSK_WX_DIF"
    "ENG\020\003*\344\003\n\021TMahJonGCmdRecord\022\017\n\013ACTION_NU"
    "LL\020\000\022\025\n\021ACTION_START_GAME\020\001\022\031\n\025ACTION_OP"
    "ERATE_RESULT\020\002\022\024\n\020ACTION_SEND_CARD\020\003\022\023\n\017"
    "ACTION_OUT_CARD\020\004\022\033\n\027ACTION_SHOWDOWN_DIA"
    "NPAO\020\005\022\030\n\024ACTION_SHOWDOWN_ZIMO\020\006\022\037\n\033ACTI"
    "ON_SHOWDOWN_QIANGGANGHU\020\007\022\031\n\025ACTION_SHOW"
    "DOWN_LIUJU\020\010\022\023\n\017ACTION_SHOWDOWN\020\t\022\023\n\017ACT"
    "ION_CONTRACT\020\n\022\033\n\027ACTION_SEND_FLOWER_CAR"
    "D\020\013\022\034\n\030ACTION_START_FLOWER_CARD\020\014\022\031\n\025ACT"
    "ION_OPERATE_CHOICE\020\r\022\022\n\016ACTION_MINGLOU\020\016"
    "\022\031\n\025ACTION_SEND_HAND_CARD\020\017\022\024\n\020ACTION_CA"
    "THECTIC\020\020\022\021\n\rACTION_HUNYOU\020\021\022\026\n\022ACTION_T"
    "RUST_STATE\020\022*\210\001\n\033TGameSpecialKindQinHuan"
    "gDao\022\016\n\nTSK_QHD_P0\020\001\022\016\n\nTSK_QHD_P1\020\002\022\016\n\n"
    "TSK_QHD_P2\020\004\022\023\n\017TSK_QHD_BIEFENG\020\010\022\021\n\rTSK"
    "_QHD_QIHUI\020\020\022\021\n\rTSK_QHD_TOUCH\020 *\337\003\n!TGam"
    "eSpecialKindGuangDongTuiDaoHu\022\022\n\016TSK_GDT"
    "DH_NUll\020\000\022\023\n\017TSK_GDTDH_QIDUI\020\001\022\031\n\025TSK_GD"
    "TDH_QIDUIJIAFAN\020\002\022\027\n\023TSK_GDTDH_GENZHUANG"
    "\020\003\022\024\n\020TSK_GDTDH_WUFENG\020\004\022\021\n\rTSK_GDTDH_QG"
    "H\020\005\022\021\n\rTSK_GDTDH_JJG\020\006\022\023\n\017TSK_GDTDH_WUHU"
    "I\020\007\022\025\n\021TSK_GDTDH_HONGHUI\020\010\022\027\n\023TSK_GDTDH_"
    "NORMALHUI\020\t\022\026\n\022TSK_GDTDH_LIANGHUI\020\n\022\022\n\016T"
    "SK_GDTDH_WUMA\020\013\022\025\n\021TSK_GDTDH_LIANGMA\020\014\022\022"
    "\n\016TSK_GDTDH_SIMA\020\r\022\023\n\017TSK_GDTDH_LIUMA\020\016\022"
    "\022\n\016TSK_GDTDH_BAMA\020\017\022\026\n\022TSK_GDTDH_BAOZHAM"
    "A\020\020\022\026\n\022TSK_GDTDH_MAGDFENG\020\021\022\030\n\024TSK_GDTDH"
    "_FENGDING50\020\022\022\022\n\016TSK_GDTDH_GBQB\020\023*\206\002\n\027TG"
    "ameSpecialKindBaoDing\022\017\n\013TSK_BD_NUll\020\000\022\023"
    "\n\017TSK_BD_TUIDAOHU\020\001\022\020\n\014TSK_BD_DABAO\020\002\022\022\n"
    "\016TSK_BD_XIAOBAO\020\003\022\024\n\020TSK_BD_SANJIACHU\020\004\022"
    "\021\n\rTSK_BD_KOUPAI\020\005\022\022\n\016TSK_BD_DAJIANG\020\006\022\017"
    "\n\013TSK_BD_ZIMO\020\007\022\022\n\016TSK_BD_SCORE40\020\010\022\022\n\016T"
    "SK_BD_SCORE80\020\t\022\023\n\017TSK_BD_SCORE120\020\n\022\024\n\020"
    "TSK_BD_WUXIANZHI\020\013*\312\001\n\030TGameSpecialKindD"
    "ouDiZhu\022\020\n\014TSK_DDZ_NULL\020\000\022\017\n\013TSK_DDZ_QDZ"
    "\020\001\022\016\n\nTSK_DDZ_JF\020\002\022\017\n\013TSK_DDZ_BFD\020\003\022\016\n\nT"
    "SK_DDZ_16\020\004\022\016\n\nTSK_DDZ_32\020\005\022\016\n\nTSK_DDZ_6"
    "4\020\006\022\021\n\rTSK_DDZ_DIPAI\020\007\022\022\n\016TSK_DDZ_JIABEI"
    "\020\010\022\023\n\017TSK_DDZ_MINGPAI\020\t*\231\004\n\023TGameSpecial"
    "KindPSZ\022\020\n\014TSK_PSZ_NULL\020\000\022\024\n\020TSK_PSZ_20_"
    "HUIHE\020\001\022\024\n\020TSK_PSZ_30_HUIHE\020\002\022\024\n\020TSK_PSZ"
    "_40_HUIHE\020\003\022\031\n\025TSK_PSZ_START_SEECARD\020\004\022\036"
    "\n\032TSK_PSZ_THREEHUIHE_SEECARD\020\005\022\035\n\031TSK_PS"
    "Z_FIVEHUIHE_SEECARD\020\006\022\035\n\031TSK_PSZ_START_C"
    "OMPARECARD\020\007\022\"\n\036TSK_PSZ_THREEHUIHE_COMPA"
    "RECARD\020\010\022!\n\035TSK_PSZ_FIVEHUIHE_COMPARECAR"
    "D\020\t\022\032\n\026TSK_PSZ_235_BUCHIBAOZI\020\n\022\033\n\027TSK_P"
    "SZ_235_CHIALLBAOZI\020\013\022\037\n\033TSK_PSZ_235_CHIF"
    "INALLYBAOZI\020\014\022\030\n\024TSK_PSZ_JIAZHU_SMALL\020\r\022"
    "\026\n\022TSK_PSZ_JIAZHU_BIG\020\016\022\023\n\017TSK_PSZ_NOTJO"
    "IN\020\017\022\023\n\017TSK_PSZ_CANJOIN\020\020\022\033\n\027TSK_PSZ_COM"
    "PAREBY_COLOR\020\021\022\033\n\027TSK_PSZ_COMPAREBY_STAR"
    "T\020\022*\343\002\n\030TGameSpecialKindTangShan\022\017\n\013TSK_"
    "TS_NULL\020\000\022\025\n\021TSK_TS_YITIAOLONG\020\001\022\023\n\017TSK_"
    "TS_QINGYISE\020\002\022\024\n\020TSK_TS_SHISANYAO\020\004\022\023\n\017T"
    "SK_TS_FENGDING\020\010\022\017\n\013TSK_TS_ZIMO\020\020\022\024\n\020TSK"
    "_TS_DP_ZHUANG\020 \022\024\n\020TSK_TS_DP_SANJIA\020@\022\023\n"
    "\016TSK_TS_LIANGXI\020\200\001\022\021\n\014TSK_TS_ZOUXI\020\200\002\022\020\n"
    "\013TSK_TS_WUXI\020\200\004\022\023\n\016TSK_TS_DIANPAO\020\200\010\022\022\n\r"
    "TSK_TS_CHIPAI\020\200\020\022\022\n\rTSK_TS_PUTONG\020\200 \022\025\n\020"
    "TSK_TS_FANGZUOBI\020\200@\022\024\n\016TSK_TS_QINQING\020\200\200"
    "\001*\275\001\n\030TGameSpecialKindDingXing\022\017\n\013TSK_DX"
    "_NULL\020\000\022\022\n\016TSK_DX_EATCARD\020\001\022\023\n\017TSK_DX_QI"
    "NGYISE\020\002\022\024\n\020TSK_DX_ZHUOWUKUI\020\003\022\016\n\nTSK_DX"
    "_HUI\020\004\022\025\n\021TSK_DX_DIANPAOBIG\020\005\022\027\n\023TSK_DX_"
    "DIANPAOTHREE\020\006\022\021\n\rTSK_DX_KOUPAI\020\007*\307\001\n\030TG"
    "ameSpecialKindLangFang\022\017\n\013TSK_LF_NULL\020\000\022"
    "\025\n\021TSK_LF_HAOHUAQING\020\001\022\031\n\025TSK_LF_CHAOHAO"
    "HUAQING\020\002\022\024\n\020TSK_LF_WUXIANZHI\020\003\022\024\n\020TSK_L"
    "F_LIANGMENG\020\004\022\021\n\rTSK_LF_SIMENG\020\005\022\023\n\017TSK_"
    "LF_LINGMENG\020\006\022\024\n\020TSK_LF_ZHUOWUKUI\020\007*c\n\025T"
    "GameSpecialKindAnXin\022\017\n\013TSK_AX_NULL\020\000\022\023\n"
    "\017TSK_AX_YILINGBA\020\001\022\021\n\rTSK_AX_ERMENG\020\002\022\021\n"
    "\rTSK_AX_SIMENG\020\003*O\n\030TGameSpecialKindQiao"
    "Dong\022\017\n\013TSK_QD_NULL\020\000\022\021\n\rTSK_QD_PINGHU\020\001"
    "\022\017\n\013TSK_QD_DAHU\020\002*w\n\032TGameSpecialTangSha"
    "nAnXiao\022\017\n\013ANXIAO_NULL\020\000\022\022\n\016ANXIAO_NOPOW"
    "ER\020\001\022\021\n\rANXIAO_NOSIGN\020\002\022\020\n\014ANXIAO_POWER\020"
    "\003\022\017\n\013ANXIAO_SIGN\020\004*\211\002\n\024TGameSpecialManCh"
    "eng\022\017\n\013TSK_MC_NUll\020\000\022\023\n\017TSK_MC_TUIDAOHU\020"
    "\001\022\020\n\014TSK_MC_DABAO\020\002\022\022\n\016TSK_MC_XIAOBAO\020\003\022"
    "\024\n\020TSK_MC_SANJIACHU\020\004\022\021\n\rTSK_MC_KOUPAI\020\005"
    "\022\022\n\016TSK_MC_DAJIANG\020\006\022\022\n\016TSK_MC_DAIFENG\020\007"
    "\022\025\n\021TSK_MC_GANGKAIHUA\020\010\022\023\n\017TSK_MC_HAIDIL"
    "AO\020\t\022\022\n\016TSK_MC_DAIDIAN\020\n\022\024\n\020TSK_MC_DAIZH"
    "UANG\020\013*\332\001\n\023TGameSpecialGaoYang\022\017\n\013TSK_GY"
    "_NUll\020\000\022\023\n\017TSK_GY_YILINGBA\020\001\022\021\n\rTSK_GY_K"
    "OUPAI\020\002\022\024\n\020TSK_GY_DAIZHUANG\020\003\022\023\n\017TSK_GY_"
    "TUIDAOHU\020\004\022\020\n\014TSK_GY_DABAO\020\005\022\022\n\016TSK_GY_X"
    "IAOBAO\020\006\022\024\n\020TSK_GY_SANJIACHU\020\007\022\017\n\013TSK_GY"
    "_ZIMO\020\010\022\022\n\016TSK_GY_DAJIANG\020\t*\262\001\n\024TGameSpe"
    "cialJingZhou\022\017\n\013TSK_JZ_NUll\020\000\022\020\n\014TSK_JZ_"
    "DABAO\020\001\022\024\n\020TSK_JZ_SANJIACHU\020\002\022\021\n\rTSK_JZ_"
    "ZIMOHU\020\003\022\016\n\nTSK_JZ_ZFB\020\004\022\016\n\nTSK_JZ_HFL\020\005"
    "\022\016\n\nTSK_JZ_BKD\020\006\022\017\n\013TSK_JZ_QMBZ\020\007\022\r\n\tTSK"
    "_JZ_GJ\020\010*\264\001\n\023TGameSpecialDaCheng\022\017\n\013TSK_"
    "DC_NUll\020\000\022\024\n\020TSK_DC_BUDAIMENG\020\001\022\024\n\020TSK_D"
    "C_LIANGMENG\020\002\022\021\n\rTSK_DC_SIMENG\020\003\022\024\n\020TSK_"
    "DC_BUDAIFENG\020\004\022\023\n\017TSK_DC_LAZHUANG\020\005\022\020\n\014T"
    "SK_DC_SiHui\020\006\022\020\n\014TSK_DC_QiHui\020\007*O\n\027TGame"
    "SpecialKindDongTai\022\r\n\tTSK_DT_50\020\001\022\016\n\nTSK"
    "_DT_100\020\002\022\025\n\021TSK_DT_LIANZHUANG\020\003*\214\001\n\031TGa"
    "meSpecialKingPingXiang\022\022\n\016TSK_PX_DAIFENG"
    "\020\001\022\021\n\rTSK_PX_DAIHUN\020\002\022\017\n\013TSK_PX_ZIMO\020\003\022\022"
    "\n\016TSK_PX_DIANPAO\020\004\022\021\n\rTSK_PX_SANHUN\020\005\022\020\n"
    "\014TSK_PX_SIHUN\020\006*\211\001\n\021TGameSpecialChess\022\017\n"
    "\013TSK_CS_NULL\020\000\022\021\n\rTSK_CS_STEP15\020\001\022\021\n\rTSK"
    "_CS_STEP30\020\002\022\021\n\rTSK_CS_STEPUN\020\003\022\024\n\020TSK_C"
    "S_INNINGS30\020\004\022\024\n\020TSK_CS_INNINGSUN\020\005*\300\001\n\023"
    "TGameGuanDanSpecial\022\016\n\nTGDSK_NULL\020\000\022\016\n\nT"
    "GDSK_GIFT\020\001\022\016\n\nTGDSK_JDWF\020\002\022\017\n\013TGDSK_TTZ"
    "WF\020\003\022\016\n\nTGDSK_GDZW\020\004\022\014\n\010TGDSK_FB\020\005\022\r\n\tTG"
    "DSK_2FB\020\006\022\r\n\tTGDSK_3FB\020\007\022\016\n\nTGDSK_DL3J\020\010"
    "\022\016\n\nTGDSK_DL4J\020\t\022\014\n\010TGDSK_QA\020\n*\261\001\n\014TPlay"
    "erState\022\021\n\rTPLSTATE_NULL\020\000\022\021\n\rTPLSTATE_I"
    "DLE\020\001\022\026\n\022TPLSTATE_PRGAMEING\020\002\022\024\n\020TPLSTAT"
    "E_QAMATCH\020\003\022\035\n\031TPLSTATE_UNMATCHQAGAMEING"
    "\020\004\022\026\n\022TPLSTATE_QAGAMEING\020\005\022\026\n\022TPLSTATE_W"
    "AITMATCH\020\006*\266\001\n\026TGameSpecialKindQingHe\022\020\n"
    "\014TSK_QH_YIJIU\020\001\022\022\n\016TSK_QH_HEIFENG\020\002\022\025\n\021T"
    "SK_QH_ZHONGFABAI\020\003\022\030\n\024TSK_QH_HENGYIHENGJ"
    "IU\020\004\022\023\n\017TSK_QH_LUANFENG\020\005\022\032\n\026TSK_QH_DAIF"
    "ENGTUIDAOHU\020\006\022\024\n\020TSK_QH_BUDAIFENG\020\007*O\n\027T"
    "GameSpecialKindWuQiang\022\017\n\013TSK_WQ_NULL\020\001\022"
    "\017\n\013TSK_WQ_ZIMO\020\002\022\022\n\016TSK_WQ_DIANPAO\020\003*\340\001\n"
    "\034TGameSpecialKindSiChuanZiYou\022\031\n\025TSK_SCZ"
    "Y_LUNLIUZHUANG\020\001\022\030\n\024TSK_SCZY_HUPAIXIAJIA"
    "\020\002\022\021\n\rTSK_SCZY_WUMA\020\003\022\024\n\020TSK_SCZY_LIANGM"
    "A\020\004\022\021\n\rTSK_SCZY_SIMA\020\005\022\022\n\016TSK_SCZY_LIUMA"
    "\020\006\022\023\n\017TSK_SCZY_SANREN\020\007\022\022\n\016TSK_SCZY_ERRE"
    "N\020\010\022\022\n\016TSK_SCZY_VIDEO\020\t*\303\002\n\030TGameSpecial"
    "KindDouShiSi\022\020\n\014TSK_DSS_NULL\020\001\022\023\n\017TSK_DS"
    "S_SANWANG\020\002\022\022\n\016TSK_DSS_WUWANG\020\003\022\022\n\016TSK_D"
    "SS_QIWANG\020\004\022\024\n\020TSK_DSS_JINERSHI\020\005\022\025\n\021TSK"
    "_DSS_TUOGOUFAN\020\006\022\025\n\021TSK_DSS_XIAOSIDUI\020\007\022"
    "\023\n\017TSK_DSS_BAOJIAO\020\010\022\021\n\rTSK_DSS_JIETI\020\t\022"
    "\030\n\024TSK_DSS_PENGSHANGHUA\020\n\022\030\n\024TSK_DSS_GAN"
    "GSHANGHUA\020\013\022\032\n\026TSK_DSS_HONGHEIHUWUSHI\020\014\022"
    "\034\n\030TSK_DSS_ERSHIDIANBAOJIAO\020\r*P\n\026TGameSp"
    "ecialKindPengHu\022\017\n\013TSK_PH_NULL\020\001\022\026\n\022TSK_"
    "PH_ZHANGFANBEI\020\002\022\r\n\tTSK_PH_HU\020\003*_\n\026TGame"
    "SpecialKindYiXian\022\017\n\013TSK_YX_NULL\020\000\022\020\n\014TS"
    "K_YX_DABAO\020\001\022\021\n\rTSK_YX_GEFUGE\020\002\022\017\n\013TSK_Y"
    "X_TQGP\020\003*:\n\026TGameSpecialKindDeZhou\022\017\n\013TS"
    "K_DZ_ZiMo\020\000\022\017\n\013TSK_DZ_KaHu\020\001*h\n\030TGameSpe"
    "cialKindDongYing\022\017\n\013TSK_DY_NULL\020\000\022\023\n\017TSK"
    "_DY_JIANG258\020\001\022\022\n\016TSK_DY_DIANPAO\020\002\022\022\n\016TS"
    "K_DY_EATCARD\020\003*w\n\024TGameSpecialTaocheng\022\017"
    "\n\013TSK_TC_NULL\020\000\022\022\n\016TSK_TC_DIANPAO\020\001\022\020\n\014T"
    "SK_TC_DABAO\020\002\022\022\n\016TSK_TC_XIAOBAO\020\003\022\024\n\020TSK"
    "_TC_SANJIACHU\020\004*\241\003\n\026TGameSpecialKindNiuN"
    "iu\022\017\n\013TSK_NN_NULL\020\000\022\027\n\023TSK_NN_NNHUANZHUA"
    "NG\020\001\022\024\n\020TSK_NN_LUNZHUANG\020\002\022\024\n\020TSK_NN_WIN"
    "ZHUANG\020\003\022\027\n\023TSK_NN_RANDOMZHUANG\020\004\022\026\n\022TSK"
    "_NN_OWNERZHUANG\020\005\022\021\n\rTSK_NN_JINNIU\020\006\022\021\n\r"
    "TSK_NN_YINNIU\020\007\022\024\n\020TSK_NN_WUXIAONIU\020\010\022\023\n"
    "\017TSK_NN_ZHADANIU\020\t\022\025\n\021TSK_NN_YITIAOLONG\020"
    "\n\022\021\n\rTSK_NN_WUKING\020\013\022\022\n\016TSK_NN_KINGALL\020\014"
    "\022\027\n\023TSK_NN_KING_ONLYTEN\020\r\022\027\n\023TSK_NN_HAND"
    "CARD_ONE\020\016\022\027\n\023TSK_NN_HANDCARD_TWO\020\017\022\022\n\016T"
    "SK_NN_NOTJOIN\020\020\022\022\n\016TSK_NN_CANJOIN\020\021*\300\002\n\031"
    "TGameSpecialSiChuanXueLiu\022\022\n\016TSK_SC_XL_N"
    "ULL\020\000\022\024\n\020TSK_SC_XL_JIAFAN\020\001\022\024\n\020TSK_SC_XL"
    "_GUNFAN\020\002\022\032\n\026TSK_SC_XL_HUANSANZHANG\020\003\022\025\n"
    "\021TSK_SC_XL_CHAJIAO\020\004\022\027\n\023TSK_SC_XL_CHAHUA"
    "ZHU\020\005\022\033\n\027TSK_SC_XL_HUJIAOZHUANYI\020\006\022#\n\037TS"
    "K_SC_XL_HUJIAOZHUANYIZHUANGEN\020\007\022\032\n\026TSK_S"
    "C_XL_FENGDING_TWO\020\010\022\034\n\030TSK_SC_XL_FENGDIN"
    "G_THREE\020\t\022\033\n\027TSK_SC_XL_FENGDING_FOUR\020\n*n"
    "\n\023TGameSpecialBinZhou\022\021\n\rTSK_BINZ_NULL\020\000"
    "\022\024\n\020TSK_BINZ_DIANPAO\020\001\022\026\n\022TSK_BINZ_SANJI"
    "ACHU\020\002\022\026\n\022TSK_BINZ_BUDAIFENG\020\003*\323\001\n\023TGame"
    "SpecialNanJing\022\017\n\013TSK_NJ_NULL\020\000\022\020\n\014TSK_N"
    "J_HUAZA\020\001\022\026\n\022TSK_NJ_JIEZHUANGBI\020\002\022\021\n\rTSK"
    "_NJ_FAKUAN\020\003\022\022\n\016TSK_NJ_95SCORE\020\004\022\023\n\017TSK_"
    "NJ_100SCORE\020\005\022\025\n\021TSK_NJ_50FENGDING\020\006\022\026\n\022"
    "TSK_NJ_100FENGDING\020\007\022\026\n\022TSK_NJ_300FENGDI"
    "NG\020\010*l\n\rTGameRoomType\022\025\n\021TGameRoom_INVAL"
    "ID\020\000\022\024\n\020TGameRoom_COMMON\020\001\022\024\n\020TGameRoom_"
    "FRIEND\020\002\022\030\n\024TGameRoom_QUALIFYING\020\003*b\n\tTI"
    "temType\022\025\n\021TINTERACTIVE_ITEM\020\001\022\021\n\rTTICKE"
    "TS_ITEM\020\002\022\027\n\023TPICTURE_FRAME_ITEM\020\003\022\022\n\016TC"
    "URRENCY_ITEM\020\004*[\n\rTCurrencyType\022\013\n\007TCT_R"
    "MB\020\001\022\014\n\010TCT_BEAN\020\002\022\016\n\nTCT_REWARD\020\003\022\017\n\013TC"
    "T_DIAMOND\020\004\022\016\n\nTCT_COUPON\020\005*\'\n\016TClientEf"
    "fects\022\025\n\021TE_SHANDIANCHUPAI\020\001*B\n\022MAIL_CUR"
    "RENCY_TYPE\022\017\n\013MCT_INVALID\020\000\022\016\n\nMCT_COUPO"
    "N\020\001\022\013\n\007MCT_MAX\020\002*\373\001\n\032TGameSpecialKindGan"
    "DengYan\022\020\n\014TSK_GDY_NULL\020\000\022\025\n\021TSK_GDY_LUN"
    "ZHUANG\020\001\022\025\n\021TSK_GDY_WINZHUANG\020\002\022\030\n\024TSK_G"
    "DY_HANDCARD_ONE\020\003\022\030\n\024TSK_GDY_HANDCARD_TW"
    "O\020\004\022\020\n\014TSK_GDY_JDWF\020\005\022\020\n\014TSK_GDY_HPWF\020\006\022"
    "\025\n\021TSK_GDY_FENGDING8\020\007\022\026\n\022TSK_GDY_FENGDI"
    "NG16\020\010\022\026\n\022TSK_GDY_FENGDING32\020\t*v\n\022TGameS"
    "pecialDeZhou\022\017\n\013TSK_DZ_NULL\020\000\022\017\n\013TSK_DZ_"
    "KAHU\020\001\022\021\n\rTSK_DZ_HAOHUA\020\002\022\025\n\021TSK_DZ_CHAO"
    "HAOHUA\020\003\022\024\n\020TSK_DZ_WUXIANZHI\020\004*\216\001\n\022TGame"
    "SpecialRenQiu\022\017\n\013TSK_RQ_NULL\020\000\022\021\n\rTSK_RQ"
    "_HAOHUA\020\001\022\025\n\021TSK_RQ_CHAOHAOHUA\020\002\022\024\n\020TSK_"
    "RQ_WUXIANZHI\020\003\022\024\n\020TSK_RQ_LIANGMENG\020\004\022\021\n\r"
    "TSK_RQ_SIMENG\020\005*\316\001\n\026TGameSpecialKindQing"
    "Er\022\017\n\013TSK_QE_NULL\020\000\022\024\n\020TSK_QE_XIAXIAN60\020"
    "\001\022\024\n\020TSK_QE_XIAXIAN80\020\002\022\026\n\022TSK_QE_FENGDI"
    "NG600\020\003\022\026\n\022TSK_QE_FENGDING800\020\004\022\033\n\027TSK_Q"
    "E_TAIYANG_GUANGGAO\020\005\022\025\n\021TSK_QE_CHAOZHUAN"
    "G\020\006\022\023\n\017TSK_QE_SHISANHU\020\007*P\n\030TGameSpecial"
    "KindCangZhou\022\017\n\013TSK_CZ_NULL\020\000\022\017\n\013TSK_CZ_"
    "FAHU\020\001\022\022\n\016TSK_CZ_DIANPAO\020\002*\263\006\n\024TQingErSh"
    "owDownEvent\022\024\n\020QE_EVENT_LIUJUHU\020\000\022\024\n\020QE_"
    "EVENT_DIANPAO\020\001\022\021\n\rQE_EVENT_ZIMO\020\002\022\030\n\024QE"
    "_EVENT_QIANGGANGHU\020\003\022\023\n\017QE_EVENT_PINGHU\020"
    "\004\022\034\n\030QE_EVENT_GANGSHANGKAIHUA\020\005\022\026\n\022QE_EV"
    "ENT_BIANZHANG\020\006\022\026\n\022QE_EVENT_QIANZHANG\020\007\022"
    "\026\n\022QE_EVENT_DIAOZHANG\020\010\022\025\n\021QE_EVENT_WENQ"
    "IAN1\020\t\022\025\n\021QE_EVENT_WENQIAN2\020\n\022\025\n\021QE_EVEN"
    "T_WENQIAN3\020\013\022\025\n\021QE_EVENT_WENQIAN4\020\014\022\023\n\017Q"
    "E_EVENT_QINGER\020\r\022\023\n\017QE_EVENT_PIAOHU\020\016\022\024\n"
    "\020QE_EVENT_SANHONG\020\017\022\025\n\021QE_EVENT_QIONGHEN"
    "\020\020\022\032\n\026QE_EVENT_QIONGQIONGHEN\020\021\022\025\n\021QE_EVE"
    "NT_SHISANHU\020\022\022\025\n\021QE_EVENT_MINGGANG\020\023\022\023\n\017"
    "QE_EVENT_ANGANG\020\024\022\022\n\016QE_EVENT_QIFEI\020\025\022\024\n"
    "\020QE_EVENT_PENGPAI\020\026\022\021\n\rQE_EVENT_ANKE\020\027\022\023"
    "\n\017QE_EVENT_DAWANG\020\030\022\025\n\021QE_EVENT_XIAOWANG"
    "\020\031\022\025\n\021QE_EVENT_QIERWANG\020\032\022\024\n\020QE_EVENT_TA"
    "IYANG\020\033\022\027\n\023QE_EVENT_CHAOZHUANG\020\034\022\025\n\021QE_E"
    "VENT_MEIHUA_J\020\035\022\025\n\021QE_EVENT_MEIHUA_Q\020\036\022\025"
    "\n\021QE_EVENT_MEIHUA_K\020\037\022\027\n\023QE_EVENT_MEIHUA"
    "_JQK\020 \022\022\n\016QE_EVENT_BUHUA\020!\022\024\n\020QE_EVENT_G"
    "ANGPAI\020\"*R\n\017TQualifyingType\022\023\n\017QUALIFYIN"
    "G_NONE\020\000\022\023\n\017QUALIFYING_STAR\020\001\022\025\n\021QUALIFY"
    "ING_MASTER\020\002*\207\001\n\013TMatchLevel\022\026\n\022QUALIFYI"
    "NG_LV_NONE\020\000\022\027\n\023QUALIFYING_LV_PRIMA\020\001\022\025\n"
    "\021QUALIFYING_LV_BLV\020\002\022\025\n\021QUALIFYING_LV_AL"
    "V\020\003\022\031\n\025QUALIFYING_LV_COUNTRY\020\004", 32830);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "define_pro.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_define_5fpro_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_define_5fpro_2eproto {
  StaticDescriptorInitializer_define_5fpro_2eproto() {
    protobuf_AddDesc_define_5fpro_2eproto();
  }
} static_descriptor_initializer_define_5fpro_2eproto_;
const ::google::protobuf::EnumDescriptor* TEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEvent_descriptor_;
}
bool TEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConditionType_descriptor_;
}
bool TConditionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BlackJackEndingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackJackEndingState_descriptor_;
}
bool BlackJackEndingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TSyncDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSyncDataType_descriptor_;
}
bool TSyncDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TErrorType_descriptor_;
}
bool TErrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 500:
    case 501:
    case 502:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPlayerFlagBit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlayerFlagBit_descriptor_;
}
bool TPlayerFlagBit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TKPIType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKPIType_descriptor_;
}
bool TKPIType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameType_descriptor_;
}
bool TGameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChannel_descriptor_;
}
bool TChannel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMailType_descriptor_;
}
bool TMailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TTissueState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTissueState_descriptor_;
}
bool TTissueState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TViewState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TViewState_descriptor_;
}
bool TViewState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRobotLuaEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobotLuaEvent_descriptor_;
}
bool TRobotLuaEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TAchievementState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAchievementState_descriptor_;
}
bool TAchievementState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TAchievementConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAchievementConditionType_descriptor_;
}
bool TAchievementConditionType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumBonusGameEndType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumBonusGameEndType_descriptor_;
}
bool EnumBonusGameEndType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumSlotsWinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumSlotsWinType_descriptor_;
}
bool EnumSlotsWinType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumRoomState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumRoomState_descriptor_;
}
bool EnumRoomState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMoneyFlow_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMoneyFlow_descriptor_;
}
bool TMoneyFlow_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRMBFlow_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRMBFlow_descriptor_;
}
bool TRMBFlow_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 256:
    case 257:
    case 258:
    case 259:
    case 291:
    case 292:
    case 293:
    case 294:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TSex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSex_descriptor_;
}
bool TSex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMissionState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMissionState_descriptor_;
}
bool TMissionState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMahJongShowDownEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMahJongShowDownEvent_descriptor_;
}
bool TMahJongShowDownEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumItemUseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumItemUseType_descriptor_;
}
bool EnumItemUseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TCostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCostType_descriptor_;
}
bool TCostType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TShopLabelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TShopLabelType_descriptor_;
}
bool TShopLabelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TSystemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSystemType_descriptor_;
}
bool TSystemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TDotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDotType_descriptor_;
}
bool TDotType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 50:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 400:
    case 401:
    case 402:
    case 410:
    case 600:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameConsumePay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameConsumePay_descriptor_;
}
bool TGameConsumePay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameRoomKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameRoomKind_descriptor_;
}
bool TGameRoomKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKind_descriptor_;
}
bool TGameSpecialKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameRunFastSpecialKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameRunFastSpecialKind_descriptor_;
}
bool TGameRunFastSpecialKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPaymentMechanism_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPaymentMechanism_descriptor_;
}
bool TPaymentMechanism_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindShenYang_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindShenYang_descriptor_;
}
bool TGameSpecialKindShenYang_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindPingHu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindPingHu_descriptor_;
}
bool TGameSpecialKindPingHu_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindJiaXing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindJiaXing_descriptor_;
}
bool TGameSpecialKindJiaXing_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindJiaShan_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindJiaShan_descriptor_;
}
bool TGameSpecialKindJiaShan_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindBaZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindBaZhou_descriptor_;
}
bool TGameSpecialKindBaZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindWenAn_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindWenAn_descriptor_;
}
bool TGameSpecialKindWenAn_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindLangFangTwo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindLangFangTwo_descriptor_;
}
bool TGameSpecialKindLangFangTwo_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindShengFang_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindShengFang_descriptor_;
}
bool TGameSpecialKindShengFang_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindHanDan_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindHanDan_descriptor_;
}
bool TGameSpecialKindHanDan_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindRuShan_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindRuShan_descriptor_;
}
bool TGameSpecialKindRuShan_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindRongCheng_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindRongCheng_descriptor_;
}
bool TGameSpecialKindRongCheng_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindTaiAn_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindTaiAn_descriptor_;
}
bool TGameSpecialKindTaiAn_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindNanFeng_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindNanFeng_descriptor_;
}
bool TGameSpecialKindNanFeng_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindHangZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindHangZhou_descriptor_;
}
bool TGameSpecialKindHangZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TCardsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCardsType_descriptor_;
}
bool TCardsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindQuZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindQuZhou_descriptor_;
}
bool TGameSpecialKindQuZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindYunCheng_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindYunCheng_descriptor_;
}
bool TGameSpecialKindYunCheng_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindShanDong_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindShanDong_descriptor_;
}
bool TGameSpecialKindShanDong_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindYanTai_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindYanTai_descriptor_;
}
bool TGameSpecialKindYanTai_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindWuXi_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindWuXi_descriptor_;
}
bool TGameSpecialKindWuXi_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMahJonGCmdRecord_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMahJonGCmdRecord_descriptor_;
}
bool TMahJonGCmdRecord_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindQinHuangDao_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindQinHuangDao_descriptor_;
}
bool TGameSpecialKindQinHuangDao_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindGuangDongTuiDaoHu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindGuangDongTuiDaoHu_descriptor_;
}
bool TGameSpecialKindGuangDongTuiDaoHu_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindBaoDing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindBaoDing_descriptor_;
}
bool TGameSpecialKindBaoDing_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindDouDiZhu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindDouDiZhu_descriptor_;
}
bool TGameSpecialKindDouDiZhu_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindPSZ_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindPSZ_descriptor_;
}
bool TGameSpecialKindPSZ_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindTangShan_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindTangShan_descriptor_;
}
bool TGameSpecialKindTangShan_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindDingXing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindDingXing_descriptor_;
}
bool TGameSpecialKindDingXing_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindLangFang_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindLangFang_descriptor_;
}
bool TGameSpecialKindLangFang_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindAnXin_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindAnXin_descriptor_;
}
bool TGameSpecialKindAnXin_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindQiaoDong_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindQiaoDong_descriptor_;
}
bool TGameSpecialKindQiaoDong_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialTangShanAnXiao_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialTangShanAnXiao_descriptor_;
}
bool TGameSpecialTangShanAnXiao_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialManCheng_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialManCheng_descriptor_;
}
bool TGameSpecialManCheng_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialGaoYang_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialGaoYang_descriptor_;
}
bool TGameSpecialGaoYang_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialJingZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialJingZhou_descriptor_;
}
bool TGameSpecialJingZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialDaCheng_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialDaCheng_descriptor_;
}
bool TGameSpecialDaCheng_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindDongTai_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindDongTai_descriptor_;
}
bool TGameSpecialKindDongTai_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKingPingXiang_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKingPingXiang_descriptor_;
}
bool TGameSpecialKingPingXiang_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialChess_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialChess_descriptor_;
}
bool TGameSpecialChess_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameGuanDanSpecial_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameGuanDanSpecial_descriptor_;
}
bool TGameGuanDanSpecial_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlayerState_descriptor_;
}
bool TPlayerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindQingHe_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindQingHe_descriptor_;
}
bool TGameSpecialKindQingHe_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindWuQiang_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindWuQiang_descriptor_;
}
bool TGameSpecialKindWuQiang_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindSiChuanZiYou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindSiChuanZiYou_descriptor_;
}
bool TGameSpecialKindSiChuanZiYou_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindDouShiSi_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindDouShiSi_descriptor_;
}
bool TGameSpecialKindDouShiSi_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindPengHu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindPengHu_descriptor_;
}
bool TGameSpecialKindPengHu_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindYiXian_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindYiXian_descriptor_;
}
bool TGameSpecialKindYiXian_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindDeZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindDeZhou_descriptor_;
}
bool TGameSpecialKindDeZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindDongYing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindDongYing_descriptor_;
}
bool TGameSpecialKindDongYing_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialTaocheng_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialTaocheng_descriptor_;
}
bool TGameSpecialTaocheng_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindNiuNiu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindNiuNiu_descriptor_;
}
bool TGameSpecialKindNiuNiu_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialSiChuanXueLiu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialSiChuanXueLiu_descriptor_;
}
bool TGameSpecialSiChuanXueLiu_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialBinZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialBinZhou_descriptor_;
}
bool TGameSpecialBinZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialNanJing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialNanJing_descriptor_;
}
bool TGameSpecialNanJing_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameRoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameRoomType_descriptor_;
}
bool TGameRoomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TItemType_descriptor_;
}
bool TItemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TCurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCurrencyType_descriptor_;
}
bool TCurrencyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TClientEffects_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TClientEffects_descriptor_;
}
bool TClientEffects_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAIL_CURRENCY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAIL_CURRENCY_TYPE_descriptor_;
}
bool MAIL_CURRENCY_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindGanDengYan_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindGanDengYan_descriptor_;
}
bool TGameSpecialKindGanDengYan_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialDeZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialDeZhou_descriptor_;
}
bool TGameSpecialDeZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialRenQiu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialRenQiu_descriptor_;
}
bool TGameSpecialRenQiu_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindQingEr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindQingEr_descriptor_;
}
bool TGameSpecialKindQingEr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TGameSpecialKindCangZhou_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGameSpecialKindCangZhou_descriptor_;
}
bool TGameSpecialKindCangZhou_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TQingErShowDownEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TQingErShowDownEvent_descriptor_;
}
bool TQingErShowDownEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TQualifyingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TQualifyingType_descriptor_;
}
bool TQualifyingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TMatchLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchLevel_descriptor_;
}
bool TMatchLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
