// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: define_sys.proto

#ifndef PROTOBUF_define_5fsys_2eproto__INCLUDED
#define PROTOBUF_define_5fsys_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_define_5fsys_2eproto();
void protobuf_AssignDesc_define_5fsys_2eproto();
void protobuf_ShutdownFile_define_5fsys_2eproto();

class MsgDataHead;
class MsgSession;
class MsgPart;

enum TUdpControlFlag {
  PROTO_CMD = 1,
  PROTO_NEED_ACK = 128
};
bool TUdpControlFlag_IsValid(int value);
const TUdpControlFlag TUdpControlFlag_MIN = PROTO_CMD;
const TUdpControlFlag TUdpControlFlag_MAX = PROTO_NEED_ACK;
const int TUdpControlFlag_ARRAYSIZE = TUdpControlFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* TUdpControlFlag_descriptor();
inline const ::std::string& TUdpControlFlag_Name(TUdpControlFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    TUdpControlFlag_descriptor(), value);
}
inline bool TUdpControlFlag_Parse(
    const ::std::string& name, TUdpControlFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TUdpControlFlag>(
    TUdpControlFlag_descriptor(), name, value);
}
enum TUdpControlCmd {
  PROTO_CMD_ACK = 1,
  PROTO_CMD_HEARTBEAT = 2
};
bool TUdpControlCmd_IsValid(int value);
const TUdpControlCmd TUdpControlCmd_MIN = PROTO_CMD_ACK;
const TUdpControlCmd TUdpControlCmd_MAX = PROTO_CMD_HEARTBEAT;
const int TUdpControlCmd_ARRAYSIZE = TUdpControlCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* TUdpControlCmd_descriptor();
inline const ::std::string& TUdpControlCmd_Name(TUdpControlCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    TUdpControlCmd_descriptor(), value);
}
inline bool TUdpControlCmd_Parse(
    const ::std::string& name, TUdpControlCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TUdpControlCmd>(
    TUdpControlCmd_descriptor(), name, value);
}
// ===================================================================

class MsgDataHead : public ::google::protobuf::Message {
 public:
  MsgDataHead();
  virtual ~MsgDataHead();

  MsgDataHead(const MsgDataHead& from);

  inline MsgDataHead& operator=(const MsgDataHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDataHead& default_instance();

  void Swap(MsgDataHead* other);

  // implements Message ----------------------------------------------

  MsgDataHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDataHead& from);
  void MergeFrom(const MsgDataHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 control_flag = 1;
  inline bool has_control_flag() const;
  inline void clear_control_flag();
  static const int kControlFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 control_flag() const;
  inline void set_control_flag(::google::protobuf::uint32 value);

  // optional uint32 control_cmd = 2;
  inline bool has_control_cmd() const;
  inline void clear_control_cmd();
  static const int kControlCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 control_cmd() const;
  inline void set_control_cmd(::google::protobuf::uint32 value);

  // optional uint32 ack_idx = 3;
  inline bool has_ack_idx() const;
  inline void clear_ack_idx();
  static const int kAckIdxFieldNumber = 3;
  inline ::google::protobuf::uint32 ack_idx() const;
  inline void set_ack_idx(::google::protobuf::uint32 value);

  // optional uint32 msg_idx = 4;
  inline bool has_msg_idx() const;
  inline void clear_msg_idx();
  static const int kMsgIdxFieldNumber = 4;
  inline ::google::protobuf::uint32 msg_idx() const;
  inline void set_msg_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgDataHead)
 private:
  inline void set_has_control_flag();
  inline void clear_has_control_flag();
  inline void set_has_control_cmd();
  inline void clear_has_control_cmd();
  inline void set_has_ack_idx();
  inline void clear_has_ack_idx();
  inline void set_has_msg_idx();
  inline void clear_has_msg_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 control_flag_;
  ::google::protobuf::uint32 control_cmd_;
  ::google::protobuf::uint32 ack_idx_;
  ::google::protobuf::uint32 msg_idx_;
  friend void  protobuf_AddDesc_define_5fsys_2eproto();
  friend void protobuf_AssignDesc_define_5fsys_2eproto();
  friend void protobuf_ShutdownFile_define_5fsys_2eproto();

  void InitAsDefaultInstance();
  static MsgDataHead* default_instance_;
};
// -------------------------------------------------------------------

class MsgSession : public ::google::protobuf::Message {
 public:
  MsgSession();
  virtual ~MsgSession();

  MsgSession(const MsgSession& from);

  inline MsgSession& operator=(const MsgSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSession& default_instance();

  void Swap(MsgSession* other);

  // implements Message ----------------------------------------------

  MsgSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSession& from);
  void MergeFrom(const MsgSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  inline void set_allocated_session(::std::string* session);

  // optional fixed32 check = 2;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 2;
  inline ::google::protobuf::uint32 check() const;
  inline void set_check(::google::protobuf::uint32 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgSession)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_check();
  inline void clear_has_check();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* session_;
  ::google::protobuf::uint32 check_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_define_5fsys_2eproto();
  friend void protobuf_AssignDesc_define_5fsys_2eproto();
  friend void protobuf_ShutdownFile_define_5fsys_2eproto();

  void InitAsDefaultInstance();
  static MsgSession* default_instance_;
};
// -------------------------------------------------------------------

class MsgPart : public ::google::protobuf::Message {
 public:
  MsgPart();
  virtual ~MsgPart();

  MsgPart(const MsgPart& from);

  inline MsgPart& operator=(const MsgPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPart& default_instance();

  void Swap(MsgPart* other);

  // implements Message ----------------------------------------------

  MsgPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPart& from);
  void MergeFrom(const MsgPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msg_idx = 1;
  inline bool has_msg_idx() const;
  inline void clear_msg_idx();
  static const int kMsgIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 msg_idx() const;
  inline void set_msg_idx(::google::protobuf::uint32 value);

  // optional uint32 part_idx = 2;
  inline bool has_part_idx() const;
  inline void clear_part_idx();
  static const int kPartIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 part_idx() const;
  inline void set_part_idx(::google::protobuf::uint32 value);

  // optional uint32 part_max = 3;
  inline bool has_part_max() const;
  inline void clear_part_max();
  static const int kPartMaxFieldNumber = 3;
  inline ::google::protobuf::uint32 part_max() const;
  inline void set_part_max(::google::protobuf::uint32 value);

  // optional string msg_name = 4;
  inline bool has_msg_name() const;
  inline void clear_msg_name();
  static const int kMsgNameFieldNumber = 4;
  inline const ::std::string& msg_name() const;
  inline void set_msg_name(const ::std::string& value);
  inline void set_msg_name(const char* value);
  inline void set_msg_name(const char* value, size_t size);
  inline ::std::string* mutable_msg_name();
  inline ::std::string* release_msg_name();
  inline void set_allocated_msg_name(::std::string* msg_name);

  // optional bytes msg_body = 5;
  inline bool has_msg_body() const;
  inline void clear_msg_body();
  static const int kMsgBodyFieldNumber = 5;
  inline const ::std::string& msg_body() const;
  inline void set_msg_body(const ::std::string& value);
  inline void set_msg_body(const char* value);
  inline void set_msg_body(const void* value, size_t size);
  inline ::std::string* mutable_msg_body();
  inline ::std::string* release_msg_body();
  inline void set_allocated_msg_body(::std::string* msg_body);

  // @@protoc_insertion_point(class_scope:MsgPart)
 private:
  inline void set_has_msg_idx();
  inline void clear_has_msg_idx();
  inline void set_has_part_idx();
  inline void clear_has_part_idx();
  inline void set_has_part_max();
  inline void clear_has_part_max();
  inline void set_has_msg_name();
  inline void clear_has_msg_name();
  inline void set_has_msg_body();
  inline void clear_has_msg_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 msg_idx_;
  ::google::protobuf::uint32 part_idx_;
  ::std::string* msg_name_;
  ::std::string* msg_body_;
  ::google::protobuf::uint32 part_max_;
  friend void  protobuf_AddDesc_define_5fsys_2eproto();
  friend void protobuf_AssignDesc_define_5fsys_2eproto();
  friend void protobuf_ShutdownFile_define_5fsys_2eproto();

  void InitAsDefaultInstance();
  static MsgPart* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgDataHead

// optional uint32 control_flag = 1;
inline bool MsgDataHead::has_control_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDataHead::set_has_control_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDataHead::clear_has_control_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDataHead::clear_control_flag() {
  control_flag_ = 0u;
  clear_has_control_flag();
}
inline ::google::protobuf::uint32 MsgDataHead::control_flag() const {
  // @@protoc_insertion_point(field_get:MsgDataHead.control_flag)
  return control_flag_;
}
inline void MsgDataHead::set_control_flag(::google::protobuf::uint32 value) {
  set_has_control_flag();
  control_flag_ = value;
  // @@protoc_insertion_point(field_set:MsgDataHead.control_flag)
}

// optional uint32 control_cmd = 2;
inline bool MsgDataHead::has_control_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDataHead::set_has_control_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDataHead::clear_has_control_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDataHead::clear_control_cmd() {
  control_cmd_ = 0u;
  clear_has_control_cmd();
}
inline ::google::protobuf::uint32 MsgDataHead::control_cmd() const {
  // @@protoc_insertion_point(field_get:MsgDataHead.control_cmd)
  return control_cmd_;
}
inline void MsgDataHead::set_control_cmd(::google::protobuf::uint32 value) {
  set_has_control_cmd();
  control_cmd_ = value;
  // @@protoc_insertion_point(field_set:MsgDataHead.control_cmd)
}

// optional uint32 ack_idx = 3;
inline bool MsgDataHead::has_ack_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDataHead::set_has_ack_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDataHead::clear_has_ack_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDataHead::clear_ack_idx() {
  ack_idx_ = 0u;
  clear_has_ack_idx();
}
inline ::google::protobuf::uint32 MsgDataHead::ack_idx() const {
  // @@protoc_insertion_point(field_get:MsgDataHead.ack_idx)
  return ack_idx_;
}
inline void MsgDataHead::set_ack_idx(::google::protobuf::uint32 value) {
  set_has_ack_idx();
  ack_idx_ = value;
  // @@protoc_insertion_point(field_set:MsgDataHead.ack_idx)
}

// optional uint32 msg_idx = 4;
inline bool MsgDataHead::has_msg_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDataHead::set_has_msg_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDataHead::clear_has_msg_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDataHead::clear_msg_idx() {
  msg_idx_ = 0u;
  clear_has_msg_idx();
}
inline ::google::protobuf::uint32 MsgDataHead::msg_idx() const {
  // @@protoc_insertion_point(field_get:MsgDataHead.msg_idx)
  return msg_idx_;
}
inline void MsgDataHead::set_msg_idx(::google::protobuf::uint32 value) {
  set_has_msg_idx();
  msg_idx_ = value;
  // @@protoc_insertion_point(field_set:MsgDataHead.msg_idx)
}

// -------------------------------------------------------------------

// MsgSession

// optional string session = 1;
inline bool MsgSession::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSession::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSession::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSession::clear_session() {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& MsgSession::session() const {
  // @@protoc_insertion_point(field_get:MsgSession.session)
  return *session_;
}
inline void MsgSession::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set:MsgSession.session)
}
inline void MsgSession::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgSession.session)
}
inline void MsgSession::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgSession.session)
}
inline ::std::string* MsgSession::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgSession.session)
  return session_;
}
inline ::std::string* MsgSession::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgSession::set_allocated_session(::std::string* session) {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (session) {
    set_has_session();
    session_ = session;
  } else {
    clear_has_session();
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgSession.session)
}

// optional fixed32 check = 2;
inline bool MsgSession::has_check() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSession::set_has_check() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSession::clear_has_check() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSession::clear_check() {
  check_ = 0u;
  clear_has_check();
}
inline ::google::protobuf::uint32 MsgSession::check() const {
  // @@protoc_insertion_point(field_get:MsgSession.check)
  return check_;
}
inline void MsgSession::set_check(::google::protobuf::uint32 value) {
  set_has_check();
  check_ = value;
  // @@protoc_insertion_point(field_set:MsgSession.check)
}

// optional uint32 index = 3;
inline bool MsgSession::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSession::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSession::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSession::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 MsgSession::index() const {
  // @@protoc_insertion_point(field_get:MsgSession.index)
  return index_;
}
inline void MsgSession::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:MsgSession.index)
}

// -------------------------------------------------------------------

// MsgPart

// optional uint32 msg_idx = 1;
inline bool MsgPart::has_msg_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPart::set_has_msg_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPart::clear_has_msg_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPart::clear_msg_idx() {
  msg_idx_ = 0u;
  clear_has_msg_idx();
}
inline ::google::protobuf::uint32 MsgPart::msg_idx() const {
  // @@protoc_insertion_point(field_get:MsgPart.msg_idx)
  return msg_idx_;
}
inline void MsgPart::set_msg_idx(::google::protobuf::uint32 value) {
  set_has_msg_idx();
  msg_idx_ = value;
  // @@protoc_insertion_point(field_set:MsgPart.msg_idx)
}

// optional uint32 part_idx = 2;
inline bool MsgPart::has_part_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPart::set_has_part_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPart::clear_has_part_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPart::clear_part_idx() {
  part_idx_ = 0u;
  clear_has_part_idx();
}
inline ::google::protobuf::uint32 MsgPart::part_idx() const {
  // @@protoc_insertion_point(field_get:MsgPart.part_idx)
  return part_idx_;
}
inline void MsgPart::set_part_idx(::google::protobuf::uint32 value) {
  set_has_part_idx();
  part_idx_ = value;
  // @@protoc_insertion_point(field_set:MsgPart.part_idx)
}

// optional uint32 part_max = 3;
inline bool MsgPart::has_part_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPart::set_has_part_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPart::clear_has_part_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPart::clear_part_max() {
  part_max_ = 0u;
  clear_has_part_max();
}
inline ::google::protobuf::uint32 MsgPart::part_max() const {
  // @@protoc_insertion_point(field_get:MsgPart.part_max)
  return part_max_;
}
inline void MsgPart::set_part_max(::google::protobuf::uint32 value) {
  set_has_part_max();
  part_max_ = value;
  // @@protoc_insertion_point(field_set:MsgPart.part_max)
}

// optional string msg_name = 4;
inline bool MsgPart::has_msg_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPart::set_has_msg_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPart::clear_has_msg_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPart::clear_msg_name() {
  if (msg_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_name_->clear();
  }
  clear_has_msg_name();
}
inline const ::std::string& MsgPart::msg_name() const {
  // @@protoc_insertion_point(field_get:MsgPart.msg_name)
  return *msg_name_;
}
inline void MsgPart::set_msg_name(const ::std::string& value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPart.msg_name)
}
inline void MsgPart::set_msg_name(const char* value) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPart.msg_name)
}
inline void MsgPart::set_msg_name(const char* value, size_t size) {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_name_ = new ::std::string;
  }
  msg_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPart.msg_name)
}
inline ::std::string* MsgPart::mutable_msg_name() {
  set_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPart.msg_name)
  return msg_name_;
}
inline ::std::string* MsgPart::release_msg_name() {
  clear_has_msg_name();
  if (msg_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_name_;
    msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgPart::set_allocated_msg_name(::std::string* msg_name) {
  if (msg_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_name_;
  }
  if (msg_name) {
    set_has_msg_name();
    msg_name_ = msg_name;
  } else {
    clear_has_msg_name();
    msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPart.msg_name)
}

// optional bytes msg_body = 5;
inline bool MsgPart::has_msg_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgPart::set_has_msg_body() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgPart::clear_has_msg_body() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgPart::clear_msg_body() {
  if (msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_body_->clear();
  }
  clear_has_msg_body();
}
inline const ::std::string& MsgPart::msg_body() const {
  // @@protoc_insertion_point(field_get:MsgPart.msg_body)
  return *msg_body_;
}
inline void MsgPart::set_msg_body(const ::std::string& value) {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_body_ = new ::std::string;
  }
  msg_body_->assign(value);
  // @@protoc_insertion_point(field_set:MsgPart.msg_body)
}
inline void MsgPart::set_msg_body(const char* value) {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_body_ = new ::std::string;
  }
  msg_body_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgPart.msg_body)
}
inline void MsgPart::set_msg_body(const void* value, size_t size) {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_body_ = new ::std::string;
  }
  msg_body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgPart.msg_body)
}
inline ::std::string* MsgPart::mutable_msg_body() {
  set_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgPart.msg_body)
  return msg_body_;
}
inline ::std::string* MsgPart::release_msg_body() {
  clear_has_msg_body();
  if (msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_body_;
    msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgPart::set_allocated_msg_body(::std::string* msg_body) {
  if (msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_body_;
  }
  if (msg_body) {
    set_has_msg_body();
    msg_body_ = msg_body;
  } else {
    clear_has_msg_body();
    msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgPart.msg_body)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TUdpControlFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TUdpControlFlag>() {
  return ::TUdpControlFlag_descriptor();
}
template <> struct is_proto_enum< ::TUdpControlCmd> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TUdpControlCmd>() {
  return ::TUdpControlCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_define_5fsys_2eproto__INCLUDED
